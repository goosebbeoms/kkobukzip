{
	"id": "ee58d7bf79c8d72b6ee6f05623d8ad12",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.18",
	"solcLongVersion": "0.8.18+commit.87f61d96",
	"input": {
		"language": "Solidity",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"viaIR": true,
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		},
		"sources": {
			"contracts/TurtleToken.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract TurtleToken is ERC20, ERC20Permit, Ownable {\r\n    // - 1 ETH당 TURT 토큰 수 (18자리 소수점)\r\n    uint256 public exchangeRate;\r\n\r\n    // - 이벤트 정의\r\n    // - 토큰 구매 시 발생\r\n    event TokensPurchased(address indexed buyer, uint256 ethAmount, uint256 tokenAmount);\r\n    // - 토큰 판매 시 발생\r\n    event TokensSold(address indexed seller, uint256 tokenAmount, uint256 ethAmount);\r\n\r\n    // - 생성자: 컨트랙트 배포 시 초기 설정\r\n    // - 매개변수:\r\n    //   - initialSupply: 초기 토큰 공급량\r\n    //   - _exchangeRate: 초기 환율 설정\r\n    constructor(uint256 initialSupply, uint256 _exchangeRate) ERC20(\"TurtleToken\", \"TURT\") ERC20Permit(\"TurtleToken\") Ownable() {\r\n        _mint(address(this), initialSupply);\r\n        exchangeRate = _exchangeRate;\r\n    }\r\n\r\n    // - ETH를 TURT로 환전하는 함수\r\n    // - payable: ETH를 받을 수 있음\r\n    // - nonReentrant: 재진입 공격 방지\r\n    function buyTokens() public payable {\r\n        require(msg.value > 0, \"Must send ETH to exchange\");\r\n        // - 환전할 토큰 양 계산 (18자리 소수점 고려)\r\n        uint256 tokenAmount = (msg.value * exchangeRate) / 1e18;\r\n        require(balanceOf(address(this)) >= tokenAmount, \"Insufficient token balance in contract\");\r\n\r\n        // - 토큰 전송\r\n        _transfer(address(this), msg.sender, tokenAmount);\r\n        // - 이벤트 발생\r\n        emit TokensPurchased(msg.sender, msg.value, tokenAmount);\r\n    }\r\n\r\n    // - TURT를 ETH로 환전하는 함수\r\n    // - 매개변수:\r\n    //   - tokenAmount: 판매할 토큰 양\r\n    function sellTokens(uint256 tokenAmount) public {\r\n        require(tokenAmount > 0, \"Must sell a positive amount of tokens\");\r\n        require(balanceOf(msg.sender) >= tokenAmount, \"Insufficient token balance\");\r\n\r\n        // - 환전할 ETH 양 계산 (18자리 소수점 고려)\r\n        uint256 ethAmount = (tokenAmount * 1e18) / exchangeRate;\r\n        require(address(this).balance >= ethAmount, \"Insufficient ETH balance in contract\");\r\n\r\n        // - 토큰 전송\r\n        _transfer(msg.sender, address(this), tokenAmount);\r\n        // - ETH 전송\r\n        payable(msg.sender).transfer(ethAmount);\r\n\r\n        // - 이벤트 발생\r\n        emit TokensSold(msg.sender, tokenAmount, ethAmount);\r\n    }\r\n\r\n    // - 관리자용 토큰 발행 함수\r\n    // - onlyOwner: 오직 컨트랙트 소유자만 호출 가능\r\n    function mint(address to, uint256 amount) public onlyOwner {\r\n        _mint(to, amount);\r\n    }\r\n\r\n    // - 환율 설정 함수 (관리자 전용)\r\n    // - 매개변수:\r\n    //   - newRate: 새로운 환율\r\n    function setExchangeRate(uint256 newRate) public onlyOwner {\r\n        exchangeRate = newRate;\r\n    }\r\n\r\n    // - 컨트랙트의 ETH 출금 (관리자 전용)\r\n    function withdrawEth() public onlyOwner {\r\n        uint256 balance = address(this).balance;\r\n        require(balance > 0, \"No ETH to withdraw\");\r\n        payable(owner()).transfer(balance);\r\n    }\r\n}\r\n"
			},
			"@openzeppelin/contracts/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/ERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Permit.sol\";\nimport \"../ERC20.sol\";\nimport \"../../../utils/cryptography/ECDSA.sol\";\nimport \"../../../utils/cryptography/EIP712.sol\";\nimport \"../../../utils/Counters.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n */\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\n    using Counters for Counters.Counter;\n\n    mapping(address => Counters.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private constant _PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    /**\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\n     * to reserve a slot.\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    constructor(string memory name) EIP712(name, \"1\") {}\n\n    /**\n     * @inheritdoc IERC20Permit\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @inheritdoc IERC20Permit\n     */\n    function nonces(address owner) public view virtual override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @inheritdoc IERC20Permit\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     * _Available since v4.1._\n     */\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\n        Counters.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
			},
			"@openzeppelin/contracts/utils/Counters.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/cryptography/EIP712.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.8;\n\nimport \"./ECDSA.sol\";\nimport \"../ShortStrings.sol\";\nimport \"../../interfaces/IERC5267.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n *\n * _Available since v3.4._\n *\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n */\nabstract contract EIP712 is IERC5267 {\n    using ShortStrings for *;\n\n    bytes32 private constant _TYPE_HASH =\n        keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _cachedDomainSeparator;\n    uint256 private immutable _cachedChainId;\n    address private immutable _cachedThis;\n\n    bytes32 private immutable _hashedName;\n    bytes32 private immutable _hashedVersion;\n\n    ShortString private immutable _name;\n    ShortString private immutable _version;\n    string private _nameFallback;\n    string private _versionFallback;\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        _name = name.toShortStringWithFallback(_nameFallback);\n        _version = version.toShortStringWithFallback(_versionFallback);\n        _hashedName = keccak256(bytes(name));\n        _hashedVersion = keccak256(bytes(version));\n\n        _cachedChainId = block.chainid;\n        _cachedDomainSeparator = _buildDomainSeparator();\n        _cachedThis = address(this);\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\n            return _cachedDomainSeparator;\n        } else {\n            return _buildDomainSeparator();\n        }\n    }\n\n    function _buildDomainSeparator() private view returns (bytes32) {\n        return keccak256(abi.encode(_TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev See {EIP-5267}.\n     *\n     * _Available since v4.9._\n     */\n    function eip712Domain()\n        public\n        view\n        virtual\n        override\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        )\n    {\n        return (\n            hex\"0f\", // 01111\n            _name.toStringWithFallback(_nameFallback),\n            _version.toStringWithFallback(_versionFallback),\n            block.chainid,\n            address(this),\n            bytes32(0),\n            new uint256[](0)\n        );\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\")\n            mstore(0x1c, hash)\n            message := keccak256(0x00, 0x3c)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, \"\\x19\\x01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            data := keccak256(ptr, 0x42)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\n     * `validator` and `data` according to the version 0 of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x00\", validator, data));\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/interfaces/IERC5267.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\n\npragma solidity ^0.8.0;\n\ninterface IERC5267 {\n    /**\n     * @dev MAY be emitted to signal that the domain could have changed.\n     */\n    event EIP712DomainChanged();\n\n    /**\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n     * signature.\n     */\n    function eip712Domain()\n        external\n        view\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        );\n}\n"
			},
			"@openzeppelin/contracts/utils/ShortStrings.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/ShortStrings.sol)\n\npragma solidity ^0.8.8;\n\nimport \"./StorageSlot.sol\";\n\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\n// | length  | 0x                                                              BB |\ntype ShortString is bytes32;\n\n/**\n * @dev This library provides functions to convert short memory strings\n * into a `ShortString` type that can be used as an immutable variable.\n *\n * Strings of arbitrary length can be optimized using this library if\n * they are short enough (up to 31 bytes) by packing them with their\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\n * fallback mechanism can be used for every other case.\n *\n * Usage example:\n *\n * ```solidity\n * contract Named {\n *     using ShortStrings for *;\n *\n *     ShortString private immutable _name;\n *     string private _nameFallback;\n *\n *     constructor(string memory contractName) {\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\n *     }\n *\n *     function name() external view returns (string memory) {\n *         return _name.toStringWithFallback(_nameFallback);\n *     }\n * }\n * ```\n */\nlibrary ShortStrings {\n    // Used as an identifier for strings longer than 31 bytes.\n    bytes32 private constant _FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\n\n    error StringTooLong(string str);\n    error InvalidShortString();\n\n    /**\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\n     *\n     * This will trigger a `StringTooLong` error is the input string is too long.\n     */\n    function toShortString(string memory str) internal pure returns (ShortString) {\n        bytes memory bstr = bytes(str);\n        if (bstr.length > 31) {\n            revert StringTooLong(str);\n        }\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\n    }\n\n    /**\n     * @dev Decode a `ShortString` back to a \"normal\" string.\n     */\n    function toString(ShortString sstr) internal pure returns (string memory) {\n        uint256 len = byteLength(sstr);\n        // using `new string(len)` would work locally but is not memory safe.\n        string memory str = new string(32);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(str, len)\n            mstore(add(str, 0x20), sstr)\n        }\n        return str;\n    }\n\n    /**\n     * @dev Return the length of a `ShortString`.\n     */\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\n        if (result > 31) {\n            revert InvalidShortString();\n        }\n        return result;\n    }\n\n    /**\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\n     */\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\n        if (bytes(value).length < 32) {\n            return toShortString(value);\n        } else {\n            StorageSlot.getStringSlot(store).value = value;\n            return ShortString.wrap(_FALLBACK_SENTINEL);\n        }\n    }\n\n    /**\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\n     */\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\n            return toString(value);\n        } else {\n            return store;\n        }\n    }\n\n    /**\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\n     *\n     * WARNING: This will return the \"byte length\" of the string. This may not reflect the actual length in terms of\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\n     */\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\n            return byteLength(value);\n        } else {\n            return bytes(store).length;\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/math/SignedMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/math/Math.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/StorageSlot.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fc980984badf3984b6303b377711220e067722bbd6a135b24669ff5069ef9f32\",\"dweb:/ipfs/QmPHXMSXj99XjSVM21YsY6aNtLLjLVXDbyN76J5HQYvvrz\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a367861093b74443b137564d3f3c472f70bcf114739e62059c939f25e315706c\",\"dweb:/ipfs/Qmd7JMpcxD9RuQjK3uM3EzJUgSqdN8vzp8eytEiuwxQJ6h\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 7,
								"contract": "@openzeppelin/contracts/access/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/interfaces/IERC5267.sol": {
				"IERC5267": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [],
							"name": "EIP712DomainChanged",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "eip712Domain",
							"outputs": [
								{
									"internalType": "bytes1",
									"name": "fields",
									"type": "bytes1"
								},
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "version",
									"type": "string"
								},
								{
									"internalType": "uint256",
									"name": "chainId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "verifyingContract",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "salt",
									"type": "bytes32"
								},
								{
									"internalType": "uint256[]",
									"name": "extensions",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"EIP712DomainChanged()": {
								"details": "MAY be emitted to signal that the domain could have changed."
							}
						},
						"kind": "dev",
						"methods": {
							"eip712Domain()": {
								"details": "returns the fields and values that describe the domain separator used by this contract for EIP-712 signature."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"eip712Domain()": "84b0196e"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"}},\"kind\":\"dev\",\"methods\":{\"eip712Domain()\":{\"details\":\"returns the fields and values that describe the domain separator used by this contract for EIP-712 signature.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/IERC5267.sol\":\"IERC5267\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"keccak256\":\"0xac6c2efc64baccbde4904ae18ed45139c9aa8cff96d6888344d1e4d2eb8b659f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e416a280c610b6b7a5f158e4a41aacfaec01ef14d5d1de13b46be9e090265fc\",\"dweb:/ipfs/QmYZP2KrdyccBbhLZT42auhvBTMkwiwUS3V6HWb42rbwbG\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"ERC20": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "name_",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "symbol_",
									"type": "string"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"constructor": {
								"details": "Sets the values for {name} and {symbol}. All two of these values are immutable: they can only be set once during construction."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n  mstore(0x40, 0x80)\n  jumpi(tag_11, callvalue)\n  bytecodeSize\n  dup1\n  codesize\n  sub\n  dup1\n  tag_5\n  dup2\n  tag_1\n  jump\t// in\ntag_5:\n  swap3\n  dup4\n  codecopy\n  dup2\n  add\n  swap1\n  0x40\n  dup2\n  dup4\n  sub\n  slt\n  tag_11\n  jumpi\n  dup1\n  mload\n  sub(shl(0x40, 0x01), 0x01)\n  swap1\n  dup2\n  dup2\n  gt\n  tag_11\n  jumpi\n  dup4\n  tag_10\n  swap2\n  dup5\n  add\n  tag_2\n  jump\t// in\ntag_10:\n  swap2\n  0x20\n  swap4\n  dup5\n  dup3\n  add\n  mload\n  dup4\n  dup2\n  gt\n  tag_11\n  jumpi\n  tag_13\n  swap3\n  add\n  tag_2\n  jump\t// in\ntag_13:\n  dup3\n  mload\n  dup3\n  dup2\n  gt\n  tag_27\n  jumpi\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2046:2059  _name = name_ */\n  0x03\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n  swap2\n  dup3\n  sload\n  swap2\n  0x01\n  swap6\n  dup7\n  dup5\n  dup2\n  shr\n  swap5\n  and\n  dup1\n  iszero\n  tag_16\n  jumpi\ntag_17:\n  dup9\n  dup6\n  lt\n  eq\n  tag_18\n  jumpi\n  dup2\n  swap1\n  0x1f\n  swap5\n  dup6\n  dup2\n  gt\n  tag_20\n  jumpi\ntag_21:\n  pop\n  dup9\n  swap1\n  dup6\n  dup4\n  gt\n  0x01\n  eq\n  tag_22\n  jumpi\n  0x00\n  swap3\n  tag_24\n  jumpi\ntag_25:\n  pop\n  pop\n  not(0x00)\n  dup3\n  dup7\n  shl\n  shr\n  not\n  and\n  swap1\n  dup7\n  shl\n  or\n  dup4\n  sstore\ntag_26:\n  dup1\n  mload\n  swap4\n  dup5\n  gt\n  tag_27\n  jumpi\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2069:2086  _symbol = symbol_ */\n  0x04\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n  swap6\n  dup7\n  sload\n  dup7\n  dup2\n  dup2\n  shr\n  swap2\n  and\n  dup1\n  iszero\n  tag_29\n  jumpi\ntag_30:\n  dup3\n  dup3\n  lt\n  eq\n  tag_31\n  jumpi\n  dup4\n  dup2\n  gt\n  tag_33\n  jumpi\ntag_34:\n  pop\n  dup1\n  swap3\n  dup6\n  gt\n  0x01\n  eq\n  tag_35\n  jumpi\n  pop\n  swap4\n  dup4\n  swap5\n  swap2\n  dup5\n  swap3\n  0x00\n  swap6\n  tag_37\n  jumpi\ntag_38:\n  pop\n  pop\n  shl\n  swap3\n  not(0x00)\n  swap2\n  shl\n  shr\n  not\n  and\n  or\n  swap1\n  sstore\ntag_39:\n  mload(0x40)\n  dataSize(sub_0)\n  swap1\n  dup2\n  dataOffset(sub_0)\n  dup3\n  codecopy\n  return\ntag_37:\n  add\n  mload\n  swap4\n  pop\n  codesize\n  dup1\n  jump(tag_38)\ntag_35:\n  swap3\n  swap2\n  swap1\n  dup5\n  not(0x1f)\n  dup2\n  and\n  dup9\n  0x00\n  mstore\n  dup6\n  0x00\n  keccak256\n  swap6\n  0x00\n  swap1\ntag_40:\n  dup10\n  dup4\n  dup4\n  lt\n  tag_41\n  jumpi\n  pop\n  pop\n  pop\n  lt\n  tag_43\n  jumpi\ntag_44:\n  pop\n  pop\n  pop\n  pop\n  dup2\n  shl\n  add\n  swap1\n  sstore\n  jump(tag_39)\ntag_43:\n  add\n  mload\n  swap1\n  0xf8\n  dup5\n  not(0x00)\n  swap3\n  shl\n  and\n  shr\n  not\n  and\n  swap1\n  sstore\n  codesize\n  dup1\n  dup1\n  dup1\n  jump(tag_44)\ntag_41:\n  dup6\n  dup8\n  add\n  mload\n  dup10\n  sstore\n  swap1\n  swap8\n  add\n  swap7\n  swap5\n  dup6\n  add\n  swap5\n  dup9\n  swap4\n  pop\n  swap1\n  dup2\n  add\n  swap1\n  jump(tag_40)\ntag_33:\n  dup8\n  0x00\n  mstore\n  dup2\n  0x00\n  keccak256\n  dup5\n  dup1\n  dup9\n  add\n  0x05\n  shr\n  dup3\n  add\n  swap3\n  dup5\n  dup10\n  lt\n  tag_45\n  jumpi\ntag_46:\n  add\n  0x05\n  shr\n  add\n  swap1\n  dup8\n  swap1\ntag_47:\n  dup3\n  dup2\n  lt\n  tag_48\n  jumpi\n  pop\n  pop\n  jump(tag_34)\ntag_48:\n  0x00\n  dup2\n  sstore\n  add\n  dup8\n  swap1\n  jump(tag_47)\ntag_45:\n  swap3\n  pop\n  dup2\n  swap3\n  jump(tag_46)\ntag_31:\n  0x22\n  dup9\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore\n  revert(0x00, 0x24)\ntag_29:\n  swap1\n  0x7f\n  and\n  swap1\n  jump(tag_30)\ntag_27:\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  0x41\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2069:2086  _symbol = symbol_ */\n  0x04\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n  mstore\n  revert(0x00, 0x24)\ntag_24:\n  add\n  mload\n  swap1\n  pop\n  codesize\n  dup1\n  jump(tag_25)\ntag_22:\n  swap1\n  dup9\n  swap4\n  pop\n  not(0x1f)\n  dup4\n  and\n  swap2\n  dup8\n  0x00\n  mstore\n  dup11\n  0x00\n  keccak256\n  swap3\n  0x00\ntag_50:\n  dup13\n  dup3\n  dup3\n  lt\n  tag_51\n  jumpi\n  pop\n  pop\n  dup5\n  gt\n  tag_53\n  jumpi\ntag_54:\n  pop\n  pop\n  pop\n  dup2\n  shl\n  add\n  dup4\n  sstore\n  jump(tag_26)\ntag_53:\n  add\n  mload\n  not(0x00)\n  dup4\n  dup9\n  shl\n  0xf8\n  and\n  shr\n  not\n  and\n  swap1\n  sstore\n  codesize\n  dup1\n  dup1\n  jump(tag_54)\ntag_51:\n  dup4\n  dup6\n  add\n  mload\n  dup7\n  sstore\n  dup13\n  swap8\n  swap1\n  swap6\n  add\n  swap5\n  swap4\n  dup5\n  add\n  swap4\n  add\n  jump(tag_50)\ntag_20:\n  swap1\n  swap2\n  pop\n  dup6\n  0x00\n  mstore\n  dup9\n  0x00\n  keccak256\n  dup6\n  dup1\n  dup6\n  add\n  0x05\n  shr\n  dup3\n  add\n  swap3\n  dup12\n  dup7\n  lt\n  tag_55\n  jumpi\ntag_56:\n  swap2\n  dup11\n  swap2\n  dup7\n  swap6\n  swap5\n  swap4\n  add\n  0x05\n  shr\n  add\n  swap2\ntag_57:\n  dup3\n  dup2\n  lt\n  tag_58\n  jumpi\n  pop\n  pop\n  jump(tag_21)\ntag_58:\n  0x00\n  dup2\n  sstore\n  dup6\n  swap5\n  pop\n  dup11\n  swap2\n  add\n  jump(tag_57)\ntag_55:\n  swap3\n  pop\n  dup2\n  swap3\n  jump(tag_56)\ntag_18:\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x22)\n  revert(0x00, 0x24)\ntag_16:\n  swap4\n  0x7f\n  and\n  swap4\n  jump(tag_17)\ntag_11:\n  0x00\n  dup1\n  revert\ntag_1:\n  mload(0x40)\n  swap2\n  swap1\n  0x1f\n  add\n  not(0x1f)\n  and\n  dup3\n  add\n  sub(shl(0x40, 0x01), 0x01)\n  dup2\n  gt\n  dup4\n  dup3\n  lt\n  or\n  tag_27\n  jumpi\n  0x40\n  mstore\n  jump\t// out\ntag_2:\n  swap2\n  swap1\n  dup1\n  0x1f\n  dup5\n  add\n  slt\n  iszero\n  tag_11\n  jumpi\n  dup3\n  mload\n  sub(shl(0x40, 0x01), 0x01)\n  dup2\n  gt\n  tag_27\n  jumpi\n  0x20\n  swap1\n  tag_66\n  0x1f\n  dup3\n  add\n  not(0x1f)\n  and\n  dup4\n  add\n  tag_1\n  jump\t// in\ntag_66:\n  swap3\n  dup2\n  dup5\n  mstore\n  dup3\n  dup3\n  dup8\n  add\n  add\n  gt\n  tag_11\n  jumpi\n  0x00\ntag_69:\n  dup2\n  dup2\n  lt\n  tag_70\n  jumpi\n  pop\n  dup3\n  0x00\n  swap4\n  swap5\n  swap6\n  pop\n  add\n  add\n  mstore\n  swap1\n  jump\t// out\ntag_70:\n  dup6\n  dup2\n  add\n  dup4\n  add\n  mload\n  dup5\n  dup3\n  add\n  dup5\n  add\n  mstore\n  dup3\n  add\n  jump(tag_69)\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      0x80\n      0x40\n      dup2\n      dup2\n      mstore\n      0x04\n      swap2\n      dup3\n      calldatasize\n      lt\n      iszero\n      tag_6\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_6:\n      0x00\n      swap3\n      dup4\n      calldataload\n      0xe0\n      shr\n      swap2\n      dup3\n      0x06fdde03\n      eq\n      tag_8\n      jumpi\n      pop\n      dup2\n      0x095ea7b3\n      eq\n      tag_10\n      jumpi\n      dup2\n      0x18160ddd\n      eq\n      tag_12\n      jumpi\n      dup2\n      0x23b872dd\n      eq\n      tag_14\n      jumpi\n      dup2\n      0x313ce567\n      eq\n      tag_16\n      jumpi\n      dup2\n      0x39509351\n      eq\n      tag_18\n      jumpi\n      dup2\n      0x70a08231\n      eq\n      tag_20\n      jumpi\n      dup2\n      0x95d89b41\n      eq\n      tag_22\n      jumpi\n      dup2\n      0xa457c2d7\n      eq\n      tag_24\n      jumpi\n      pop\n      dup1\n      0xa9059cbb\n      eq\n      tag_26\n      jumpi\n      0xdd62ed3e\n      eq\n      tag_28\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_28:\n      jumpi(tag_32, callvalue)\n      dup1\n      add(calldatasize, not(0x03))\n      slt\n      tag_32\n      jumpi\n      dup1\n      0x20\n      swap3\n      tag_34\n      tag_2\n      jump\t// in\n    tag_34:\n      tag_35\n      tag_3\n      jump\t// in\n    tag_35:\n      sub(shl(0xa0, 0x01), 0x01)\n      swap2\n      dup3\n      and\n      dup4\n      mstore\n      0x01\n      dup7\n      mstore\n      dup4\n      dup4\n      keccak256\n      swap2\n      and\n      dup3\n      mstore\n      dup5\n      mstore\n      keccak256\n      sload\n      swap1\n      mload\n      swap1\n      dup2\n      mstore\n      return\n    tag_32:\n      pop\n      dup1\n      revert\n    tag_26:\n      pop\n      jumpi(tag_32, callvalue)\n      dup1\n      add(calldatasize, not(0x03))\n      slt\n      tag_32\n      jumpi\n      0x20\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3894:3900  amount */\n      tag_40\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      tag_41\n      tag_2\n      jump\t// in\n    tag_41:\n      calldataload(0x24)\n        /* \"@openzeppelin/contracts/utils/Context.sol\":734:744  msg.sender */\n      swap1\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3894:3900  amount */\n      tag_4\n      jump\t// in\n    tag_40:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      mload\n      0x01\n      dup2\n      mstore\n      return\n    tag_24:\n      swap1\n      pop\n      dup3\n      jumpi(tag_44, callvalue)\n      dup3\n      add(calldatasize, not(0x03))\n      slt\n      tag_44\n      jumpi\n      tag_46\n      tag_2\n      jump\t// in\n    tag_46:\n      swap2\n      dup4\n      calldataload(0x24)\n        /* \"@openzeppelin/contracts/utils/Context.sol\":734:744  msg.sender */\n      swap3\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      dup2\n      mstore\n      mstore(0x20, 0x01)\n      dup2\n      dup2\n      keccak256\n      0x01\n      dup1\n      0xa0\n      shl\n      sub\n      dup7\n      and\n      dup3\n      mstore\n      0x20\n      mstore\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6792:6827  currentAllowance >= subtractedValue */\n      swap1\n      dup3\n      dup3\n      lt\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      tag_47\n      jumpi\n      0x20\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6928:6962  currentAllowance - subtractedValue */\n      tag_40\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      dup6\n      dup6\n      sub\n      dup8\n        /* \"@openzeppelin/contracts/utils/Context.sol\":734:744  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6928:6962  currentAllowance - subtractedValue */\n      tag_5\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n    tag_47:\n      0x84\n      swap1\n      0x20\n      dup7\n      mload\n      swap2\n      shl(0xe5, 0x461bcd)\n      dup4\n      mstore\n      dup3\n      add\n      mstore\n      0x25\n      0x24\n      dup3\n      add\n      mstore\n      0x45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77\n      0x44\n      dup3\n      add\n      mstore\n      shl(0xd8, 0x207a65726f)\n      0x64\n      dup3\n      add\n      mstore\n      revert\n    tag_44:\n      dup1\n      revert\n    tag_22:\n      dup4\n      dup4\n      jumpi(tag_32, callvalue)\n      dup2\n      add(calldatasize, not(0x03))\n      slt\n      tag_32\n      jumpi\n      dup1\n      mload\n      swap1\n      dup3\n      dup5\n      sload\n      0x01\n      dup2\n      dup2\n      shr\n      swap1\n      dup1\n      dup4\n      and\n      swap3\n      dup4\n      iszero\n      tag_54\n      jumpi\n    tag_55:\n      0x20\n      swap4\n      dup5\n      dup5\n      lt\n      dup2\n      eq\n      tag_56\n      jumpi\n      dup4\n      dup9\n      mstore\n      swap1\n      dup2\n      iszero\n      tag_58\n      jumpi\n      pop\n      0x01\n      eq\n      tag_60\n      jumpi\n    tag_61:\n      pop\n      pop\n      pop\n      dup3\n      swap1\n      sub\n      0x1f\n      add\n      not(0x1f)\n      and\n      dup3\n      add\n      swap3\n      0xffffffffffffffff\n      dup5\n      gt\n      dup4\n      dup6\n      lt\n      or\n      tag_62\n      jumpi\n      pop\n      dup3\n      swap2\n      dup3\n      tag_64\n      swap3\n      mstore\n      dup3\n      tag_1\n      jump\t// in\n    tag_64:\n      sub\n      swap1\n      return\n    tag_62:\n      shl(0xe0, 0x4e487b71)\n      dup2\n      mstore\n      0x41\n      dup6\n      mstore\n      0x24\n      swap1\n      revert\n    tag_60:\n      dup8\n      dup8\n      mstore\n      swap2\n      swap3\n      pop\n      dup6\n      swap2\n      dup4\n      0x8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b\n    tag_65:\n      dup4\n      dup6\n      lt\n      tag_66\n      jumpi\n      pop\n      pop\n      pop\n      pop\n      dup4\n      add\n      add\n      dup6\n      dup1\n      dup1\n      jump(tag_61)\n    tag_66:\n      dup1\n      sload\n      dup9\n      dup7\n      add\n      dup4\n      add\n      mstore\n      swap4\n      add\n      swap3\n      dup5\n      swap1\n      dup3\n      add\n      jump(tag_65)\n    tag_58:\n      not(0xff)\n      and\n      dup8\n      dup6\n      add\n      mstore\n      pop\n      pop\n      iszero\n      iszero\n      0x05\n      shl\n      dup5\n      add\n      add\n      swap1\n      pop\n      dup6\n      dup1\n      dup1\n      jump(tag_61)\n    tag_56:\n      shl(0xe0, 0x4e487b71)\n      dup10\n      mstore\n      0x22\n      dup11\n      mstore\n      0x24\n      dup10\n      revert\n    tag_54:\n      swap2\n      0x7f\n      and\n      swap2\n      jump(tag_55)\n    tag_20:\n      pop\n      pop\n      jumpi(tag_32, callvalue)\n      jumpi(tag_32, slt(add(not(0x03), calldatasize), 0x20))\n      0x20\n      swap2\n      dup2\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      tag_72\n      tag_2\n      jump\t// in\n    tag_72:\n      and\n      dup2\n      mstore\n      dup1\n      dup5\n      mstore\n      keccak256\n      sload\n      swap1\n      mload\n      swap1\n      dup2\n      mstore\n      return\n    tag_18:\n      dup3\n      dup5\n      jumpi(tag_44, callvalue)\n      dup2\n      add(calldatasize, not(0x03))\n      slt\n      tag_44\n      jumpi\n      tag_77\n      tag_2\n      jump\t// in\n    tag_77:\n        /* \"@openzeppelin/contracts/utils/Context.sol\":734:744  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      dup3\n      mstore\n      0x01\n      0x20\n      swap1\n      dup2\n      mstore\n      dup4\n      dup4\n      keccak256\n      sub(shl(0xa0, 0x01), 0x01)\n      dup4\n      and\n      dup5\n      mstore\n      swap1\n      mstore\n      dup3\n      dup3\n      keccak256\n      sload\n      calldataload(0x24)\n      dup2\n      add\n      swap3\n      swap1\n      dup4\n      lt\n      tag_78\n      jumpi\n      0x20\n        /* \"@openzeppelin/contracts/utils/Context.sol\":734:744  msg.sender */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6021:6059  allowance(owner, spender) + addedValue */\n      tag_40\n        /* \"@openzeppelin/contracts/utils/Context.sol\":734:744  msg.sender */\n      dup6\n      dup6\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6021:6059  allowance(owner, spender) + addedValue */\n      tag_5\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n    tag_78:\n      shl(0xe0, 0x4e487b71)\n      dup2\n      mstore\n      0x11\n      dup6\n      mstore\n      0x24\n      swap1\n      revert\n    tag_16:\n      pop\n      pop\n      jumpi(tag_32, callvalue)\n      dup2\n      add(calldatasize, not(0x03))\n      slt\n      tag_32\n      jumpi\n      0x20\n      swap1\n      mload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3186:3188  18 */\n      0x12\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      dup2\n      mstore\n      return\n    tag_14:\n      dup4\n      swap2\n      pop\n      jumpi(tag_32, callvalue)\n      jumpi(tag_32, slt(add(not(0x03), calldatasize), 0x60))\n      tag_89\n      tag_2\n      jump\t// in\n    tag_89:\n      tag_90\n      tag_3\n      jump\t// in\n    tag_90:\n      swap2\n      dup5\n      calldataload(0x44)\n      swap5\n      0x01\n      dup1\n      0xa0\n      shl\n      sub\n      dup5\n      and\n      dup2\n      mstore\n      mstore(0x20, 0x01)\n      dup2\n      dup2\n      keccak256\n        /* \"@openzeppelin/contracts/utils/Context.sol\":734:744  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      dup3\n      mstore\n      0x20\n      mstore\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11264:11281  type(uint256).max */\n      swap1\n      not(0x00)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11244:11281  currentAllowance != type(uint256).max */\n      dup3\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11240:11483  if (currentAllowance != type(uint256).max) {... */\n      tag_91\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n    tag_92:\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5424:5430  amount */\n      dup7\n      tag_40\n      dup8\n      dup8\n      dup8\n      tag_4\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11240:11483  if (currentAllowance != type(uint256).max) {... */\n    tag_91:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11305:11331  currentAllowance >= amount */\n      dup5\n      dup3\n      lt\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      tag_94\n      jumpi\n      pop\n      swap2\n      dup4\n      swap2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11432:11457  currentAllowance - amount */\n      tag_96\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      0x20\n      swap7\n      swap6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5424:5430  amount */\n      tag_40\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      swap6\n      sub\n        /* \"@openzeppelin/contracts/utils/Context.sol\":734:744  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11432:11457  currentAllowance - amount */\n      dup4\n      tag_5\n      jump\t// in\n    tag_96:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11240:11483  if (currentAllowance != type(uint256).max) {... */\n      swap2\n      swap4\n      swap5\n      dup2\n      swap4\n      pop\n      jump(tag_92)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n    tag_94:\n      0x64\n      swap1\n      0x20\n      dup8\n      mload\n      swap2\n      shl(0xe5, 0x461bcd)\n      dup4\n      mstore\n      dup3\n      add\n      mstore\n      0x1d\n      0x24\n      dup3\n      add\n      mstore\n      0x45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000\n      0x44\n      dup3\n      add\n      mstore\n      revert\n    tag_12:\n      pop\n      pop\n      jumpi(tag_32, callvalue)\n      dup2\n      add(calldatasize, not(0x03))\n      slt\n      tag_32\n      jumpi\n      0x20\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3342:3354  _totalSupply */\n      0x02\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      sload\n      swap1\n      mload\n      swap1\n      dup2\n      mstore\n      return\n    tag_10:\n      pop\n      pop\n      jumpi(tag_32, callvalue)\n      dup1\n      add(calldatasize, not(0x03))\n      slt\n      tag_32\n      jumpi\n      0x20\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4606:4612  amount */\n      tag_40\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      tag_106\n      tag_2\n      jump\t// in\n    tag_106:\n      calldataload(0x24)\n        /* \"@openzeppelin/contracts/utils/Context.sol\":734:744  msg.sender */\n      swap1\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4606:4612  amount */\n      tag_5\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n    tag_8:\n      dup5\n      swap1\n      dup5\n      jumpi(tag_109, callvalue)\n      dup3\n      add(calldatasize, not(0x03))\n      slt\n      tag_109\n      jumpi\n      dup3\n      sload(0x03)\n      0x01\n      dup2\n      dup2\n      shr\n      swap1\n      dup1\n      dup4\n      and\n      swap3\n      dup4\n      iszero\n      tag_111\n      jumpi\n    tag_112:\n      0x20\n      swap4\n      dup5\n      dup5\n      lt\n      dup2\n      eq\n      tag_56\n      jumpi\n      dup4\n      dup9\n      mstore\n      swap1\n      dup2\n      iszero\n      tag_58\n      jumpi\n      pop\n      0x01\n      eq\n      tag_117\n      jumpi\n      pop\n      pop\n      pop\n      dup3\n      swap1\n      sub\n      0x1f\n      add\n      not(0x1f)\n      and\n      dup3\n      add\n      swap3\n      0xffffffffffffffff\n      dup5\n      gt\n      dup4\n      dup6\n      lt\n      or\n      tag_62\n      jumpi\n      pop\n      dup3\n      swap2\n      dup3\n      tag_64\n      swap3\n      mstore\n      dup3\n      tag_1\n      jump\t// in\n    tag_117:\n      0x03\n      dup8\n      mstore\n      swap2\n      swap3\n      pop\n      dup6\n      swap2\n      dup4\n      0xc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b\n    tag_122:\n      dup4\n      dup6\n      lt\n      tag_123\n      jumpi\n      pop\n      pop\n      pop\n      pop\n      dup4\n      add\n      add\n      dup6\n      dup1\n      dup1\n      jump(tag_61)\n    tag_123:\n      dup1\n      sload\n      dup9\n      dup7\n      add\n      dup4\n      add\n      mstore\n      swap4\n      add\n      swap3\n      dup5\n      swap1\n      dup3\n      add\n      jump(tag_122)\n    tag_111:\n      swap2\n      0x7f\n      and\n      swap2\n      jump(tag_112)\n    tag_109:\n      dup3\n      dup1\n      revert\n    tag_1:\n      0x20\n      dup1\n      dup3\n      mstore\n      dup3\n      mload\n      dup2\n      dup4\n      add\n      dup2\n      swap1\n      mstore\n      swap1\n      swap4\n      swap3\n      0x00\n    tag_125:\n      dup3\n      dup2\n      lt\n      tag_126\n      jumpi\n      pop\n      pop\n      0x40\n      swap3\n      swap4\n      pop\n      0x00\n      dup4\n      dup3\n      dup5\n      add\n      add\n      mstore\n      0x1f\n      dup1\n      not\n      swap2\n      add\n      and\n      add\n      add\n      swap1\n      jump\t// out\n    tag_126:\n      dup2\n      dup2\n      add\n      dup7\n      add\n      mload\n      dup5\n      dup3\n      add\n      0x40\n      add\n      mstore\n      dup6\n      add\n      jump(tag_125)\n    tag_2:\n      calldataload(0x04)\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      dup3\n      and\n      dup3\n      sub\n      tag_128\n      jumpi\n      jump\t// out\n    tag_128:\n      0x00\n      dup1\n      revert\n    tag_3:\n      calldataload(0x24)\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      dup3\n      and\n      dup3\n      sub\n      tag_128\n      jumpi\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7456:8244  function _transfer(address from, address to, uint256 amount) internal virtual {... */\n    tag_4:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      swap1\n      dup2\n      and\n      swap2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7552:7570  from != address(0) */\n      dup3\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      tag_132\n      jumpi\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7630:7646  to != address(0) */\n      swap2\n      dup3\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      tag_134\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7568:7569  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      dup3\n      dup2\n      mstore\n      dup1\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7801:7822  fromBalance >= amount */\n      swap2\n      dup1\n      dup4\n      lt\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      tag_136\n      jumpi\n      0x40\n      dup3\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8163:8189  Transfer(from, to, amount) */\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      swap6\n      dup8\n      0x20\n      swap7\n      mstore\n      dup3\n      dup7\n      mstore\n      sub\n      dup3\n      dup3\n      keccak256\n      sstore\n      dup7\n      dup2\n      mstore\n      keccak256\n      dup2\n      dup2\n      sload\n      add\n      swap1\n      sstore\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8163:8189  Transfer(from, to, amount) */\n      log3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7456:8244  function _transfer(address from, address to, uint256 amount) internal virtual {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n    tag_136:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x26\n      0x24\n      dup3\n      add\n      mstore\n      0x45524332303a207472616e7366657220616d6f756e7420657863656564732062\n      0x44\n      dup3\n      add\n      mstore\n      shl(0xd0, 0x616c616e6365)\n      0x64\n      dup3\n      add\n      mstore\n      0x84\n      swap1\n      revert\n    tag_134:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x23\n      0x24\n      dup3\n      add\n      mstore\n      0x45524332303a207472616e7366657220746f20746865207a65726f2061646472\n      0x44\n      dup3\n      add\n      mstore\n      shl(0xe8, 0x657373)\n      0x64\n      dup3\n      add\n      mstore\n      0x84\n      swap1\n      revert\n    tag_132:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x25\n      0x24\n      dup3\n      add\n      mstore\n      0x45524332303a207472616e736665722066726f6d20746865207a65726f206164\n      0x44\n      dup3\n      add\n      mstore\n      shl(0xd8, 0x6472657373)\n      0x64\n      dup3\n      add\n      mstore\n      0x84\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10457:10797  function _approve(address owner, address spender, uint256 amount) internal virtual {... */\n    tag_5:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      swap1\n      dup2\n      and\n      swap2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10558:10577  owner != address(0) */\n      dup3\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      tag_138\n      jumpi\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10636:10657  spender != address(0) */\n      swap2\n      dup3\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      tag_140\n      jumpi\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10758:10790  Approval(owner, spender, amount) */\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      swap2\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10575:10576  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      mstore\n      0x01\n      dup3\n      mstore\n      0x40\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10575:10576  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      keccak256\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10575:10576  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      mstore\n      dup3\n      mstore\n      dup1\n      0x40\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10575:10576  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      keccak256\n      sstore\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10758:10790  Approval(owner, spender, amount) */\n      log3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10457:10797  function _approve(address owner, address spender, uint256 amount) internal virtual {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n    tag_140:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x22\n      0x24\n      dup3\n      add\n      mstore\n      0x45524332303a20617070726f766520746f20746865207a65726f206164647265\n      0x44\n      dup3\n      add\n      mstore\n      shl(0xf0, 0x7373)\n      0x64\n      dup3\n      add\n      mstore\n      0x84\n      swap1\n      revert\n    tag_138:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x24\n      dup1\n      dup3\n      add\n      mstore\n      0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464\n      0x44\n      dup3\n      add\n      mstore\n      shl(0xe0, 0x72657373)\n      0x64\n      dup3\n      add\n      mstore\n      0x84\n      swap1\n      revert\n\n    auxdata: 0xa26469706673582212203fc65d7e0460c6e5cc0eaf0cd82ade8705eccb8c10c25e9aebb98c74fa20c38a64736f6c63430008120033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"abi_decode_string_fromMemory": {
									"entryPoint": 840,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_memory": {
									"entryPoint": 802,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								}
							},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080604052346200031d5762000c64803803806200001d8162000322565b9283398101906040818303126200031d5780516001600160401b03908181116200031d57836200004f91840162000348565b91602093848201518381116200031d576200006b920162000348565b82518281116200021d576003918254916001958684811c9416801562000312575b88851014620002fc578190601f94858111620002a6575b5088908583116001146200023f5760009262000233575b505060001982861b1c191690861b1783555b80519384116200021d5760049586548681811c9116801562000212575b82821014620001fd57838111620001b2575b508092851160011462000144575093839491849260009562000138575b50501b92600019911b1c19161790555b6040516108a99081620003bb8239f35b01519350388062000118565b92919084601f1981168860005285600020956000905b898383106200019757505050106200017c575b50505050811b01905562000128565b01519060f884600019921b161c19169055388080806200016d565b8587015189559097019694850194889350908101906200015a565b87600052816000208480880160051c820192848910620001f3575b0160051c019087905b828110620001e6575050620000fb565b60008155018790620001d6565b92508192620001cd565b602288634e487b7160e01b6000525260246000fd5b90607f1690620000e9565b634e487b7160e01b600052604160045260246000fd5b015190503880620000ba565b90889350601f19831691876000528a6000209260005b8c8282106200028f575050841162000276575b505050811b018355620000cc565b015160001983881b60f8161c1916905538808062000268565b8385015186558c9790950194938401930162000255565b90915085600052886000208580850160051c8201928b8610620002f2575b918a91869594930160051c01915b828110620002e2575050620000a3565b600081558594508a9101620002d2565b92508192620002c4565b634e487b7160e01b600052602260045260246000fd5b93607f16936200008c565b600080fd5b6040519190601f01601f191682016001600160401b038111838210176200021d57604052565b919080601f840112156200031d5782516001600160401b0381116200021d576020906200037e601f8201601f1916830162000322565b928184528282870101116200031d5760005b818110620003a657508260009394955001015290565b85810183015184820184015282016200039056fe608060408181526004918236101561001657600080fd5b600092833560e01c91826306fdde03146104ad57508163095ea7b31461048357816318160ddd1461046457816323b872dd1461039a578163313ce5671461037e578163395093511461031757816370a08231146102e057816395d89b41146101c1578163a457c2d71461011957508063a9059cbb146100e95763dd62ed3e1461009e57600080fd5b346100e557806003193601126100e557806020926100ba6105d2565b6100c26105ed565b6001600160a01b0391821683526001865283832091168252845220549051908152f35b5080fd5b50346100e557806003193601126100e5576020906101126101086105d2565b6024359033610603565b5160018152f35b905082346101be57826003193601126101be576101346105d2565b918360243592338152600160205281812060018060a01b038616825260205220549082821061016d576020856101128585038733610771565b608490602086519162461bcd60e51b8352820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152fd5b80fd5b8383346100e557816003193601126100e557805190828454600181811c908083169283156102d6575b60209384841081146102c3578388529081156102a75750600114610252575b505050829003601f01601f191682019267ffffffffffffffff84118385101761023f575082918261023b925282610589565b0390f35b634e487b7160e01b815260418552602490fd5b8787529192508591837f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8385106102935750505050830101858080610209565b80548886018301529301928490820161027d565b60ff1916878501525050151560051b8401019050858080610209565b634e487b7160e01b895260228a52602489fd5b91607f16916101ea565b5050346100e55760203660031901126100e55760209181906001600160a01b036103086105d2565b16815280845220549051908152f35b8284346101be57816003193601126101be576103316105d2565b338252600160209081528383206001600160a01b038316845290528282205460243581019290831061036b57602084610112858533610771565b634e487b7160e01b815260118552602490fd5b5050346100e557816003193601126100e5576020905160128152f35b839150346100e55760603660031901126100e5576103b66105d2565b6103be6105ed565b91846044359460018060a01b0384168152600160205281812033825260205220549060001982036103f8575b602086610112878787610603565b84821061042157509183916104166020969561011295033383610771565b9193948193506103ea565b606490602087519162461bcd60e51b8352820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152fd5b5050346100e557816003193601126100e5576020906002549051908152f35b5050346100e557806003193601126100e5576020906101126104a36105d2565b6024359033610771565b8490843461058557826003193601126105855782600354600181811c9080831692831561057b575b60209384841081146102c3578388529081156102a7575060011461052557505050829003601f01601f191682019267ffffffffffffffff84118385101761023f575082918261023b925282610589565b600387529192508591837fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b8385106105675750505050830101858080610209565b805488860183015293019284908201610551565b91607f16916104d5565b8280fd5b6020808252825181830181905290939260005b8281106105be57505060409293506000838284010152601f8019910116010190565b81810186015184820160400152850161059c565b600435906001600160a01b03821682036105e857565b600080fd5b602435906001600160a01b03821682036105e857565b6001600160a01b0390811691821561071e57169182156106cd5760008281528060205260408120549180831061067957604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220818154019055604051908152a3565b60405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b6001600160a01b0390811691821561082257169182156107d25760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260018252604060002085600052825280604060002055604051908152a3565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fdfea26469706673582212203fc65d7e0460c6e5cc0eaf0cd82ade8705eccb8c10c25e9aebb98c74fa20c38a64736f6c63430008120033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH3 0x31D JUMPI PUSH3 0xC64 DUP1 CODESIZE SUB DUP1 PUSH3 0x1D DUP2 PUSH3 0x322 JUMP JUMPDEST SWAP3 DUP4 CODECOPY DUP2 ADD SWAP1 PUSH1 0x40 DUP2 DUP4 SUB SLT PUSH3 0x31D JUMPI DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 DUP2 DUP2 GT PUSH3 0x31D JUMPI DUP4 PUSH3 0x4F SWAP2 DUP5 ADD PUSH3 0x348 JUMP JUMPDEST SWAP2 PUSH1 0x20 SWAP4 DUP5 DUP3 ADD MLOAD DUP4 DUP2 GT PUSH3 0x31D JUMPI PUSH3 0x6B SWAP3 ADD PUSH3 0x348 JUMP JUMPDEST DUP3 MLOAD DUP3 DUP2 GT PUSH3 0x21D JUMPI PUSH1 0x3 SWAP2 DUP3 SLOAD SWAP2 PUSH1 0x1 SWAP6 DUP7 DUP5 DUP2 SHR SWAP5 AND DUP1 ISZERO PUSH3 0x312 JUMPI JUMPDEST DUP9 DUP6 LT EQ PUSH3 0x2FC JUMPI DUP2 SWAP1 PUSH1 0x1F SWAP5 DUP6 DUP2 GT PUSH3 0x2A6 JUMPI JUMPDEST POP DUP9 SWAP1 DUP6 DUP4 GT PUSH1 0x1 EQ PUSH3 0x23F JUMPI PUSH1 0x0 SWAP3 PUSH3 0x233 JUMPI JUMPDEST POP POP PUSH1 0x0 NOT DUP3 DUP7 SHL SHR NOT AND SWAP1 DUP7 SHL OR DUP4 SSTORE JUMPDEST DUP1 MLOAD SWAP4 DUP5 GT PUSH3 0x21D JUMPI PUSH1 0x4 SWAP6 DUP7 SLOAD DUP7 DUP2 DUP2 SHR SWAP2 AND DUP1 ISZERO PUSH3 0x212 JUMPI JUMPDEST DUP3 DUP3 LT EQ PUSH3 0x1FD JUMPI DUP4 DUP2 GT PUSH3 0x1B2 JUMPI JUMPDEST POP DUP1 SWAP3 DUP6 GT PUSH1 0x1 EQ PUSH3 0x144 JUMPI POP SWAP4 DUP4 SWAP5 SWAP2 DUP5 SWAP3 PUSH1 0x0 SWAP6 PUSH3 0x138 JUMPI JUMPDEST POP POP SHL SWAP3 PUSH1 0x0 NOT SWAP2 SHL SHR NOT AND OR SWAP1 SSTORE JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8A9 SWAP1 DUP2 PUSH3 0x3BB DUP3 CODECOPY RETURN JUMPDEST ADD MLOAD SWAP4 POP CODESIZE DUP1 PUSH3 0x118 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 DUP5 PUSH1 0x1F NOT DUP2 AND DUP9 PUSH1 0x0 MSTORE DUP6 PUSH1 0x0 KECCAK256 SWAP6 PUSH1 0x0 SWAP1 JUMPDEST DUP10 DUP4 DUP4 LT PUSH3 0x197 JUMPI POP POP POP LT PUSH3 0x17C JUMPI JUMPDEST POP POP POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH3 0x128 JUMP JUMPDEST ADD MLOAD SWAP1 PUSH1 0xF8 DUP5 PUSH1 0x0 NOT SWAP3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 DUP1 PUSH3 0x16D JUMP JUMPDEST DUP6 DUP8 ADD MLOAD DUP10 SSTORE SWAP1 SWAP8 ADD SWAP7 SWAP5 DUP6 ADD SWAP5 DUP9 SWAP4 POP SWAP1 DUP2 ADD SWAP1 PUSH3 0x15A JUMP JUMPDEST DUP8 PUSH1 0x0 MSTORE DUP2 PUSH1 0x0 KECCAK256 DUP5 DUP1 DUP9 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP5 DUP10 LT PUSH3 0x1F3 JUMPI JUMPDEST ADD PUSH1 0x5 SHR ADD SWAP1 DUP8 SWAP1 JUMPDEST DUP3 DUP2 LT PUSH3 0x1E6 JUMPI POP POP PUSH3 0xFB JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE ADD DUP8 SWAP1 PUSH3 0x1D6 JUMP JUMPDEST SWAP3 POP DUP2 SWAP3 PUSH3 0x1CD JUMP JUMPDEST PUSH1 0x22 DUP9 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x7F AND SWAP1 PUSH3 0xE9 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH3 0xBA JUMP JUMPDEST SWAP1 DUP9 SWAP4 POP PUSH1 0x1F NOT DUP4 AND SWAP2 DUP8 PUSH1 0x0 MSTORE DUP11 PUSH1 0x0 KECCAK256 SWAP3 PUSH1 0x0 JUMPDEST DUP13 DUP3 DUP3 LT PUSH3 0x28F JUMPI POP POP DUP5 GT PUSH3 0x276 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD DUP4 SSTORE PUSH3 0xCC JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT DUP4 DUP9 SHL PUSH1 0xF8 AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH3 0x268 JUMP JUMPDEST DUP4 DUP6 ADD MLOAD DUP7 SSTORE DUP13 SWAP8 SWAP1 SWAP6 ADD SWAP5 SWAP4 DUP5 ADD SWAP4 ADD PUSH3 0x255 JUMP JUMPDEST SWAP1 SWAP2 POP DUP6 PUSH1 0x0 MSTORE DUP9 PUSH1 0x0 KECCAK256 DUP6 DUP1 DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP12 DUP7 LT PUSH3 0x2F2 JUMPI JUMPDEST SWAP2 DUP11 SWAP2 DUP7 SWAP6 SWAP5 SWAP4 ADD PUSH1 0x5 SHR ADD SWAP2 JUMPDEST DUP3 DUP2 LT PUSH3 0x2E2 JUMPI POP POP PUSH3 0xA3 JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE DUP6 SWAP5 POP DUP11 SWAP2 ADD PUSH3 0x2D2 JUMP JUMPDEST SWAP3 POP DUP2 SWAP3 PUSH3 0x2C4 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP4 PUSH1 0x7F AND SWAP4 PUSH3 0x8C JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP2 SWAP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP4 DUP3 LT OR PUSH3 0x21D JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP2 SWAP1 DUP1 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH3 0x31D JUMPI DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH3 0x21D JUMPI PUSH1 0x20 SWAP1 PUSH3 0x37E PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP4 ADD PUSH3 0x322 JUMP JUMPDEST SWAP3 DUP2 DUP5 MSTORE DUP3 DUP3 DUP8 ADD ADD GT PUSH3 0x31D JUMPI PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH3 0x3A6 JUMPI POP DUP3 PUSH1 0x0 SWAP4 SWAP5 SWAP6 POP ADD ADD MSTORE SWAP1 JUMP JUMPDEST DUP6 DUP2 ADD DUP4 ADD MLOAD DUP5 DUP3 ADD DUP5 ADD MSTORE DUP3 ADD PUSH3 0x390 JUMP INVALID PUSH1 0x80 PUSH1 0x40 DUP2 DUP2 MSTORE PUSH1 0x4 SWAP2 DUP3 CALLDATASIZE LT ISZERO PUSH2 0x16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP3 DUP4 CALLDATALOAD PUSH1 0xE0 SHR SWAP2 DUP3 PUSH4 0x6FDDE03 EQ PUSH2 0x4AD JUMPI POP DUP2 PUSH4 0x95EA7B3 EQ PUSH2 0x483 JUMPI DUP2 PUSH4 0x18160DDD EQ PUSH2 0x464 JUMPI DUP2 PUSH4 0x23B872DD EQ PUSH2 0x39A JUMPI DUP2 PUSH4 0x313CE567 EQ PUSH2 0x37E JUMPI DUP2 PUSH4 0x39509351 EQ PUSH2 0x317 JUMPI DUP2 PUSH4 0x70A08231 EQ PUSH2 0x2E0 JUMPI DUP2 PUSH4 0x95D89B41 EQ PUSH2 0x1C1 JUMPI DUP2 PUSH4 0xA457C2D7 EQ PUSH2 0x119 JUMPI POP DUP1 PUSH4 0xA9059CBB EQ PUSH2 0xE9 JUMPI PUSH4 0xDD62ED3E EQ PUSH2 0x9E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0xE5 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE5 JUMPI DUP1 PUSH1 0x20 SWAP3 PUSH2 0xBA PUSH2 0x5D2 JUMP JUMPDEST PUSH2 0xC2 PUSH2 0x5ED JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND DUP4 MSTORE PUSH1 0x1 DUP7 MSTORE DUP4 DUP4 KECCAK256 SWAP2 AND DUP3 MSTORE DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0xE5 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE5 JUMPI PUSH1 0x20 SWAP1 PUSH2 0x112 PUSH2 0x108 PUSH2 0x5D2 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER PUSH2 0x603 JUMP JUMPDEST MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST SWAP1 POP DUP3 CALLVALUE PUSH2 0x1BE JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1BE JUMPI PUSH2 0x134 PUSH2 0x5D2 JUMP JUMPDEST SWAP2 DUP4 PUSH1 0x24 CALLDATALOAD SWAP3 CALLER DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP2 DUP2 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP7 AND DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 SLOAD SWAP1 DUP3 DUP3 LT PUSH2 0x16D JUMPI PUSH1 0x20 DUP6 PUSH2 0x112 DUP6 DUP6 SUB DUP8 CALLER PUSH2 0x771 JUMP JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x20 DUP7 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST DUP1 REVERT JUMPDEST DUP4 DUP4 CALLVALUE PUSH2 0xE5 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE5 JUMPI DUP1 MLOAD SWAP1 DUP3 DUP5 SLOAD PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP1 DUP4 AND SWAP3 DUP4 ISZERO PUSH2 0x2D6 JUMPI JUMPDEST PUSH1 0x20 SWAP4 DUP5 DUP5 LT DUP2 EQ PUSH2 0x2C3 JUMPI DUP4 DUP9 MSTORE SWAP1 DUP2 ISZERO PUSH2 0x2A7 JUMPI POP PUSH1 0x1 EQ PUSH2 0x252 JUMPI JUMPDEST POP POP POP DUP3 SWAP1 SUB PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP5 GT DUP4 DUP6 LT OR PUSH2 0x23F JUMPI POP DUP3 SWAP2 DUP3 PUSH2 0x23B SWAP3 MSTORE DUP3 PUSH2 0x589 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x41 DUP6 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST DUP8 DUP8 MSTORE SWAP2 SWAP3 POP DUP6 SWAP2 DUP4 PUSH32 0x8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19B JUMPDEST DUP4 DUP6 LT PUSH2 0x293 JUMPI POP POP POP POP DUP4 ADD ADD DUP6 DUP1 DUP1 PUSH2 0x209 JUMP JUMPDEST DUP1 SLOAD DUP9 DUP7 ADD DUP4 ADD MSTORE SWAP4 ADD SWAP3 DUP5 SWAP1 DUP3 ADD PUSH2 0x27D JUMP JUMPDEST PUSH1 0xFF NOT AND DUP8 DUP6 ADD MSTORE POP POP ISZERO ISZERO PUSH1 0x5 SHL DUP5 ADD ADD SWAP1 POP DUP6 DUP1 DUP1 PUSH2 0x209 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP10 MSTORE PUSH1 0x22 DUP11 MSTORE PUSH1 0x24 DUP10 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x1EA JUMP JUMPDEST POP POP CALLVALUE PUSH2 0xE5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE5 JUMPI PUSH1 0x20 SWAP2 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x308 PUSH2 0x5D2 JUMP JUMPDEST AND DUP2 MSTORE DUP1 DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 DUP5 CALLVALUE PUSH2 0x1BE JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1BE JUMPI PUSH2 0x331 PUSH2 0x5D2 JUMP JUMPDEST CALLER DUP3 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE DUP4 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP5 MSTORE SWAP1 MSTORE DUP3 DUP3 KECCAK256 SLOAD PUSH1 0x24 CALLDATALOAD DUP2 ADD SWAP3 SWAP1 DUP4 LT PUSH2 0x36B JUMPI PUSH1 0x20 DUP5 PUSH2 0x112 DUP6 DUP6 CALLER PUSH2 0x771 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 DUP6 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0xE5 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE5 JUMPI PUSH1 0x20 SWAP1 MLOAD PUSH1 0x12 DUP2 MSTORE RETURN JUMPDEST DUP4 SWAP2 POP CALLVALUE PUSH2 0xE5 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE5 JUMPI PUSH2 0x3B6 PUSH2 0x5D2 JUMP JUMPDEST PUSH2 0x3BE PUSH2 0x5ED JUMP JUMPDEST SWAP2 DUP5 PUSH1 0x44 CALLDATALOAD SWAP5 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP2 DUP2 KECCAK256 CALLER DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 SLOAD SWAP1 PUSH1 0x0 NOT DUP3 SUB PUSH2 0x3F8 JUMPI JUMPDEST PUSH1 0x20 DUP7 PUSH2 0x112 DUP8 DUP8 DUP8 PUSH2 0x603 JUMP JUMPDEST DUP5 DUP3 LT PUSH2 0x421 JUMPI POP SWAP2 DUP4 SWAP2 PUSH2 0x416 PUSH1 0x20 SWAP7 SWAP6 PUSH2 0x112 SWAP6 SUB CALLER DUP4 PUSH2 0x771 JUMP JUMPDEST SWAP2 SWAP4 SWAP5 DUP2 SWAP4 POP PUSH2 0x3EA JUMP JUMPDEST PUSH1 0x64 SWAP1 PUSH1 0x20 DUP8 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP POP CALLVALUE PUSH2 0xE5 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE5 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x2 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP POP CALLVALUE PUSH2 0xE5 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE5 JUMPI PUSH1 0x20 SWAP1 PUSH2 0x112 PUSH2 0x4A3 PUSH2 0x5D2 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER PUSH2 0x771 JUMP JUMPDEST DUP5 SWAP1 DUP5 CALLVALUE PUSH2 0x585 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x585 JUMPI DUP3 PUSH1 0x3 SLOAD PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP1 DUP4 AND SWAP3 DUP4 ISZERO PUSH2 0x57B JUMPI JUMPDEST PUSH1 0x20 SWAP4 DUP5 DUP5 LT DUP2 EQ PUSH2 0x2C3 JUMPI DUP4 DUP9 MSTORE SWAP1 DUP2 ISZERO PUSH2 0x2A7 JUMPI POP PUSH1 0x1 EQ PUSH2 0x525 JUMPI POP POP POP DUP3 SWAP1 SUB PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP5 GT DUP4 DUP6 LT OR PUSH2 0x23F JUMPI POP DUP3 SWAP2 DUP3 PUSH2 0x23B SWAP3 MSTORE DUP3 PUSH2 0x589 JUMP JUMPDEST PUSH1 0x3 DUP8 MSTORE SWAP2 SWAP3 POP DUP6 SWAP2 DUP4 PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B JUMPDEST DUP4 DUP6 LT PUSH2 0x567 JUMPI POP POP POP POP DUP4 ADD ADD DUP6 DUP1 DUP1 PUSH2 0x209 JUMP JUMPDEST DUP1 SLOAD DUP9 DUP7 ADD DUP4 ADD MSTORE SWAP4 ADD SWAP3 DUP5 SWAP1 DUP3 ADD PUSH2 0x551 JUMP JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x4D5 JUMP JUMPDEST DUP3 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP2 DUP4 ADD DUP2 SWAP1 MSTORE SWAP1 SWAP4 SWAP3 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x5BE JUMPI POP POP PUSH1 0x40 SWAP3 SWAP4 POP PUSH1 0x0 DUP4 DUP3 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND ADD ADD SWAP1 JUMP JUMPDEST DUP2 DUP2 ADD DUP7 ADD MLOAD DUP5 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP6 ADD PUSH2 0x59C JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x5E8 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x5E8 JUMPI JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 DUP3 ISZERO PUSH2 0x71E JUMPI AND SWAP2 DUP3 ISZERO PUSH2 0x6CD JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE DUP1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 DUP1 DUP4 LT PUSH2 0x679 JUMPI PUSH1 0x40 DUP3 DUP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP6 DUP8 PUSH1 0x20 SWAP7 MSTORE DUP3 DUP7 MSTORE SUB DUP3 DUP3 KECCAK256 SSTORE DUP7 DUP2 MSTORE KECCAK256 DUP2 DUP2 SLOAD ADD SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 DUP3 ISZERO PUSH2 0x822 JUMPI AND SWAP2 DUP3 ISZERO PUSH2 0x7D2 JUMPI PUSH1 0x20 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 DUP4 PUSH1 0x0 MSTORE PUSH1 0x1 DUP3 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP6 PUSH1 0x0 MSTORE DUP3 MSTORE DUP1 PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXTCODEHASH 0xC6 0x5D PUSH31 0x460C6E5CC0EAF0CD82ADE8705ECCB8C10C25E9AEBB98C74FA20C38A64736F PUSH13 0x63430008120033000000000000 ",
							"sourceMap": "1532:11312:2:-:0;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1532:11312:2;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;2046:13;1532:11312;;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:2;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:2;;;;;;;;;;-1:-1:-1;1532:11312:2;;;;-1:-1:-1;;;;1532:11312:2;;;;;;;;;;;;;;;;;;;;2069:17;1532:11312;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:2;;;;;;;;;;;;;;-1:-1:-1;1532:11312:2;;-1:-1:-1;1532:11312:2;;-1:-1:-1;1532:11312:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:2;;;;;;;;-1:-1:-1;1532:11312:2;;-1:-1:-1;1532:11312:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:2;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:2;;;-1:-1:-1;1532:11312:2;;;;;;;;;;;;-1:-1:-1;1532:11312:2;;2069:17;1532:11312;;-1:-1:-1;1532:11312:2;;;;;-1:-1:-1;1532:11312:2;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:2;;-1:-1:-1;1532:11312:2;;-1:-1:-1;1532:11312:2;;;;;;;;;;-1:-1:-1;1532:11312:2;;;;;;;;;;;;;;;;-1:-1:-1;;1532:11312:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:2;;-1:-1:-1;1532:11312:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:2;;;;-1:-1:-1;1532:11312:2;;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:2;;;;;-1:-1:-1;1532:11312:2;;;;;;;;;-1:-1:-1;1532:11312:2;;;;;;;;;-1:-1:-1;;1532:11312:2;;;-1:-1:-1;;;;;1532:11312:2;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;1532:11312:2;;;;;;;;;;-1:-1:-1;;1532:11312:2;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;1532:11312:2;;;;;;;;-1:-1:-1;1532:11312:2;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"abi_decode_address": {
									"entryPoint": 1490,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"abi_decode_address_4782": {
									"entryPoint": 1517,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"abi_encode_string": {
									"entryPoint": 1417,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"fun_approve": {
									"entryPoint": 1905,
									"id": 658,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"fun_transfer": {
									"entryPoint": 1539,
									"id": 484,
									"parameterSlots": 3,
									"returnSlots": 0
								}
							},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060408181526004918236101561001657600080fd5b600092833560e01c91826306fdde03146104ad57508163095ea7b31461048357816318160ddd1461046457816323b872dd1461039a578163313ce5671461037e578163395093511461031757816370a08231146102e057816395d89b41146101c1578163a457c2d71461011957508063a9059cbb146100e95763dd62ed3e1461009e57600080fd5b346100e557806003193601126100e557806020926100ba6105d2565b6100c26105ed565b6001600160a01b0391821683526001865283832091168252845220549051908152f35b5080fd5b50346100e557806003193601126100e5576020906101126101086105d2565b6024359033610603565b5160018152f35b905082346101be57826003193601126101be576101346105d2565b918360243592338152600160205281812060018060a01b038616825260205220549082821061016d576020856101128585038733610771565b608490602086519162461bcd60e51b8352820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152fd5b80fd5b8383346100e557816003193601126100e557805190828454600181811c908083169283156102d6575b60209384841081146102c3578388529081156102a75750600114610252575b505050829003601f01601f191682019267ffffffffffffffff84118385101761023f575082918261023b925282610589565b0390f35b634e487b7160e01b815260418552602490fd5b8787529192508591837f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8385106102935750505050830101858080610209565b80548886018301529301928490820161027d565b60ff1916878501525050151560051b8401019050858080610209565b634e487b7160e01b895260228a52602489fd5b91607f16916101ea565b5050346100e55760203660031901126100e55760209181906001600160a01b036103086105d2565b16815280845220549051908152f35b8284346101be57816003193601126101be576103316105d2565b338252600160209081528383206001600160a01b038316845290528282205460243581019290831061036b57602084610112858533610771565b634e487b7160e01b815260118552602490fd5b5050346100e557816003193601126100e5576020905160128152f35b839150346100e55760603660031901126100e5576103b66105d2565b6103be6105ed565b91846044359460018060a01b0384168152600160205281812033825260205220549060001982036103f8575b602086610112878787610603565b84821061042157509183916104166020969561011295033383610771565b9193948193506103ea565b606490602087519162461bcd60e51b8352820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152fd5b5050346100e557816003193601126100e5576020906002549051908152f35b5050346100e557806003193601126100e5576020906101126104a36105d2565b6024359033610771565b8490843461058557826003193601126105855782600354600181811c9080831692831561057b575b60209384841081146102c3578388529081156102a7575060011461052557505050829003601f01601f191682019267ffffffffffffffff84118385101761023f575082918261023b925282610589565b600387529192508591837fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b8385106105675750505050830101858080610209565b805488860183015293019284908201610551565b91607f16916104d5565b8280fd5b6020808252825181830181905290939260005b8281106105be57505060409293506000838284010152601f8019910116010190565b81810186015184820160400152850161059c565b600435906001600160a01b03821682036105e857565b600080fd5b602435906001600160a01b03821682036105e857565b6001600160a01b0390811691821561071e57169182156106cd5760008281528060205260408120549180831061067957604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220818154019055604051908152a3565b60405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b6001600160a01b0390811691821561082257169182156107d25760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260018252604060002085600052825280604060002055604051908152a3565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fdfea26469706673582212203fc65d7e0460c6e5cc0eaf0cd82ade8705eccb8c10c25e9aebb98c74fa20c38a64736f6c63430008120033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 DUP2 DUP2 MSTORE PUSH1 0x4 SWAP2 DUP3 CALLDATASIZE LT ISZERO PUSH2 0x16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP3 DUP4 CALLDATALOAD PUSH1 0xE0 SHR SWAP2 DUP3 PUSH4 0x6FDDE03 EQ PUSH2 0x4AD JUMPI POP DUP2 PUSH4 0x95EA7B3 EQ PUSH2 0x483 JUMPI DUP2 PUSH4 0x18160DDD EQ PUSH2 0x464 JUMPI DUP2 PUSH4 0x23B872DD EQ PUSH2 0x39A JUMPI DUP2 PUSH4 0x313CE567 EQ PUSH2 0x37E JUMPI DUP2 PUSH4 0x39509351 EQ PUSH2 0x317 JUMPI DUP2 PUSH4 0x70A08231 EQ PUSH2 0x2E0 JUMPI DUP2 PUSH4 0x95D89B41 EQ PUSH2 0x1C1 JUMPI DUP2 PUSH4 0xA457C2D7 EQ PUSH2 0x119 JUMPI POP DUP1 PUSH4 0xA9059CBB EQ PUSH2 0xE9 JUMPI PUSH4 0xDD62ED3E EQ PUSH2 0x9E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0xE5 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE5 JUMPI DUP1 PUSH1 0x20 SWAP3 PUSH2 0xBA PUSH2 0x5D2 JUMP JUMPDEST PUSH2 0xC2 PUSH2 0x5ED JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND DUP4 MSTORE PUSH1 0x1 DUP7 MSTORE DUP4 DUP4 KECCAK256 SWAP2 AND DUP3 MSTORE DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0xE5 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE5 JUMPI PUSH1 0x20 SWAP1 PUSH2 0x112 PUSH2 0x108 PUSH2 0x5D2 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER PUSH2 0x603 JUMP JUMPDEST MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST SWAP1 POP DUP3 CALLVALUE PUSH2 0x1BE JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1BE JUMPI PUSH2 0x134 PUSH2 0x5D2 JUMP JUMPDEST SWAP2 DUP4 PUSH1 0x24 CALLDATALOAD SWAP3 CALLER DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP2 DUP2 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP7 AND DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 SLOAD SWAP1 DUP3 DUP3 LT PUSH2 0x16D JUMPI PUSH1 0x20 DUP6 PUSH2 0x112 DUP6 DUP6 SUB DUP8 CALLER PUSH2 0x771 JUMP JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x20 DUP7 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST DUP1 REVERT JUMPDEST DUP4 DUP4 CALLVALUE PUSH2 0xE5 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE5 JUMPI DUP1 MLOAD SWAP1 DUP3 DUP5 SLOAD PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP1 DUP4 AND SWAP3 DUP4 ISZERO PUSH2 0x2D6 JUMPI JUMPDEST PUSH1 0x20 SWAP4 DUP5 DUP5 LT DUP2 EQ PUSH2 0x2C3 JUMPI DUP4 DUP9 MSTORE SWAP1 DUP2 ISZERO PUSH2 0x2A7 JUMPI POP PUSH1 0x1 EQ PUSH2 0x252 JUMPI JUMPDEST POP POP POP DUP3 SWAP1 SUB PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP5 GT DUP4 DUP6 LT OR PUSH2 0x23F JUMPI POP DUP3 SWAP2 DUP3 PUSH2 0x23B SWAP3 MSTORE DUP3 PUSH2 0x589 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x41 DUP6 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST DUP8 DUP8 MSTORE SWAP2 SWAP3 POP DUP6 SWAP2 DUP4 PUSH32 0x8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19B JUMPDEST DUP4 DUP6 LT PUSH2 0x293 JUMPI POP POP POP POP DUP4 ADD ADD DUP6 DUP1 DUP1 PUSH2 0x209 JUMP JUMPDEST DUP1 SLOAD DUP9 DUP7 ADD DUP4 ADD MSTORE SWAP4 ADD SWAP3 DUP5 SWAP1 DUP3 ADD PUSH2 0x27D JUMP JUMPDEST PUSH1 0xFF NOT AND DUP8 DUP6 ADD MSTORE POP POP ISZERO ISZERO PUSH1 0x5 SHL DUP5 ADD ADD SWAP1 POP DUP6 DUP1 DUP1 PUSH2 0x209 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP10 MSTORE PUSH1 0x22 DUP11 MSTORE PUSH1 0x24 DUP10 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x1EA JUMP JUMPDEST POP POP CALLVALUE PUSH2 0xE5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE5 JUMPI PUSH1 0x20 SWAP2 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x308 PUSH2 0x5D2 JUMP JUMPDEST AND DUP2 MSTORE DUP1 DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 DUP5 CALLVALUE PUSH2 0x1BE JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1BE JUMPI PUSH2 0x331 PUSH2 0x5D2 JUMP JUMPDEST CALLER DUP3 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE DUP4 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP5 MSTORE SWAP1 MSTORE DUP3 DUP3 KECCAK256 SLOAD PUSH1 0x24 CALLDATALOAD DUP2 ADD SWAP3 SWAP1 DUP4 LT PUSH2 0x36B JUMPI PUSH1 0x20 DUP5 PUSH2 0x112 DUP6 DUP6 CALLER PUSH2 0x771 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 DUP6 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0xE5 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE5 JUMPI PUSH1 0x20 SWAP1 MLOAD PUSH1 0x12 DUP2 MSTORE RETURN JUMPDEST DUP4 SWAP2 POP CALLVALUE PUSH2 0xE5 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE5 JUMPI PUSH2 0x3B6 PUSH2 0x5D2 JUMP JUMPDEST PUSH2 0x3BE PUSH2 0x5ED JUMP JUMPDEST SWAP2 DUP5 PUSH1 0x44 CALLDATALOAD SWAP5 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP2 DUP2 KECCAK256 CALLER DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 SLOAD SWAP1 PUSH1 0x0 NOT DUP3 SUB PUSH2 0x3F8 JUMPI JUMPDEST PUSH1 0x20 DUP7 PUSH2 0x112 DUP8 DUP8 DUP8 PUSH2 0x603 JUMP JUMPDEST DUP5 DUP3 LT PUSH2 0x421 JUMPI POP SWAP2 DUP4 SWAP2 PUSH2 0x416 PUSH1 0x20 SWAP7 SWAP6 PUSH2 0x112 SWAP6 SUB CALLER DUP4 PUSH2 0x771 JUMP JUMPDEST SWAP2 SWAP4 SWAP5 DUP2 SWAP4 POP PUSH2 0x3EA JUMP JUMPDEST PUSH1 0x64 SWAP1 PUSH1 0x20 DUP8 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP POP CALLVALUE PUSH2 0xE5 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE5 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x2 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP POP CALLVALUE PUSH2 0xE5 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE5 JUMPI PUSH1 0x20 SWAP1 PUSH2 0x112 PUSH2 0x4A3 PUSH2 0x5D2 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER PUSH2 0x771 JUMP JUMPDEST DUP5 SWAP1 DUP5 CALLVALUE PUSH2 0x585 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x585 JUMPI DUP3 PUSH1 0x3 SLOAD PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP1 DUP4 AND SWAP3 DUP4 ISZERO PUSH2 0x57B JUMPI JUMPDEST PUSH1 0x20 SWAP4 DUP5 DUP5 LT DUP2 EQ PUSH2 0x2C3 JUMPI DUP4 DUP9 MSTORE SWAP1 DUP2 ISZERO PUSH2 0x2A7 JUMPI POP PUSH1 0x1 EQ PUSH2 0x525 JUMPI POP POP POP DUP3 SWAP1 SUB PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP5 GT DUP4 DUP6 LT OR PUSH2 0x23F JUMPI POP DUP3 SWAP2 DUP3 PUSH2 0x23B SWAP3 MSTORE DUP3 PUSH2 0x589 JUMP JUMPDEST PUSH1 0x3 DUP8 MSTORE SWAP2 SWAP3 POP DUP6 SWAP2 DUP4 PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B JUMPDEST DUP4 DUP6 LT PUSH2 0x567 JUMPI POP POP POP POP DUP4 ADD ADD DUP6 DUP1 DUP1 PUSH2 0x209 JUMP JUMPDEST DUP1 SLOAD DUP9 DUP7 ADD DUP4 ADD MSTORE SWAP4 ADD SWAP3 DUP5 SWAP1 DUP3 ADD PUSH2 0x551 JUMP JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x4D5 JUMP JUMPDEST DUP3 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP2 DUP4 ADD DUP2 SWAP1 MSTORE SWAP1 SWAP4 SWAP3 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x5BE JUMPI POP POP PUSH1 0x40 SWAP3 SWAP4 POP PUSH1 0x0 DUP4 DUP3 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND ADD ADD SWAP1 JUMP JUMPDEST DUP2 DUP2 ADD DUP7 ADD MLOAD DUP5 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP6 ADD PUSH2 0x59C JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x5E8 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x5E8 JUMPI JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 DUP3 ISZERO PUSH2 0x71E JUMPI AND SWAP2 DUP3 ISZERO PUSH2 0x6CD JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE DUP1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 DUP1 DUP4 LT PUSH2 0x679 JUMPI PUSH1 0x40 DUP3 DUP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP6 DUP8 PUSH1 0x20 SWAP7 MSTORE DUP3 DUP7 MSTORE SUB DUP3 DUP3 KECCAK256 SSTORE DUP7 DUP2 MSTORE KECCAK256 DUP2 DUP2 SLOAD ADD SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 DUP3 ISZERO PUSH2 0x822 JUMPI AND SWAP2 DUP3 ISZERO PUSH2 0x7D2 JUMPI PUSH1 0x20 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 DUP4 PUSH1 0x0 MSTORE PUSH1 0x1 DUP3 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP6 PUSH1 0x0 MSTORE DUP3 MSTORE DUP1 PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXTCODEHASH 0xC6 0x5D PUSH31 0x460C6E5CC0EAF0CD82ADE8705ECCB8C10C25E9AEBB98C74FA20C38A64736F PUSH13 0x63430008120033000000000000 ",
							"sourceMap": "1532:11312:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;-1:-1:-1;;;;;1532:11312:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3894:6;1532:11312;;:::i;:::-;;;734:10:7;;3894:6:2;:::i;:::-;1532:11312;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;734:10:7;;1532:11312:2;;;;;;;;;;;;;;;;;;;;;6792:35;;;;1532:11312;;;;6928:34;1532:11312;;;;734:10:7;6928:34:2;:::i;1532:11312::-;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1532:11312:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1532:11312:2;;;;;-1:-1:-1;;1532:11312:2;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;1532:11312:2;;;;;;;;;;;;;;-1:-1:-1;1532:11312:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1532:11312:2;;;;;-1:-1:-1;;1532:11312:2;;;;;;;;-1:-1:-1;1532:11312:2;;;;;;-1:-1:-1;;;1532:11312:2;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1532:11312:2;;;;;;;;-1:-1:-1;;;;;1532:11312:2;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;734:10:7;1532:11312:2;;;;;;;;;;-1:-1:-1;;;;;1532:11312:2;;;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:2;;;734:10:7;6021:38:2;734:10:7;;;6021:38:2;:::i;1532:11312::-;-1:-1:-1;;;1532:11312:2;;;;;;;;;;;;;;;;;;;;;;;;;3186:2;1532:11312;;;;;;;;;;;;-1:-1:-1;;1532:11312:2;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;734:10:7;1532:11312:2;;;;;;11264:17;;;11244:37;;11240:243;;1532:11312;;5424:6;;;;;;:::i;11240:243::-;11305:26;;;1532:11312;;;;;;11432:25;1532:11312;;;5424:6;1532:11312;;734:10:7;11432:25:2;;:::i;:::-;11240:243;;;;;;;;1532:11312;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3342:12;1532:11312;;;;;;;;;;;;;;;;;;;;;;;4606:6;1532:11312;;:::i;:::-;;;734:10:7;;4606:6:2;:::i;1532:11312::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1532:11312:2;;;;;-1:-1:-1;;1532:11312:2;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;1532:11312:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1532:11312:2;;;;;;:::o;:::-;;;;;;;;-1:-1:-1;;;;;1532:11312:2;;;;;;:::o;7456:788::-;-1:-1:-1;;;;;1532:11312:2;;;;7552:18;;1532:11312;;;7630:16;;;1532:11312;;7568:1;1532:11312;;;;;;;;;;7801:21;;;;1532:11312;;;;;8163:26;1532:11312;;;;;;;;;;;;;;;;;;;;;;;;;;;;8163:26;7456:788::o;1532:11312::-;;;-1:-1:-1;;;1532:11312:2;;;;;;;;;;;;;;;;;-1:-1:-1;;;1532:11312:2;;;;;;;;;;-1:-1:-1;;;1532:11312:2;;;;;;;;;;;;;;;;;-1:-1:-1;;;1532:11312:2;;;;;;;;;;-1:-1:-1;;;1532:11312:2;;;;;;;;;;;;;;;;;-1:-1:-1;;;1532:11312:2;;;;;;;10457:340;-1:-1:-1;;;;;1532:11312:2;;;;10558:19;;1532:11312;;;10636:21;;;1532:11312;;;10758:32;1532:11312;;10575:1;1532:11312;;;;;10575:1;1532:11312;;10575:1;1532:11312;;;;;10575:1;1532:11312;;;;;;;10758:32;10457:340::o;1532:11312::-;;;-1:-1:-1;;;1532:11312:2;;;;;;;;;;;;;;;;;-1:-1:-1;;;1532:11312:2;;;;;;;;;;-1:-1:-1;;;1532:11312:2;;;;;;;;;;;;;;;;;-1:-1:-1;;;1532:11312:2;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "443400",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"allowance(address,address)": "2788",
								"approve(address,uint256)": "24387",
								"balanceOf(address)": "2563",
								"decimals()": "262",
								"decreaseAllowance(address,uint256)": "26828",
								"increaseAllowance(address,uint256)": "26763",
								"name()": "infinite",
								"symbol()": "infinite",
								"totalSupply()": "2324",
								"transfer(address,uint256)": "50966",
								"transferFrom(address,address,uint256)": "77385"
							},
							"internal": {
								"_afterTokenTransfer(address,address,uint256)": "infinite",
								"_approve(address,address,uint256)": "infinite",
								"_beforeTokenTransfer(address,address,uint256)": "infinite",
								"_burn(address,uint256)": "infinite",
								"_mint(address,uint256)": "infinite",
								"_spendAllowance(address,address,uint256)": "infinite",
								"_transfer(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 2,
									"value": "80"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "CALLVALUE",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "11"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSHSIZE",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "CODESIZE",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SUB",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "5"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 1532,
									"end": 12844,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 2,
									"value": "5"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "CODECOPY",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SUB",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SLT",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "11"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "GT",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "11"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "10"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP5",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "2"
								},
								{
									"begin": 1532,
									"end": 12844,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 2,
									"value": "10"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP4",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP5",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "GT",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "11"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "13"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "2"
								},
								{
									"begin": 1532,
									"end": 12844,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 2,
									"value": "13"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "GT",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "27"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 2046,
									"end": 2059,
									"name": "PUSH",
									"source": 2,
									"value": "3"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SLOAD",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP6",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP7",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP5",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SHR",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP5",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "16"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "tag",
									"source": -1,
									"value": "17"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "JUMPDEST",
									"source": -1
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP9",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP6",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "LT",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "EQ",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "18"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 2,
									"value": "1F"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP5",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP6",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "GT",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "tag",
									"source": -1,
									"value": "21"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "JUMPDEST",
									"source": -1
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP9",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP6",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "GT",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "EQ",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "22"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "24"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 2,
									"value": "25"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP7",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SHL",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SHR",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "NOT",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP7",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SHL",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "OR",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 2,
									"value": "26"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP4",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP5",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "GT",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "27"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 2069,
									"end": 2086,
									"name": "PUSH",
									"source": 2,
									"value": "4"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP6",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP7",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SLOAD",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP7",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SHR",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "29"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 2,
									"value": "30"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "LT",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "EQ",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "31"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "GT",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "33"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 2,
									"value": "34"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP6",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "GT",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "EQ",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "35"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP4",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP5",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP5",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP6",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "37"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 2,
									"value": "38"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SHL",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "NOT",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SHL",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SHR",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "NOT",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "OR",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 2,
									"value": "39"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH #[$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "CODECOPY",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "RETURN",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 2,
									"value": "37"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP4",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "CODESIZE",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "38"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 2,
									"value": "35"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP5",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 2,
									"value": "1F"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "NOT",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP9",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP6",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "KECCAK256",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP6",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP10",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "LT",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "41"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "LT",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "43"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 2,
									"value": "44"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SHL",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "39"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 2,
									"value": "43"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 2,
									"value": "F8"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP5",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "NOT",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SHL",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SHR",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "NOT",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "CODESIZE",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "44"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 2,
									"value": "41"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP6",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP8",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP10",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP8",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP7",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP5",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP6",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP5",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP9",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP4",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 2,
									"value": "33"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP8",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "KECCAK256",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP5",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP9",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 2,
									"value": "5"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SHR",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP5",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP10",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "LT",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "45"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 2,
									"value": "46"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 2,
									"value": "5"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SHR",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP8",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 2,
									"value": "47"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "LT",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "48"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "34"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 2,
									"value": "48"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP8",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "47"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 2,
									"value": "45"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "46"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 2,
									"value": "31"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 2,
									"value": "22"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP9",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 2,
									"value": "4E487B71"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 2,
									"value": "E0"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SHL",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 2,
									"value": "24"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "REVERT",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 2,
									"value": "29"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 2,
									"value": "7F"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "30"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 2,
									"value": "27"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 2,
									"value": "4E487B71"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 2,
									"value": "E0"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SHL",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 2,
									"value": "41"
								},
								{
									"begin": 2069,
									"end": 2086,
									"name": "PUSH",
									"source": 2,
									"value": "4"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 2,
									"value": "24"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "REVERT",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 2,
									"value": "24"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "CODESIZE",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "25"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 2,
									"value": "22"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP9",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP4",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 2,
									"value": "1F"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "NOT",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP8",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP11",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "KECCAK256",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 2,
									"value": "50"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP13",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "LT",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "51"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP5",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "GT",
									"source": -1
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "53"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 2,
									"value": "54"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SHL",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "26"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 2,
									"value": "53"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP9",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SHL",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 2,
									"value": "F8"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SHR",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "NOT",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "CODESIZE",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "54"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 2,
									"value": "51"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP6",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP7",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP13",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP8",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP6",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP5",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP4",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP5",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP4",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "50"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP6",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP9",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "KECCAK256",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP6",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP6",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 2,
									"value": "5"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SHR",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP12",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP7",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "LT",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "55"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 2,
									"value": "56"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP11",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP7",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP6",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP5",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP4",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 2,
									"value": "5"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SHR",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 2,
									"value": "57"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "LT",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "58"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "21"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 2,
									"value": "58"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP6",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP5",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP11",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "57"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 2,
									"value": "55"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "56"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 2,
									"value": "18"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 2,
									"value": "4E487B71"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 2,
									"value": "E0"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SHL",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 2,
									"value": "22"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 2,
									"value": "4"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 2,
									"value": "24"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "REVERT",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 2,
									"value": "16"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP4",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 2,
									"value": "7F"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP4",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "17"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 2,
									"value": "11"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "REVERT",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 2,
									"value": "1F"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "GT",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "LT",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "OR",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "27"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 2,
									"value": "2"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 2,
									"value": "1F"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP5",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SLT",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "11"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "GT",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "27"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "66"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 2,
									"value": "1F"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 1532,
									"end": 12844,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 2,
									"value": "66"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP5",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP8",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "GT",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "11"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 2,
									"value": "69"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "LT",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "70"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP4",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP5",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP6",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 2,
									"value": "70"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP6",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP5",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP5",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "69"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMP",
									"source": 2
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212203fc65d7e0460c6e5cc0eaf0cd82ade8705eccb8c10c25e9aebb98c74fa20c38a64736f6c63430008120033",
									".code": [
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SHR",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "6FDDE03"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "95EA7B3"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "10"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "18160DDD"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "23B872DD"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "313CE567"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "16"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "39509351"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "18"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "70A08231"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "95D89B41"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "A457C2D7"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "A9059CBB"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "DD62ED3E"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "28"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 2,
											"value": "28"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SLT",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "34"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 1532,
											"end": 12844,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 2,
											"value": "34"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "35"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 1532,
											"end": 12844,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 2,
											"value": "35"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SLT",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3894,
											"end": 3900,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "41"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 1532,
											"end": 12844,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 2,
											"value": "41"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 734,
											"end": 744,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 734,
											"end": 744,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 3894,
											"end": 3900,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3894,
											"end": 3900,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3894,
											"end": 3900,
											"name": "tag",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3894,
											"end": 3900,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SLT",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "46"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 1532,
											"end": 12844,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 2,
											"value": "46"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 734,
											"end": 744,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 734,
											"end": 744,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "A0"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SHL",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 6792,
											"end": 6827,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6792,
											"end": 6827,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6792,
											"end": 6827,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6792,
											"end": 6827,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "47"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 6928,
											"end": 6962,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 734,
											"end": 744,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 6928,
											"end": 6962,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 6928,
											"end": 6962,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 2,
											"value": "47"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "84"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "461BCD"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "E5"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SHL",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "207A65726F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SLT",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SHR",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "54"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 2,
											"value": "55"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "56"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP9",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "58"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 2,
											"value": "61"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "62"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 1532,
											"end": 12844,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 2,
											"value": "62"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "41"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19B"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 2,
											"value": "65"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "66"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "61"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 2,
											"value": "66"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP9",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "65"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 2,
											"value": "58"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SHL",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "61"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 2,
											"value": "56"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP10",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP11",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP10",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 2,
											"value": "54"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "7F"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "55"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SLT",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "72"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 1532,
											"end": 12844,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 2,
											"value": "72"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 2,
											"value": "18"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SLT",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "77"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 1532,
											"end": 12844,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 2,
											"value": "77"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 734,
											"end": 744,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "LT",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "78"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 734,
											"end": 744,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 6021,
											"end": 6059,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 734,
											"end": 744,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 734,
											"end": 744,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 734,
											"end": 744,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 6021,
											"end": 6059,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 6021,
											"end": 6059,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 2,
											"value": "78"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 2,
											"value": "16"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SLT",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3186,
											"end": 3188,
											"name": "PUSH",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SLT",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "89"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 1532,
											"end": 12844,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 2,
											"value": "89"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "90"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 1532,
											"end": 12844,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 2,
											"value": "90"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "A0"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SHL",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 734,
											"end": 744,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 11264,
											"end": 11281,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11264,
											"end": 11281,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11264,
											"end": 11281,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 11244,
											"end": 11281,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11244,
											"end": 11281,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 11240,
											"end": 11483,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "91"
										},
										{
											"begin": 11240,
											"end": 11483,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 2,
											"value": "92"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5424,
											"end": 5430,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 5424,
											"end": 5430,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5424,
											"end": 5430,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 5424,
											"end": 5430,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 5424,
											"end": 5430,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 5424,
											"end": 5430,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 5424,
											"end": 5430,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11240,
											"end": 11483,
											"name": "tag",
											"source": 2,
											"value": "91"
										},
										{
											"begin": 11240,
											"end": 11483,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11305,
											"end": 11331,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11305,
											"end": 11331,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11305,
											"end": 11331,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "94"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 11432,
											"end": 11457,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "96"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP7",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP6",
											"source": 2
										},
										{
											"begin": 5424,
											"end": 5430,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP6",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 734,
											"end": 744,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 11432,
											"end": 11457,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 11432,
											"end": 11457,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 11432,
											"end": 11457,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11432,
											"end": 11457,
											"name": "tag",
											"source": 2,
											"value": "96"
										},
										{
											"begin": 11432,
											"end": 11457,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11240,
											"end": 11483,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 11240,
											"end": 11483,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 11240,
											"end": 11483,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 11240,
											"end": 11483,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11240,
											"end": 11483,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 11240,
											"end": 11483,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11240,
											"end": 11483,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "92"
										},
										{
											"begin": 11240,
											"end": 11483,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 2,
											"value": "94"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "461BCD"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "E5"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SHL",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "1D"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SLT",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3342,
											"end": 3354,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 2,
											"value": "10"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SLT",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4606,
											"end": 4612,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "106"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 1532,
											"end": 12844,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 2,
											"value": "106"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 734,
											"end": 744,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 734,
											"end": 744,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 4606,
											"end": 4612,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 4606,
											"end": 4612,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "109"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SLT",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "109"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SHR",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "111"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 2,
											"value": "112"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "56"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP9",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "58"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "117"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "62"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 1532,
											"end": 12844,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 2,
											"value": "117"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "C2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 2,
											"value": "122"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "123"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "61"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 2,
											"value": "123"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP9",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "122"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 2,
											"value": "111"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "7F"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "112"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 2,
											"value": "109"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 2,
											"value": "125"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "126"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 2,
											"value": "126"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "125"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "128"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 2,
											"value": "128"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "128"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7456,
											"end": 8244,
											"name": "tag",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 7456,
											"end": 8244,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7552,
											"end": 7570,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7552,
											"end": 7570,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "132"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7630,
											"end": 7646,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7630,
											"end": 7646,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7630,
											"end": 7646,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "134"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 7568,
											"end": 7569,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 7801,
											"end": 7822,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7801,
											"end": 7822,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7801,
											"end": 7822,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7801,
											"end": 7822,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "136"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8163,
											"end": 8189,
											"name": "PUSH",
											"source": 2,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP6",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP7",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8163,
											"end": 8189,
											"name": "LOG3",
											"source": 2
										},
										{
											"begin": 7456,
											"end": 8244,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 2,
											"value": "136"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "45524332303A207472616E7366657220616D6F756E7420657863656564732062"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "616C616E6365"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "84"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 2,
											"value": "134"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "45524332303A207472616E7366657220746F20746865207A65726F2061646472"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "84"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 2,
											"value": "132"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "45524332303A207472616E736665722066726F6D20746865207A65726F206164"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "84"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 10457,
											"end": 10797,
											"name": "tag",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 10457,
											"end": 10797,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 10558,
											"end": 10577,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 10558,
											"end": 10577,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "138"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10636,
											"end": 10657,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 10636,
											"end": 10657,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 10636,
											"end": 10657,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "140"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 10758,
											"end": 10790,
											"name": "PUSH",
											"source": 2,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 10575,
											"end": 10576,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10575,
											"end": 10576,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 10575,
											"end": 10576,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10575,
											"end": 10576,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10758,
											"end": 10790,
											"name": "LOG3",
											"source": 2
										},
										{
											"begin": 10457,
											"end": 10797,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 2,
											"value": "140"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "45524332303A20617070726F766520746F20746865207A65726F206164647265"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "84"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 2,
											"value": "138"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "45524332303A20617070726F76652066726F6D20746865207A65726F20616464"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "72657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 2,
											"value": "84"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "REVERT",
											"source": 2
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC5267.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Counters.sol",
								"@openzeppelin/contracts/utils/ShortStrings.sol",
								"@openzeppelin/contracts/utils/StorageSlot.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/cryptography/EIP712.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/TurtleToken.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"increaseAllowance(address,uint256)": "39509351",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}. All two of these values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cac938788bc4be12101e59d45588b4e059579f4e61062e1cda8d6b06c0191b15\",\"dweb:/ipfs/QmV2JKCyjTVH3rkWNrfdJRhAT7tZ3usAN2XcnD4h53Mvih\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd\",\"dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a367861093b74443b137564d3f3c472f70bcf114739e62059c939f25e315706c\",\"dweb:/ipfs/Qmd7JMpcxD9RuQjK3uM3EzJUgSqdN8vzp8eytEiuwxQJ6h\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 153,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 159,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 161,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 163,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 165,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol": {
				"ERC20Permit": {
					"abi": [
						{
							"inputs": [],
							"name": "InvalidShortString",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "str",
									"type": "string"
								}
							],
							"name": "StringTooLong",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [],
							"name": "EIP712DomainChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "eip712Domain",
							"outputs": [
								{
									"internalType": "bytes1",
									"name": "fields",
									"type": "bytes1"
								},
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "version",
									"type": "string"
								},
								{
									"internalType": "uint256",
									"name": "chainId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "verifyingContract",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "salt",
									"type": "bytes32"
								},
								{
									"internalType": "uint256[]",
									"name": "extensions",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. _Available since v3.4._",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"EIP712DomainChanged()": {
								"details": "MAY be emitted to signal that the domain could have changed."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"constructor": {
								"details": "Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`. It's a good idea to use the same `name` that is defined as the ERC20 token name."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"eip712Domain()": {
								"details": "See {EIP-5267}. _Available since v4.9._"
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
							}
						},
						"stateVariables": {
							"_PERMIT_TYPEHASH_DEPRECATED_SLOT": {
								"custom:oz-renamed-from": "_PERMIT_TYPEHASH",
								"details": "In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`. However, to ensure consistency with the upgradeable transpiler, we will continue to reserve a slot."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"eip712Domain()": "84b0196e",
							"increaseAllowance(address,uint256)": "39509351",
							"name()": "06fdde03",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. _Available since v3.4._\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`. It's a good idea to use the same `name` that is defined as the ERC20 token name.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"eip712Domain()\":{\"details\":\"See {EIP-5267}. _Available since v4.9._\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"stateVariables\":{\"_PERMIT_TYPEHASH_DEPRECATED_SLOT\":{\"custom:oz-renamed-from\":\"_PERMIT_TYPEHASH\",\"details\":\"In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`. However, to ensure consistency with the upgradeable transpiler, we will continue to reserve a slot.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":\"ERC20Permit\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"keccak256\":\"0xac6c2efc64baccbde4904ae18ed45139c9aa8cff96d6888344d1e4d2eb8b659f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e416a280c610b6b7a5f158e4a41aacfaec01ef14d5d1de13b46be9e090265fc\",\"dweb:/ipfs/QmYZP2KrdyccBbhLZT42auhvBTMkwiwUS3V6HWb42rbwbG\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cac938788bc4be12101e59d45588b4e059579f4e61062e1cda8d6b06c0191b15\",\"dweb:/ipfs/QmV2JKCyjTVH3rkWNrfdJRhAT7tZ3usAN2XcnD4h53Mvih\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":{\"keccak256\":\"0xbb16110ffe0b625944fe7dd97adcf1158e514185c956a5628bc09be90d606174\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b5b412e554a4dd37a50f89ffcd7b9a6ef2ae5064f37619f89343b23d58ce89ca\",\"dweb:/ipfs/QmPWMdBvdFk8WBVv625wd1Ar7aehnBWtj1XfFRrRL5KpxJ\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd\",\"dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://28879d01fd22c07b44f006612775f8577defbe459cb01685c5e25cd518c91a71\",\"dweb:/ipfs/QmVgfkwv2Fxw6hhTcDUZhE7NkoSKjab3ipM7UaRbt6uXb5\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a367861093b74443b137564d3f3c472f70bcf114739e62059c939f25e315706c\",\"dweb:/ipfs/Qmd7JMpcxD9RuQjK3uM3EzJUgSqdN8vzp8eytEiuwxQJ6h\"]},\"@openzeppelin/contracts/utils/Counters.sol\":{\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://59e1c62884d55b70f3ae5432b44bb3166ad71ae3acd19c57ab6ddc3c87c325ee\",\"dweb:/ipfs/QmezuXg5GK5oeA4F91EZhozBFekhq5TD966bHPH18cCqhu\"]},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"keccak256\":\"0xc0e310c163edf15db45d4ff938113ab357f94fa86e61ea8e790853c4d2e13256\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://04db5bc05dcb05ba1f6ca2dfbead17adc8a2e2f911aa80b05e7a36d9eaf96516\",\"dweb:/ipfs/QmVkfHZbXVBUPsTopueCn3qGJX8aEjahFF3Fn4NcygLNm5\"]},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e26daf81e2252dc1fe1ce0e4b55c2eb7c6d1ee84ae6558d1a9554432ea1d32da\",\"dweb:/ipfs/Qmb1UANWiWq5pCKbmHSu772hd4nt374dVaghGmwSVNuk8Q\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b81d9ff6559ea5c47fc573e17ece6d9ba5d6839e213e6ebc3b4c5c8fe4199d7f\",\"dweb:/ipfs/QmPCW1bFisUzJkyjroY3yipwfism9RRCigCcK1hbXtVM8n\"]},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8b93a1e39a4a19eba1600b92c96f435442db88cac91e315c8291547a2a7bcfe2\",\"dweb:/ipfs/QmTm34KVe6uZBZwq8dZDNWwPcm24qBJdxqL3rPxBJ4LrMv\"]},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"keccak256\":\"0x8432884527a7ad91e6eed1cfc5a0811ae2073e5bca107bd0ca442e9236b03dbd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e3aa0eadab7aafcf91a95684765f778f64386f0368de88522ce873c21385278a\",\"dweb:/ipfs/QmPfaVAqWgH1QsT3dHVuL6jwMZbVKdoP8w1PvpiPT2FPWd\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cc8841b3cd48ad125e2f46323c8bad3aa0e88e399ec62acb9e57efa7e7c8058c\",\"dweb:/ipfs/QmSqE4mXHA2BXW58deDbXE8MTcsL5JSKNDbm23sVQxRLPS\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c50fcc459e49a9858b6d8ad5f911295cb7c9ab57567845a250bf0153f84a95c7\",\"dweb:/ipfs/QmcEW85JRzvDkQggxiBBLVAasXWdkhEysqypj9EaB6H2g6\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 153,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 159,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 161,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 163,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 165,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							},
							{
								"astId": 2093,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_nameFallback",
								"offset": 0,
								"slot": "5",
								"type": "t_string_storage"
							},
							{
								"astId": 2095,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_versionFallback",
								"offset": 0,
								"slot": "6",
								"type": "t_string_storage"
							},
							{
								"astId": 825,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_nonces",
								"offset": 0,
								"slot": "7",
								"type": "t_mapping(t_address,t_struct(Counter)1071_storage)"
							},
							{
								"astId": 833,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
								"offset": 0,
								"slot": "8",
								"type": "t_bytes32"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bytes32": {
								"encoding": "inplace",
								"label": "bytes32",
								"numberOfBytes": "32"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_struct(Counter)1071_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct Counters.Counter)",
								"numberOfBytes": "32",
								"value": "t_struct(Counter)1071_storage"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_struct(Counter)1071_storage": {
								"encoding": "inplace",
								"label": "struct Counters.Counter",
								"members": [
									{
										"astId": 1070,
										"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
										"label": "_value",
										"offset": 0,
										"slot": "0",
										"type": "t_uint256"
									}
								],
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"IERC20Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"decimals()": {
								"details": "Returns the decimals places of the token."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd\",\"dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
				"IERC20Permit": {
					"abi": [
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.",
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://28879d01fd22c07b44f006612775f8577defbe459cb01685c5e25cd518c91a71\",\"dweb:/ipfs/QmVgfkwv2Fxw6hhTcDUZhE7NkoSKjab3ipM7UaRbt6uXb5\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a367861093b74443b137564d3f3c472f70bcf114739e62059c939f25e315706c\",\"dweb:/ipfs/Qmd7JMpcxD9RuQjK3uM3EzJUgSqdN8vzp8eytEiuwxQJ6h\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Counters.sol": {
				"Counters": {
					"abi": [],
					"devdoc": {
						"author": "Matt Condon (@shrugs)",
						"details": "Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`",
						"kind": "dev",
						"methods": {},
						"title": "Counters",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/Counters.sol\":424:1395  library Counters {... */\n  0x80\n  dup1\n  0x40\n  mstore\n  jumpi(tag_1, callvalue)\n  dataSize(sub_0)\n  swap1\n  dup2\n  dataOffset(sub_0)\n  dup3\n  codecopy\n  address\n  dup2\n  assignImmutable(\"0xcd5a02d485074f67d63783a7acdae578618045c23ccf47fa4e3f1a01c11714ad\")\n  return\ntag_1:\n  0x00\n  dup1\n  revert\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Counters.sol\":424:1395  library Counters {... */\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212201ab5e9bac94912824cc03ae7702411d9f1763cc09f043182d066a3951912758964736f6c63430008120033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea26469706673582212201ab5e9bac94912824cc03ae7702411d9f1763cc09f043182d066a3951912758964736f6c63430008120033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BYTE 0xB5 0xE9 0xBA 0xC9 0x49 SLT DUP3 0x4C 0xC0 GASPRICE 0xE7 PUSH17 0x2411D9F1763CC09F043182D066A3951912 PUSH22 0x8964736F6C6343000812003300000000000000000000 ",
							"sourceMap": "424:971:8:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "600080fdfea26469706673582212201ab5e9bac94912824cc03ae7702411d9f1763cc09f043182d066a3951912758964736f6c63430008120033",
							"opcodes": "PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BYTE 0xB5 0xE9 0xBA 0xC9 0x49 SLT DUP3 0x4C 0xC0 GASPRICE 0xE7 PUSH17 0x2411D9F1763CC09F043182D066A3951912 PUSH22 0x8964736F6C6343000812003300000000000000000000 ",
							"sourceMap": "424:971:8:-:0;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "11600",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"internal": {
								"current(struct Counters.Counter storage pointer)": "infinite",
								"decrement(struct Counters.Counter storage pointer)": "infinite",
								"increment(struct Counters.Counter storage pointer)": "infinite",
								"reset(struct Counters.Counter storage pointer)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH",
									"source": 8,
									"value": "80"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "CALLVALUE",
									"source": 8
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH #[$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH [$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "CODECOPY",
									"source": 8
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "ADDRESS",
									"source": 8
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "ASSIGNIMMUTABLE",
									"source": 8,
									"value": "library_deploy_address"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "RETURN",
									"source": 8
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "tag",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "REVERT",
									"source": 8
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212201ab5e9bac94912824cc03ae7702411d9f1763cc09f043182d066a3951912758964736f6c63430008120033",
									".code": [
										{
											"begin": 424,
											"end": 1395,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 424,
											"end": 1395,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 424,
											"end": 1395,
											"name": "REVERT",
											"source": 8
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC5267.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Counters.sol",
								"@openzeppelin/contracts/utils/ShortStrings.sol",
								"@openzeppelin/contracts/utils/StorageSlot.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/cryptography/EIP712.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/TurtleToken.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Matt Condon (@shrugs)\",\"details\":\"Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Counters\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Counters.sol\":\"Counters\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Counters.sol\":{\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://59e1c62884d55b70f3ae5432b44bb3166ad71ae3acd19c57ab6ddc3c87c325ee\",\"dweb:/ipfs/QmezuXg5GK5oeA4F91EZhozBFekhq5TD966bHPH18cCqhu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/ShortStrings.sol": {
				"ShortStrings": {
					"abi": [
						{
							"inputs": [],
							"name": "InvalidShortString",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "str",
									"type": "string"
								}
							],
							"name": "StringTooLong",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "This library provides functions to convert short memory strings into a `ShortString` type that can be used as an immutable variable. Strings of arbitrary length can be optimized using this library if they are short enough (up to 31 bytes) by packing them with their length (1 byte) in a single EVM word (32 bytes). Additionally, a fallback mechanism can be used for every other case. Usage example: ```solidity contract Named {     using ShortStrings for *;     ShortString private immutable _name;     string private _nameFallback;     constructor(string memory contractName) {         _name = contractName.toShortStringWithFallback(_nameFallback);     }     function name() external view returns (string memory) {         return _name.toStringWithFallback(_nameFallback);     } } ```",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1235:4285  library ShortStrings {... */\n  0x80\n  dup1\n  0x40\n  mstore\n  jumpi(tag_1, callvalue)\n  dataSize(sub_0)\n  swap1\n  dup2\n  dataOffset(sub_0)\n  dup3\n  codecopy\n  address\n  dup2\n  assignImmutable(\"0xcd5a02d485074f67d63783a7acdae578618045c23ccf47fa4e3f1a01c11714ad\")\n  return\ntag_1:\n  0x00\n  dup1\n  revert\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1235:4285  library ShortStrings {... */\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212205ca854525a4cb06efa213271de43cf4042dc8d4d3983b6ea7f65aa182ffdf72e64736f6c63430008120033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea26469706673582212205ca854525a4cb06efa213271de43cf4042dc8d4d3983b6ea7f65aa182ffdf72e64736f6c63430008120033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5C 0xA8 SLOAD MSTORE GAS 0x4C 0xB0 PUSH15 0xFA213271DE43CF4042DC8D4D3983B6 0xEA PUSH32 0x65AA182FFDF72E64736F6C634300081200330000000000000000000000000000 ",
							"sourceMap": "1235:3050:9:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "600080fdfea26469706673582212205ca854525a4cb06efa213271de43cf4042dc8d4d3983b6ea7f65aa182ffdf72e64736f6c63430008120033",
							"opcodes": "PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5C 0xA8 SLOAD MSTORE GAS 0x4C 0xB0 PUSH15 0xFA213271DE43CF4042DC8D4D3983B6 0xEA PUSH32 0x65AA182FFDF72E64736F6C634300081200330000000000000000000000000000 ",
							"sourceMap": "1235:3050:9:-:0;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "11600",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"internal": {
								"byteLength(ShortString)": "infinite",
								"byteLengthWithFallback(ShortString,string storage pointer)": "infinite",
								"toShortString(string memory)": "infinite",
								"toShortStringWithFallback(string memory,string storage pointer)": "infinite",
								"toString(ShortString)": "infinite",
								"toStringWithFallback(ShortString,string storage pointer)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1235,
									"end": 4285,
									"name": "PUSH",
									"source": 9,
									"value": "80"
								},
								{
									"begin": 1235,
									"end": 4285,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 1235,
									"end": 4285,
									"name": "PUSH",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 1235,
									"end": 4285,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 1235,
									"end": 4285,
									"name": "CALLVALUE",
									"source": 9
								},
								{
									"begin": 1235,
									"end": 4285,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 1235,
									"end": 4285,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 1235,
									"end": 4285,
									"name": "PUSH #[$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1235,
									"end": 4285,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1235,
									"end": 4285,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 1235,
									"end": 4285,
									"name": "PUSH [$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1235,
									"end": 4285,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 1235,
									"end": 4285,
									"name": "CODECOPY",
									"source": 9
								},
								{
									"begin": 1235,
									"end": 4285,
									"name": "ADDRESS",
									"source": 9
								},
								{
									"begin": 1235,
									"end": 4285,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 1235,
									"end": 4285,
									"name": "ASSIGNIMMUTABLE",
									"source": 9,
									"value": "library_deploy_address"
								},
								{
									"begin": 1235,
									"end": 4285,
									"name": "RETURN",
									"source": 9
								},
								{
									"begin": 1235,
									"end": 4285,
									"name": "tag",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 1235,
									"end": 4285,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1235,
									"end": 4285,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 1235,
									"end": 4285,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 1235,
									"end": 4285,
									"name": "REVERT",
									"source": 9
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212205ca854525a4cb06efa213271de43cf4042dc8d4d3983b6ea7f65aa182ffdf72e64736f6c63430008120033",
									".code": [
										{
											"begin": 1235,
											"end": 4285,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1235,
											"end": 4285,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1235,
											"end": 4285,
											"name": "REVERT",
											"source": 9
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC5267.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Counters.sol",
								"@openzeppelin/contracts/utils/ShortStrings.sol",
								"@openzeppelin/contracts/utils/StorageSlot.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/cryptography/EIP712.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/TurtleToken.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"This library provides functions to convert short memory strings into a `ShortString` type that can be used as an immutable variable. Strings of arbitrary length can be optimized using this library if they are short enough (up to 31 bytes) by packing them with their length (1 byte) in a single EVM word (32 bytes). Additionally, a fallback mechanism can be used for every other case. Usage example: ```solidity contract Named {     using ShortStrings for *;     ShortString private immutable _name;     string private _nameFallback;     constructor(string memory contractName) {         _name = contractName.toShortStringWithFallback(_nameFallback);     }     function name() external view returns (string memory) {         return _name.toStringWithFallback(_nameFallback);     } } ```\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/ShortStrings.sol\":\"ShortStrings\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"keccak256\":\"0xc0e310c163edf15db45d4ff938113ab357f94fa86e61ea8e790853c4d2e13256\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://04db5bc05dcb05ba1f6ca2dfbead17adc8a2e2f911aa80b05e7a36d9eaf96516\",\"dweb:/ipfs/QmVkfHZbXVBUPsTopueCn3qGJX8aEjahFF3Fn4NcygLNm5\"]},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e26daf81e2252dc1fe1ce0e4b55c2eb7c6d1ee84ae6558d1a9554432ea1d32da\",\"dweb:/ipfs/Qmb1UANWiWq5pCKbmHSu772hd4nt374dVaghGmwSVNuk8Q\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/StorageSlot.sol": {
				"StorageSlot": {
					"abi": [],
					"devdoc": {
						"details": "Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._ _Available since v4.9 for `string`, `bytes`._",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/StorageSlot.sol\":1420:4105  library StorageSlot {... */\n  0x80\n  dup1\n  0x40\n  mstore\n  jumpi(tag_1, callvalue)\n  dataSize(sub_0)\n  swap1\n  dup2\n  dataOffset(sub_0)\n  dup3\n  codecopy\n  address\n  dup2\n  assignImmutable(\"0xcd5a02d485074f67d63783a7acdae578618045c23ccf47fa4e3f1a01c11714ad\")\n  return\ntag_1:\n  0x00\n  dup1\n  revert\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/StorageSlot.sol\":1420:4105  library StorageSlot {... */\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220cdf9192ad2c4694662a6dc4e3ac1d024e605739ce4a06302bad15ace091c894b64736f6c63430008120033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220cdf9192ad2c4694662a6dc4e3ac1d024e605739ce4a06302bad15ace091c894b64736f6c63430008120033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCD 0xF9 NOT 0x2A 0xD2 0xC4 PUSH10 0x4662A6DC4E3AC1D024E6 SDIV PUSH20 0x9CE4A06302BAD15ACE091C894B64736F6C634300 ADDMOD SLT STOP CALLER ",
							"sourceMap": "1420:2685:10:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "600080fdfea2646970667358221220cdf9192ad2c4694662a6dc4e3ac1d024e605739ce4a06302bad15ace091c894b64736f6c63430008120033",
							"opcodes": "PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCD 0xF9 NOT 0x2A 0xD2 0xC4 PUSH10 0x4662A6DC4E3AC1D024E6 SDIV PUSH20 0x9CE4A06302BAD15ACE091C894B64736F6C634300 ADDMOD SLT STOP CALLER ",
							"sourceMap": "1420:2685:10:-:0;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "11600",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"internal": {
								"getAddressSlot(bytes32)": "infinite",
								"getBooleanSlot(bytes32)": "infinite",
								"getBytes32Slot(bytes32)": "infinite",
								"getBytesSlot(bytes storage pointer)": "infinite",
								"getBytesSlot(bytes32)": "infinite",
								"getStringSlot(bytes32)": "infinite",
								"getStringSlot(string storage pointer)": "infinite",
								"getUint256Slot(bytes32)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1420,
									"end": 4105,
									"name": "PUSH",
									"source": 10,
									"value": "80"
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "CALLVALUE",
									"source": 10
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "PUSH #[$]",
									"source": 10,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "PUSH [$]",
									"source": 10,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "CODECOPY",
									"source": 10
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "ADDRESS",
									"source": 10
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "ASSIGNIMMUTABLE",
									"source": 10,
									"value": "library_deploy_address"
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "RETURN",
									"source": 10
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "tag",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "REVERT",
									"source": 10
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220cdf9192ad2c4694662a6dc4e3ac1d024e605739ce4a06302bad15ace091c894b64736f6c63430008120033",
									".code": [
										{
											"begin": 1420,
											"end": 4105,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1420,
											"end": 4105,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1420,
											"end": 4105,
											"name": "REVERT",
											"source": 10
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC5267.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Counters.sol",
								"@openzeppelin/contracts/utils/ShortStrings.sol",
								"@openzeppelin/contracts/utils/StorageSlot.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/cryptography/EIP712.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/TurtleToken.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._ _Available since v4.9 for `string`, `bytes`._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":\"StorageSlot\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e26daf81e2252dc1fe1ce0e4b55c2eb7c6d1ee84ae6558d1a9554432ea1d32da\",\"dweb:/ipfs/Qmb1UANWiWq5pCKbmHSu772hd4nt374dVaghGmwSVNuk8Q\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"Strings": {
					"abi": [],
					"devdoc": {
						"details": "String operations.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/Strings.sol\":220:2779  library Strings {... */\n  0x80\n  dup1\n  0x40\n  mstore\n  jumpi(tag_1, callvalue)\n  dataSize(sub_0)\n  swap1\n  dup2\n  dataOffset(sub_0)\n  dup3\n  codecopy\n  address\n  dup2\n  assignImmutable(\"0xcd5a02d485074f67d63783a7acdae578618045c23ccf47fa4e3f1a01c11714ad\")\n  return\ntag_1:\n  0x00\n  dup1\n  revert\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":220:2779  library Strings {... */\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220e5622d6027cf0f1273bbfe504a1890a9116ccbfc2e71312f1ba921e425e0788564736f6c63430008120033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220e5622d6027cf0f1273bbfe504a1890a9116ccbfc2e71312f1ba921e425e0788564736f6c63430008120033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE5 PUSH3 0x2D6027 0xCF 0xF SLT PUSH20 0xBBFE504A1890A9116CCBFC2E71312F1BA921E425 0xE0 PUSH25 0x8564736F6C6343000812003300000000000000000000000000 ",
							"sourceMap": "220:2559:11:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "600080fdfea2646970667358221220e5622d6027cf0f1273bbfe504a1890a9116ccbfc2e71312f1ba921e425e0788564736f6c63430008120033",
							"opcodes": "PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE5 PUSH3 0x2D6027 0xCF 0xF SLT PUSH20 0xBBFE504A1890A9116CCBFC2E71312F1BA921E425 0xE0 PUSH25 0x8564736F6C6343000812003300000000000000000000000000 ",
							"sourceMap": "220:2559:11:-:0;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "11600",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"internal": {
								"equal(string memory,string memory)": "infinite",
								"toHexString(address)": "infinite",
								"toHexString(uint256)": "infinite",
								"toHexString(uint256,uint256)": "infinite",
								"toString(int256)": "infinite",
								"toString(uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 220,
									"end": 2779,
									"name": "PUSH",
									"source": 11,
									"value": "80"
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "PUSH",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "CALLVALUE",
									"source": 11
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "PUSH #[$]",
									"source": 11,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "PUSH [$]",
									"source": 11,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "CODECOPY",
									"source": 11
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "ADDRESS",
									"source": 11
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "ASSIGNIMMUTABLE",
									"source": 11,
									"value": "library_deploy_address"
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "RETURN",
									"source": 11
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "tag",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "REVERT",
									"source": 11
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220e5622d6027cf0f1273bbfe504a1890a9116ccbfc2e71312f1ba921e425e0788564736f6c63430008120033",
									".code": [
										{
											"begin": 220,
											"end": 2779,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 220,
											"end": 2779,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 220,
											"end": 2779,
											"name": "REVERT",
											"source": 11
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC5267.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Counters.sol",
								"@openzeppelin/contracts/utils/ShortStrings.sol",
								"@openzeppelin/contracts/utils/StorageSlot.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/cryptography/EIP712.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/TurtleToken.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b81d9ff6559ea5c47fc573e17ece6d9ba5d6839e213e6ebc3b4c5c8fe4199d7f\",\"dweb:/ipfs/QmPCW1bFisUzJkyjroY3yipwfism9RRCigCcK1hbXtVM8n\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cc8841b3cd48ad125e2f46323c8bad3aa0e88e399ec62acb9e57efa7e7c8058c\",\"dweb:/ipfs/QmSqE4mXHA2BXW58deDbXE8MTcsL5JSKNDbm23sVQxRLPS\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c50fcc459e49a9858b6d8ad5f911295cb7c9ab57567845a250bf0153f84a95c7\",\"dweb:/ipfs/QmcEW85JRzvDkQggxiBBLVAasXWdkhEysqypj9EaB6H2g6\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
				"ECDSA": {
					"abi": [],
					"devdoc": {
						"details": "Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":369:9130  library ECDSA {... */\n  0x80\n  dup1\n  0x40\n  mstore\n  jumpi(tag_1, callvalue)\n  dataSize(sub_0)\n  swap1\n  dup2\n  dataOffset(sub_0)\n  dup3\n  codecopy\n  address\n  dup2\n  assignImmutable(\"0xcd5a02d485074f67d63783a7acdae578618045c23ccf47fa4e3f1a01c11714ad\")\n  return\ntag_1:\n  0x00\n  dup1\n  revert\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":369:9130  library ECDSA {... */\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122058c3caf29de2cead89f559f501fa4f84f162f43627feb0e8efb7daeb1830c3b864736f6c63430008120033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea264697066735822122058c3caf29de2cead89f559f501fa4f84f162f43627feb0e8efb7daeb1830c3b864736f6c63430008120033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PC 0xC3 0xCA CALLCODE SWAP14 0xE2 0xCE 0xAD DUP10 CREATE2 MSIZE CREATE2 ADD STATICCALL 0x4F DUP5 CALL PUSH3 0xF43627 INVALID 0xB0 0xE8 0xEF 0xB7 0xDA 0xEB XOR ADDRESS 0xC3 0xB8 PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ",
							"sourceMap": "369:8761:12:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "600080fdfea264697066735822122058c3caf29de2cead89f559f501fa4f84f162f43627feb0e8efb7daeb1830c3b864736f6c63430008120033",
							"opcodes": "PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PC 0xC3 0xCA CALLCODE SWAP14 0xE2 0xCE 0xAD DUP10 CREATE2 MSIZE CREATE2 ADD STATICCALL 0x4F DUP5 CALL PUSH3 0xF43627 INVALID 0xB0 0xE8 0xEF 0xB7 0xDA 0xEB XOR ADDRESS 0xC3 0xB8 PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ",
							"sourceMap": "369:8761:12:-:0;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "11600",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"internal": {
								"_throwError(enum ECDSA.RecoverError)": "infinite",
								"recover(bytes32,bytes memory)": "infinite",
								"recover(bytes32,bytes32,bytes32)": "infinite",
								"recover(bytes32,uint8,bytes32,bytes32)": "infinite",
								"toDataWithIntendedValidatorHash(address,bytes memory)": "infinite",
								"toEthSignedMessageHash(bytes memory)": "infinite",
								"toEthSignedMessageHash(bytes32)": "infinite",
								"toTypedDataHash(bytes32,bytes32)": "infinite",
								"tryRecover(bytes32,bytes memory)": "infinite",
								"tryRecover(bytes32,bytes32,bytes32)": "infinite",
								"tryRecover(bytes32,uint8,bytes32,bytes32)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 369,
									"end": 9130,
									"name": "PUSH",
									"source": 12,
									"value": "80"
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "PUSH",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "CALLVALUE",
									"source": 12
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "PUSH #[$]",
									"source": 12,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "PUSH [$]",
									"source": 12,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "CODECOPY",
									"source": 12
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "ADDRESS",
									"source": 12
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "ASSIGNIMMUTABLE",
									"source": 12,
									"value": "library_deploy_address"
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "RETURN",
									"source": 12
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "tag",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "REVERT",
									"source": 12
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122058c3caf29de2cead89f559f501fa4f84f162f43627feb0e8efb7daeb1830c3b864736f6c63430008120033",
									".code": [
										{
											"begin": 369,
											"end": 9130,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 369,
											"end": 9130,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 369,
											"end": 9130,
											"name": "REVERT",
											"source": 12
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC5267.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Counters.sol",
								"@openzeppelin/contracts/utils/ShortStrings.sol",
								"@openzeppelin/contracts/utils/StorageSlot.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/cryptography/EIP712.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/TurtleToken.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":\"ECDSA\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b81d9ff6559ea5c47fc573e17ece6d9ba5d6839e213e6ebc3b4c5c8fe4199d7f\",\"dweb:/ipfs/QmPCW1bFisUzJkyjroY3yipwfism9RRCigCcK1hbXtVM8n\"]},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8b93a1e39a4a19eba1600b92c96f435442db88cac91e315c8291547a2a7bcfe2\",\"dweb:/ipfs/QmTm34KVe6uZBZwq8dZDNWwPcm24qBJdxqL3rPxBJ4LrMv\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cc8841b3cd48ad125e2f46323c8bad3aa0e88e399ec62acb9e57efa7e7c8058c\",\"dweb:/ipfs/QmSqE4mXHA2BXW58deDbXE8MTcsL5JSKNDbm23sVQxRLPS\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c50fcc459e49a9858b6d8ad5f911295cb7c9ab57567845a250bf0153f84a95c7\",\"dweb:/ipfs/QmcEW85JRzvDkQggxiBBLVAasXWdkhEysqypj9EaB6H2g6\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/cryptography/EIP712.sol": {
				"EIP712": {
					"abi": [
						{
							"inputs": [],
							"name": "InvalidShortString",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "str",
									"type": "string"
								}
							],
							"name": "StringTooLong",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [],
							"name": "EIP712DomainChanged",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "eip712Domain",
							"outputs": [
								{
									"internalType": "bytes1",
									"name": "fields",
									"type": "bytes1"
								},
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "version",
									"type": "string"
								},
								{
									"internalType": "uint256",
									"name": "chainId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "verifyingContract",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "salt",
									"type": "bytes32"
								},
								{
									"internalType": "uint256[]",
									"name": "extensions",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"custom:oz-upgrades-unsafe-allow": "state-variable-immutable state-variable-assignment",
						"details": "https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data. The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in their contracts using a combination of `abi.encode` and `keccak256`. This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the separator from the immutable values, which is cheaper than accessing a cached version in cold storage. _Available since v3.4._",
						"events": {
							"EIP712DomainChanged()": {
								"details": "MAY be emitted to signal that the domain could have changed."
							}
						},
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the domain separator and parameter caches. The meaning of `name` and `version` is specified in https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]: - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol. - `version`: the current major version of the signing domain. NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart contract upgrade]."
							},
							"eip712Domain()": {
								"details": "See {EIP-5267}. _Available since v4.9._"
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"eip712Domain()": "84b0196e"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable state-variable-assignment\",\"details\":\"https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data. The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in their contracts using a combination of `abi.encode` and `keccak256`. This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the separator from the immutable values, which is cheaper than accessing a cached version in cold storage. _Available since v3.4._\",\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the domain separator and parameter caches. The meaning of `name` and `version` is specified in https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]: - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol. - `version`: the current major version of the signing domain. NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart contract upgrade].\"},\"eip712Domain()\":{\"details\":\"See {EIP-5267}. _Available since v4.9._\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":\"EIP712\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"keccak256\":\"0xac6c2efc64baccbde4904ae18ed45139c9aa8cff96d6888344d1e4d2eb8b659f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e416a280c610b6b7a5f158e4a41aacfaec01ef14d5d1de13b46be9e090265fc\",\"dweb:/ipfs/QmYZP2KrdyccBbhLZT42auhvBTMkwiwUS3V6HWb42rbwbG\"]},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"keccak256\":\"0xc0e310c163edf15db45d4ff938113ab357f94fa86e61ea8e790853c4d2e13256\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://04db5bc05dcb05ba1f6ca2dfbead17adc8a2e2f911aa80b05e7a36d9eaf96516\",\"dweb:/ipfs/QmVkfHZbXVBUPsTopueCn3qGJX8aEjahFF3Fn4NcygLNm5\"]},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e26daf81e2252dc1fe1ce0e4b55c2eb7c6d1ee84ae6558d1a9554432ea1d32da\",\"dweb:/ipfs/Qmb1UANWiWq5pCKbmHSu772hd4nt374dVaghGmwSVNuk8Q\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b81d9ff6559ea5c47fc573e17ece6d9ba5d6839e213e6ebc3b4c5c8fe4199d7f\",\"dweb:/ipfs/QmPCW1bFisUzJkyjroY3yipwfism9RRCigCcK1hbXtVM8n\"]},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8b93a1e39a4a19eba1600b92c96f435442db88cac91e315c8291547a2a7bcfe2\",\"dweb:/ipfs/QmTm34KVe6uZBZwq8dZDNWwPcm24qBJdxqL3rPxBJ4LrMv\"]},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"keccak256\":\"0x8432884527a7ad91e6eed1cfc5a0811ae2073e5bca107bd0ca442e9236b03dbd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e3aa0eadab7aafcf91a95684765f778f64386f0368de88522ce873c21385278a\",\"dweb:/ipfs/QmPfaVAqWgH1QsT3dHVuL6jwMZbVKdoP8w1PvpiPT2FPWd\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cc8841b3cd48ad125e2f46323c8bad3aa0e88e399ec62acb9e57efa7e7c8058c\",\"dweb:/ipfs/QmSqE4mXHA2BXW58deDbXE8MTcsL5JSKNDbm23sVQxRLPS\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c50fcc459e49a9858b6d8ad5f911295cb7c9ab57567845a250bf0153f84a95c7\",\"dweb:/ipfs/QmcEW85JRzvDkQggxiBBLVAasXWdkhEysqypj9EaB6H2g6\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 2093,
								"contract": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
								"label": "_nameFallback",
								"offset": 0,
								"slot": "0",
								"type": "t_string_storage"
							},
							{
								"astId": 2095,
								"contract": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
								"label": "_versionFallback",
								"offset": 0,
								"slot": "1",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/math/Math.sol": {
				"Math": {
					"abi": [],
					"devdoc": {
						"details": "Standard math utilities missing in the Solidity language.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/math/Math.sol\":202:12784  library Math {... */\n  0x80\n  dup1\n  0x40\n  mstore\n  jumpi(tag_1, callvalue)\n  dataSize(sub_0)\n  swap1\n  dup2\n  dataOffset(sub_0)\n  dup3\n  codecopy\n  address\n  dup2\n  assignImmutable(\"0xcd5a02d485074f67d63783a7acdae578618045c23ccf47fa4e3f1a01c11714ad\")\n  return\ntag_1:\n  0x00\n  dup1\n  revert\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":202:12784  library Math {... */\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212209638d3cfa2e77349effe581dbfb73b43688cfd40394770445077709cfaa88eef64736f6c63430008120033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea26469706673582212209638d3cfa2e77349effe581dbfb73b43688cfd40394770445077709cfaa88eef64736f6c63430008120033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP7 CODESIZE 0xD3 0xCF LOG2 0xE7 PUSH20 0x49EFFE581DBFB73B43688CFD4039477044507770 SWAP13 STATICCALL 0xA8 DUP15 0xEF PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ",
							"sourceMap": "202:12582:14:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "600080fdfea26469706673582212209638d3cfa2e77349effe581dbfb73b43688cfd40394770445077709cfaa88eef64736f6c63430008120033",
							"opcodes": "PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP7 CODESIZE 0xD3 0xCF LOG2 0xE7 PUSH20 0x49EFFE581DBFB73B43688CFD4039477044507770 SWAP13 STATICCALL 0xA8 DUP15 0xEF PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ",
							"sourceMap": "202:12582:14:-:0;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "11600",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"internal": {
								"average(uint256,uint256)": "infinite",
								"ceilDiv(uint256,uint256)": "infinite",
								"log10(uint256)": "infinite",
								"log10(uint256,enum Math.Rounding)": "infinite",
								"log2(uint256)": "infinite",
								"log2(uint256,enum Math.Rounding)": "infinite",
								"log256(uint256)": "infinite",
								"log256(uint256,enum Math.Rounding)": "infinite",
								"max(uint256,uint256)": "infinite",
								"min(uint256,uint256)": "infinite",
								"mulDiv(uint256,uint256,uint256)": "infinite",
								"mulDiv(uint256,uint256,uint256,enum Math.Rounding)": "infinite",
								"sqrt(uint256)": "infinite",
								"sqrt(uint256,enum Math.Rounding)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 202,
									"end": 12784,
									"name": "PUSH",
									"source": 14,
									"value": "80"
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "PUSH",
									"source": 14,
									"value": "40"
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "CALLVALUE",
									"source": 14
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "1"
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "PUSH #[$]",
									"source": 14,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "PUSH [$]",
									"source": 14,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "CODECOPY",
									"source": 14
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "ADDRESS",
									"source": 14
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "ASSIGNIMMUTABLE",
									"source": 14,
									"value": "library_deploy_address"
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "RETURN",
									"source": 14
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "tag",
									"source": 14,
									"value": "1"
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "REVERT",
									"source": 14
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212209638d3cfa2e77349effe581dbfb73b43688cfd40394770445077709cfaa88eef64736f6c63430008120033",
									".code": [
										{
											"begin": 202,
											"end": 12784,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 202,
											"end": 12784,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 202,
											"end": 12784,
											"name": "REVERT",
											"source": 14
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC5267.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Counters.sol",
								"@openzeppelin/contracts/utils/ShortStrings.sol",
								"@openzeppelin/contracts/utils/StorageSlot.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/cryptography/EIP712.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/TurtleToken.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cc8841b3cd48ad125e2f46323c8bad3aa0e88e399ec62acb9e57efa7e7c8058c\",\"dweb:/ipfs/QmSqE4mXHA2BXW58deDbXE8MTcsL5JSKNDbm23sVQxRLPS\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/math/SignedMath.sol": {
				"SignedMath": {
					"abi": [],
					"devdoc": {
						"details": "Standard signed math utilities missing in the Solidity language.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/math/SignedMath.sol\":215:1262  library SignedMath {... */\n  0x80\n  dup1\n  0x40\n  mstore\n  jumpi(tag_1, callvalue)\n  dataSize(sub_0)\n  swap1\n  dup2\n  dataOffset(sub_0)\n  dup3\n  codecopy\n  address\n  dup2\n  assignImmutable(\"0xcd5a02d485074f67d63783a7acdae578618045c23ccf47fa4e3f1a01c11714ad\")\n  return\ntag_1:\n  0x00\n  dup1\n  revert\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/math/SignedMath.sol\":215:1262  library SignedMath {... */\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220dbe5d785a375d7df71b26e0d40ca27941b49ab97e5f852d342e1c3d6730adee664736f6c63430008120033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220dbe5d785a375d7df71b26e0d40ca27941b49ab97e5f852d342e1c3d6730adee664736f6c63430008120033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDB 0xE5 0xD7 DUP6 LOG3 PUSH22 0xD7DF71B26E0D40CA27941B49AB97E5F852D342E1C3D6 PUSH20 0xADEE664736F6C63430008120033000000000000 ",
							"sourceMap": "215:1047:15:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "600080fdfea2646970667358221220dbe5d785a375d7df71b26e0d40ca27941b49ab97e5f852d342e1c3d6730adee664736f6c63430008120033",
							"opcodes": "PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDB 0xE5 0xD7 DUP6 LOG3 PUSH22 0xD7DF71B26E0D40CA27941B49AB97E5F852D342E1C3D6 PUSH20 0xADEE664736F6C63430008120033000000000000 ",
							"sourceMap": "215:1047:15:-:0;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "11600",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"internal": {
								"abs(int256)": "infinite",
								"average(int256,int256)": "infinite",
								"max(int256,int256)": "infinite",
								"min(int256,int256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 215,
									"end": 1262,
									"name": "PUSH",
									"source": 15,
									"value": "80"
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "DUP1",
									"source": 15
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "PUSH",
									"source": 15,
									"value": "40"
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "CALLVALUE",
									"source": 15
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "PUSH [tag]",
									"source": 15,
									"value": "1"
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "JUMPI",
									"source": 15
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "PUSH #[$]",
									"source": 15,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "SWAP1",
									"source": 15
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "DUP2",
									"source": 15
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "PUSH [$]",
									"source": 15,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "CODECOPY",
									"source": 15
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "ADDRESS",
									"source": 15
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "DUP2",
									"source": 15
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "ASSIGNIMMUTABLE",
									"source": 15,
									"value": "library_deploy_address"
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "RETURN",
									"source": 15
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "tag",
									"source": 15,
									"value": "1"
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "JUMPDEST",
									"source": 15
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "DUP1",
									"source": 15
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "REVERT",
									"source": 15
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220dbe5d785a375d7df71b26e0d40ca27941b49ab97e5f852d342e1c3d6730adee664736f6c63430008120033",
									".code": [
										{
											"begin": 215,
											"end": 1262,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 215,
											"end": 1262,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 215,
											"end": 1262,
											"name": "REVERT",
											"source": 15
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC5267.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Counters.sol",
								"@openzeppelin/contracts/utils/ShortStrings.sol",
								"@openzeppelin/contracts/utils/StorageSlot.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/cryptography/EIP712.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/TurtleToken.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":\"SignedMath\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c50fcc459e49a9858b6d8ad5f911295cb7c9ab57567845a250bf0153f84a95c7\",\"dweb:/ipfs/QmcEW85JRzvDkQggxiBBLVAasXWdkhEysqypj9EaB6H2g6\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/TurtleToken.sol": {
				"TurtleToken": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "initialSupply",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "_exchangeRate",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [],
							"name": "InvalidShortString",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "str",
									"type": "string"
								}
							],
							"name": "StringTooLong",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [],
							"name": "EIP712DomainChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "buyer",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "ethAmount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "tokenAmount",
									"type": "uint256"
								}
							],
							"name": "TokensPurchased",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "seller",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "tokenAmount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "ethAmount",
									"type": "uint256"
								}
							],
							"name": "TokensSold",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "buyTokens",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "eip712Domain",
							"outputs": [
								{
									"internalType": "bytes1",
									"name": "fields",
									"type": "bytes1"
								},
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "version",
									"type": "string"
								},
								{
									"internalType": "uint256",
									"name": "chainId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "verifyingContract",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "salt",
									"type": "bytes32"
								},
								{
									"internalType": "uint256[]",
									"name": "extensions",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "exchangeRate",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "mint",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenAmount",
									"type": "uint256"
								}
							],
							"name": "sellTokens",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "newRate",
									"type": "uint256"
								}
							],
							"name": "setExchangeRate",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "withdrawEth",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"EIP712DomainChanged()": {
								"details": "MAY be emitted to signal that the domain could have changed."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"eip712Domain()": {
								"details": "See {EIP-5267}. _Available since v4.9._"
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n  0x0160\n  jumpi(tag_8, callvalue)\n  0x1f\n  swap1\n  sub(shl(0x40, 0x01), 0x01)\n  swap1\n  not(0x1f)\n  swap1\n  bytecodeSize\n  swap1\n  codesize\n  dup3\n  swap1\n  sub\n  dup6\n  dup2\n  add\n  dup5\n  and\n  dup3\n  add\n  swap1\n  dup6\n  dup3\n  gt\n  dup4\n  dup4\n  lt\n  or\n  tag_6\n  jumpi\n  dup1\n  dup4\n  swap2\n  0x40\n  swap6\n  dup7\n  swap5\n  dup6\n  mstore\n  dup4\n  codecopy\n  dup2\n  add\n  sub\n  slt\n  tag_8\n  jumpi\n  dup1\n  mload\n  0x20\n  dup1\n  swap3\n  add\n  mload\n  swap2\n  dup4\n  mload\n  swap5\n  tag_10\n  dup7\n  tag_1\n  jump\t// in\ntag_10:\n  0x0b\n  dup7\n  mstore\n  dup2\n  dup7\n  add\n  swap7\n  shl(0xa9, 0x2a3ab93a3632aa37b5b2b7)\n  swap9\n  dup10\n  dup10\n  mstore\n  dup7\n  mload\n  swap10\n  tag_11\n  dup12\n  tag_1\n  jump\t// in\ntag_11:\n  0x0b\n  dup12\n  mstore\n  dup5\n  dup12\n  add\n  mstore\n  dup7\n  mload\n  swap10\n  tag_12\n  dup12\n  tag_1\n  jump\t// in\ntag_12:\n  0x04\n  swap4\n  dup5\n  dup13\n  mstore\n  shl(0xe2, 0x15155495)\n  dup7\n  dup14\n  add\n  mstore\n  dup9\n  mload\n  swap12\n  dup13\n  swap3\n  tag_13\n  dup5\n  tag_1\n  jump\t// in\ntag_13:\n  dup8\n  0x01\n  swap5\n  dup6\n  dup2\n  mstore\n  add\n  swap4\n  shl(0xf8, 0x31)\n  dup6\n  mstore\n  dup2\n  mload\n  dup8\n  dup2\n  gt\n  tag_27\n  jumpi\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2046:2059  _name = name_ */\n  0x03\n    /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n  swap3\n  dup4\n  sload\n  dup4\n  dup2\n  dup2\n  shr\n  swap2\n  and\n  dup1\n  iszero\n  tag_16\n  jumpi\ntag_17:\n  dup13\n  dup3\n  lt\n  eq\n  tag_18\n  jumpi\n  swap1\n  dup12\n  dup3\n  dup11\n  dup6\n  swap5\n  gt\n  tag_20\n  jumpi\ntag_21:\n  pop\n  pop\n  dup12\n  swap1\n  dup10\n  dup4\n  gt\n  0x01\n  eq\n  tag_22\n  jumpi\n  0x00\n  swap3\n  tag_24\n  jumpi\ntag_25:\n  pop\n  pop\n  not(0x00)\n  dup3\n  dup6\n  shl\n  shr\n  not\n  and\n  swap1\n  dup3\n  shl\n  or\n  dup3\n  sstore\ntag_26:\n  dup3\n  mload\n  swap3\n  dup8\n  dup5\n  gt\n  tag_27\n  jumpi\n  dup9\n  sload\n  dup3\n  dup2\n  dup2\n  shr\n  swap2\n  and\n  dup1\n  iszero\n  tag_29\n  jumpi\ntag_30:\n  dup12\n  dup3\n  lt\n  eq\n  tag_31\n  jumpi\n  dup8\n  dup2\n  gt\n  tag_33\n  jumpi\ntag_34:\n  pop\n  dup10\n  swap1\n  dup8\n  dup6\n  gt\n  0x01\n  eq\n  tag_35\n  jumpi\n  dup5\n  swap6\n  pop\n  swap1\n  dup5\n  swap3\n  swap2\n  0x00\n  swap6\n  tag_37\n  jumpi\ntag_38:\n  pop\n  pop\n  shl\n  swap3\n  not(0x00)\n  swap2\n  shl\n  shr\n  not\n  and\n  or\n  dup5\n  sstore\ntag_39:\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3251:3296  name.toShortStringWithFallback(_nameFallback) */\n  tag_40\n  dup10\n  tag_2\n  jump\t// in\ntag_40:\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3243:3296  _name = name.toShortStringWithFallback(_nameFallback) */\n  swap10\n  0x0120\n  swap11\n  dup12\n  mstore\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3317:3368  version.toShortStringWithFallback(_versionFallback) */\n  tag_41\n  dup13\n  tag_3\n  jump\t// in\ntag_41:\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3306:3368  _version = version.toShortStringWithFallback(_versionFallback) */\n  swap10\n  0x0140\n  swap11\n  dup12\n  mstore\n    /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n  mload\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3392:3414  keccak256(bytes(name)) */\n  swap1\n  keccak256\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3378:3414  _hashedName = keccak256(bytes(name)) */\n  swap11\n  dup12\n  0xe0\n  mstore\n    /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n  mload\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3441:3466  keccak256(bytes(version)) */\n  swap1\n  keccak256\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3424:3466  _hashedVersion = keccak256(bytes(version)) */\n  swap1\n  0x0100\n  swap11\n  dup3\n  dup13\n  mstore\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3494:3507  block.chainid */\n  chainid\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3477:3507  _cachedChainId = block.chainid */\n  0xa0\n  mstore\n    /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n  dup9\n  mload\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4054:4135  abi.encode(_TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)) */\n  swap3\n  dup7\n  dup5\n  add\n    /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n  swap2\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":1929:2024  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n  0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f\n    /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n  dup4\n  mstore\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":1929:2024  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n  dup11\n  dup6\n  add\n    /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n  mstore\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":1929:2024  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n  0x60\n  dup5\n  add\n    /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n  mstore\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3494:3507  block.chainid */\n  chainid\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":1929:2024  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n  0x80\n  dup5\n  add\n    /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n  mstore\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4129:4133  this */\n  address\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3477:3507  _cachedChainId = block.chainid */\n  0xa0\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":1929:2024  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n  dup5\n  add\n  mstore\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3477:3507  _cachedChainId = block.chainid */\n  0xa0\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4054:4135  abi.encode(_TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)) */\n  dup4\n  mstore\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":1929:2024  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n  0xc0\n    /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n  dup4\n  add\n  swap4\n  dup4\n  dup6\n  lt\n  swap1\n  dup6\n  gt\n  or\n  tag_42\n  jumpi\n  dup4\n  dup10\n  mstore\n  dup3\n  mload\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4044:4136  keccak256(abi.encode(_TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this))) */\n  swap1\n  keccak256\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":1929:2024  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n  0x80\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3517:3565  _cachedDomainSeparator = _buildDomainSeparator() */\n  mstore\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4129:4133  this */\n  address\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":1929:2024  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n  0xc0\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3575:3602  _cachedThis = address(this) */\n  mstore\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2518:2524  _owner */\n  0x09\n    /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n  dup1\n  sload\n    /* \"@openzeppelin/contracts/utils/Context.sol\":734:744  msg.sender */\n  caller\n  not(sub(shl(0xa0, 0x01), 0x01))\n    /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n  dup3\n  and\n  dup2\n  or\n  swap1\n  swap3\n  sstore\n  sub(shl(0xa0, 0x01), 0x01)\n  and\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2566:2606  OwnershipTransferred(oldOwner, newOwner) */\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  0x00\n  dup1\n  log3\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4129:4133  this */\n  address\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8603:8624  account != address(0) */\n  iszero\n    /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n  tag_44\n  jumpi\n  pop\n  pop\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8731:8753  _totalSupply += amount */\n  0x02\n    /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n  sload\n  swap1\n  dup4\n  dup3\n  add\n  dup1\n  swap3\n  gt\n  tag_46\n  jumpi\n  pop\n  0x00\n  swap2\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8952:8989  Transfer(address(0), account, amount) */\n  0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n    /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n  swap2\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8731:8753  _totalSupply += amount */\n  0x02\n    /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n  sstore\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4129:4133  this */\n  address\n    /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n  dup4\n  mstore\n  dup3\n  dup2\n  mstore\n  dup6\n  dup4\n  keccak256\n  dup5\n  dup2\n  sload\n  add\n  swap1\n  sstore\n  dup6\n  mload\n  swap4\n  dup5\n  mstore\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4129:4133  this */\n  address\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8952:8989  Transfer(address(0), account, amount) */\n  swap4\n  log3\n    /* \"contracts/TurtleToken.sol\":1046:1074  exchangeRate = _exchangeRate */\n  0x0a\n    /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n  sstore\n  mload\n  swap2\n  dataSize(sub_0)\n  swap4\n  dup5\n  dataOffset(sub_0)\n  dup6\n  codecopy\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":1929:2024  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n  0x80\n    /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n  mload\n  dup5\n  assignImmutable(\"0x923831463c3a49e9922442ac185c857970685647ffa411016bb09cd1e1a613f6\")\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3477:3507  _cachedChainId = block.chainid */\n  0xa0\n    /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n  mload\n  dup5\n  assignImmutable(\"0x1dda9873baa24e5dc3a48371aa5a89ce85f19f9dd041db3ba184e623299b8433\")\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":1929:2024  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n  0xc0\n    /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n  mload\n  dup5\n  assignImmutable(\"0x4814dc1be776080d361f6793401698ee1cdc54b485fd7f233308314eec077dfe\")\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3378:3414  _hashedName = keccak256(bytes(name)) */\n  0xe0\n    /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n  mload\n  dup5\n  assignImmutable(\"0x4f722aad0315bc3832e551ccf6da3e098baeb8ee055023fde26c377410bf01b8\")\n  mload\n  dup4\n  assignImmutable(\"0xa2e64fbf175a4ab12443e929d11bd296058f26b9a652a2d5603d5bee0fd8697c\")\n  mload\n  dup3\n  assignImmutable(\"0xf37f94c83e8ae3e86e80cd7576891958f944d71876ecc57afee80c72eff8fc49\")\n  mload\n  dup2\n  assignImmutable(\"0x93aeedc5738c14a3407eea019f74cb3fdf1e2080f952a08792cd4aaf16d6a467\")\n  return\ntag_46:\n  0x11\n  swap1\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore\n  revert(0x00, 0x24)\ntag_44:\n  0x0104\n  0x64\n  swap4\n  swap3\n  0x45524332303a206d696e7420746f20746865207a65726f206164647265737300\n  swap3\n  dup8\n  shl(0xe5, 0x461bcd)\n  dup7\n  mstore\n  0xc4\n  dup4\n  add\n  mstore\n  0xe4\n  dup3\n  add\n  mstore\n  add\n  mstore\n  revert\ntag_42:\n  0x41\n  dup6\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore\n  revert(0x00, 0x24)\ntag_37:\n  add\n  mload\n  swap4\n  pop\n  codesize\n  dup1\n  jump(tag_38)\ntag_35:\n  swap3\n  swap2\n  swap5\n  dup5\n  and\n  swap3\n  dup10\n  0x00\n  mstore\n  dup5\n  dup12\n  0x00\n  keccak256\n  swap5\n  0x00\ntag_48:\n  dup14\n  dup10\n  dup4\n  dup4\n  lt\n  tag_49\n  jumpi\n  pop\n  pop\n  pop\n  lt\n  tag_51\n  jumpi\ntag_52:\n  pop\n  pop\n  pop\n  pop\n  dup2\n  shl\n  add\n  dup5\n  sstore\n  jump(tag_39)\ntag_51:\n  add\n  mload\n  swap1\n  0xf8\n  dup5\n  not(0x00)\n  swap3\n  shl\n  and\n  shr\n  not\n  and\n  swap1\n  sstore\n  codesize\n  dup1\n  dup1\n  dup1\n  jump(tag_52)\ntag_49:\n  dup7\n  dup7\n  add\n  mload\n  dup10\n  sstore\n  swap1\n  swap8\n  add\n  swap7\n  swap5\n  dup6\n  add\n  swap5\n  dup9\n  swap4\n  pop\n  add\n  jump(tag_48)\ntag_33:\n  dup10\n  0x00\n  mstore\n  dup11\n  0x00\n  keccak256\n  dup9\n  dup1\n  dup8\n  add\n  0x05\n  shr\n  dup3\n  add\n  swap3\n  dup14\n  dup9\n  lt\n  tag_53\n  jumpi\ntag_54:\n  add\n  0x05\n  shr\n  add\n  swap1\n  dup4\n  swap1\ntag_55:\n  dup3\n  dup2\n  lt\n  tag_56\n  jumpi\n  pop\n  pop\n  jump(tag_34)\ntag_56:\n  0x00\n  dup2\n  sstore\n  add\n  dup4\n  swap1\n  jump(tag_55)\ntag_53:\n  swap3\n  pop\n  dup2\n  swap3\n  jump(tag_54)\ntag_31:\n  0x22\n  dup11\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore\n  revert(0x00, 0x24)\ntag_29:\n  swap1\n  0x7f\n  and\n  swap1\n  jump(tag_30)\ntag_27:\n  0x41\n  dup10\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore\n  revert(0x00, 0x24)\ntag_24:\n  add\n  mload\n  swap1\n  pop\n  codesize\n  dup1\n  jump(tag_25)\ntag_22:\n  swap1\n  dup13\n  swap2\n  dup9\n  dup7\n  swap6\n  and\n  dup8\n  0x00\n  mstore\n  dup4\n  0x00\n  keccak256\n  swap4\n  0x00\n  swap1\ntag_58:\n  dup3\n  dup3\n  lt\n  tag_59\n  jumpi\n  pop\n  pop\n  dup5\n  gt\n  tag_61\n  jumpi\ntag_62:\n  pop\n  pop\n  pop\n  dup2\n  shl\n  add\n  dup3\n  sstore\n  jump(tag_26)\ntag_61:\n  add\n  mload\n  not(0x00)\n  dup4\n  dup8\n  shl\n  0xf8\n  and\n  shr\n  not\n  and\n  swap1\n  sstore\n  codesize\n  dup1\n  dup1\n  jump(tag_62)\ntag_59:\n  dup4\n  dup6\n  add\n  mload\n  dup7\n  sstore\n  dup9\n  swap8\n  swap1\n  swap6\n  add\n  swap5\n  swap4\n  dup5\n  add\n  swap4\n  add\n  dup16\n  jump(tag_58)\ntag_20:\n  swap1\n  swap2\n  swap3\n  pop\n  dup6\n  0x00\n  mstore\n  dup10\n  dup3\n  0x00\n  keccak256\n  swap2\n  dup2\n  dup7\n  add\n  0x05\n  shr\n  dup4\n  add\n  swap4\n  dup7\n  lt\n  tag_63\n  jumpi\ntag_64:\n  swap2\n  dup7\n  swap2\n  dup7\n  swap6\n  swap5\n  swap4\n  add\n  0x05\n  shr\n  add\n  swap2\ntag_65:\n  dup3\n  dup2\n  lt\n  tag_66\n  jumpi\n  pop\n  dup14\n  swap2\n  pop\n  jump(tag_21)\ntag_66:\n  0x00\n  dup2\n  sstore\n  dup6\n  swap5\n  pop\n  dup7\n  swap2\n  add\n  jump(tag_65)\ntag_63:\n  swap3\n  pop\n  dup2\n  swap3\n  jump(tag_64)\ntag_18:\n  0x22\n  dup12\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore\n  revert(0x00, 0x24)\ntag_16:\n  swap1\n  0x7f\n  and\n  swap1\n  jump(tag_17)\ntag_8:\n  0x00\n  dup1\n  revert\ntag_6:\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x41)\n  revert(0x00, 0x24)\ntag_1:\n  0x40\n  dup2\n  add\n  swap1\n  dup2\n  lt\n  sub(shl(0x40, 0x01), 0x01)\n  dup3\n  gt\n  or\n  tag_6\n  jumpi\n  0x40\n  mstore\n  jump\t// out\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2895:3236  function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {... */\ntag_2:\n    /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n  dup1\n  mload\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3040:3042  32 */\n  0x20\n  swap2\n    /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n  swap1\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3018:3042  bytes(value).length < 32 */\n  dup3\n  dup2\n  lt\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3040:3042  32 */\n  iszero\n  tag_70\n  jumpi\n    /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n  pop\n  swap1\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1835:1837  31 */\n  0x1f\n    /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n  dup3\n  mload\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1821:1837  bstr.length > 31 */\n  gt\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1817:1889  if (bstr.length > 31) {... */\n  tag_72\n  jumpi\n    /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n  dup1\n  dup3\n  mload\n  swap3\n  add\n  mload\n  swap1\n  dup1\n  dup4\n  lt\n  tag_74\n  jumpi\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1930:1966  uint256(bytes32(bstr)) | bstr.length */\n  pop\n  or\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3058:3085  return toShortString(value) */\n  swap1\n  jump\t// out\n    /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\ntag_74:\n  dup3\n  not(0x00)\n  swap2\n  sub\n  0x03\n  shl\n  shl\n  and\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1930:1966  uint256(bytes32(bstr)) | bstr.length */\n  or\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3058:3085  return toShortString(value) */\n  swap1\n  jump\t// out\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1817:1889  if (bstr.length > 31) {... */\ntag_72:\n    /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n  swap1\n  mload(0x40)\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1860:1878  StringTooLong(str) */\n  dup1\n  swap3\n  shl(0xe0, 0x305a27a9)\n  dup3\n  mstore\n  dup1\n  0x04\n  dup4\n  add\n    /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n  mstore\n  dup3\n  mload\n  swap1\n  dup2\n  0x24\n  dup5\n  add\n  mstore\n  0x00\n  swap4\ntag_76:\n  dup3\n  dup6\n  lt\n  tag_77\n  jumpi\n  pop\n  pop\n  0x44\n  swap3\n  pop\n  0x00\n  dup4\n  dup3\n  dup5\n  add\n  add\n  mstore\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1835:1837  31 */\n  0x1f\n    /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n  dup1\n  not\n  swap2\n  add\n  and\n  dup2\n  add\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1860:1878  StringTooLong(str) */\n  sub\n  add\n  swap1\n  revert\n    /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\ntag_77:\n  dup5\n  dup2\n  add\n  dup3\n  add\n  mload\n  dup7\n  dup7\n  add\n  0x44\n  add\n  mstore\n  swap4\n  dup2\n  add\n  swap4\n  dup6\n  swap4\n  pop\n  jump(tag_76)\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3014:3230  if (bytes(value).length < 32) {... */\ntag_70:\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n  dup2\n  gt\n  tag_6\n  jumpi\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3282:3295  _nameFallback */\n  0x05\n    /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n  swap3\n  dup4\n  sload\n  swap3\n  0x01\n  swap4\n  dup5\n  dup2\n  dup2\n  shr\n  swap2\n  and\n  dup1\n  iszero\n  tag_81\n  jumpi\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3014:3230  if (bytes(value).length < 32) {... */\ntag_82:\n    /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n  dup4\n  dup3\n  lt\n  eq\n  tag_83\n  jumpi\n  0x1f\n  dup2\n  gt\n  tag_85\n  jumpi\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3014:3230  if (bytes(value).length < 32) {... */\ntag_86:\n    /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n  pop\n  dup2\n  0x1f\n  dup5\n  gt\n  0x01\n  eq\n  tag_87\n  jumpi\n  pop\n  swap3\n  dup3\n  swap4\n  swap2\n  dup4\n  swap3\n  0x00\n  swap5\n  tag_89\n  jumpi\ntag_90:\n  pop\n  pop\n  shl\n  swap2\n  not(0x00)\n  swap1\n  0x03\n  shl\n  shr\n  not\n  and\n  or\n  swap1\n  sstore\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1371:1437  0x00000000000000000000000000000000000000000000000000000000000000FF */\n  0xff\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3176:3219  return ShortString.wrap(_FALLBACK_SENTINEL) */\n  swap1\n  jump\t// out\n    /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\ntag_89:\n  add\n  mload\n  swap3\n  pop\n  codesize\n  dup1\n  jump(tag_90)\ntag_87:\n  swap2\n  swap1\n  dup4\n  not(0x1f)\n  dup2\n  and\n  dup8\n  0x00\n  mstore\n  dup5\n  0x00\n  keccak256\n  swap5\n  0x00\n  swap1\ntag_92:\n  dup9\n  dup4\n  dup4\n  lt\n  tag_93\n  jumpi\n  pop\n  pop\n  pop\n  lt\n  tag_95\n  jumpi\ntag_96:\n  pop\n  pop\n  pop\n  dup2\n  shl\n  add\n  swap1\n  sstore\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1371:1437  0x00000000000000000000000000000000000000000000000000000000000000FF */\n  0xff\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3176:3219  return ShortString.wrap(_FALLBACK_SENTINEL) */\n  swap1\n  jump\t// out\n    /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\ntag_95:\n  add\n  mload\n  not(0x00)\n  0xf8\n  dup5\n  0x03\n  shl\n  and\n  shr\n  not\n  and\n  swap1\n  sstore\n  codesize\n  dup1\n  dup1\n  jump(tag_96)\ntag_93:\n  dup6\n  dup8\n  add\n  mload\n  dup9\n  sstore\n  swap1\n  swap7\n  add\n  swap6\n  swap5\n  dup6\n  add\n  swap5\n  dup8\n  swap4\n  pop\n  swap1\n  dup2\n  add\n  swap1\n  jump(tag_92)\ntag_85:\n  dup6\n  0x00\n  mstore\n  dup5\n  0x1f\n  dup5\n  0x00\n  keccak256\n  swap3\n  add\n  dup8\n  shr\n  dup3\n  add\n  swap2\n  0x1f\n  dup7\n  add\n  dup9\n  shr\n  add\ntag_97:\n  dup3\n  dup2\n  lt\n  tag_98\n  jumpi\n  pop\n  pop\n  jump(tag_86)\ntag_98:\n  0x00\n  dup2\n  sstore\n  add\n  dup6\n  swap1\n  jump(tag_97)\ntag_83:\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x22)\n  revert(0x00, 0x24)\ntag_81:\n  swap1\n  0x7f\n  and\n  swap1\n  jump(tag_82)\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2895:3236  function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {... */\ntag_3:\n    /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n  dup1\n  mload\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3040:3042  32 */\n  0x20\n  swap1\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3018:3042  bytes(value).length < 32 */\n  dup2\n  dup2\n  lt\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3040:3042  32 */\n  iszero\n  tag_100\n  jumpi\n    /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n  pop\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1835:1837  31 */\n  0x1f\n    /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n  dup3\n  mload\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1821:1837  bstr.length > 31 */\n  gt\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1817:1889  if (bstr.length > 31) {... */\n  tag_102\n  jumpi\n    /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n  dup1\n  dup3\n  mload\n  swap3\n  add\n  mload\n  swap1\n  dup1\n  dup4\n  lt\n  tag_74\n  jumpi\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1930:1966  uint256(bytes32(bstr)) | bstr.length */\n  pop\n  or\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3058:3085  return toShortString(value) */\n  swap1\n  jump\t// out\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1817:1889  if (bstr.length > 31) {... */\ntag_102:\n    /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n  swap1\n  mload(0x40)\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1860:1878  StringTooLong(str) */\n  dup1\n  swap3\n  shl(0xe0, 0x305a27a9)\n  dup3\n  mstore\n  dup1\n  0x04\n  dup4\n  add\n    /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n  mstore\n  dup3\n  mload\n  swap1\n  dup2\n  0x24\n  dup5\n  add\n  mstore\n  0x00\n  swap4\ntag_106:\n  dup3\n  dup6\n  lt\n  tag_107\n  jumpi\n  pop\n  pop\n  0x44\n  swap3\n  pop\n  0x00\n  dup4\n  dup3\n  dup5\n  add\n  add\n  mstore\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1835:1837  31 */\n  0x1f\n    /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n  dup1\n  not\n  swap2\n  add\n  and\n  dup2\n  add\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1860:1878  StringTooLong(str) */\n  sub\n  add\n  swap1\n  revert\n    /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\ntag_107:\n  dup5\n  dup2\n  add\n  dup3\n  add\n  mload\n  dup7\n  dup7\n  add\n  0x44\n  add\n  mstore\n  swap4\n  dup2\n  add\n  swap4\n  dup6\n  swap4\n  pop\n  jump(tag_106)\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3014:3230  if (bytes(value).length < 32) {... */\ntag_100:\n    /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n  swap1\n  sub(shl(0x40, 0x01), 0x01)\n  dup3\n  gt\n  tag_6\n  jumpi\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3351:3367  _versionFallback */\n  0x06\n    /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n  sload\n  swap3\n  0x01\n  swap4\n  dup5\n  dup2\n  dup2\n  shr\n  swap2\n  and\n  dup1\n  iszero\n  tag_111\n  jumpi\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3014:3230  if (bytes(value).length < 32) {... */\ntag_112:\n    /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n  dup4\n  dup3\n  lt\n  eq\n  tag_83\n  jumpi\n  0x1f\n  dup2\n  gt\n  tag_115\n  jumpi\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3014:3230  if (bytes(value).length < 32) {... */\ntag_116:\n    /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n  pop\n  dup2\n  0x1f\n  dup5\n  gt\n  0x01\n  eq\n  tag_117\n  jumpi\n  pop\n  swap3\n  dup3\n  swap4\n  swap2\n  dup4\n  swap3\n  0x00\n  swap5\n  tag_119\n  jumpi\ntag_120:\n  pop\n  pop\n  shl\n  swap2\n  not(0x00)\n  swap1\n  0x03\n  shl\n  shr\n  not\n  and\n  or\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3351:3367  _versionFallback */\n  0x06\n    /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n  sstore\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1371:1437  0x00000000000000000000000000000000000000000000000000000000000000FF */\n  0xff\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3176:3219  return ShortString.wrap(_FALLBACK_SENTINEL) */\n  swap1\n  jump\t// out\n    /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\ntag_119:\n  add\n  mload\n  swap3\n  pop\n  codesize\n  dup1\n  jump(tag_120)\ntag_117:\n  swap2\n  swap1\n  dup4\n  not(0x1f)\n  dup2\n  and\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3351:3367  _versionFallback */\n  0x06\n  0x00\n    /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n  mstore\n  dup5\n  0x00\n  keccak256\n  swap5\n  0x00\n  swap1\ntag_122:\n  dup9\n  dup4\n  dup4\n  lt\n  tag_123\n  jumpi\n  pop\n  pop\n  pop\n  lt\n  tag_125\n  jumpi\ntag_126:\n  pop\n  pop\n  pop\n  dup2\n  shl\n  add\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3351:3367  _versionFallback */\n  0x06\n    /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n  sstore\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1371:1437  0x00000000000000000000000000000000000000000000000000000000000000FF */\n  0xff\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3176:3219  return ShortString.wrap(_FALLBACK_SENTINEL) */\n  swap1\n  jump\t// out\n    /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\ntag_125:\n  add\n  mload\n  not(0x00)\n  0xf8\n  dup5\n  0x03\n  shl\n  and\n  shr\n  not\n  and\n  swap1\n  sstore\n  codesize\n  dup1\n  dup1\n  jump(tag_126)\ntag_123:\n  dup6\n  dup8\n  add\n  mload\n  dup9\n  sstore\n  swap1\n  swap7\n  add\n  swap6\n  swap5\n  dup6\n  add\n  swap5\n  dup8\n  swap4\n  pop\n  swap1\n  dup2\n  add\n  swap1\n  jump(tag_122)\ntag_115:\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3351:3367  _versionFallback */\n  0x06\n  0x00\n    /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n  mstore\n  dup5\n  0x1f\n  dup5\n  0x00\n  keccak256\n  swap3\n  add\n  0x05\n  shr\n  dup3\n  add\n  swap2\n  0x1f\n  dup7\n  add\n  0x05\n  shr\n  add\ntag_127:\n  dup3\n  dup2\n  lt\n  tag_128\n  jumpi\n  pop\n  pop\n  jump(tag_116)\ntag_128:\n  0x00\n  dup2\n  sstore\n  add\n  dup6\n  swap1\n  jump(tag_127)\ntag_111:\n  swap1\n  0x7f\n  and\n  swap1\n  jump(tag_112)\nstop\n\nsub_0: assembly {\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      0x80\n      0x40\n      dup2\n      dup2\n      mstore\n      0x04\n      dup1\n      calldatasize\n      lt\n      iszero\n      tag_16\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_16:\n      0x00\n      swap3\n      dup4\n      calldataload\n      0xe0\n      shr\n      swap1\n      dup2\n      0x06fdde03\n      eq\n      tag_18\n      jumpi\n      pop\n      dup1\n      0x095ea7b3\n      eq\n      tag_20\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_22\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_24\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_26\n      jumpi\n      dup1\n      0x3644e515\n      eq\n      tag_28\n      jumpi\n      dup1\n      0x39509351\n      eq\n      tag_30\n      jumpi\n      dup1\n      0x3ba0b9a9\n      eq\n      tag_32\n      jumpi\n      dup1\n      0x40c10f19\n      eq\n      tag_34\n      jumpi\n      dup1\n      0x6c11bcd3\n      eq\n      tag_36\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_38\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_40\n      jumpi\n      dup1\n      0x7ecebe00\n      eq\n      tag_42\n      jumpi\n      dup1\n      0x84b0196e\n      eq\n      tag_44\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_46\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_48\n      jumpi\n      dup1\n      0xa0ef91df\n      eq\n      tag_50\n      jumpi\n      dup1\n      0xa457c2d7\n      eq\n      tag_52\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_54\n      jumpi\n      dup1\n      0xd0febe4c\n      eq\n      tag_56\n      jumpi\n      dup1\n      0xd505accf\n      eq\n      tag_58\n      jumpi\n      dup1\n      0xdb068e0e\n      eq\n      tag_60\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_62\n      jumpi\n      0xf2fde38b\n      eq\n      tag_64\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_64:\n      jumpi(tag_68, callvalue)\n      jumpi(tag_68, slt(add(not(0x03), calldatasize), 0x20))\n      tag_70\n      tag_2\n      jump\t// in\n    tag_70:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1063:1125  modifier onlyOwner() {... */\n      swap1\n      tag_71\n      tag_4\n      jump\t// in\n    tag_71:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      swap2\n      dup3\n      and\n      swap3\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2162:2184  newOwner != address(0) */\n      dup4\n      iszero\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      tag_72\n      jumpi\n      pop\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2518:2524  _owner */\n      0x09\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      sload\n      dup3\n      shl(0xa0, 0xffffffffffffffffffffffff)\n      dup3\n      and\n      or\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2518:2524  _owner */\n      0x09\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      sstore\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2566:2606  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      dup4\n      dup1\n      log3\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      dup1\n      return\n    tag_72:\n      swap1\n      0x20\n      0x84\n      swap3\n      mload\n      swap2\n      shl(0xe5, 0x461bcd)\n      dup4\n      mstore\n      dup3\n      add\n      mstore\n      0x26\n      0x24\n      dup3\n      add\n      mstore\n      0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061\n      0x44\n      dup3\n      add\n      mstore\n      shl(0xd0, 0x646472657373)\n      0x64\n      dup3\n      add\n      mstore\n      revert\n    tag_68:\n      dup3\n      dup1\n      revert\n    tag_62:\n      pop\n      pop\n      jumpi(tag_76, callvalue)\n      dup1\n      add(calldatasize, not(0x03))\n      slt\n      tag_76\n      jumpi\n      dup1\n      0x20\n      swap3\n      tag_78\n      tag_2\n      jump\t// in\n    tag_78:\n      tag_79\n      tag_3\n      jump\t// in\n    tag_79:\n      sub(shl(0xa0, 0x01), 0x01)\n      swap2\n      dup3\n      and\n      dup4\n      mstore\n      0x01\n      dup7\n      mstore\n      dup4\n      dup4\n      keccak256\n      swap2\n      and\n      dup3\n      mstore\n      dup5\n      mstore\n      keccak256\n      sload\n      swap1\n      mload\n      swap1\n      dup2\n      mstore\n      return\n    tag_76:\n      pop\n      dup1\n      revert\n    tag_60:\n      dup4\n      dup3\n      jumpi(tag_76, callvalue)\n      jumpi(tag_76, slt(add(not(0x03), calldatasize), 0x20))\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1063:1125  modifier onlyOwner() {... */\n      tag_84\n      tag_4\n      jump\t// in\n    tag_84:\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      calldataload\n        /* \"contracts/TurtleToken.sol\":2993:3015  exchangeRate = newRate */\n      0x0a\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      sstore\n      dup1\n      return\n    tag_58:\n      pop\n      dup3\n      swap1\n      jumpi(tag_76, callvalue)\n      jumpi(tag_76, slt(add(not(0x03), calldatasize), 0xe0))\n      tag_89\n      tag_2\n      jump\t// in\n    tag_89:\n      tag_90\n      tag_3\n      jump\t// in\n    tag_90:\n      swap1\n      calldataload(0x44)\n      swap3\n      calldataload(0x64)\n      calldataload(0x84)\n      0xff\n      dup2\n      and\n      dup2\n      sub\n      tag_91\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2139:2154  block.timestamp */\n      dup2\n      timestamp\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2139:2166  block.timestamp <= deadline */\n      gt\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      tag_93\n      jumpi\n      0x01\n      dup1\n      0xa0\n      shl\n      sub\n      swap1\n      dup2\n      dup6\n      and\n      swap3\n      dup4\n      dup10\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":3200:3207  _nonces */\n      0x07\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      0x20\n      mstore\n      dup10\n      dup10\n      keccak256\n      swap1\n      dup2\n      sload\n      swap2\n      0x01\n      dup4\n      add\n      swap1\n      sstore\n      dup11\n      mload\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2242:2321  abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline) */\n      swap1\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2242:2321  abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline) */\n      dup3\n      add\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      swap3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1125:1220  keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\") */\n      0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      dup5\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1125:1220  keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\") */\n      dup7\n      dup14\n      dup5\n      add\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      mstore\n      dup6\n      dup11\n      and\n      0x60\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1125:1220  keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\") */\n      dup5\n      add\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1125:1220  keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\") */\n      dup11\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      0x80\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1125:1220  keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\") */\n      dup5\n      add\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      mstore\n      0xa0\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1125:1220  keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\") */\n      dup4\n      add\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      mstore\n      0xc0\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1125:1220  keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\") */\n      dup3\n      add\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      mstore\n      0xc0\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2242:2321  abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline) */\n      dup2\n      mstore\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      0xe0\n      dup2\n      add\n      dup2\n      dup2\n      lt\n      0xffffffffffffffff\n      dup3\n      gt\n      or\n      tag_95\n      jumpi\n      dup12\n      mstore\n      mload\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2232:2322  keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline)) */\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6791:6796  error */\n      tag_97\n      swap2\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6744:6769  tryRecover(hash, v, r, s) */\n      tag_98\n      swap2\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4893:4913  _domainSeparatorV4() */\n      tag_99\n      tag_13\n      jump\t// in\n    tag_99:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":8496:8727  assembly {... */\n      swap1\n      dup13\n      mload\n      swap2\n      shl(0xf0, 0x1901)\n      dup4\n      mstore\n      0x02\n      dup4\n      add\n      mstore\n      0x22\n      dup3\n      add\n      mstore\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      calldataload(0xc4)\n      swap2\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":8496:8727  assembly {... */\n      0x42\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      calldataload(0xa4)\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":8496:8727  assembly {... */\n      swap3\n      keccak256\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6744:6769  tryRecover(hash, v, r, s) */\n      tag_12\n      jump\t// in\n    tag_98:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6791:6796  error */\n      swap2\n      swap1\n      swap2\n      tag_11\n      jump\t// in\n    tag_97:\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2450:2465  signer == owner */\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1125:1220  keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\") */\n      tag_100\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2536:2541  value */\n      pop\n      tag_102\n      swap4\n      swap5\n      pop\n      tag_10\n      jump\t// in\n    tag_102:\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      dup1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1125:1220  keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\") */\n    tag_100:\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      0x64\n      swap1\n      0x20\n      dup8\n      mload\n      swap2\n      shl(0xe5, 0x461bcd)\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1125:1220  keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\") */\n      dup4\n      mstore\n      dup3\n      add\n      mstore\n      0x1e\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      0x24\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1125:1220  keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\") */\n      dup3\n      add\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1125:1220  keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\") */\n      0x45524332305065726d69743a20696e76616c6964207369676e61747572650000\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      0x44\n      dup3\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1125:1220  keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\") */\n      mstore\n      revert\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n    tag_95:\n      shl(0xe0, 0x4e487b71)\n      dup12\n      mstore\n      0x41\n      dup8\n      mstore\n      0x24\n      dup12\n      revert\n    tag_93:\n      dup8\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      dup2\n      dup6\n      add\n      mstore\n      0x1d\n      0x24\n      dup3\n      add\n      mstore\n      0x45524332305065726d69743a206578706972656420646561646c696e65000000\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n    tag_91:\n      dup7\n      dup1\n      revert\n    tag_56:\n      pop\n      swap1\n      dup3\n      add(calldatasize, not(0x03))\n      slt\n      tag_68\n      jumpi\n        /* \"contracts/TurtleToken.sol\":1282:1291  msg.value */\n      callvalue\n        /* \"contracts/TurtleToken.sol\":1282:1295  msg.value > 0 */\n      iszero\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      tag_105\n      jumpi\n        /* \"contracts/TurtleToken.sol\":1441:1453  exchangeRate */\n      0x0a\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      sload\n        /* \"contracts/TurtleToken.sol\":1282:1291  msg.value */\n      dup1\n      callvalue\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      mul\n        /* \"contracts/TurtleToken.sol\":1282:1291  msg.value */\n      swap1\n      callvalue\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      dup3\n      div\n      sub\n      tag_107\n      jumpi\n        /* \"contracts/TurtleToken.sol\":1457:1461  1e18 */\n      0x0de0b6b3a7640000\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      swap1\n      div\n        /* \"contracts/TurtleToken.sol\":1498:1502  this */\n      swap2\n      address\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      dup5\n      mstore\n      dup4\n      0x20\n      mstore\n      dup3\n      dup3\n      dup6\n      keccak256\n      sload\n        /* \"contracts/TurtleToken.sol\":1480:1519  balanceOf(address(this)) >= tokenAmount */\n      lt\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      tag_109\n      jumpi\n        /* \"contracts/TurtleToken.sol\":1628:1638  msg.sender */\n      pop\n        /* \"contracts/TurtleToken.sol\":1699:1750  TokensPurchased(msg.sender, msg.value, tokenAmount) */\n      0x8fafebcaf9d154343dad25669bfa277f4fbacd7ac6b0c4fed522580e040a0f33\n        /* \"contracts/TurtleToken.sol\":1628:1638  msg.sender */\n      swap1\n        /* \"contracts/TurtleToken.sol\":1640:1651  tokenAmount */\n      tag_111\n        /* \"contracts/TurtleToken.sol\":1628:1638  msg.sender */\n      dup4\n      caller\n        /* \"contracts/TurtleToken.sol\":1498:1502  this */\n      address\n        /* \"contracts/TurtleToken.sol\":1640:1651  tokenAmount */\n      tag_9\n      jump\t// in\n    tag_111:\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      dup1\n      mload\n        /* \"contracts/TurtleToken.sol\":1282:1291  msg.value */\n      swap3\n      callvalue\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      dup5\n      mstore\n      0x20\n      dup5\n      add\n      mstore\n        /* \"contracts/TurtleToken.sol\":1628:1638  msg.sender */\n      caller\n        /* \"contracts/TurtleToken.sol\":1699:1750  TokensPurchased(msg.sender, msg.value, tokenAmount) */\n      swap3\n      log2\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      dup1\n      return\n    tag_109:\n      0x20\n      0x84\n      swap3\n      mload\n      swap2\n      shl(0xe5, 0x461bcd)\n      dup4\n      mstore\n      dup3\n      add\n      mstore\n      0x26\n      0x24\n      dup3\n      add\n      mstore\n      0x496e73756666696369656e7420746f6b656e2062616c616e636520696e20636f\n      0x44\n      dup3\n      add\n      mstore\n      shl(0xd2, 0x1b9d1c9858dd)\n      0x64\n      dup3\n      add\n      mstore\n      revert\n    tag_107:\n      shl(0xe0, 0x4e487b71)\n      dup5\n      mstore\n      0x11\n      dup4\n      mstore\n      0x24\n      dup5\n      revert\n    tag_105:\n      swap1\n      0x20\n      0x64\n      swap3\n      mload\n      swap2\n      shl(0xe5, 0x461bcd)\n      dup4\n      mstore\n      dup3\n      add\n      mstore\n      0x19\n      0x24\n      dup3\n      add\n      mstore\n      0x4d7573742073656e642045544820746f2065786368616e676500000000000000\n      0x44\n      dup3\n      add\n      mstore\n      revert\n    tag_54:\n      pop\n      pop\n      jumpi(tag_76, callvalue)\n      dup1\n      add(calldatasize, not(0x03))\n      slt\n      tag_76\n      jumpi\n      0x20\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3894:3900  amount */\n      tag_116\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      tag_117\n      tag_2\n      jump\t// in\n    tag_117:\n      calldataload(0x24)\n        /* \"@openzeppelin/contracts/utils/Context.sol\":734:744  msg.sender */\n      swap1\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3894:3900  amount */\n      tag_9\n      jump\t// in\n    tag_116:\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      mload\n      0x01\n      dup2\n      mstore\n      return\n    tag_52:\n      pop\n      dup3\n      jumpi(tag_120, callvalue)\n      dup3\n      add(calldatasize, not(0x03))\n      slt\n      tag_120\n      jumpi\n      tag_122\n      tag_2\n      jump\t// in\n    tag_122:\n      swap2\n      dup4\n      calldataload(0x24)\n        /* \"@openzeppelin/contracts/utils/Context.sol\":734:744  msg.sender */\n      swap3\n      caller\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      dup2\n      mstore\n      mstore(0x20, 0x01)\n      dup2\n      dup2\n      keccak256\n      0x01\n      dup1\n      0xa0\n      shl\n      sub\n      dup7\n      and\n      dup3\n      mstore\n      0x20\n      mstore\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6792:6827  currentAllowance >= subtractedValue */\n      swap1\n      dup3\n      dup3\n      lt\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      tag_123\n      jumpi\n      0x20\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6928:6962  currentAllowance - subtractedValue */\n      tag_116\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      dup6\n      dup6\n      sub\n      dup8\n        /* \"@openzeppelin/contracts/utils/Context.sol\":734:744  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6928:6962  currentAllowance - subtractedValue */\n      tag_10\n      jump\t// in\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n    tag_123:\n      0x84\n      swap1\n      0x20\n      dup7\n      mload\n      swap2\n      shl(0xe5, 0x461bcd)\n      dup4\n      mstore\n      dup3\n      add\n      mstore\n      0x25\n      0x24\n      dup3\n      add\n      mstore\n      0x45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77\n      0x44\n      dup3\n      add\n      mstore\n      shl(0xd8, 0x207a65726f)\n      0x64\n      dup3\n      add\n      mstore\n      revert\n    tag_120:\n      dup1\n      revert\n    tag_50:\n      pop\n      jumpi(tag_68, callvalue)\n      dup3\n      add(calldatasize, not(0x03))\n      slt\n      tag_68\n      jumpi\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1063:1125  modifier onlyOwner() {... */\n      tag_130\n      tag_4\n      jump\t// in\n    tag_130:\n        /* \"contracts/TurtleToken.sol\":3156:3177  address(this).balance */\n      selfbalance\n        /* \"contracts/TurtleToken.sol\":3196:3207  balance > 0 */\n      swap1\n      dup2\n      iszero\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      tag_131\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1273:1279  _owner */\n      0x09\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      sload\n      dup4\n      swap2\n      dup3\n      swap2\n      dup3\n      swap2\n      dup3\n      swap2\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup3\n        /* \"contracts/TurtleToken.sol\":3241:3275  payable(owner()).transfer(balance) */\n      call\n      iszero\n      tag_133\n      jumpi\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      pop\n      dup1\n      return\n        /* \"contracts/TurtleToken.sol\":3241:3275  payable(owner()).transfer(balance) */\n    tag_133:\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      mload\n      swap1\n      returndatasize\n      swap1\n      dup3\n      returndatacopy\n      returndatasize\n      swap1\n      revert\n    tag_131:\n      0x64\n      swap1\n      0x20\n      dup5\n      mload\n      swap2\n      shl(0xe5, 0x461bcd)\n      dup4\n      mstore\n      dup3\n      add\n      mstore\n      0x12\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x70, 0x4e6f2045544820746f207769746864726177)\n      0x44\n      dup3\n      add\n      mstore\n      revert\n    tag_48:\n      pop\n      swap1\n      jumpi(tag_68, callvalue)\n      dup3\n      add(calldatasize, not(0x03))\n      slt\n      tag_68\n      jumpi\n      dup1\n      mload\n      swap2\n      dup4\n      dup2\n      sload\n      swap1\n      tag_139\n      dup3\n      tag_5\n      jump\t// in\n    tag_139:\n      dup1\n      dup7\n      mstore\n      swap3\n      0x01\n      swap3\n      dup1\n      dup5\n      and\n      swap1\n      dup2\n      iszero\n      tag_140\n      jumpi\n      pop\n      0x01\n      eq\n      tag_142\n      jumpi\n    tag_143:\n      tag_144\n      dup7\n      dup7\n      tag_145\n      dup3\n      dup12\n      sub\n      dup4\n      tag_7\n      jump\t// in\n    tag_145:\n      mload\n      swap2\n      dup3\n      swap2\n      0x20\n      dup4\n      mstore\n      0x20\n      dup4\n      add\n      swap1\n      tag_1\n      jump\t// in\n    tag_144:\n      sub\n      swap1\n      return\n    tag_142:\n      dup2\n      mstore\n      swap5\n      pop\n      0x8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b\n    tag_146:\n      dup3\n      dup7\n      lt\n      tag_147\n      jumpi\n      pop\n      pop\n      pop\n      tag_145\n      dup3\n      0x20\n      tag_144\n      swap6\n      dup3\n      add\n      add\n      swap5\n      codesize\n      jump(tag_143)\n    tag_147:\n      dup1\n      sload\n      0x20\n      dup8\n      dup8\n      add\n      dup2\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      swap1\n      swap6\n      add\n      swap5\n      dup2\n      add\n      jump(tag_146)\n    tag_140:\n      swap1\n      pop\n      tag_144\n      swap8\n      pop\n      dup7\n      swap4\n      pop\n      0x20\n      swap3\n      pop\n      tag_145\n      swap5\n      swap2\n      pop\n      not(0xff)\n      and\n      dup3\n      dup5\n      add\n      mstore\n      iszero\n      iszero\n      0x05\n      shl\n      dup3\n      add\n      add\n      swap5\n      codesize\n      jump(tag_143)\n    tag_46:\n      pop\n      pop\n      jumpi(tag_76, callvalue)\n      dup2\n      add(calldatasize, not(0x03))\n      slt\n      tag_76\n      jumpi\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1273:1279  _owner */\n      0x09\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      sload\n      swap1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      swap2\n      and\n      dup2\n      mstore\n      0x20\n      swap1\n      return\n    tag_44:\n      pop\n      swap1\n      jumpi(tag_68, callvalue)\n      dup3\n      add(calldatasize, not(0x03))\n      slt\n      tag_68\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5427:5468  _name.toStringWithFallback(_nameFallback) */\n      tag_157\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5427:5432  _name */\n      immutable(\"0xf37f94c83e8ae3e86e80cd7576891958f944d71876ecc57afee80c72eff8fc49\")\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5427:5468  _name.toStringWithFallback(_nameFallback) */\n      tag_14\n      jump\t// in\n    tag_157:\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5482:5490  _version */\n      swap3\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5482:5529  _version.toStringWithFallback(_versionFallback) */\n      tag_158\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5482:5490  _version */\n      immutable(\"0x93aeedc5738c14a3407eea019f74cb3fdf1e2080f952a08792cd4aaf16d6a467\")\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5482:5529  _version.toStringWithFallback(_versionFallback) */\n      tag_15\n      jump\t// in\n    tag_158:\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      swap1\n      dup3\n      mload\n      swap3\n      0x20\n      swap3\n      dup4\n      dup6\n      add\n      swap6\n      dup6\n      dup8\n      lt\n      0xffffffffffffffff\n      dup9\n      gt\n      or\n      tag_159\n      jumpi\n      pop\n      swap3\n      dup1\n      tag_161\n      dup4\n      dup9\n      swap7\n      tag_162\n      swap10\n      dup12\n      swap10\n      swap7\n      mstore\n      dup7\n      dup7\n      mstore\n      dup2\n      mload\n      swap10\n      dup11\n      swap10\n      shl(0xf8, 0x0f)\n      dup12\n      mstore\n      0xe0\n      dup7\n      dup13\n      add\n      mstore\n      0xe0\n      dup12\n      add\n      swap1\n      tag_1\n      jump\t// in\n    tag_162:\n      swap2\n      dup10\n      dup4\n      sub\n      swap1\n      dup11\n      add\n      mstore\n      tag_1\n      jump\t// in\n    tag_161:\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5543:5556  block.chainid */\n      swap3\n      chainid\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      0x60\n      dup9\n      add\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5578:5582  this */\n      address\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      0x80\n      dup9\n      add\n      mstore\n      dup5\n      0xa0\n      dup9\n      add\n      mstore\n      dup7\n      dup5\n      sub\n      0xc0\n      dup9\n      add\n      mstore\n      mload\n      swap3\n      dup4\n      dup2\n      mstore\n      add\n      swap4\n      swap3\n    tag_163:\n      dup3\n      dup2\n      lt\n      tag_164\n      jumpi\n      pop\n      pop\n      pop\n      pop\n      sub\n      swap1\n      return\n    tag_164:\n      dup4\n      mload\n      dup6\n      mstore\n      dup7\n      swap6\n      pop\n      swap4\n      dup2\n      add\n      swap4\n      swap3\n      dup2\n      add\n      swap3\n      0x01\n      add\n      jump(tag_163)\n    tag_159:\n      shl(0xe0, 0x4e487b71)\n      dup5\n      mstore\n      0x41\n      swap1\n      mstore\n      0x24\n      dup4\n      revert\n    tag_42:\n      pop\n      pop\n      jumpi(tag_76, callvalue)\n      jumpi(tag_76, slt(add(not(0x03), calldatasize), 0x20))\n      0x20\n      swap2\n      dup2\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      tag_170\n      tag_2\n      jump\t// in\n    tag_170:\n      and\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2698:2705  _nonces */\n      0x07\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      dup5\n      mstore\n      keccak256\n      sload\n      swap1\n      mload\n      swap1\n      dup2\n      mstore\n      return\n    tag_40:\n      dup4\n      jumpi(tag_120, callvalue)\n      dup1\n      add(calldatasize, not(0x03))\n      slt\n      tag_120\n      jumpi\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1063:1125  modifier onlyOwner() {... */\n      tag_175\n      tag_4\n      jump\t// in\n    tag_175:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2518:2524  _owner */\n      0x09\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      dup2\n      and\n      swap1\n      swap2\n      sstore\n      dup2\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2566:2606  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      dup3\n      dup1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2566:2606  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      dup1\n      return\n    tag_38:\n      pop\n      pop\n      jumpi(tag_76, callvalue)\n      jumpi(tag_76, slt(add(not(0x03), calldatasize), 0x20))\n      0x20\n      swap2\n      dup2\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      tag_180\n      tag_2\n      jump\t// in\n    tag_180:\n      and\n      dup2\n      mstore\n      dup1\n      dup5\n      mstore\n      keccak256\n      sload\n      swap1\n      mload\n      swap1\n      dup2\n      mstore\n      return\n    tag_36:\n      pop\n      jumpi(tag_68, callvalue)\n      0x20\n      swap2\n      dup3\n      add(calldatasize, not(0x03))\n      slt\n      tag_183\n      jumpi\n      dup2\n      calldataload\n        /* \"contracts/TurtleToken.sol\":1948:1963  tokenAmount > 0 */\n      swap2\n      dup3\n      iszero\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      tag_185\n      jumpi\n        /* \"contracts/TurtleToken.sol\":2034:2044  msg.sender */\n      caller\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      dup6\n      mstore\n      dup5\n      dup5\n      mstore\n      dup3\n      dup3\n      dup7\n      keccak256\n      sload\n        /* \"contracts/TurtleToken.sol\":2024:2060  balanceOf(msg.sender) >= tokenAmount */\n      lt\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      tag_187\n      jumpi\n        /* \"contracts/TurtleToken.sol\":2206:2210  1e18 */\n      0x0de0b6b3a7640000\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      dup4\n      mul\n      not(0x0de0b6b3a763ffff)\n      dup5\n      dup3\n      div\n      add\n      tag_189\n      jumpi\n        /* \"contracts/TurtleToken.sol\":2214:2226  exchangeRate */\n      0x0a\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      sload\n      swap1\n      dup2\n      iszero\n      tag_191\n      jumpi\n      div\n        /* \"contracts/TurtleToken.sol\":2245:2266  address(this).balance */\n      swap1\n      dup2\n      selfbalance\n        /* \"contracts/TurtleToken.sol\":2245:2279  address(this).balance >= ethAmount */\n      lt\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      tag_193\n      jumpi\n        /* \"contracts/TurtleToken.sol\":2253:2257  this */\n      pop\n        /* \"contracts/TurtleToken.sol\":2398:2409  tokenAmount */\n      tag_195\n        /* \"contracts/TurtleToken.sol\":2253:2257  this */\n      dup4\n      address\n        /* \"contracts/TurtleToken.sol\":2034:2044  msg.sender */\n      caller\n        /* \"contracts/TurtleToken.sol\":2398:2409  tokenAmount */\n      tag_9\n      jump\t// in\n    tag_195:\n        /* \"contracts/TurtleToken.sol\":2446:2485  payable(msg.sender).transfer(ethAmount) */\n      dup5\n      dup1\n      dup3\n      dup1\n      iszero\n      tag_196\n      jumpi\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n    tag_197:\n        /* \"contracts/TurtleToken.sol\":2034:2044  msg.sender */\n      dup3\n      dup1\n      swap3\n      swap2\n      dup2\n      swap3\n      caller\n        /* \"contracts/TurtleToken.sol\":2446:2485  payable(msg.sender).transfer(ethAmount) */\n      swap1\n      call\n      iszero\n      tag_198\n      jumpi\n        /* \"contracts/TurtleToken.sol\":2534:2580  TokensSold(msg.sender, tokenAmount, ethAmount) */\n      0x2dcf9433d75db0d8b1c172641f85e319ffe4ad22e108a95d1847ceb906e5195d\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      swap3\n      swap4\n      dup3\n      mload\n      swap5\n      dup6\n      mstore\n      dup5\n      add\n      mstore\n        /* \"contracts/TurtleToken.sol\":2034:2044  msg.sender */\n      caller\n        /* \"contracts/TurtleToken.sol\":2534:2580  TokensSold(msg.sender, tokenAmount, ethAmount) */\n      swap3\n      log2\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      dup1\n      return\n        /* \"contracts/TurtleToken.sol\":2446:2485  payable(msg.sender).transfer(ethAmount) */\n    tag_198:\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      dup2\n      mload\n      returndatasize\n      dup7\n      dup3\n      returndatacopy\n      returndatasize\n      swap1\n      revert\n        /* \"contracts/TurtleToken.sol\":2446:2485  payable(msg.sender).transfer(ethAmount) */\n    tag_196:\n      0x08fc\n      swap2\n      pop\n      jump(tag_197)\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n    tag_193:\n      dup3\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      swap1\n      dup2\n      add\n      dup6\n      swap1\n      mstore\n      0x24\n      dup1\n      dup3\n      add\n      mstore\n      0x496e73756666696369656e74204554482062616c616e636520696e20636f6e74\n      0x44\n      dup3\n      add\n      mstore\n      shl(0xe2, 0x1c9858dd)\n      0x64\n      dup3\n      add\n      mstore\n      0x84\n      swap1\n      revert\n    tag_191:\n      shl(0xe0, 0x4e487b71)\n      dup8\n      mstore\n      0x12\n      dup4\n      mstore\n      0x24\n      dup8\n      revert\n    tag_189:\n      shl(0xe0, 0x4e487b71)\n      dup7\n      mstore\n      0x11\n      dup3\n      mstore\n      0x24\n      dup7\n      revert\n    tag_187:\n      dup4\n      0x64\n      swap3\n      mload\n      swap2\n      shl(0xe5, 0x461bcd)\n      dup4\n      mstore\n      dup3\n      add\n      mstore\n      0x1a\n      0x24\n      dup3\n      add\n      mstore\n      0x496e73756666696369656e7420746f6b656e2062616c616e6365000000000000\n      0x44\n      dup3\n      add\n      mstore\n      revert\n    tag_185:\n      dup4\n      0x84\n      swap3\n      mload\n      swap2\n      shl(0xe5, 0x461bcd)\n      dup4\n      mstore\n      dup3\n      add\n      mstore\n      0x25\n      0x24\n      dup3\n      add\n      mstore\n      0x4d7573742073656c6c206120706f73697469766520616d6f756e74206f662074\n      0x44\n      dup3\n      add\n      mstore\n      shl(0xd8, 0x6f6b656e73)\n      0x64\n      dup3\n      add\n      mstore\n      revert\n    tag_183:\n      dup4\n      dup1\n      revert\n    tag_34:\n      pop\n      swap1\n      jumpi(tag_68, callvalue)\n      dup1\n      add(calldatasize, not(0x03))\n      slt\n      tag_68\n      jumpi\n      tag_204\n      tag_2\n      jump\t// in\n    tag_204:\n      swap1\n      calldataload(0x24)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1063:1125  modifier onlyOwner() {... */\n      swap2\n      tag_205\n      tag_4\n      jump\t// in\n    tag_205:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      and\n      swap3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8603:8624  account != address(0) */\n      dup4\n      iszero\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      tag_206\n      jumpi\n      pop\n      0x20\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8952:8989  Transfer(address(0), account, amount) */\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      swap3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8731:8753  _totalSupply += amount */\n      tag_208\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      dup8\n      swap6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8731:8753  _totalSupply += amount */\n      0x02\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8731:8753  _totalSupply += amount */\n      tag_8\n      jump\t// in\n    tag_208:\n      0x02\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      sstore\n      dup6\n      dup6\n      mstore\n      dup5\n      dup4\n      mstore\n      dup1\n      dup6\n      keccak256\n      dup3\n      dup2\n      sload\n      add\n      swap1\n      sstore\n      mload\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8952:8989  Transfer(address(0), account, amount) */\n      log3\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      dup1\n      return\n    tag_206:\n      0x20\n      0x64\n      swap3\n      mload\n      swap2\n      shl(0xe5, 0x461bcd)\n      dup4\n      mstore\n      dup3\n      add\n      mstore\n      0x1f\n      0x24\n      dup3\n      add\n      mstore\n      0x45524332303a206d696e7420746f20746865207a65726f206164647265737300\n      0x44\n      dup3\n      add\n      mstore\n      revert\n    tag_32:\n      pop\n      pop\n      jumpi(tag_76, callvalue)\n      dup2\n      add(calldatasize, not(0x03))\n      slt\n      tag_76\n      jumpi\n      0x20\n      swap1\n        /* \"contracts/TurtleToken.sol\":370:397  uint256 public exchangeRate */\n      0x0a\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      sload\n      swap1\n      mload\n      swap1\n      dup2\n      mstore\n      return\n    tag_30:\n      pop\n      pop\n      jumpi(tag_76, callvalue)\n      dup1\n      add(calldatasize, not(0x03))\n      slt\n      tag_76\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6021:6059  allowance(owner, spender) + addedValue */\n      tag_116\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      0x20\n      swap3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6021:6059  allowance(owner, spender) + addedValue */\n      tag_218\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      tag_219\n      tag_2\n      jump\t// in\n    tag_219:\n        /* \"@openzeppelin/contracts/utils/Context.sol\":734:744  msg.sender */\n      caller\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      dup4\n      mstore\n      0x01\n      dup7\n      mstore\n      dup5\n      dup4\n      keccak256\n      sub(shl(0xa0, 0x01), 0x01)\n      dup3\n      and\n      dup5\n      mstore\n      dup7\n      mstore\n      swap2\n      dup5\n      swap1\n      keccak256\n      sload\n      calldataload(0x24)\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6021:6059  allowance(owner, spender) + addedValue */\n      tag_8\n      jump\t// in\n    tag_218:\n        /* \"@openzeppelin/contracts/utils/Context.sol\":734:744  msg.sender */\n      swap1\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6021:6059  allowance(owner, spender) + addedValue */\n      tag_10\n      jump\t// in\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n    tag_28:\n      pop\n      pop\n      jumpi(tag_76, callvalue)\n      dup2\n      add(calldatasize, not(0x03))\n      slt\n      tag_76\n      jumpi\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2922:2942  _domainSeparatorV4() */\n      swap1\n      tag_224\n      tag_13\n      jump\t// in\n    tag_224:\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      swap1\n      mload\n      swap1\n      dup2\n      mstore\n      return\n    tag_26:\n      pop\n      pop\n      jumpi(tag_76, callvalue)\n      dup2\n      add(calldatasize, not(0x03))\n      slt\n      tag_76\n      jumpi\n      0x20\n      swap1\n      mload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3186:3188  18 */\n      0x12\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      dup2\n      mstore\n      return\n    tag_24:\n      pop\n      dup3\n      swap1\n      jumpi(tag_76, callvalue)\n      jumpi(tag_76, slt(add(not(0x03), calldatasize), 0x60))\n      tag_233\n      tag_2\n      jump\t// in\n    tag_233:\n      tag_234\n      tag_3\n      jump\t// in\n    tag_234:\n      swap2\n      dup5\n      calldataload(0x44)\n      swap5\n      0x01\n      dup1\n      0xa0\n      shl\n      sub\n      dup5\n      and\n      dup2\n      mstore\n      mstore(0x20, 0x01)\n      dup2\n      dup2\n      keccak256\n        /* \"@openzeppelin/contracts/utils/Context.sol\":734:744  msg.sender */\n      caller\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      dup3\n      mstore\n      0x20\n      mstore\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11264:11281  type(uint256).max */\n      swap1\n      not(0x00)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11244:11281  currentAllowance != type(uint256).max */\n      dup3\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11240:11483  if (currentAllowance != type(uint256).max) {... */\n      tag_235\n      jumpi\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n    tag_236:\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5424:5430  amount */\n      dup7\n      tag_116\n      dup8\n      dup8\n      dup8\n      tag_9\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11240:11483  if (currentAllowance != type(uint256).max) {... */\n    tag_235:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11305:11331  currentAllowance >= amount */\n      dup5\n      dup3\n      lt\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      tag_238\n      jumpi\n      pop\n      swap2\n      dup4\n      swap2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11432:11457  currentAllowance - amount */\n      tag_240\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      0x20\n      swap7\n      swap6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5424:5430  amount */\n      tag_116\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      swap6\n      sub\n        /* \"@openzeppelin/contracts/utils/Context.sol\":734:744  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11432:11457  currentAllowance - amount */\n      dup4\n      tag_10\n      jump\t// in\n    tag_240:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11240:11483  if (currentAllowance != type(uint256).max) {... */\n      swap2\n      swap4\n      swap5\n      dup2\n      swap4\n      pop\n      jump(tag_236)\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n    tag_238:\n      0x64\n      swap1\n      0x20\n      dup8\n      mload\n      swap2\n      shl(0xe5, 0x461bcd)\n      dup4\n      mstore\n      dup3\n      add\n      mstore\n      0x1d\n      0x24\n      dup3\n      add\n      mstore\n      0x45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000\n      0x44\n      dup3\n      add\n      mstore\n      revert\n    tag_22:\n      pop\n      pop\n      jumpi(tag_76, callvalue)\n      dup2\n      add(calldatasize, not(0x03))\n      slt\n      tag_76\n      jumpi\n      0x20\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3342:3354  _totalSupply */\n      0x02\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      sload\n      swap1\n      mload\n      swap1\n      dup2\n      mstore\n      return\n    tag_20:\n      pop\n      pop\n      jumpi(tag_76, callvalue)\n      dup1\n      add(calldatasize, not(0x03))\n      slt\n      tag_76\n      jumpi\n      0x20\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4606:4612  amount */\n      tag_116\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      tag_250\n      tag_2\n      jump\t// in\n    tag_250:\n      calldataload(0x24)\n        /* \"@openzeppelin/contracts/utils/Context.sol\":734:744  msg.sender */\n      swap1\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4606:4612  amount */\n      tag_10\n      jump\t// in\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n    tag_18:\n      dup5\n      swap1\n      dup5\n      jumpi(tag_68, callvalue)\n      dup3\n      add(calldatasize, not(0x03))\n      slt\n      tag_68\n      jumpi\n      dup3\n      sload(0x03)\n      tag_255\n      dup2\n      tag_5\n      jump\t// in\n    tag_255:\n      dup1\n      dup6\n      mstore\n      swap2\n      0x01\n      swap2\n      dup1\n      dup4\n      and\n      swap1\n      dup2\n      iszero\n      tag_256\n      jumpi\n      pop\n      0x01\n      eq\n      tag_258\n      jumpi\n    tag_259:\n      pop\n      pop\n      pop\n      tag_145\n      dup3\n      tag_144\n      swap5\n      sub\n      dup4\n      tag_7\n      jump\t// in\n    tag_258:\n      swap5\n      pop\n      0x03\n      dup6\n      mstore\n      0xc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b\n    tag_262:\n      dup3\n      dup7\n      lt\n      tag_263\n      jumpi\n      pop\n      pop\n      pop\n      tag_145\n      dup3\n      0x20\n      tag_144\n      swap6\n      dup3\n      add\n      add\n      swap5\n      jump(tag_259)\n    tag_263:\n      dup1\n      sload\n      0x20\n      dup8\n      dup8\n      add\n      dup2\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      swap1\n      swap6\n      add\n      swap5\n      dup2\n      add\n      jump(tag_262)\n    tag_256:\n      tag_144\n      swap8\n      pop\n      dup7\n      swap4\n      pop\n      0x20\n      swap3\n      pop\n      tag_145\n      swap5\n      swap2\n      pop\n      not(0xff)\n      and\n      dup3\n      dup5\n      add\n      mstore\n      iszero\n      iszero\n      0x05\n      shl\n      dup3\n      add\n      add\n      swap5\n      jump(tag_259)\n    tag_1:\n      swap2\n      swap1\n      dup3\n      mload\n      swap3\n      dup4\n      dup3\n      mstore\n      0x00\n    tag_265:\n      dup5\n      dup2\n      lt\n      tag_266\n      jumpi\n      pop\n      pop\n      dup3\n      0x00\n      0x20\n      dup1\n      swap5\n      swap6\n      dup5\n      add\n      add\n      mstore\n      0x1f\n      dup1\n      not\n      swap2\n      add\n      and\n      add\n      add\n      swap1\n      jump\t// out\n    tag_266:\n      0x20\n      dup2\n      dup4\n      add\n      dup2\n      add\n      mload\n      dup5\n      dup4\n      add\n      dup3\n      add\n      mstore\n      add\n      jump(tag_265)\n    tag_2:\n      calldataload(0x04)\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      dup3\n      and\n      dup3\n      sub\n      tag_268\n      jumpi\n      jump\t// out\n    tag_268:\n      0x00\n      dup1\n      revert\n    tag_3:\n      calldataload(0x24)\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      dup3\n      and\n      dup3\n      sub\n      tag_268\n      jumpi\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1359:1489  function _checkOwner() internal view virtual {... */\n    tag_4:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1273:1279  _owner */\n      0x09\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"@openzeppelin/contracts/utils/Context.sol\":734:744  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1422:1445  owner() == _msgSender() */\n      sub\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      tag_272\n      jumpi\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1359:1489  function _checkOwner() internal view virtual {... */\n      jump\t// out\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n    tag_272:\n      0x64\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x20\n      0x24\n      dup3\n      add\n      mstore\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n      0x44\n      dup3\n      add\n      mstore\n      revert\n    tag_5:\n      swap1\n      0x01\n      dup3\n      dup2\n      shr\n      swap3\n      and\n      dup1\n      iszero\n      tag_274\n      jumpi\n    tag_275:\n      0x20\n      dup4\n      lt\n      eq\n      tag_276\n      jumpi\n      jump\t// out\n    tag_276:\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x22)\n      revert(0x00, 0x24)\n    tag_274:\n      swap2\n      0x7f\n      and\n      swap2\n      jump(tag_275)\n    tag_6:\n      0x40\n      dup2\n      add\n      swap1\n      dup2\n      lt\n      0xffffffffffffffff\n      dup3\n      gt\n      or\n      tag_278\n      jumpi\n      0x40\n      mstore\n      jump\t// out\n    tag_278:\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x41)\n      revert(0x00, 0x24)\n    tag_7:\n      swap1\n      0x1f\n      dup1\n      not\n      swap2\n      add\n      and\n      dup2\n      add\n      swap1\n      dup2\n      lt\n      0xffffffffffffffff\n      dup3\n      gt\n      or\n      tag_278\n      jumpi\n      0x40\n      mstore\n      jump\t// out\n    tag_8:\n      swap2\n      swap1\n      dup3\n      add\n      dup1\n      swap3\n      gt\n      tag_282\n      jumpi\n      jump\t// out\n    tag_282:\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x11)\n      revert(0x00, 0x24)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7456:8244  function _transfer(address from, address to, uint256 amount) internal virtual {... */\n    tag_9:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      swap1\n      dup2\n      and\n      swap2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7552:7570  from != address(0) */\n      dup3\n      iszero\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      tag_284\n      jumpi\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7630:7646  to != address(0) */\n      swap2\n      dup3\n      iszero\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      tag_286\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7568:7569  0 */\n      0x00\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      dup3\n      dup2\n      mstore\n      dup1\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7801:7822  fromBalance >= amount */\n      swap2\n      dup1\n      dup4\n      lt\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      tag_288\n      jumpi\n      0x40\n      dup3\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8163:8189  Transfer(from, to, amount) */\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      swap6\n      dup8\n      0x20\n      swap7\n      mstore\n      dup3\n      dup7\n      mstore\n      sub\n      dup3\n      dup3\n      keccak256\n      sstore\n      dup7\n      dup2\n      mstore\n      keccak256\n      dup2\n      dup2\n      sload\n      add\n      swap1\n      sstore\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8163:8189  Transfer(from, to, amount) */\n      log3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7456:8244  function _transfer(address from, address to, uint256 amount) internal virtual {... */\n      jump\t// out\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n    tag_288:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x26\n      0x24\n      dup3\n      add\n      mstore\n      0x45524332303a207472616e7366657220616d6f756e7420657863656564732062\n      0x44\n      dup3\n      add\n      mstore\n      shl(0xd0, 0x616c616e6365)\n      0x64\n      dup3\n      add\n      mstore\n      0x84\n      swap1\n      revert\n    tag_286:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x23\n      0x24\n      dup3\n      add\n      mstore\n      0x45524332303a207472616e7366657220746f20746865207a65726f2061646472\n      0x44\n      dup3\n      add\n      mstore\n      shl(0xe8, 0x657373)\n      0x64\n      dup3\n      add\n      mstore\n      0x84\n      swap1\n      revert\n    tag_284:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x25\n      0x24\n      dup3\n      add\n      mstore\n      0x45524332303a207472616e736665722066726f6d20746865207a65726f206164\n      0x44\n      dup3\n      add\n      mstore\n      shl(0xd8, 0x6472657373)\n      0x64\n      dup3\n      add\n      mstore\n      0x84\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10457:10797  function _approve(address owner, address spender, uint256 amount) internal virtual {... */\n    tag_10:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      swap1\n      dup2\n      and\n      swap2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10558:10577  owner != address(0) */\n      dup3\n      iszero\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      tag_290\n      jumpi\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10636:10657  spender != address(0) */\n      swap2\n      dup3\n      iszero\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      tag_292\n      jumpi\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10758:10790  Approval(owner, spender, amount) */\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      swap2\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10575:10576  0 */\n      0x00\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      mstore\n      0x01\n      dup3\n      mstore\n      0x40\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10575:10576  0 */\n      0x00\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      keccak256\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10575:10576  0 */\n      0x00\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      mstore\n      dup3\n      mstore\n      dup1\n      0x40\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10575:10576  0 */\n      0x00\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      keccak256\n      sstore\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10758:10790  Approval(owner, spender, amount) */\n      log3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10457:10797  function _approve(address owner, address spender, uint256 amount) internal virtual {... */\n      jump\t// out\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n    tag_292:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x22\n      0x24\n      dup3\n      add\n      mstore\n      0x45524332303a20617070726f766520746f20746865207a65726f206164647265\n      0x44\n      dup3\n      add\n      mstore\n      shl(0xf0, 0x7373)\n      0x64\n      dup3\n      add\n      mstore\n      0x84\n      swap1\n      revert\n    tag_290:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x24\n      dup1\n      dup3\n      add\n      mstore\n      0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464\n      0x44\n      dup3\n      add\n      mstore\n      shl(0xe0, 0x72657373)\n      0x64\n      dup3\n      add\n      mstore\n      0x84\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":570:1081  function _throwError(RecoverError error) private pure {... */\n    tag_11:\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      0x05\n      dup2\n      lt\n      iszero\n      tag_294\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":638:667  error == RecoverError.NoError */\n      dup1\n      tag_296\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":683:690  return; */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":634:1075  if (error == RecoverError.NoError) {... */\n    tag_296:\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      0x01\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":734:772  error == RecoverError.InvalidSignature */\n      dup2\n      sub\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      tag_298\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":788:822  revert(\"ECDSA: invalid signature\") */\n      dup2\n      mstore\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      0x20\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":788:822  revert(\"ECDSA: invalid signature\") */\n      0x04\n      dup3\n      add\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      mstore\n      0x18\n      0x24\n      dup3\n      add\n      mstore\n      0x45434453413a20696e76616c6964207369676e61747572650000000000000000\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":788:822  revert(\"ECDSA: invalid signature\") */\n      revert\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":730:1075  if (error == RecoverError.InvalidSignature) {... */\n    tag_298:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":852:887  RecoverError.InvalidSignatureLength */\n      0x02\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":843:887  error == RecoverError.InvalidSignatureLength */\n      dup2\n      sub\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":852:887  RecoverError.InvalidSignatureLength */\n      tag_300\n      jumpi\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":903:944  revert(\"ECDSA: invalid signature length\") */\n      dup2\n      mstore\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      0x20\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":903:944  revert(\"ECDSA: invalid signature length\") */\n      0x04\n      dup3\n      add\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      mstore\n      0x1f\n      0x24\n      dup3\n      add\n      mstore\n      0x45434453413a20696e76616c6964207369676e6174757265206c656e67746800\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":903:944  revert(\"ECDSA: invalid signature length\") */\n      revert\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":839:1075  if (error == RecoverError.InvalidSignatureLength) {... */\n    tag_300:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":974:1004  RecoverError.InvalidSignatureS */\n      0x03\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":965:1004  error == RecoverError.InvalidSignatureS */\n      eq\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":961:1075  if (error == RecoverError.InvalidSignatureS) {... */\n      tag_302\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":570:1081  function _throwError(RecoverError error) private pure {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":961:1075  if (error == RecoverError.InvalidSignatureS) {... */\n    tag_302:\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":1020:1064  revert(\"ECDSA: invalid signature 's' value\") */\n      dup2\n      mstore\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      0x20\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":1020:1064  revert(\"ECDSA: invalid signature 's' value\") */\n      0x04\n      dup3\n      add\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      mstore\n      0x22\n      0x24\n      dup3\n      add\n      mstore\n      0x45434453413a20696e76616c6964207369676e6174757265202773272076616c\n      0x44\n      dup3\n      add\n      mstore\n      shl(0xf0, 0x7565)\n      0x64\n      dup3\n      add\n      mstore\n      0x84\n      swap1\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":1020:1064  revert(\"ECDSA: invalid signature 's' value\") */\n      revert\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n    tag_294:\n      shl(0xe0, 0x4e487b71)\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":647:667  RecoverError.NoError */\n      0x00\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      mstore\n      mstore(0x04, 0x21)\n      0x24\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":647:667  RecoverError.NoError */\n      0x00\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      revert\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":5009:6465  function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {... */\n    tag_12:\n      swap3\n      swap2\n      swap1\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6021:6087  0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 */\n      0x7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6008:6087  uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 */\n      dup4\n      gt\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6004:6165  if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {... */\n      tag_304\n      jumpi\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      swap2\n      0x80\n      swap5\n      swap4\n      swap2\n      0xff\n      0x20\n      swap5\n      mload(0x40)\n      swap5\n      dup6\n      mstore\n      and\n      dup5\n      dup5\n      add\n      mstore\n      0x40\n      dup4\n      add\n      mstore\n      0x60\n      dup3\n      add\n      mstore\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6276:6300  ecrecover(hash, v, r, s) */\n      swap4\n      dup5\n      swap2\n      dup3\n      dup1\n      mstore\n      0x01\n      gas\n      staticcall\n      iszero\n      tag_306\n      jumpi\n      dup2\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      dup2\n      and\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6314:6334  signer == address(0) */\n      iszero\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6310:6411  if (signer == address(0)) {... */\n      tag_308\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6421:6458  return (signer, RecoverError.NoError) */\n      swap2\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":5009:6465  function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6310:6411  if (signer == address(0)) {... */\n    tag_308:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6350:6400  return (address(0), RecoverError.InvalidSignature) */\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6276:6300  ecrecover(hash, v, r, s) */\n      0x01\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6350:6400  return (address(0), RecoverError.InvalidSignature) */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6276:6300  ecrecover(hash, v, r, s) */\n    tag_306:\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      pop\n      mload(0x40)\n      swap1\n      returndatasize\n      swap1\n      dup3\n      returndatacopy\n      returndatasize\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6004:6165  if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {... */\n    tag_304:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6103:6154  return (address(0), RecoverError.InvalidSignatureS) */\n      pop\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6119:6120  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6103:6154  return (address(0), RecoverError.InvalidSignatureS) */\n      swap1\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6123:6153  RecoverError.InvalidSignatureS */\n      0x03\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6103:6154  return (address(0), RecoverError.InvalidSignatureS) */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3695:3957  function _domainSeparatorV4() internal view returns (bytes32) {... */\n    tag_13:\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3779:3783  this */\n      address\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3788:3799  _cachedThis */\n      immutable(\"0x4814dc1be776080d361f6793401698ee1cdc54b485fd7f233308314eec077dfe\")\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      and\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3771:3799  address(this) == _cachedThis */\n      eq\n      dup1\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3771:3834  address(this) == _cachedThis && block.chainid == _cachedChainId */\n      tag_310\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3695:3957  function _domainSeparatorV4() internal view returns (bytes32) {... */\n    tag_311:\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3767:3951  if (address(this) == _cachedThis && block.chainid == _cachedChainId) {... */\n      iszero\n      tag_312\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3857:3879  _cachedDomainSeparator */\n      immutable(\"0x923831463c3a49e9922442ac185c857970685647ffa411016bb09cd1e1a613f6\")\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3850:3879  return _cachedDomainSeparator */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3767:3951  if (address(this) == _cachedThis && block.chainid == _cachedChainId) {... */\n    tag_312:\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      mload(0x40)\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4054:4135  abi.encode(_TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)) */\n      0x20\n      dup2\n      add\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      swap1\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":1929:2024  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n      0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      dup3\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4077:4088  _hashedName */\n      immutable(\"0x4f722aad0315bc3832e551ccf6da3e098baeb8ee055023fde26c377410bf01b8\")\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      0x40\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":1929:2024  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n      dup3\n      add\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4090:4104  _hashedVersion */\n      immutable(\"0xa2e64fbf175a4ab12443e929d11bd296058f26b9a652a2d5603d5bee0fd8697c\")\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":1929:2024  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n      0x60\n      dup3\n      add\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4106:4119  block.chainid */\n      chainid\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":1929:2024  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n      0x80\n      dup3\n      add\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3779:3783  this */\n      address\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      0xa0\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":1929:2024  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n      dup3\n      add\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      mstore\n      0xa0\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4054:4135  abi.encode(_TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)) */\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":1929:2024  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n      0xc0\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      dup2\n      add\n      dup2\n      dup2\n      lt\n      0xffffffffffffffff\n      dup3\n      gt\n      or\n      tag_278\n      jumpi\n      0x40\n      mstore\n      mload\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4044:4136  keccak256(abi.encode(_TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this))) */\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3910:3940  return _buildDomainSeparator() */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3771:3834  address(this) == _cachedThis && block.chainid == _cachedChainId */\n    tag_310:\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3820:3834  _cachedChainId */\n      pop\n      immutable(\"0x1dda9873baa24e5dc3a48371aa5a89ce85f19f9dd041db3ba184e623299b8433\")\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3803:3816  block.chainid */\n      chainid\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3803:3834  block.chainid == _cachedChainId */\n      eq\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3771:3834  address(this) == _cachedThis && block.chainid == _cachedChainId */\n      jump(tag_311)\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3367:3635  function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {... */\n    tag_14:\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1371:1437  0x00000000000000000000000000000000000000000000000000000000000000FF */\n      0xff\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3490:3537  ShortString.unwrap(value) != _FALLBACK_SENTINEL */\n      dup2\n      eq\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1371:1437  0x00000000000000000000000000000000000000000000000000000000000000FF */\n      tag_316\n      jumpi\n      0xff\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2633:2673  uint256(ShortString.unwrap(sstr)) & 0xFF */\n      dup2\n      and\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2687:2698  result > 31 */\n      swap1\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2696:2698  31 */\n      0x1f\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2687:2698  result > 31 */\n      dup3\n      gt\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2683:2752  if (result > 31) {... */\n      tag_318\n      jumpi\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      mload(0x40)\n      swap2\n      tag_320\n      dup4\n      tag_6\n      jump\t// in\n    tag_320:\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2348:2438  assembly {... */\n      dup3\n      mstore\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2292:2294  32 */\n      0x20\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      dup3\n      add\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2348:2438  assembly {... */\n      mstore\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3553:3575  return toString(value) */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2683:2752  if (result > 31) {... */\n    tag_318:\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      mload(0x40)\n      shl(0xe2, 0x2cd44ac3)\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2721:2741  InvalidShortString() */\n      dup2\n      mstore\n      0x04\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3486:3629  if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {... */\n    tag_316:\n      pop\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      mload(0x40)\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5454:5467  _nameFallback */\n      0x05\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      sload\n      dup2\n      0x00\n      tag_321\n      dup4\n      tag_5\n      jump\t// in\n    tag_321:\n      dup1\n      dup4\n      mstore\n      swap3\n      0x01\n      swap1\n      dup2\n      dup2\n      and\n      swap1\n      dup2\n      iszero\n      tag_322\n      jumpi\n      pop\n      0x01\n      eq\n      tag_324\n      jumpi\n    tag_325:\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1371:1437  0x00000000000000000000000000000000000000000000000000000000000000FF */\n      pop\n      tag_326\n      swap3\n      pop\n      sub\n      dup3\n      tag_7\n      jump\t// in\n    tag_326:\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3606:3618  return store */\n      swap1\n      jump\t// out\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n    tag_324:\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5454:5467  _nameFallback */\n      0x05\n      0x00\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      swap1\n      dup2\n      mstore\n      swap2\n      pop\n      0x036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0\n    tag_327:\n      dup5\n      dup4\n      lt\n      tag_328\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1371:1437  0x00000000000000000000000000000000000000000000000000000000000000FF */\n      tag_326\n      swap4\n      pop\n      pop\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      dup2\n      add\n      0x20\n      add\n      codesize\n      jump(tag_325)\n    tag_328:\n      dup2\n      swap4\n      pop\n      swap1\n      dup2\n      0x20\n      swap3\n      sload\n      dup4\n      dup6\n      dup10\n      add\n      add\n      mstore\n      add\n      swap2\n      add\n      swap1\n      swap2\n      dup5\n      swap3\n      jump(tag_327)\n    tag_322:\n      swap1\n      pop\n      0x20\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1371:1437  0x00000000000000000000000000000000000000000000000000000000000000FF */\n      tag_326\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      swap5\n      swap2\n      pop\n      not(0xff)\n      and\n      dup3\n      dup5\n      add\n      mstore\n      iszero\n      iszero\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5454:5467  _nameFallback */\n      0x05\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      shl\n      dup3\n      add\n      add\n      codesize\n      jump(tag_325)\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3367:3635  function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {... */\n    tag_15:\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1371:1437  0x00000000000000000000000000000000000000000000000000000000000000FF */\n      0xff\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3490:3537  ShortString.unwrap(value) != _FALLBACK_SENTINEL */\n      dup2\n      eq\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1371:1437  0x00000000000000000000000000000000000000000000000000000000000000FF */\n      tag_330\n      jumpi\n      0xff\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2633:2673  uint256(ShortString.unwrap(sstr)) & 0xFF */\n      dup2\n      and\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2687:2698  result > 31 */\n      swap1\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2696:2698  31 */\n      0x1f\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2687:2698  result > 31 */\n      dup3\n      gt\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2683:2752  if (result > 31) {... */\n      tag_318\n      jumpi\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      mload(0x40)\n      swap2\n      tag_320\n      dup4\n      tag_6\n      jump\t// in\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3486:3629  if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {... */\n    tag_330:\n      pop\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      mload(0x40)\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5512:5528  _versionFallback */\n      0x06\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      sload\n      dup2\n      0x00\n      tag_335\n      dup4\n      tag_5\n      jump\t// in\n    tag_335:\n      dup1\n      dup4\n      mstore\n      swap3\n      0x01\n      swap1\n      dup2\n      dup2\n      and\n      swap1\n      dup2\n      iszero\n      tag_322\n      jumpi\n      pop\n      0x01\n      eq\n      tag_338\n      jumpi\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1371:1437  0x00000000000000000000000000000000000000000000000000000000000000FF */\n      pop\n      tag_326\n      swap3\n      pop\n      sub\n      dup3\n      tag_7\n      jump\t// in\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n    tag_338:\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5512:5528  _versionFallback */\n      0x06\n      0x00\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      swap1\n      dup2\n      mstore\n      swap2\n      pop\n      0xf652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f\n    tag_341:\n      dup5\n      dup4\n      lt\n      tag_342\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1371:1437  0x00000000000000000000000000000000000000000000000000000000000000FF */\n      tag_326\n      swap4\n      pop\n      pop\n        /* \"contracts/TurtleToken.sol\":255:3286  contract TurtleToken is ERC20, ERC20Permit, Ownable {... */\n      dup2\n      add\n      0x20\n      add\n      codesize\n      jump(tag_325)\n    tag_342:\n      dup2\n      swap4\n      pop\n      swap1\n      dup2\n      0x20\n      swap3\n      sload\n      dup4\n      dup6\n      dup10\n      add\n      add\n      mstore\n      add\n      swap2\n      add\n      swap1\n      swap2\n      dup5\n      swap3\n      jump(tag_341)\n\n    auxdata: 0xa26469706673582212206eb8ae5620ff3a88207d591b59936293ae3b006b52d6cc83bb3128252a89d3f764736f6c63430008120033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"finalize_allocation": {
									"entryPoint": 1395,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"fun_toShortStringWithFallback": {
									"entryPoint": 1423,
									"id": 1296,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"fun_toShortStringWithFallback_7420": {
									"entryPoint": 1897,
									"id": 1296,
									"parameterSlots": 1,
									"returnSlots": 1
								}
							},
							"generatedSources": [],
							"linkReferences": {},
							"object": "610160346200055857601f906001600160401b0390601f19906200209190388290038581018416820190858211838310176200055d57808391604095869485528339810103126200055857805160208092015191835194620000618662000573565b600b8652818601966a2a3ab93a3632aa37b5b2b760a91b988989528651996200008a8b62000573565b600b8b52848b0152865199620000a08b62000573565b600493848c52631515549560e21b868d015288519b8c92620000c28462000573565b876001948581520193603160f81b85528151878111620004595760039283548381811c911680156200054d575b8c8210146200053857908b828a859411620004df575b50508b908983116001146200047a576000926200046e575b505060001982851b1c191690821b1782555b825192878411620004595788548281811c911680156200044e575b8b8210146200043957878111620003ee575b50899087851160011462000385578495509084929160009562000379575b50501b92600019911b1c19161784555b62000195896200058f565b996101209a8b52620001a78c62000769565b996101409a8b525190209a8b60e052519020906101009a828c524660a052885192868401917f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f83528a85015260608401524660808401523060a084015260a0835260c0830193838510908511176200036457838952825190206080523060c05260098054336001600160a01b0319821681179092556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a330156200032357505050600254908382018092116200030e57506000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9160025530835282815285832084815401905585519384523093a3600a55519161176f938462000922853960805184611491015260a0518461155d015260c0518461145b015260e051846114e001525183611506015251826107cb015251816107f50152f35b601190634e487b7160e01b6000525260246000fd5b610104606493927f45524332303a206d696e7420746f20746865207a65726f206164647265737300928762461bcd60e51b865260c483015260e48201520152fd5b604185634e487b7160e01b6000525260246000fd5b0151935038806200017a565b92919484169289600052848b6000209460005b8d89838310620003d65750505010620003bb575b50505050811b0184556200018a565b01519060f884600019921b161c1916905538808080620003ac565b86860151895590970196948501948893500162000398565b896000528a6000208880870160051c8201928d88106200042f575b0160051c019083905b828110620004225750506200015c565b6000815501839062000412565b9250819262000409565b60228a634e487b7160e01b6000525260246000fd5b90607f16906200014a565b604189634e487b7160e01b6000525260246000fd5b0151905038806200011d565b908c91888695168760005283600020936000905b828210620004c75750508411620004ae575b505050811b0182556200012f565b015160001983871b60f8161c19169055388080620004a0565b83850151865588979095019493840193018f6200048e565b909192508560005289826000209181860160051c83019386106200052e575b918691869594930160051c01915b8281106200051e57508d915062000105565b600081558594508691016200050c565b92508192620004fe565b60228b634e487b7160e01b6000525260246000fd5b90607f1690620000ef565b600080fd5b634e487b7160e01b600052604160045260246000fd5b604081019081106001600160401b038211176200055d57604052565b805160209190828110156200062e575090601f825111620005cd5780825192015190808310620005be57501790565b82600019910360031b1b161790565b90604051809263305a27a960e01b82528060048301528251908160248401526000935b82851062000614575050604492506000838284010152601f80199101168101030190fd5b8481018201518686016044015293810193859350620005f0565b6001600160401b0381116200055d576005928354926001938481811c911680156200075e575b838210146200074857601f811162000711575b5081601f8411600114620006a757509282939183926000946200069b575b50501b916000199060031b1c191617905560ff90565b01519250388062000685565b919083601f1981168760005284600020946000905b88838310620006f65750505010620006dc575b505050811b01905560ff90565b015160001960f88460031b161c19169055388080620006cf565b858701518855909601959485019487935090810190620006bc565b8560005284601f846000209201871c820191601f8601881c015b8281106200073b57505062000667565b600081550185906200072b565b634e487b7160e01b600052602260045260246000fd5b90607f169062000654565b805160209081811015620007f75750601f825111620007965780825192015190808310620005be57501790565b90604051809263305a27a960e01b82528060048301528251908160248401526000935b828510620007dd575050604492506000838284010152601f80199101168101030190fd5b8481018201518686016044015293810193859350620007b9565b906001600160401b0382116200055d57600654926001938481811c9116801562000916575b838210146200074857601f8111620008dc575b5081601f841160011462000870575092829391839260009462000864575b50501b916000199060031b1c19161760065560ff90565b0151925038806200084d565b919083601f198116600660005284600020946000905b88838310620008c15750505010620008a7575b505050811b0160065560ff90565b015160001960f88460031b161c1916905538808062000899565b85870151885590960195948501948793509081019062000886565b600660005284601f84600020920160051c820191601f860160051c015b828110620009095750506200082f565b60008155018590620008f9565b90607f16906200081c56fe6080604081815260048036101561001557600080fd5b600092833560e01c90816306fdde0314610df457508063095ea7b314610dca57806318160ddd14610dab57806323b872dd14610ce1578063313ce56714610cc55780633644e51514610ca15780633950935114610c515780633ba0b9a914610c3257806340c10f1914610b6c5780636c11bcd31461099d57806370a0823114610966578063715018a6146109095780637ecebe00146108d157806384b0196e146107b45780638da5cb5b1461078b57806395d89b41146106a1578063a0ef91df1461061e578063a457c2d714610577578063a9059cbb14610546578063d0febe4c14610421578063d505accf14610268578063db068e0e14610246578063dd62ed3e146101f95763f2fde38b1461012b57600080fd5b346101f55760203660031901126101f557610144610f05565b9061014d610f36565b6001600160a01b039182169283156101a3575050600954826bffffffffffffffffffffffff60a01b821617600955167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8280fd5b50503461024257806003193601126102425780602092610217610f05565b61021f610f20565b6001600160a01b0391821683526001865283832091168252845220549051908152f35b5080fd5b83823461024257602036600319011261024257610261610f36565b35600a5580f35b508290346102425760e036600319011261024257610284610f05565b61028c610f20565b906044359260643560843560ff8116810361041d578142116103da5760018060a01b0390818516928389526007602052898920908154916001830190558a519060208201927f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98452868d840152858a1660608401528a608084015260a083015260c082015260c0815260e0810181811067ffffffffffffffff8211176103c7578b5251902061036f9161036791610341611458565b908c519161190160f01b83526002830152602282015260c43591604260a43592206113c9565b9190916112af565b160361038457506103819394506111ad565b80f35b606490602087519162461bcd60e51b8352820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e617475726500006044820152fd5b634e487b7160e01b8b526041875260248bfd5b875162461bcd60e51b8152602081850152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e650000006044820152606490fd5b8680fd5b5090826003193601126101f557341561050357600a5480340290348204036104f057670de0b6b3a76400009004913084528360205282828520541061049f57507f8fafebcaf9d154343dad25669bfa277f4fbacd7ac6b0c4fed522580e040a0f339061048e83333061103f565b80519234845260208401523392a280f35b6020608492519162461bcd60e51b8352820152602660248201527f496e73756666696369656e7420746f6b656e2062616c616e636520696e20636f6044820152651b9d1c9858dd60d21b6064820152fd5b634e487b7160e01b845260118352602484fd5b906020606492519162461bcd60e51b8352820152601960248201527f4d7573742073656e642045544820746f2065786368616e6765000000000000006044820152fd5b505034610242578060031936011261024257602090610570610566610f05565b602435903361103f565b5160018152f35b50823461061b578260031936011261061b57610591610f05565b918360243592338152600160205281812060018060a01b03861682526020522054908282106105ca5760208561057085850387336111ad565b608490602086519162461bcd60e51b8352820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152fd5b80fd5b50346101f557826003193601126101f557610637610f36565b47908115610669575060095483918291829182916001600160a01b031682f11561065f575080f35b51903d90823e3d90fd5b606490602084519162461bcd60e51b835282015260126024820152714e6f2045544820746f20776974686472617760701b6044820152fd5b5090346101f557826003193601126101f557805191838154906106c382610f8e565b808652926001928084169081156107605750600114610704575b61070086866106ee828b0383610ffa565b51918291602083526020830190610ec5565b0390f35b815294507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b828610610748575050506106ee8260206107009582010194386106dd565b8054602087870181019190915290950194810161072a565b90506107009750869350602092506106ee94915060ff191682840152151560051b82010194386106dd565b50503461024257816003193601126102425760095490516001600160a01b039091168152602090f35b5090346101f557826003193601126101f5576107ef7f0000000000000000000000000000000000000000000000000000000000000000611583565b926108197f000000000000000000000000000000000000000000000000000000000000000061167f565b908251926020928385019585871067ffffffffffffffff8811176108be57509280610874838896610867998b9996528686528151998a99600f60f81b8b5260e0868c015260e08b0190610ec5565b91898303908a0152610ec5565b924660608801523060808801528460a088015286840360c088015251928381520193925b8281106108a757505050500390f35b835185528695509381019392810192600101610898565b634e487b7160e01b845260419052602483fd5b5050346102425760203660031901126102425760209181906001600160a01b036108f9610f05565b1681526007845220549051908152f35b833461061b578060031936011261061b57610922610f36565b600980546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b5050346102425760203660031901126102425760209181906001600160a01b0361098e610f05565b16815280845220549051908152f35b50346101f55760209182600319360112610b68578135918215610b1957338552848452828286205410610ad857670de0b6b3a76400008302670de0b6b3a763ffff1984820401610ac557600a54908115610ab2570490814710610a635750610a0683303361103f565b8480828015610a59575b8280929181923390f115610a4f577f2dcf9433d75db0d8b1c172641f85e319ffe4ad22e108a95d1847ceb906e5195d929382519485528401523392a280f35b81513d86823e3d90fd5b6108fc9150610a10565b825162461bcd60e51b81529081018590526024808201527f496e73756666696369656e74204554482062616c616e636520696e20636f6e746044820152631c9858dd60e21b6064820152608490fd5b634e487b7160e01b875260128352602487fd5b634e487b7160e01b865260118252602486fd5b83606492519162461bcd60e51b8352820152601a60248201527f496e73756666696369656e7420746f6b656e2062616c616e63650000000000006044820152fd5b83608492519162461bcd60e51b8352820152602560248201527f4d7573742073656c6c206120706f73697469766520616d6f756e74206f6620746044820152646f6b656e7360d81b6064820152fd5b8380fd5b5090346101f557806003193601126101f557610b86610f05565b9060243591610b93610f36565b6001600160a01b0316928315610bf057506020827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92610bd6879560025461101c565b60025585855284835280852082815401905551908152a380f35b6020606492519162461bcd60e51b8352820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152fd5b505034610242578160031936011261024257602090600a549051908152f35b505034610242578060031936011261024257610570602092610c9a610c74610f05565b338352600186528483206001600160a01b0382168452865291849020546024359061101c565b90336111ad565b505034610242578160031936011261024257602090610cbe611458565b9051908152f35b5050346102425781600319360112610242576020905160128152f35b5082903461024257606036600319011261024257610cfd610f05565b610d05610f20565b91846044359460018060a01b038416815260016020528181203382526020522054906000198203610d3f575b60208661057087878761103f565b848210610d685750918391610d5d60209695610570950333836111ad565b919394819350610d31565b606490602087519162461bcd60e51b8352820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152fd5b5050346102425781600319360112610242576020906002549051908152f35b505034610242578060031936011261024257602090610570610dea610f05565b60243590336111ad565b849084346101f557826003193601126101f55782600354610e1481610f8e565b80855291600191808316908115610e9d5750600114610e40575b5050506106ee82610700940383610ffa565b9450600385527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b828610610e85575050506106ee8260206107009582010194610e2e565b80546020878701810191909152909501948101610e68565b6107009750869350602092506106ee94915060ff191682840152151560051b82010194610e2e565b919082519283825260005b848110610ef1575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610ed0565b600435906001600160a01b0382168203610f1b57565b600080fd5b602435906001600160a01b0382168203610f1b57565b6009546001600160a01b03163303610f4a57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b90600182811c92168015610fbe575b6020831014610fa857565b634e487b7160e01b600052602260045260246000fd5b91607f1691610f9d565b6040810190811067ffffffffffffffff821117610fe457604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117610fe457604052565b9190820180921161102957565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0390811691821561115a5716918215611109576000828152806020526040812054918083106110b557604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220818154019055604051908152a3565b60405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b6001600160a01b0390811691821561125e571691821561120e5760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260018252604060002085600052825280604060002055604051908152a3565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b60058110156113b357806112c05750565b6001810361130d5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606490fd5b6002810361135a5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606490fd5b60031461136357565b60405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608490fd5b634e487b7160e01b600052602160045260246000fd5b9291907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831161144c5791608094939160ff602094604051948552168484015260408301526060820152600093849182805260015afa1561143f5781516001600160a01b03811615611439579190565b50600190565b50604051903d90823e3d90fd5b50505050600090600390565b307f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316148061155a575b156114b3577f000000000000000000000000000000000000000000000000000000000000000090565b60405160208101907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f82527f000000000000000000000000000000000000000000000000000000000000000060408201527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260a0815260c0810181811067ffffffffffffffff821117610fe45760405251902090565b507f0000000000000000000000000000000000000000000000000000000000000000461461148a565b60ff81146115c15760ff811690601f82116115af57604051916115a583610fc8565b8252602082015290565b604051632cd44ac360e21b8152600490fd5b506040516005548160006115d483610f8e565b8083529260019081811690811561165d57506001146115fe575b506115fb92500382610ffa565b90565b6005600090815291507f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db05b84831061164257506115fb9350508101602001386115ee565b81935090816020925483858901015201910190918492611629565b9050602092506115fb94915060ff191682840152151560051b820101386115ee565b60ff81146116a15760ff811690601f82116115af57604051916115a583610fc8565b506040516006548160006116b483610f8e565b8083529260019081811690811561165d57506001146116da57506115fb92500382610ffa565b6006600090815291507ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f5b84831061171e57506115fb9350508101602001386115ee565b8193509081602092548385890101520191019091849261170556fea26469706673582212206eb8ae5620ff3a88207d591b59936293ae3b006b52d6cc83bb3128252a89d3f764736f6c63430008120033",
							"opcodes": "PUSH2 0x160 CALLVALUE PUSH3 0x558 JUMPI PUSH1 0x1F SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 PUSH1 0x1F NOT SWAP1 PUSH3 0x2091 SWAP1 CODESIZE DUP3 SWAP1 SUB DUP6 DUP2 ADD DUP5 AND DUP3 ADD SWAP1 DUP6 DUP3 GT DUP4 DUP4 LT OR PUSH3 0x55D JUMPI DUP1 DUP4 SWAP2 PUSH1 0x40 SWAP6 DUP7 SWAP5 DUP6 MSTORE DUP4 CODECOPY DUP2 ADD SUB SLT PUSH3 0x558 JUMPI DUP1 MLOAD PUSH1 0x20 DUP1 SWAP3 ADD MLOAD SWAP2 DUP4 MLOAD SWAP5 PUSH3 0x61 DUP7 PUSH3 0x573 JUMP JUMPDEST PUSH1 0xB DUP7 MSTORE DUP2 DUP7 ADD SWAP7 PUSH11 0x2A3AB93A3632AA37B5B2B7 PUSH1 0xA9 SHL SWAP9 DUP10 DUP10 MSTORE DUP7 MLOAD SWAP10 PUSH3 0x8A DUP12 PUSH3 0x573 JUMP JUMPDEST PUSH1 0xB DUP12 MSTORE DUP5 DUP12 ADD MSTORE DUP7 MLOAD SWAP10 PUSH3 0xA0 DUP12 PUSH3 0x573 JUMP JUMPDEST PUSH1 0x4 SWAP4 DUP5 DUP13 MSTORE PUSH4 0x15155495 PUSH1 0xE2 SHL DUP7 DUP14 ADD MSTORE DUP9 MLOAD SWAP12 DUP13 SWAP3 PUSH3 0xC2 DUP5 PUSH3 0x573 JUMP JUMPDEST DUP8 PUSH1 0x1 SWAP5 DUP6 DUP2 MSTORE ADD SWAP4 PUSH1 0x31 PUSH1 0xF8 SHL DUP6 MSTORE DUP2 MLOAD DUP8 DUP2 GT PUSH3 0x459 JUMPI PUSH1 0x3 SWAP3 DUP4 SLOAD DUP4 DUP2 DUP2 SHR SWAP2 AND DUP1 ISZERO PUSH3 0x54D JUMPI JUMPDEST DUP13 DUP3 LT EQ PUSH3 0x538 JUMPI SWAP1 DUP12 DUP3 DUP11 DUP6 SWAP5 GT PUSH3 0x4DF JUMPI JUMPDEST POP POP DUP12 SWAP1 DUP10 DUP4 GT PUSH1 0x1 EQ PUSH3 0x47A JUMPI PUSH1 0x0 SWAP3 PUSH3 0x46E JUMPI JUMPDEST POP POP PUSH1 0x0 NOT DUP3 DUP6 SHL SHR NOT AND SWAP1 DUP3 SHL OR DUP3 SSTORE JUMPDEST DUP3 MLOAD SWAP3 DUP8 DUP5 GT PUSH3 0x459 JUMPI DUP9 SLOAD DUP3 DUP2 DUP2 SHR SWAP2 AND DUP1 ISZERO PUSH3 0x44E JUMPI JUMPDEST DUP12 DUP3 LT EQ PUSH3 0x439 JUMPI DUP8 DUP2 GT PUSH3 0x3EE JUMPI JUMPDEST POP DUP10 SWAP1 DUP8 DUP6 GT PUSH1 0x1 EQ PUSH3 0x385 JUMPI DUP5 SWAP6 POP SWAP1 DUP5 SWAP3 SWAP2 PUSH1 0x0 SWAP6 PUSH3 0x379 JUMPI JUMPDEST POP POP SHL SWAP3 PUSH1 0x0 NOT SWAP2 SHL SHR NOT AND OR DUP5 SSTORE JUMPDEST PUSH3 0x195 DUP10 PUSH3 0x58F JUMP JUMPDEST SWAP10 PUSH2 0x120 SWAP11 DUP12 MSTORE PUSH3 0x1A7 DUP13 PUSH3 0x769 JUMP JUMPDEST SWAP10 PUSH2 0x140 SWAP11 DUP12 MSTORE MLOAD SWAP1 KECCAK256 SWAP11 DUP12 PUSH1 0xE0 MSTORE MLOAD SWAP1 KECCAK256 SWAP1 PUSH2 0x100 SWAP11 DUP3 DUP13 MSTORE CHAINID PUSH1 0xA0 MSTORE DUP9 MLOAD SWAP3 DUP7 DUP5 ADD SWAP2 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F DUP4 MSTORE DUP11 DUP6 ADD MSTORE PUSH1 0x60 DUP5 ADD MSTORE CHAINID PUSH1 0x80 DUP5 ADD MSTORE ADDRESS PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0xA0 DUP4 MSTORE PUSH1 0xC0 DUP4 ADD SWAP4 DUP4 DUP6 LT SWAP1 DUP6 GT OR PUSH3 0x364 JUMPI DUP4 DUP10 MSTORE DUP3 MLOAD SWAP1 KECCAK256 PUSH1 0x80 MSTORE ADDRESS PUSH1 0xC0 MSTORE PUSH1 0x9 DUP1 SLOAD CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP3 AND DUP2 OR SWAP1 SWAP3 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x0 DUP1 LOG3 ADDRESS ISZERO PUSH3 0x323 JUMPI POP POP POP PUSH1 0x2 SLOAD SWAP1 DUP4 DUP3 ADD DUP1 SWAP3 GT PUSH3 0x30E JUMPI POP PUSH1 0x0 SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 PUSH1 0x2 SSTORE ADDRESS DUP4 MSTORE DUP3 DUP2 MSTORE DUP6 DUP4 KECCAK256 DUP5 DUP2 SLOAD ADD SWAP1 SSTORE DUP6 MLOAD SWAP4 DUP5 MSTORE ADDRESS SWAP4 LOG3 PUSH1 0xA SSTORE MLOAD SWAP2 PUSH2 0x176F SWAP4 DUP5 PUSH3 0x922 DUP6 CODECOPY PUSH1 0x80 MLOAD DUP5 PUSH2 0x1491 ADD MSTORE PUSH1 0xA0 MLOAD DUP5 PUSH2 0x155D ADD MSTORE PUSH1 0xC0 MLOAD DUP5 PUSH2 0x145B ADD MSTORE PUSH1 0xE0 MLOAD DUP5 PUSH2 0x14E0 ADD MSTORE MLOAD DUP4 PUSH2 0x1506 ADD MSTORE MLOAD DUP3 PUSH2 0x7CB ADD MSTORE MLOAD DUP2 PUSH2 0x7F5 ADD MSTORE RETURN JUMPDEST PUSH1 0x11 SWAP1 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x104 PUSH1 0x64 SWAP4 SWAP3 PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 SWAP3 DUP8 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP7 MSTORE PUSH1 0xC4 DUP4 ADD MSTORE PUSH1 0xE4 DUP3 ADD MSTORE ADD MSTORE REVERT JUMPDEST PUSH1 0x41 DUP6 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADD MLOAD SWAP4 POP CODESIZE DUP1 PUSH3 0x17A JUMP JUMPDEST SWAP3 SWAP2 SWAP5 DUP5 AND SWAP3 DUP10 PUSH1 0x0 MSTORE DUP5 DUP12 PUSH1 0x0 KECCAK256 SWAP5 PUSH1 0x0 JUMPDEST DUP14 DUP10 DUP4 DUP4 LT PUSH3 0x3D6 JUMPI POP POP POP LT PUSH3 0x3BB JUMPI JUMPDEST POP POP POP POP DUP2 SHL ADD DUP5 SSTORE PUSH3 0x18A JUMP JUMPDEST ADD MLOAD SWAP1 PUSH1 0xF8 DUP5 PUSH1 0x0 NOT SWAP3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 DUP1 PUSH3 0x3AC JUMP JUMPDEST DUP7 DUP7 ADD MLOAD DUP10 SSTORE SWAP1 SWAP8 ADD SWAP7 SWAP5 DUP6 ADD SWAP5 DUP9 SWAP4 POP ADD PUSH3 0x398 JUMP JUMPDEST DUP10 PUSH1 0x0 MSTORE DUP11 PUSH1 0x0 KECCAK256 DUP9 DUP1 DUP8 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP14 DUP9 LT PUSH3 0x42F JUMPI JUMPDEST ADD PUSH1 0x5 SHR ADD SWAP1 DUP4 SWAP1 JUMPDEST DUP3 DUP2 LT PUSH3 0x422 JUMPI POP POP PUSH3 0x15C JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE ADD DUP4 SWAP1 PUSH3 0x412 JUMP JUMPDEST SWAP3 POP DUP2 SWAP3 PUSH3 0x409 JUMP JUMPDEST PUSH1 0x22 DUP11 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x7F AND SWAP1 PUSH3 0x14A JUMP JUMPDEST PUSH1 0x41 DUP10 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH3 0x11D JUMP JUMPDEST SWAP1 DUP13 SWAP2 DUP9 DUP7 SWAP6 AND DUP8 PUSH1 0x0 MSTORE DUP4 PUSH1 0x0 KECCAK256 SWAP4 PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT PUSH3 0x4C7 JUMPI POP POP DUP5 GT PUSH3 0x4AE JUMPI JUMPDEST POP POP POP DUP2 SHL ADD DUP3 SSTORE PUSH3 0x12F JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT DUP4 DUP8 SHL PUSH1 0xF8 AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH3 0x4A0 JUMP JUMPDEST DUP4 DUP6 ADD MLOAD DUP7 SSTORE DUP9 SWAP8 SWAP1 SWAP6 ADD SWAP5 SWAP4 DUP5 ADD SWAP4 ADD DUP16 PUSH3 0x48E JUMP JUMPDEST SWAP1 SWAP2 SWAP3 POP DUP6 PUSH1 0x0 MSTORE DUP10 DUP3 PUSH1 0x0 KECCAK256 SWAP2 DUP2 DUP7 ADD PUSH1 0x5 SHR DUP4 ADD SWAP4 DUP7 LT PUSH3 0x52E JUMPI JUMPDEST SWAP2 DUP7 SWAP2 DUP7 SWAP6 SWAP5 SWAP4 ADD PUSH1 0x5 SHR ADD SWAP2 JUMPDEST DUP3 DUP2 LT PUSH3 0x51E JUMPI POP DUP14 SWAP2 POP PUSH3 0x105 JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE DUP6 SWAP5 POP DUP7 SWAP2 ADD PUSH3 0x50C JUMP JUMPDEST SWAP3 POP DUP2 SWAP3 PUSH3 0x4FE JUMP JUMPDEST PUSH1 0x22 DUP12 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x7F AND SWAP1 PUSH3 0xEF JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH3 0x55D JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 SWAP2 SWAP1 DUP3 DUP2 LT ISZERO PUSH3 0x62E JUMPI POP SWAP1 PUSH1 0x1F DUP3 MLOAD GT PUSH3 0x5CD JUMPI DUP1 DUP3 MLOAD SWAP3 ADD MLOAD SWAP1 DUP1 DUP4 LT PUSH3 0x5BE JUMPI POP OR SWAP1 JUMP JUMPDEST DUP3 PUSH1 0x0 NOT SWAP2 SUB PUSH1 0x3 SHL SHL AND OR SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD DUP1 SWAP3 PUSH4 0x305A27A9 PUSH1 0xE0 SHL DUP3 MSTORE DUP1 PUSH1 0x4 DUP4 ADD MSTORE DUP3 MLOAD SWAP1 DUP2 PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x0 SWAP4 JUMPDEST DUP3 DUP6 LT PUSH3 0x614 JUMPI POP POP PUSH1 0x44 SWAP3 POP PUSH1 0x0 DUP4 DUP3 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SUB ADD SWAP1 REVERT JUMPDEST DUP5 DUP2 ADD DUP3 ADD MLOAD DUP7 DUP7 ADD PUSH1 0x44 ADD MSTORE SWAP4 DUP2 ADD SWAP4 DUP6 SWAP4 POP PUSH3 0x5F0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH3 0x55D JUMPI PUSH1 0x5 SWAP3 DUP4 SLOAD SWAP3 PUSH1 0x1 SWAP4 DUP5 DUP2 DUP2 SHR SWAP2 AND DUP1 ISZERO PUSH3 0x75E JUMPI JUMPDEST DUP4 DUP3 LT EQ PUSH3 0x748 JUMPI PUSH1 0x1F DUP2 GT PUSH3 0x711 JUMPI JUMPDEST POP DUP2 PUSH1 0x1F DUP5 GT PUSH1 0x1 EQ PUSH3 0x6A7 JUMPI POP SWAP3 DUP3 SWAP4 SWAP2 DUP4 SWAP3 PUSH1 0x0 SWAP5 PUSH3 0x69B JUMPI JUMPDEST POP POP SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR SWAP1 SSTORE PUSH1 0xFF SWAP1 JUMP JUMPDEST ADD MLOAD SWAP3 POP CODESIZE DUP1 PUSH3 0x685 JUMP JUMPDEST SWAP2 SWAP1 DUP4 PUSH1 0x1F NOT DUP2 AND DUP8 PUSH1 0x0 MSTORE DUP5 PUSH1 0x0 KECCAK256 SWAP5 PUSH1 0x0 SWAP1 JUMPDEST DUP9 DUP4 DUP4 LT PUSH3 0x6F6 JUMPI POP POP POP LT PUSH3 0x6DC JUMPI JUMPDEST POP POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH1 0xFF SWAP1 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH3 0x6CF JUMP JUMPDEST DUP6 DUP8 ADD MLOAD DUP9 SSTORE SWAP1 SWAP7 ADD SWAP6 SWAP5 DUP6 ADD SWAP5 DUP8 SWAP4 POP SWAP1 DUP2 ADD SWAP1 PUSH3 0x6BC JUMP JUMPDEST DUP6 PUSH1 0x0 MSTORE DUP5 PUSH1 0x1F DUP5 PUSH1 0x0 KECCAK256 SWAP3 ADD DUP8 SHR DUP3 ADD SWAP2 PUSH1 0x1F DUP7 ADD DUP9 SHR ADD JUMPDEST DUP3 DUP2 LT PUSH3 0x73B JUMPI POP POP PUSH3 0x667 JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE ADD DUP6 SWAP1 PUSH3 0x72B JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x7F AND SWAP1 PUSH3 0x654 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 SWAP1 DUP2 DUP2 LT ISZERO PUSH3 0x7F7 JUMPI POP PUSH1 0x1F DUP3 MLOAD GT PUSH3 0x796 JUMPI DUP1 DUP3 MLOAD SWAP3 ADD MLOAD SWAP1 DUP1 DUP4 LT PUSH3 0x5BE JUMPI POP OR SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD DUP1 SWAP3 PUSH4 0x305A27A9 PUSH1 0xE0 SHL DUP3 MSTORE DUP1 PUSH1 0x4 DUP4 ADD MSTORE DUP3 MLOAD SWAP1 DUP2 PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x0 SWAP4 JUMPDEST DUP3 DUP6 LT PUSH3 0x7DD JUMPI POP POP PUSH1 0x44 SWAP3 POP PUSH1 0x0 DUP4 DUP3 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SUB ADD SWAP1 REVERT JUMPDEST DUP5 DUP2 ADD DUP3 ADD MLOAD DUP7 DUP7 ADD PUSH1 0x44 ADD MSTORE SWAP4 DUP2 ADD SWAP4 DUP6 SWAP4 POP PUSH3 0x7B9 JUMP JUMPDEST SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH3 0x55D JUMPI PUSH1 0x6 SLOAD SWAP3 PUSH1 0x1 SWAP4 DUP5 DUP2 DUP2 SHR SWAP2 AND DUP1 ISZERO PUSH3 0x916 JUMPI JUMPDEST DUP4 DUP3 LT EQ PUSH3 0x748 JUMPI PUSH1 0x1F DUP2 GT PUSH3 0x8DC JUMPI JUMPDEST POP DUP2 PUSH1 0x1F DUP5 GT PUSH1 0x1 EQ PUSH3 0x870 JUMPI POP SWAP3 DUP3 SWAP4 SWAP2 DUP4 SWAP3 PUSH1 0x0 SWAP5 PUSH3 0x864 JUMPI JUMPDEST POP POP SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x6 SSTORE PUSH1 0xFF SWAP1 JUMP JUMPDEST ADD MLOAD SWAP3 POP CODESIZE DUP1 PUSH3 0x84D JUMP JUMPDEST SWAP2 SWAP1 DUP4 PUSH1 0x1F NOT DUP2 AND PUSH1 0x6 PUSH1 0x0 MSTORE DUP5 PUSH1 0x0 KECCAK256 SWAP5 PUSH1 0x0 SWAP1 JUMPDEST DUP9 DUP4 DUP4 LT PUSH3 0x8C1 JUMPI POP POP POP LT PUSH3 0x8A7 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x6 SSTORE PUSH1 0xFF SWAP1 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH3 0x899 JUMP JUMPDEST DUP6 DUP8 ADD MLOAD DUP9 SSTORE SWAP1 SWAP7 ADD SWAP6 SWAP5 DUP6 ADD SWAP5 DUP8 SWAP4 POP SWAP1 DUP2 ADD SWAP1 PUSH3 0x886 JUMP JUMPDEST PUSH1 0x6 PUSH1 0x0 MSTORE DUP5 PUSH1 0x1F DUP5 PUSH1 0x0 KECCAK256 SWAP3 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 PUSH1 0x1F DUP7 ADD PUSH1 0x5 SHR ADD JUMPDEST DUP3 DUP2 LT PUSH3 0x909 JUMPI POP POP PUSH3 0x82F JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE ADD DUP6 SWAP1 PUSH3 0x8F9 JUMP JUMPDEST SWAP1 PUSH1 0x7F AND SWAP1 PUSH3 0x81C JUMP INVALID PUSH1 0x80 PUSH1 0x40 DUP2 DUP2 MSTORE PUSH1 0x4 DUP1 CALLDATASIZE LT ISZERO PUSH2 0x15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP3 DUP4 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x6FDDE03 EQ PUSH2 0xDF4 JUMPI POP DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xDCA JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xDAB JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0xCE1 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0xCC5 JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0xCA1 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0xC51 JUMPI DUP1 PUSH4 0x3BA0B9A9 EQ PUSH2 0xC32 JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0xB6C JUMPI DUP1 PUSH4 0x6C11BCD3 EQ PUSH2 0x99D JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x966 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x909 JUMPI DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x8D1 JUMPI DUP1 PUSH4 0x84B0196E EQ PUSH2 0x7B4 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x78B JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x6A1 JUMPI DUP1 PUSH4 0xA0EF91DF EQ PUSH2 0x61E JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x577 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x546 JUMPI DUP1 PUSH4 0xD0FEBE4C EQ PUSH2 0x421 JUMPI DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x268 JUMPI DUP1 PUSH4 0xDB068E0E EQ PUSH2 0x246 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x1F9 JUMPI PUSH4 0xF2FDE38B EQ PUSH2 0x12B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH2 0x144 PUSH2 0xF05 JUMP JUMPDEST SWAP1 PUSH2 0x14D PUSH2 0xF36 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP3 DUP4 ISZERO PUSH2 0x1A3 JUMPI POP POP PUSH1 0x9 SLOAD DUP3 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA0 SHL DUP3 AND OR PUSH1 0x9 SSTORE AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP4 DUP1 LOG3 DUP1 RETURN JUMPDEST SWAP1 PUSH1 0x20 PUSH1 0x84 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x242 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x242 JUMPI DUP1 PUSH1 0x20 SWAP3 PUSH2 0x217 PUSH2 0xF05 JUMP JUMPDEST PUSH2 0x21F PUSH2 0xF20 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND DUP4 MSTORE PUSH1 0x1 DUP7 MSTORE DUP4 DUP4 KECCAK256 SWAP2 AND DUP3 MSTORE DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP DUP1 REVERT JUMPDEST DUP4 DUP3 CALLVALUE PUSH2 0x242 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x242 JUMPI PUSH2 0x261 PUSH2 0xF36 JUMP JUMPDEST CALLDATALOAD PUSH1 0xA SSTORE DUP1 RETURN JUMPDEST POP DUP3 SWAP1 CALLVALUE PUSH2 0x242 JUMPI PUSH1 0xE0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x242 JUMPI PUSH2 0x284 PUSH2 0xF05 JUMP JUMPDEST PUSH2 0x28C PUSH2 0xF20 JUMP JUMPDEST SWAP1 PUSH1 0x44 CALLDATALOAD SWAP3 PUSH1 0x64 CALLDATALOAD PUSH1 0x84 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 SUB PUSH2 0x41D JUMPI DUP2 TIMESTAMP GT PUSH2 0x3DA JUMPI PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 DUP6 AND SWAP3 DUP4 DUP10 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE DUP10 DUP10 KECCAK256 SWAP1 DUP2 SLOAD SWAP2 PUSH1 0x1 DUP4 ADD SWAP1 SSTORE DUP11 MLOAD SWAP1 PUSH1 0x20 DUP3 ADD SWAP3 PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 DUP5 MSTORE DUP7 DUP14 DUP5 ADD MSTORE DUP6 DUP11 AND PUSH1 0x60 DUP5 ADD MSTORE DUP11 PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xC0 DUP2 MSTORE PUSH1 0xE0 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x3C7 JUMPI DUP12 MSTORE MLOAD SWAP1 KECCAK256 PUSH2 0x36F SWAP2 PUSH2 0x367 SWAP2 PUSH2 0x341 PUSH2 0x1458 JUMP JUMPDEST SWAP1 DUP13 MLOAD SWAP2 PUSH2 0x1901 PUSH1 0xF0 SHL DUP4 MSTORE PUSH1 0x2 DUP4 ADD MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0xC4 CALLDATALOAD SWAP2 PUSH1 0x42 PUSH1 0xA4 CALLDATALOAD SWAP3 KECCAK256 PUSH2 0x13C9 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x12AF JUMP JUMPDEST AND SUB PUSH2 0x384 JUMPI POP PUSH2 0x381 SWAP4 SWAP5 POP PUSH2 0x11AD JUMP JUMPDEST DUP1 RETURN JUMPDEST PUSH1 0x64 SWAP1 PUSH1 0x20 DUP8 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332305065726D69743A20696E76616C6964207369676E61747572650000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP12 MSTORE PUSH1 0x41 DUP8 MSTORE PUSH1 0x24 DUP12 REVERT JUMPDEST DUP8 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 DUP2 DUP6 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332305065726D69743A206578706972656420646561646C696E65000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP7 DUP1 REVERT JUMPDEST POP SWAP1 DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1F5 JUMPI CALLVALUE ISZERO PUSH2 0x503 JUMPI PUSH1 0xA SLOAD DUP1 CALLVALUE MUL SWAP1 CALLVALUE DUP3 DIV SUB PUSH2 0x4F0 JUMPI PUSH8 0xDE0B6B3A7640000 SWAP1 DIV SWAP2 ADDRESS DUP5 MSTORE DUP4 PUSH1 0x20 MSTORE DUP3 DUP3 DUP6 KECCAK256 SLOAD LT PUSH2 0x49F JUMPI POP PUSH32 0x8FAFEBCAF9D154343DAD25669BFA277F4FBACD7AC6B0C4FED522580E040A0F33 SWAP1 PUSH2 0x48E DUP4 CALLER ADDRESS PUSH2 0x103F JUMP JUMPDEST DUP1 MLOAD SWAP3 CALLVALUE DUP5 MSTORE PUSH1 0x20 DUP5 ADD MSTORE CALLER SWAP3 LOG2 DUP1 RETURN JUMPDEST PUSH1 0x20 PUSH1 0x84 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E7420746F6B656E2062616C616E636520696E20636F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1B9D1C9858DD PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x11 DUP4 MSTORE PUSH1 0x24 DUP5 REVERT JUMPDEST SWAP1 PUSH1 0x20 PUSH1 0x64 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D7573742073656E642045544820746F2065786368616E676500000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x242 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x242 JUMPI PUSH1 0x20 SWAP1 PUSH2 0x570 PUSH2 0x566 PUSH2 0xF05 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER PUSH2 0x103F JUMP JUMPDEST MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST POP DUP3 CALLVALUE PUSH2 0x61B JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x61B JUMPI PUSH2 0x591 PUSH2 0xF05 JUMP JUMPDEST SWAP2 DUP4 PUSH1 0x24 CALLDATALOAD SWAP3 CALLER DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP2 DUP2 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP7 AND DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 SLOAD SWAP1 DUP3 DUP3 LT PUSH2 0x5CA JUMPI PUSH1 0x20 DUP6 PUSH2 0x570 DUP6 DUP6 SUB DUP8 CALLER PUSH2 0x11AD JUMP JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x20 DUP7 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x1F5 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1F5 JUMPI PUSH2 0x637 PUSH2 0xF36 JUMP JUMPDEST SELFBALANCE SWAP1 DUP2 ISZERO PUSH2 0x669 JUMPI POP PUSH1 0x9 SLOAD DUP4 SWAP2 DUP3 SWAP2 DUP3 SWAP2 DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 CALL ISZERO PUSH2 0x65F JUMPI POP DUP1 RETURN JUMPDEST MLOAD SWAP1 RETURNDATASIZE SWAP1 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH1 0x64 SWAP1 PUSH1 0x20 DUP5 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x4E6F2045544820746F207769746864726177 PUSH1 0x70 SHL PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x1F5 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1F5 JUMPI DUP1 MLOAD SWAP2 DUP4 DUP2 SLOAD SWAP1 PUSH2 0x6C3 DUP3 PUSH2 0xF8E JUMP JUMPDEST DUP1 DUP7 MSTORE SWAP3 PUSH1 0x1 SWAP3 DUP1 DUP5 AND SWAP1 DUP2 ISZERO PUSH2 0x760 JUMPI POP PUSH1 0x1 EQ PUSH2 0x704 JUMPI JUMPDEST PUSH2 0x700 DUP7 DUP7 PUSH2 0x6EE DUP3 DUP12 SUB DUP4 PUSH2 0xFFA JUMP JUMPDEST MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x20 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0xEC5 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST DUP2 MSTORE SWAP5 POP PUSH32 0x8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19B JUMPDEST DUP3 DUP7 LT PUSH2 0x748 JUMPI POP POP POP PUSH2 0x6EE DUP3 PUSH1 0x20 PUSH2 0x700 SWAP6 DUP3 ADD ADD SWAP5 CODESIZE PUSH2 0x6DD JUMP JUMPDEST DUP1 SLOAD PUSH1 0x20 DUP8 DUP8 ADD DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 SWAP6 ADD SWAP5 DUP2 ADD PUSH2 0x72A JUMP JUMPDEST SWAP1 POP PUSH2 0x700 SWAP8 POP DUP7 SWAP4 POP PUSH1 0x20 SWAP3 POP PUSH2 0x6EE SWAP5 SWAP2 POP PUSH1 0xFF NOT AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD SWAP5 CODESIZE PUSH2 0x6DD JUMP JUMPDEST POP POP CALLVALUE PUSH2 0x242 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x242 JUMPI PUSH1 0x9 SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x1F5 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1F5 JUMPI PUSH2 0x7EF PUSH32 0x0 PUSH2 0x1583 JUMP JUMPDEST SWAP3 PUSH2 0x819 PUSH32 0x0 PUSH2 0x167F JUMP JUMPDEST SWAP1 DUP3 MLOAD SWAP3 PUSH1 0x20 SWAP3 DUP4 DUP6 ADD SWAP6 DUP6 DUP8 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP9 GT OR PUSH2 0x8BE JUMPI POP SWAP3 DUP1 PUSH2 0x874 DUP4 DUP9 SWAP7 PUSH2 0x867 SWAP10 DUP12 SWAP10 SWAP7 MSTORE DUP7 DUP7 MSTORE DUP2 MLOAD SWAP10 DUP11 SWAP10 PUSH1 0xF PUSH1 0xF8 SHL DUP12 MSTORE PUSH1 0xE0 DUP7 DUP13 ADD MSTORE PUSH1 0xE0 DUP12 ADD SWAP1 PUSH2 0xEC5 JUMP JUMPDEST SWAP2 DUP10 DUP4 SUB SWAP1 DUP11 ADD MSTORE PUSH2 0xEC5 JUMP JUMPDEST SWAP3 CHAINID PUSH1 0x60 DUP9 ADD MSTORE ADDRESS PUSH1 0x80 DUP9 ADD MSTORE DUP5 PUSH1 0xA0 DUP9 ADD MSTORE DUP7 DUP5 SUB PUSH1 0xC0 DUP9 ADD MSTORE MLOAD SWAP3 DUP4 DUP2 MSTORE ADD SWAP4 SWAP3 JUMPDEST DUP3 DUP2 LT PUSH2 0x8A7 JUMPI POP POP POP POP SUB SWAP1 RETURN JUMPDEST DUP4 MLOAD DUP6 MSTORE DUP7 SWAP6 POP SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x898 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x41 SWAP1 MSTORE PUSH1 0x24 DUP4 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x242 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x242 JUMPI PUSH1 0x20 SWAP2 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x8F9 PUSH2 0xF05 JUMP JUMPDEST AND DUP2 MSTORE PUSH1 0x7 DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP4 CALLVALUE PUSH2 0x61B JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x61B JUMPI PUSH2 0x922 PUSH2 0xF36 JUMP JUMPDEST PUSH1 0x9 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP3 DUP1 LOG3 DUP1 RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x242 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x242 JUMPI PUSH1 0x20 SWAP2 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x98E PUSH2 0xF05 JUMP JUMPDEST AND DUP2 MSTORE DUP1 DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x20 SWAP2 DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xB68 JUMPI DUP2 CALLDATALOAD SWAP2 DUP3 ISZERO PUSH2 0xB19 JUMPI CALLER DUP6 MSTORE DUP5 DUP5 MSTORE DUP3 DUP3 DUP7 KECCAK256 SLOAD LT PUSH2 0xAD8 JUMPI PUSH8 0xDE0B6B3A7640000 DUP4 MUL PUSH8 0xDE0B6B3A763FFFF NOT DUP5 DUP3 DIV ADD PUSH2 0xAC5 JUMPI PUSH1 0xA SLOAD SWAP1 DUP2 ISZERO PUSH2 0xAB2 JUMPI DIV SWAP1 DUP2 SELFBALANCE LT PUSH2 0xA63 JUMPI POP PUSH2 0xA06 DUP4 ADDRESS CALLER PUSH2 0x103F JUMP JUMPDEST DUP5 DUP1 DUP3 DUP1 ISZERO PUSH2 0xA59 JUMPI JUMPDEST DUP3 DUP1 SWAP3 SWAP2 DUP2 SWAP3 CALLER SWAP1 CALL ISZERO PUSH2 0xA4F JUMPI PUSH32 0x2DCF9433D75DB0D8B1C172641F85E319FFE4AD22E108A95D1847CEB906E5195D SWAP3 SWAP4 DUP3 MLOAD SWAP5 DUP6 MSTORE DUP5 ADD MSTORE CALLER SWAP3 LOG2 DUP1 RETURN JUMPDEST DUP2 MLOAD RETURNDATASIZE DUP7 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x8FC SWAP2 POP PUSH2 0xA10 JUMP JUMPDEST DUP3 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE SWAP1 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E74204554482062616C616E636520696E20636F6E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x1C9858DD PUSH1 0xE2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP8 MSTORE PUSH1 0x12 DUP4 MSTORE PUSH1 0x24 DUP8 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x11 DUP3 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST DUP4 PUSH1 0x64 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E7420746F6B656E2062616C616E6365000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST DUP4 PUSH1 0x84 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D7573742073656C6C206120706F73697469766520616D6F756E74206F662074 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6F6B656E73 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST DUP4 DUP1 REVERT JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x1F5 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1F5 JUMPI PUSH2 0xB86 PUSH2 0xF05 JUMP JUMPDEST SWAP1 PUSH1 0x24 CALLDATALOAD SWAP2 PUSH2 0xB93 PUSH2 0xF36 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP3 DUP4 ISZERO PUSH2 0xBF0 JUMPI POP PUSH1 0x20 DUP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 PUSH2 0xBD6 DUP8 SWAP6 PUSH1 0x2 SLOAD PUSH2 0x101C JUMP JUMPDEST PUSH1 0x2 SSTORE DUP6 DUP6 MSTORE DUP5 DUP4 MSTORE DUP1 DUP6 KECCAK256 DUP3 DUP2 SLOAD ADD SWAP1 SSTORE MLOAD SWAP1 DUP2 MSTORE LOG3 DUP1 RETURN JUMPDEST PUSH1 0x20 PUSH1 0x64 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x242 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x242 JUMPI PUSH1 0x20 SWAP1 PUSH1 0xA SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x242 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x242 JUMPI PUSH2 0x570 PUSH1 0x20 SWAP3 PUSH2 0xC9A PUSH2 0xC74 PUSH2 0xF05 JUMP JUMPDEST CALLER DUP4 MSTORE PUSH1 0x1 DUP7 MSTORE DUP5 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP5 MSTORE DUP7 MSTORE SWAP2 DUP5 SWAP1 KECCAK256 SLOAD PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0x101C JUMP JUMPDEST SWAP1 CALLER PUSH2 0x11AD JUMP JUMPDEST POP POP CALLVALUE PUSH2 0x242 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x242 JUMPI PUSH1 0x20 SWAP1 PUSH2 0xCBE PUSH2 0x1458 JUMP JUMPDEST SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x242 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x242 JUMPI PUSH1 0x20 SWAP1 MLOAD PUSH1 0x12 DUP2 MSTORE RETURN JUMPDEST POP DUP3 SWAP1 CALLVALUE PUSH2 0x242 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x242 JUMPI PUSH2 0xCFD PUSH2 0xF05 JUMP JUMPDEST PUSH2 0xD05 PUSH2 0xF20 JUMP JUMPDEST SWAP2 DUP5 PUSH1 0x44 CALLDATALOAD SWAP5 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP2 DUP2 KECCAK256 CALLER DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 SLOAD SWAP1 PUSH1 0x0 NOT DUP3 SUB PUSH2 0xD3F JUMPI JUMPDEST PUSH1 0x20 DUP7 PUSH2 0x570 DUP8 DUP8 DUP8 PUSH2 0x103F JUMP JUMPDEST DUP5 DUP3 LT PUSH2 0xD68 JUMPI POP SWAP2 DUP4 SWAP2 PUSH2 0xD5D PUSH1 0x20 SWAP7 SWAP6 PUSH2 0x570 SWAP6 SUB CALLER DUP4 PUSH2 0x11AD JUMP JUMPDEST SWAP2 SWAP4 SWAP5 DUP2 SWAP4 POP PUSH2 0xD31 JUMP JUMPDEST PUSH1 0x64 SWAP1 PUSH1 0x20 DUP8 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x242 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x242 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x2 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x242 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x242 JUMPI PUSH1 0x20 SWAP1 PUSH2 0x570 PUSH2 0xDEA PUSH2 0xF05 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER PUSH2 0x11AD JUMP JUMPDEST DUP5 SWAP1 DUP5 CALLVALUE PUSH2 0x1F5 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1F5 JUMPI DUP3 PUSH1 0x3 SLOAD PUSH2 0xE14 DUP2 PUSH2 0xF8E JUMP JUMPDEST DUP1 DUP6 MSTORE SWAP2 PUSH1 0x1 SWAP2 DUP1 DUP4 AND SWAP1 DUP2 ISZERO PUSH2 0xE9D JUMPI POP PUSH1 0x1 EQ PUSH2 0xE40 JUMPI JUMPDEST POP POP POP PUSH2 0x6EE DUP3 PUSH2 0x700 SWAP5 SUB DUP4 PUSH2 0xFFA JUMP JUMPDEST SWAP5 POP PUSH1 0x3 DUP6 MSTORE PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B JUMPDEST DUP3 DUP7 LT PUSH2 0xE85 JUMPI POP POP POP PUSH2 0x6EE DUP3 PUSH1 0x20 PUSH2 0x700 SWAP6 DUP3 ADD ADD SWAP5 PUSH2 0xE2E JUMP JUMPDEST DUP1 SLOAD PUSH1 0x20 DUP8 DUP8 ADD DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 SWAP6 ADD SWAP5 DUP2 ADD PUSH2 0xE68 JUMP JUMPDEST PUSH2 0x700 SWAP8 POP DUP7 SWAP4 POP PUSH1 0x20 SWAP3 POP PUSH2 0x6EE SWAP5 SWAP2 POP PUSH1 0xFF NOT AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD SWAP5 PUSH2 0xE2E JUMP JUMPDEST SWAP2 SWAP1 DUP3 MLOAD SWAP3 DUP4 DUP3 MSTORE PUSH1 0x0 JUMPDEST DUP5 DUP2 LT PUSH2 0xEF1 JUMPI POP POP DUP3 PUSH1 0x0 PUSH1 0x20 DUP1 SWAP5 SWAP6 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 DUP4 ADD DUP2 ADD MLOAD DUP5 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0xED0 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xF1B JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xF1B JUMPI JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0xF4A JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0xFBE JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0xFA8 JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0xF9D JUMP JUMPDEST PUSH1 0x40 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xFE4 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xFE4 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x1029 JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 DUP3 ISZERO PUSH2 0x115A JUMPI AND SWAP2 DUP3 ISZERO PUSH2 0x1109 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE DUP1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 DUP1 DUP4 LT PUSH2 0x10B5 JUMPI PUSH1 0x40 DUP3 DUP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP6 DUP8 PUSH1 0x20 SWAP7 MSTORE DUP3 DUP7 MSTORE SUB DUP3 DUP3 KECCAK256 SSTORE DUP7 DUP2 MSTORE KECCAK256 DUP2 DUP2 SLOAD ADD SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 DUP3 ISZERO PUSH2 0x125E JUMPI AND SWAP2 DUP3 ISZERO PUSH2 0x120E JUMPI PUSH1 0x20 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 DUP4 PUSH1 0x0 MSTORE PUSH1 0x1 DUP3 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP6 PUSH1 0x0 MSTORE DUP3 MSTORE DUP1 PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x13B3 JUMPI DUP1 PUSH2 0x12C0 JUMPI POP JUMP JUMPDEST PUSH1 0x1 DUP2 SUB PUSH2 0x130D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP2 SUB PUSH2 0x135A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x3 EQ PUSH2 0x1363 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7565 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP3 SWAP2 SWAP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 GT PUSH2 0x144C JUMPI SWAP2 PUSH1 0x80 SWAP5 SWAP4 SWAP2 PUSH1 0xFF PUSH1 0x20 SWAP5 PUSH1 0x40 MLOAD SWAP5 DUP6 MSTORE AND DUP5 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x0 SWAP4 DUP5 SWAP2 DUP3 DUP1 MSTORE PUSH1 0x1 GAS STATICCALL ISZERO PUSH2 0x143F JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x1439 JUMPI SWAP2 SWAP1 JUMP JUMPDEST POP PUSH1 0x1 SWAP1 JUMP JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 RETURNDATASIZE SWAP1 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 SWAP1 PUSH1 0x3 SWAP1 JUMP JUMPDEST ADDRESS PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x155A JUMPI JUMPDEST ISZERO PUSH2 0x14B3 JUMPI PUSH32 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F DUP3 MSTORE PUSH32 0x0 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x0 PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xA0 DUP2 MSTORE PUSH1 0xC0 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xFE4 JUMPI PUSH1 0x40 MSTORE MLOAD SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST POP PUSH32 0x0 CHAINID EQ PUSH2 0x148A JUMP JUMPDEST PUSH1 0xFF DUP2 EQ PUSH2 0x15C1 JUMPI PUSH1 0xFF DUP2 AND SWAP1 PUSH1 0x1F DUP3 GT PUSH2 0x15AF JUMPI PUSH1 0x40 MLOAD SWAP2 PUSH2 0x15A5 DUP4 PUSH2 0xFC8 JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2CD44AC3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x5 SLOAD DUP2 PUSH1 0x0 PUSH2 0x15D4 DUP4 PUSH2 0xF8E JUMP JUMPDEST DUP1 DUP4 MSTORE SWAP3 PUSH1 0x1 SWAP1 DUP2 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x165D JUMPI POP PUSH1 0x1 EQ PUSH2 0x15FE JUMPI JUMPDEST POP PUSH2 0x15FB SWAP3 POP SUB DUP3 PUSH2 0xFFA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x5 PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP2 POP PUSH32 0x36B6384B5ECA791C62761152D0C79BB0604C104A5FB6F4EB0703F3154BB3DB0 JUMPDEST DUP5 DUP4 LT PUSH2 0x1642 JUMPI POP PUSH2 0x15FB SWAP4 POP POP DUP2 ADD PUSH1 0x20 ADD CODESIZE PUSH2 0x15EE JUMP JUMPDEST DUP2 SWAP4 POP SWAP1 DUP2 PUSH1 0x20 SWAP3 SLOAD DUP4 DUP6 DUP10 ADD ADD MSTORE ADD SWAP2 ADD SWAP1 SWAP2 DUP5 SWAP3 PUSH2 0x1629 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 SWAP3 POP PUSH2 0x15FB SWAP5 SWAP2 POP PUSH1 0xFF NOT AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD CODESIZE PUSH2 0x15EE JUMP JUMPDEST PUSH1 0xFF DUP2 EQ PUSH2 0x16A1 JUMPI PUSH1 0xFF DUP2 AND SWAP1 PUSH1 0x1F DUP3 GT PUSH2 0x15AF JUMPI PUSH1 0x40 MLOAD SWAP2 PUSH2 0x15A5 DUP4 PUSH2 0xFC8 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x6 SLOAD DUP2 PUSH1 0x0 PUSH2 0x16B4 DUP4 PUSH2 0xF8E JUMP JUMPDEST DUP1 DUP4 MSTORE SWAP3 PUSH1 0x1 SWAP1 DUP2 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x165D JUMPI POP PUSH1 0x1 EQ PUSH2 0x16DA JUMPI POP PUSH2 0x15FB SWAP3 POP SUB DUP3 PUSH2 0xFFA JUMP JUMPDEST PUSH1 0x6 PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP2 POP PUSH32 0xF652222313E28459528D920B65115C16C04F3EFC82AAEDC97BE59F3F377C0D3F JUMPDEST DUP5 DUP4 LT PUSH2 0x171E JUMPI POP PUSH2 0x15FB SWAP4 POP POP DUP2 ADD PUSH1 0x20 ADD CODESIZE PUSH2 0x15EE JUMP JUMPDEST DUP2 SWAP4 POP SWAP1 DUP2 PUSH1 0x20 SWAP3 SLOAD DUP4 DUP6 DUP10 ADD ADD MSTORE ADD SWAP2 ADD SWAP1 SWAP2 DUP5 SWAP3 PUSH2 0x1705 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH15 0xB8AE5620FF3A88207D591B59936293 0xAE EXTCODESIZE STOP PUSH12 0x52D6CC83BB3128252A89D3F7 PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ",
							"sourceMap": "255:3031:16:-:0;;;;;;-1:-1:-1;;;;;255:3031:16;-1:-1:-1;;255:3031:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;255:3031:16;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;;255:3031:16;;;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;255:3031:16;;;;;;;;;2046:13:2;255:3031:16;;;;;;;;;;;;;-1:-1:-1;255:3031:16;;;;;;;;;;;;;;;-1:-1:-1;255:3031:16;;;;;;;;;;;-1:-1:-1;255:3031:16;;;;-1:-1:-1;;;;255:3031:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;255:3031:16;;;;;;;;;;;;;;;;;;;3251:45:13;;;:::i;:::-;3243:53;;;;;3317:51;;;:::i;:::-;3306:62;;;;;255:3031:16;3392:22:13;;3378:36;;;;255:3031:16;3441:25:13;;3424:42;;;;;;3494:13;3477:30;;255:3031:16;;4054:81:13;;;;255:3031:16;1929:95:13;255:3031:16;;1929:95:13;;;255:3031:16;1929:95:13;;;255:3031:16;3494:13:13;1929:95;;;255:3031:16;4129:4:13;3477:30;1929:95;;;3477:30;4054:81;;1929:95;255:3031:16;;;;;;;;;;;;;;;;;4044:92:13;;1929:95;3517:48;4129:4;1929:95;3575:27;2518:6:0;255:3031:16;;734:10:7;-1:-1:-1;;;;;;255:3031:16;;;;;;;-1:-1:-1;;;;;255:3031:16;2566:40:0;-1:-1:-1;;2566:40:0;4129:4:13;8603:21:2;255:3031:16;;;;;8731:22:2;255:3031:16;;;;;;;;;;;-1:-1:-1;255:3031:16;8952:37:2;255:3031:16;8731:22:2;255:3031:16;4129:4:13;255:3031:16;;;;;;;;;;;;;;;;;;;4129:4:13;8952:37:2;;1046:28:16;255:3031;;;;;;;;;1929:95:13;255:3031:16;;;;;3477:30:13;255:3031:16;;;;;1929:95:13;255:3031:16;;;;;3378:36:13;255:3031:16;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;255:3031:16;;;-1:-1:-1;255:3031:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;255:3031:16;;;-1:-1:-1;255:3031:16;;;;;-1:-1:-1;255:3031:16;;;;;;;;;;;;-1:-1:-1;255:3031:16;;;-1:-1:-1;255:3031:16;;-1:-1:-1;255:3031:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;255:3031:16;;;;;-1:-1:-1;255:3031:16;;-1:-1:-1;255:3031:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;255:3031:16;;;;;;;;;;;;;;;;;;;;-1:-1:-1;255:3031:16;;;-1:-1:-1;255:3031:16;;;;;;;;;;;;;;-1:-1:-1;255:3031:16;;;-1:-1:-1;255:3031:16;;;;;-1:-1:-1;255:3031:16;;;;;;;;;;;;;-1:-1:-1;255:3031:16;;-1:-1:-1;255:3031:16;;-1:-1:-1;255:3031:16;;;;;;;;;;-1:-1:-1;255:3031:16;;;;;;;;;;;;;;;;-1:-1:-1;;255:3031:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;255:3031:16;;;-1:-1:-1;255:3031:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;255:3031:16;;;;-1:-1:-1;255:3031:16;;;;;;;;;;;;;;;;;;-1:-1:-1;255:3031:16;;;-1:-1:-1;255:3031:16;;;;;;;;;-1:-1:-1;255:3031:16;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;255:3031:16;;;;;;;:::o;2895:341:9:-;255:3031:16;;3040:2:9;;255:3031:16;3018:24:9;;;3040:2;;;255:3031:16;;1835:2:9;255:3031:16;;1821:16:9;1817:72;;255:3031:16;;;;;;;;;;;;1930:36:9;;3058:27;:::o;255:3031:16:-;;;;;;;;;;1930:36:9;3058:27;:::o;1817:72::-;255:3031:16;;;1860:18:9;;;;;;;;;;;255:3031:16;;;;;;;;;-1:-1:-1;255:3031:16;;;;;;;;;;;;-1:-1:-1;255:3031:16;;;;;;1835:2:9;255:3031:16;;;;;;;1860:18:9;;;;255:3031:16;;;;;;;;;;;;;;;;;;;-1:-1:-1;255:3031:16;;3014:216:9;-1:-1:-1;;;;;255:3031:16;;;;3282:13:13;255:3031:16;;;;;;;;;;;;;;;;3014:216:9;255:3031:16;;;;;;;;;;;3014:216:9;255:3031:16;;;;;;;;;;;;;;;;-1:-1:-1;255:3031:16;;;;;;;;;;;;;;;;;;;1371:66:9;3176:43;:::o;255:3031:16:-;;;;-1:-1:-1;255:3031:16;;;;;;;;;;;;;-1:-1:-1;255:3031:16;;-1:-1:-1;255:3031:16;;-1:-1:-1;255:3031:16;;;;;;;;;;;;;;;;;;;;;;;1371:66:9;3176:43;:::o;255:3031:16:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;255:3031:16;;;;;;;;-1:-1:-1;255:3031:16;;;;-1:-1:-1;255:3031:16;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;255:3031:16;;;;;;;;;;;-1:-1:-1;255:3031:16;;;;;-1:-1:-1;255:3031:16;;;;;;;;2895:341:9;255:3031:16;;3040:2:9;;3018:24;;;3040:2;;;255:3031:16;1835:2:9;255:3031:16;;1821:16:9;1817:72;;255:3031:16;;;;;;;;;;;;1930:36:9;;3058:27;:::o;1817:72::-;255:3031:16;;;1860:18:9;;;;;;;;;;;255:3031:16;;;;;;;;;-1:-1:-1;255:3031:16;;;;;;;;;;;;-1:-1:-1;255:3031:16;;;;;;1835:2:9;255:3031:16;;;;;;;1860:18:9;;;;255:3031:16;;;;;;;;;;;;;;;;;;;-1:-1:-1;255:3031:16;;3014:216:9;255:3031:16;-1:-1:-1;;;;;255:3031:16;;;;3351:16:13;255:3031:16;;;;;;;;;;;;;;3014:216:9;255:3031:16;;;;;;;;;;;3014:216:9;255:3031:16;;;;;;;;;;;;;;;;-1:-1:-1;255:3031:16;;;;;;;;;;;;;;;;;3351:16:13;255:3031:16;1371:66:9;3176:43;:::o;255:3031:16:-;;;;-1:-1:-1;255:3031:16;;;;;;;;;;;;3351:16:13;-1:-1:-1;255:3031:16;;-1:-1:-1;255:3031:16;;-1:-1:-1;255:3031:16;;;;;;;;;;;;;;;;;;;;;3351:16:13;255:3031:16;1371:66:9;3176:43;:::o;255:3031:16:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;255:3031:16;;;;;;;3351:16:13;-1:-1:-1;255:3031:16;;;;-1:-1:-1;255:3031:16;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;255:3031:16;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"abi_decode_address": {
									"entryPoint": 3872,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"abi_decode_address_12818": {
									"entryPoint": 3845,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"abi_encode_string": {
									"entryPoint": 3781,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_uint256": {
									"entryPoint": 4124,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"extract_byte_array_length": {
									"entryPoint": 3982,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"finalize_allocation": {
									"entryPoint": 4090,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"finalize_allocation_16810": {
									"entryPoint": 4040,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"fun_approve": {
									"entryPoint": 4525,
									"id": 658,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"fun_checkOwner": {
									"entryPoint": 3894,
									"id": 54,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"fun_domainSeparatorV4": {
									"entryPoint": 5208,
									"id": 2179,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"fun_throwError": {
									"entryPoint": 4783,
									"id": 1748,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"fun_toStringWithFallback": {
									"entryPoint": 5759,
									"id": 1323,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"fun_toStringWithFallback_12826": {
									"entryPoint": 5507,
									"id": 1323,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"fun_transfer": {
									"entryPoint": 4159,
									"id": 484,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"fun_tryRecover": {
									"entryPoint": 5065,
									"id": 1962,
									"parameterSlots": 4,
									"returnSlots": 2
								}
							},
							"generatedSources": [],
							"immutableReferences": {
								"2077": [
									{
										"length": 32,
										"start": 5265
									}
								],
								"2079": [
									{
										"length": 32,
										"start": 5469
									}
								],
								"2081": [
									{
										"length": 32,
										"start": 5211
									}
								],
								"2083": [
									{
										"length": 32,
										"start": 5344
									}
								],
								"2085": [
									{
										"length": 32,
										"start": 5382
									}
								],
								"2088": [
									{
										"length": 32,
										"start": 1995
									}
								],
								"2091": [
									{
										"length": 32,
										"start": 2037
									}
								]
							},
							"linkReferences": {},
							"object": "6080604081815260048036101561001557600080fd5b600092833560e01c90816306fdde0314610df457508063095ea7b314610dca57806318160ddd14610dab57806323b872dd14610ce1578063313ce56714610cc55780633644e51514610ca15780633950935114610c515780633ba0b9a914610c3257806340c10f1914610b6c5780636c11bcd31461099d57806370a0823114610966578063715018a6146109095780637ecebe00146108d157806384b0196e146107b45780638da5cb5b1461078b57806395d89b41146106a1578063a0ef91df1461061e578063a457c2d714610577578063a9059cbb14610546578063d0febe4c14610421578063d505accf14610268578063db068e0e14610246578063dd62ed3e146101f95763f2fde38b1461012b57600080fd5b346101f55760203660031901126101f557610144610f05565b9061014d610f36565b6001600160a01b039182169283156101a3575050600954826bffffffffffffffffffffffff60a01b821617600955167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8280fd5b50503461024257806003193601126102425780602092610217610f05565b61021f610f20565b6001600160a01b0391821683526001865283832091168252845220549051908152f35b5080fd5b83823461024257602036600319011261024257610261610f36565b35600a5580f35b508290346102425760e036600319011261024257610284610f05565b61028c610f20565b906044359260643560843560ff8116810361041d578142116103da5760018060a01b0390818516928389526007602052898920908154916001830190558a519060208201927f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98452868d840152858a1660608401528a608084015260a083015260c082015260c0815260e0810181811067ffffffffffffffff8211176103c7578b5251902061036f9161036791610341611458565b908c519161190160f01b83526002830152602282015260c43591604260a43592206113c9565b9190916112af565b160361038457506103819394506111ad565b80f35b606490602087519162461bcd60e51b8352820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e617475726500006044820152fd5b634e487b7160e01b8b526041875260248bfd5b875162461bcd60e51b8152602081850152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e650000006044820152606490fd5b8680fd5b5090826003193601126101f557341561050357600a5480340290348204036104f057670de0b6b3a76400009004913084528360205282828520541061049f57507f8fafebcaf9d154343dad25669bfa277f4fbacd7ac6b0c4fed522580e040a0f339061048e83333061103f565b80519234845260208401523392a280f35b6020608492519162461bcd60e51b8352820152602660248201527f496e73756666696369656e7420746f6b656e2062616c616e636520696e20636f6044820152651b9d1c9858dd60d21b6064820152fd5b634e487b7160e01b845260118352602484fd5b906020606492519162461bcd60e51b8352820152601960248201527f4d7573742073656e642045544820746f2065786368616e6765000000000000006044820152fd5b505034610242578060031936011261024257602090610570610566610f05565b602435903361103f565b5160018152f35b50823461061b578260031936011261061b57610591610f05565b918360243592338152600160205281812060018060a01b03861682526020522054908282106105ca5760208561057085850387336111ad565b608490602086519162461bcd60e51b8352820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152fd5b80fd5b50346101f557826003193601126101f557610637610f36565b47908115610669575060095483918291829182916001600160a01b031682f11561065f575080f35b51903d90823e3d90fd5b606490602084519162461bcd60e51b835282015260126024820152714e6f2045544820746f20776974686472617760701b6044820152fd5b5090346101f557826003193601126101f557805191838154906106c382610f8e565b808652926001928084169081156107605750600114610704575b61070086866106ee828b0383610ffa565b51918291602083526020830190610ec5565b0390f35b815294507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b828610610748575050506106ee8260206107009582010194386106dd565b8054602087870181019190915290950194810161072a565b90506107009750869350602092506106ee94915060ff191682840152151560051b82010194386106dd565b50503461024257816003193601126102425760095490516001600160a01b039091168152602090f35b5090346101f557826003193601126101f5576107ef7f0000000000000000000000000000000000000000000000000000000000000000611583565b926108197f000000000000000000000000000000000000000000000000000000000000000061167f565b908251926020928385019585871067ffffffffffffffff8811176108be57509280610874838896610867998b9996528686528151998a99600f60f81b8b5260e0868c015260e08b0190610ec5565b91898303908a0152610ec5565b924660608801523060808801528460a088015286840360c088015251928381520193925b8281106108a757505050500390f35b835185528695509381019392810192600101610898565b634e487b7160e01b845260419052602483fd5b5050346102425760203660031901126102425760209181906001600160a01b036108f9610f05565b1681526007845220549051908152f35b833461061b578060031936011261061b57610922610f36565b600980546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b5050346102425760203660031901126102425760209181906001600160a01b0361098e610f05565b16815280845220549051908152f35b50346101f55760209182600319360112610b68578135918215610b1957338552848452828286205410610ad857670de0b6b3a76400008302670de0b6b3a763ffff1984820401610ac557600a54908115610ab2570490814710610a635750610a0683303361103f565b8480828015610a59575b8280929181923390f115610a4f577f2dcf9433d75db0d8b1c172641f85e319ffe4ad22e108a95d1847ceb906e5195d929382519485528401523392a280f35b81513d86823e3d90fd5b6108fc9150610a10565b825162461bcd60e51b81529081018590526024808201527f496e73756666696369656e74204554482062616c616e636520696e20636f6e746044820152631c9858dd60e21b6064820152608490fd5b634e487b7160e01b875260128352602487fd5b634e487b7160e01b865260118252602486fd5b83606492519162461bcd60e51b8352820152601a60248201527f496e73756666696369656e7420746f6b656e2062616c616e63650000000000006044820152fd5b83608492519162461bcd60e51b8352820152602560248201527f4d7573742073656c6c206120706f73697469766520616d6f756e74206f6620746044820152646f6b656e7360d81b6064820152fd5b8380fd5b5090346101f557806003193601126101f557610b86610f05565b9060243591610b93610f36565b6001600160a01b0316928315610bf057506020827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92610bd6879560025461101c565b60025585855284835280852082815401905551908152a380f35b6020606492519162461bcd60e51b8352820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152fd5b505034610242578160031936011261024257602090600a549051908152f35b505034610242578060031936011261024257610570602092610c9a610c74610f05565b338352600186528483206001600160a01b0382168452865291849020546024359061101c565b90336111ad565b505034610242578160031936011261024257602090610cbe611458565b9051908152f35b5050346102425781600319360112610242576020905160128152f35b5082903461024257606036600319011261024257610cfd610f05565b610d05610f20565b91846044359460018060a01b038416815260016020528181203382526020522054906000198203610d3f575b60208661057087878761103f565b848210610d685750918391610d5d60209695610570950333836111ad565b919394819350610d31565b606490602087519162461bcd60e51b8352820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152fd5b5050346102425781600319360112610242576020906002549051908152f35b505034610242578060031936011261024257602090610570610dea610f05565b60243590336111ad565b849084346101f557826003193601126101f55782600354610e1481610f8e565b80855291600191808316908115610e9d5750600114610e40575b5050506106ee82610700940383610ffa565b9450600385527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b828610610e85575050506106ee8260206107009582010194610e2e565b80546020878701810191909152909501948101610e68565b6107009750869350602092506106ee94915060ff191682840152151560051b82010194610e2e565b919082519283825260005b848110610ef1575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610ed0565b600435906001600160a01b0382168203610f1b57565b600080fd5b602435906001600160a01b0382168203610f1b57565b6009546001600160a01b03163303610f4a57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b90600182811c92168015610fbe575b6020831014610fa857565b634e487b7160e01b600052602260045260246000fd5b91607f1691610f9d565b6040810190811067ffffffffffffffff821117610fe457604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117610fe457604052565b9190820180921161102957565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0390811691821561115a5716918215611109576000828152806020526040812054918083106110b557604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220818154019055604051908152a3565b60405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b6001600160a01b0390811691821561125e571691821561120e5760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260018252604060002085600052825280604060002055604051908152a3565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b60058110156113b357806112c05750565b6001810361130d5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606490fd5b6002810361135a5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606490fd5b60031461136357565b60405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608490fd5b634e487b7160e01b600052602160045260246000fd5b9291907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831161144c5791608094939160ff602094604051948552168484015260408301526060820152600093849182805260015afa1561143f5781516001600160a01b03811615611439579190565b50600190565b50604051903d90823e3d90fd5b50505050600090600390565b307f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316148061155a575b156114b3577f000000000000000000000000000000000000000000000000000000000000000090565b60405160208101907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f82527f000000000000000000000000000000000000000000000000000000000000000060408201527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260a0815260c0810181811067ffffffffffffffff821117610fe45760405251902090565b507f0000000000000000000000000000000000000000000000000000000000000000461461148a565b60ff81146115c15760ff811690601f82116115af57604051916115a583610fc8565b8252602082015290565b604051632cd44ac360e21b8152600490fd5b506040516005548160006115d483610f8e565b8083529260019081811690811561165d57506001146115fe575b506115fb92500382610ffa565b90565b6005600090815291507f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db05b84831061164257506115fb9350508101602001386115ee565b81935090816020925483858901015201910190918492611629565b9050602092506115fb94915060ff191682840152151560051b820101386115ee565b60ff81146116a15760ff811690601f82116115af57604051916115a583610fc8565b506040516006548160006116b483610f8e565b8083529260019081811690811561165d57506001146116da57506115fb92500382610ffa565b6006600090815291507ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f5b84831061171e57506115fb9350508101602001386115ee565b8193509081602092548385890101520191019091849261170556fea26469706673582212206eb8ae5620ff3a88207d591b59936293ae3b006b52d6cc83bb3128252a89d3f764736f6c63430008120033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 DUP2 DUP2 MSTORE PUSH1 0x4 DUP1 CALLDATASIZE LT ISZERO PUSH2 0x15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP3 DUP4 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x6FDDE03 EQ PUSH2 0xDF4 JUMPI POP DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xDCA JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xDAB JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0xCE1 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0xCC5 JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0xCA1 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0xC51 JUMPI DUP1 PUSH4 0x3BA0B9A9 EQ PUSH2 0xC32 JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0xB6C JUMPI DUP1 PUSH4 0x6C11BCD3 EQ PUSH2 0x99D JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x966 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x909 JUMPI DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x8D1 JUMPI DUP1 PUSH4 0x84B0196E EQ PUSH2 0x7B4 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x78B JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x6A1 JUMPI DUP1 PUSH4 0xA0EF91DF EQ PUSH2 0x61E JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x577 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x546 JUMPI DUP1 PUSH4 0xD0FEBE4C EQ PUSH2 0x421 JUMPI DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x268 JUMPI DUP1 PUSH4 0xDB068E0E EQ PUSH2 0x246 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x1F9 JUMPI PUSH4 0xF2FDE38B EQ PUSH2 0x12B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1F5 JUMPI PUSH2 0x144 PUSH2 0xF05 JUMP JUMPDEST SWAP1 PUSH2 0x14D PUSH2 0xF36 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP3 DUP4 ISZERO PUSH2 0x1A3 JUMPI POP POP PUSH1 0x9 SLOAD DUP3 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA0 SHL DUP3 AND OR PUSH1 0x9 SSTORE AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP4 DUP1 LOG3 DUP1 RETURN JUMPDEST SWAP1 PUSH1 0x20 PUSH1 0x84 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x242 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x242 JUMPI DUP1 PUSH1 0x20 SWAP3 PUSH2 0x217 PUSH2 0xF05 JUMP JUMPDEST PUSH2 0x21F PUSH2 0xF20 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND DUP4 MSTORE PUSH1 0x1 DUP7 MSTORE DUP4 DUP4 KECCAK256 SWAP2 AND DUP3 MSTORE DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP DUP1 REVERT JUMPDEST DUP4 DUP3 CALLVALUE PUSH2 0x242 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x242 JUMPI PUSH2 0x261 PUSH2 0xF36 JUMP JUMPDEST CALLDATALOAD PUSH1 0xA SSTORE DUP1 RETURN JUMPDEST POP DUP3 SWAP1 CALLVALUE PUSH2 0x242 JUMPI PUSH1 0xE0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x242 JUMPI PUSH2 0x284 PUSH2 0xF05 JUMP JUMPDEST PUSH2 0x28C PUSH2 0xF20 JUMP JUMPDEST SWAP1 PUSH1 0x44 CALLDATALOAD SWAP3 PUSH1 0x64 CALLDATALOAD PUSH1 0x84 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 SUB PUSH2 0x41D JUMPI DUP2 TIMESTAMP GT PUSH2 0x3DA JUMPI PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 DUP6 AND SWAP3 DUP4 DUP10 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE DUP10 DUP10 KECCAK256 SWAP1 DUP2 SLOAD SWAP2 PUSH1 0x1 DUP4 ADD SWAP1 SSTORE DUP11 MLOAD SWAP1 PUSH1 0x20 DUP3 ADD SWAP3 PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 DUP5 MSTORE DUP7 DUP14 DUP5 ADD MSTORE DUP6 DUP11 AND PUSH1 0x60 DUP5 ADD MSTORE DUP11 PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xC0 DUP2 MSTORE PUSH1 0xE0 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x3C7 JUMPI DUP12 MSTORE MLOAD SWAP1 KECCAK256 PUSH2 0x36F SWAP2 PUSH2 0x367 SWAP2 PUSH2 0x341 PUSH2 0x1458 JUMP JUMPDEST SWAP1 DUP13 MLOAD SWAP2 PUSH2 0x1901 PUSH1 0xF0 SHL DUP4 MSTORE PUSH1 0x2 DUP4 ADD MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0xC4 CALLDATALOAD SWAP2 PUSH1 0x42 PUSH1 0xA4 CALLDATALOAD SWAP3 KECCAK256 PUSH2 0x13C9 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x12AF JUMP JUMPDEST AND SUB PUSH2 0x384 JUMPI POP PUSH2 0x381 SWAP4 SWAP5 POP PUSH2 0x11AD JUMP JUMPDEST DUP1 RETURN JUMPDEST PUSH1 0x64 SWAP1 PUSH1 0x20 DUP8 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332305065726D69743A20696E76616C6964207369676E61747572650000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP12 MSTORE PUSH1 0x41 DUP8 MSTORE PUSH1 0x24 DUP12 REVERT JUMPDEST DUP8 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 DUP2 DUP6 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332305065726D69743A206578706972656420646561646C696E65000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP7 DUP1 REVERT JUMPDEST POP SWAP1 DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1F5 JUMPI CALLVALUE ISZERO PUSH2 0x503 JUMPI PUSH1 0xA SLOAD DUP1 CALLVALUE MUL SWAP1 CALLVALUE DUP3 DIV SUB PUSH2 0x4F0 JUMPI PUSH8 0xDE0B6B3A7640000 SWAP1 DIV SWAP2 ADDRESS DUP5 MSTORE DUP4 PUSH1 0x20 MSTORE DUP3 DUP3 DUP6 KECCAK256 SLOAD LT PUSH2 0x49F JUMPI POP PUSH32 0x8FAFEBCAF9D154343DAD25669BFA277F4FBACD7AC6B0C4FED522580E040A0F33 SWAP1 PUSH2 0x48E DUP4 CALLER ADDRESS PUSH2 0x103F JUMP JUMPDEST DUP1 MLOAD SWAP3 CALLVALUE DUP5 MSTORE PUSH1 0x20 DUP5 ADD MSTORE CALLER SWAP3 LOG2 DUP1 RETURN JUMPDEST PUSH1 0x20 PUSH1 0x84 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E7420746F6B656E2062616C616E636520696E20636F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1B9D1C9858DD PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x11 DUP4 MSTORE PUSH1 0x24 DUP5 REVERT JUMPDEST SWAP1 PUSH1 0x20 PUSH1 0x64 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D7573742073656E642045544820746F2065786368616E676500000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x242 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x242 JUMPI PUSH1 0x20 SWAP1 PUSH2 0x570 PUSH2 0x566 PUSH2 0xF05 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER PUSH2 0x103F JUMP JUMPDEST MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST POP DUP3 CALLVALUE PUSH2 0x61B JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x61B JUMPI PUSH2 0x591 PUSH2 0xF05 JUMP JUMPDEST SWAP2 DUP4 PUSH1 0x24 CALLDATALOAD SWAP3 CALLER DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP2 DUP2 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP7 AND DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 SLOAD SWAP1 DUP3 DUP3 LT PUSH2 0x5CA JUMPI PUSH1 0x20 DUP6 PUSH2 0x570 DUP6 DUP6 SUB DUP8 CALLER PUSH2 0x11AD JUMP JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x20 DUP7 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x1F5 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1F5 JUMPI PUSH2 0x637 PUSH2 0xF36 JUMP JUMPDEST SELFBALANCE SWAP1 DUP2 ISZERO PUSH2 0x669 JUMPI POP PUSH1 0x9 SLOAD DUP4 SWAP2 DUP3 SWAP2 DUP3 SWAP2 DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 CALL ISZERO PUSH2 0x65F JUMPI POP DUP1 RETURN JUMPDEST MLOAD SWAP1 RETURNDATASIZE SWAP1 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH1 0x64 SWAP1 PUSH1 0x20 DUP5 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x4E6F2045544820746F207769746864726177 PUSH1 0x70 SHL PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x1F5 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1F5 JUMPI DUP1 MLOAD SWAP2 DUP4 DUP2 SLOAD SWAP1 PUSH2 0x6C3 DUP3 PUSH2 0xF8E JUMP JUMPDEST DUP1 DUP7 MSTORE SWAP3 PUSH1 0x1 SWAP3 DUP1 DUP5 AND SWAP1 DUP2 ISZERO PUSH2 0x760 JUMPI POP PUSH1 0x1 EQ PUSH2 0x704 JUMPI JUMPDEST PUSH2 0x700 DUP7 DUP7 PUSH2 0x6EE DUP3 DUP12 SUB DUP4 PUSH2 0xFFA JUMP JUMPDEST MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x20 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0xEC5 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST DUP2 MSTORE SWAP5 POP PUSH32 0x8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19B JUMPDEST DUP3 DUP7 LT PUSH2 0x748 JUMPI POP POP POP PUSH2 0x6EE DUP3 PUSH1 0x20 PUSH2 0x700 SWAP6 DUP3 ADD ADD SWAP5 CODESIZE PUSH2 0x6DD JUMP JUMPDEST DUP1 SLOAD PUSH1 0x20 DUP8 DUP8 ADD DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 SWAP6 ADD SWAP5 DUP2 ADD PUSH2 0x72A JUMP JUMPDEST SWAP1 POP PUSH2 0x700 SWAP8 POP DUP7 SWAP4 POP PUSH1 0x20 SWAP3 POP PUSH2 0x6EE SWAP5 SWAP2 POP PUSH1 0xFF NOT AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD SWAP5 CODESIZE PUSH2 0x6DD JUMP JUMPDEST POP POP CALLVALUE PUSH2 0x242 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x242 JUMPI PUSH1 0x9 SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x1F5 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1F5 JUMPI PUSH2 0x7EF PUSH32 0x0 PUSH2 0x1583 JUMP JUMPDEST SWAP3 PUSH2 0x819 PUSH32 0x0 PUSH2 0x167F JUMP JUMPDEST SWAP1 DUP3 MLOAD SWAP3 PUSH1 0x20 SWAP3 DUP4 DUP6 ADD SWAP6 DUP6 DUP8 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP9 GT OR PUSH2 0x8BE JUMPI POP SWAP3 DUP1 PUSH2 0x874 DUP4 DUP9 SWAP7 PUSH2 0x867 SWAP10 DUP12 SWAP10 SWAP7 MSTORE DUP7 DUP7 MSTORE DUP2 MLOAD SWAP10 DUP11 SWAP10 PUSH1 0xF PUSH1 0xF8 SHL DUP12 MSTORE PUSH1 0xE0 DUP7 DUP13 ADD MSTORE PUSH1 0xE0 DUP12 ADD SWAP1 PUSH2 0xEC5 JUMP JUMPDEST SWAP2 DUP10 DUP4 SUB SWAP1 DUP11 ADD MSTORE PUSH2 0xEC5 JUMP JUMPDEST SWAP3 CHAINID PUSH1 0x60 DUP9 ADD MSTORE ADDRESS PUSH1 0x80 DUP9 ADD MSTORE DUP5 PUSH1 0xA0 DUP9 ADD MSTORE DUP7 DUP5 SUB PUSH1 0xC0 DUP9 ADD MSTORE MLOAD SWAP3 DUP4 DUP2 MSTORE ADD SWAP4 SWAP3 JUMPDEST DUP3 DUP2 LT PUSH2 0x8A7 JUMPI POP POP POP POP SUB SWAP1 RETURN JUMPDEST DUP4 MLOAD DUP6 MSTORE DUP7 SWAP6 POP SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x898 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x41 SWAP1 MSTORE PUSH1 0x24 DUP4 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x242 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x242 JUMPI PUSH1 0x20 SWAP2 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x8F9 PUSH2 0xF05 JUMP JUMPDEST AND DUP2 MSTORE PUSH1 0x7 DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP4 CALLVALUE PUSH2 0x61B JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x61B JUMPI PUSH2 0x922 PUSH2 0xF36 JUMP JUMPDEST PUSH1 0x9 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP3 DUP1 LOG3 DUP1 RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x242 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x242 JUMPI PUSH1 0x20 SWAP2 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x98E PUSH2 0xF05 JUMP JUMPDEST AND DUP2 MSTORE DUP1 DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x1F5 JUMPI PUSH1 0x20 SWAP2 DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xB68 JUMPI DUP2 CALLDATALOAD SWAP2 DUP3 ISZERO PUSH2 0xB19 JUMPI CALLER DUP6 MSTORE DUP5 DUP5 MSTORE DUP3 DUP3 DUP7 KECCAK256 SLOAD LT PUSH2 0xAD8 JUMPI PUSH8 0xDE0B6B3A7640000 DUP4 MUL PUSH8 0xDE0B6B3A763FFFF NOT DUP5 DUP3 DIV ADD PUSH2 0xAC5 JUMPI PUSH1 0xA SLOAD SWAP1 DUP2 ISZERO PUSH2 0xAB2 JUMPI DIV SWAP1 DUP2 SELFBALANCE LT PUSH2 0xA63 JUMPI POP PUSH2 0xA06 DUP4 ADDRESS CALLER PUSH2 0x103F JUMP JUMPDEST DUP5 DUP1 DUP3 DUP1 ISZERO PUSH2 0xA59 JUMPI JUMPDEST DUP3 DUP1 SWAP3 SWAP2 DUP2 SWAP3 CALLER SWAP1 CALL ISZERO PUSH2 0xA4F JUMPI PUSH32 0x2DCF9433D75DB0D8B1C172641F85E319FFE4AD22E108A95D1847CEB906E5195D SWAP3 SWAP4 DUP3 MLOAD SWAP5 DUP6 MSTORE DUP5 ADD MSTORE CALLER SWAP3 LOG2 DUP1 RETURN JUMPDEST DUP2 MLOAD RETURNDATASIZE DUP7 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x8FC SWAP2 POP PUSH2 0xA10 JUMP JUMPDEST DUP3 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE SWAP1 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E74204554482062616C616E636520696E20636F6E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x1C9858DD PUSH1 0xE2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP8 MSTORE PUSH1 0x12 DUP4 MSTORE PUSH1 0x24 DUP8 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x11 DUP3 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST DUP4 PUSH1 0x64 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E7420746F6B656E2062616C616E6365000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST DUP4 PUSH1 0x84 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D7573742073656C6C206120706F73697469766520616D6F756E74206F662074 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6F6B656E73 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST DUP4 DUP1 REVERT JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x1F5 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1F5 JUMPI PUSH2 0xB86 PUSH2 0xF05 JUMP JUMPDEST SWAP1 PUSH1 0x24 CALLDATALOAD SWAP2 PUSH2 0xB93 PUSH2 0xF36 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP3 DUP4 ISZERO PUSH2 0xBF0 JUMPI POP PUSH1 0x20 DUP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 PUSH2 0xBD6 DUP8 SWAP6 PUSH1 0x2 SLOAD PUSH2 0x101C JUMP JUMPDEST PUSH1 0x2 SSTORE DUP6 DUP6 MSTORE DUP5 DUP4 MSTORE DUP1 DUP6 KECCAK256 DUP3 DUP2 SLOAD ADD SWAP1 SSTORE MLOAD SWAP1 DUP2 MSTORE LOG3 DUP1 RETURN JUMPDEST PUSH1 0x20 PUSH1 0x64 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x242 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x242 JUMPI PUSH1 0x20 SWAP1 PUSH1 0xA SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x242 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x242 JUMPI PUSH2 0x570 PUSH1 0x20 SWAP3 PUSH2 0xC9A PUSH2 0xC74 PUSH2 0xF05 JUMP JUMPDEST CALLER DUP4 MSTORE PUSH1 0x1 DUP7 MSTORE DUP5 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP5 MSTORE DUP7 MSTORE SWAP2 DUP5 SWAP1 KECCAK256 SLOAD PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0x101C JUMP JUMPDEST SWAP1 CALLER PUSH2 0x11AD JUMP JUMPDEST POP POP CALLVALUE PUSH2 0x242 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x242 JUMPI PUSH1 0x20 SWAP1 PUSH2 0xCBE PUSH2 0x1458 JUMP JUMPDEST SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x242 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x242 JUMPI PUSH1 0x20 SWAP1 MLOAD PUSH1 0x12 DUP2 MSTORE RETURN JUMPDEST POP DUP3 SWAP1 CALLVALUE PUSH2 0x242 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x242 JUMPI PUSH2 0xCFD PUSH2 0xF05 JUMP JUMPDEST PUSH2 0xD05 PUSH2 0xF20 JUMP JUMPDEST SWAP2 DUP5 PUSH1 0x44 CALLDATALOAD SWAP5 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP2 DUP2 KECCAK256 CALLER DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 SLOAD SWAP1 PUSH1 0x0 NOT DUP3 SUB PUSH2 0xD3F JUMPI JUMPDEST PUSH1 0x20 DUP7 PUSH2 0x570 DUP8 DUP8 DUP8 PUSH2 0x103F JUMP JUMPDEST DUP5 DUP3 LT PUSH2 0xD68 JUMPI POP SWAP2 DUP4 SWAP2 PUSH2 0xD5D PUSH1 0x20 SWAP7 SWAP6 PUSH2 0x570 SWAP6 SUB CALLER DUP4 PUSH2 0x11AD JUMP JUMPDEST SWAP2 SWAP4 SWAP5 DUP2 SWAP4 POP PUSH2 0xD31 JUMP JUMPDEST PUSH1 0x64 SWAP1 PUSH1 0x20 DUP8 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x242 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x242 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x2 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x242 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x242 JUMPI PUSH1 0x20 SWAP1 PUSH2 0x570 PUSH2 0xDEA PUSH2 0xF05 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER PUSH2 0x11AD JUMP JUMPDEST DUP5 SWAP1 DUP5 CALLVALUE PUSH2 0x1F5 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1F5 JUMPI DUP3 PUSH1 0x3 SLOAD PUSH2 0xE14 DUP2 PUSH2 0xF8E JUMP JUMPDEST DUP1 DUP6 MSTORE SWAP2 PUSH1 0x1 SWAP2 DUP1 DUP4 AND SWAP1 DUP2 ISZERO PUSH2 0xE9D JUMPI POP PUSH1 0x1 EQ PUSH2 0xE40 JUMPI JUMPDEST POP POP POP PUSH2 0x6EE DUP3 PUSH2 0x700 SWAP5 SUB DUP4 PUSH2 0xFFA JUMP JUMPDEST SWAP5 POP PUSH1 0x3 DUP6 MSTORE PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B JUMPDEST DUP3 DUP7 LT PUSH2 0xE85 JUMPI POP POP POP PUSH2 0x6EE DUP3 PUSH1 0x20 PUSH2 0x700 SWAP6 DUP3 ADD ADD SWAP5 PUSH2 0xE2E JUMP JUMPDEST DUP1 SLOAD PUSH1 0x20 DUP8 DUP8 ADD DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 SWAP6 ADD SWAP5 DUP2 ADD PUSH2 0xE68 JUMP JUMPDEST PUSH2 0x700 SWAP8 POP DUP7 SWAP4 POP PUSH1 0x20 SWAP3 POP PUSH2 0x6EE SWAP5 SWAP2 POP PUSH1 0xFF NOT AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD SWAP5 PUSH2 0xE2E JUMP JUMPDEST SWAP2 SWAP1 DUP3 MLOAD SWAP3 DUP4 DUP3 MSTORE PUSH1 0x0 JUMPDEST DUP5 DUP2 LT PUSH2 0xEF1 JUMPI POP POP DUP3 PUSH1 0x0 PUSH1 0x20 DUP1 SWAP5 SWAP6 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 DUP4 ADD DUP2 ADD MLOAD DUP5 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0xED0 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xF1B JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xF1B JUMPI JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0xF4A JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0xFBE JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0xFA8 JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0xF9D JUMP JUMPDEST PUSH1 0x40 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xFE4 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xFE4 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x1029 JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 DUP3 ISZERO PUSH2 0x115A JUMPI AND SWAP2 DUP3 ISZERO PUSH2 0x1109 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE DUP1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 DUP1 DUP4 LT PUSH2 0x10B5 JUMPI PUSH1 0x40 DUP3 DUP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP6 DUP8 PUSH1 0x20 SWAP7 MSTORE DUP3 DUP7 MSTORE SUB DUP3 DUP3 KECCAK256 SSTORE DUP7 DUP2 MSTORE KECCAK256 DUP2 DUP2 SLOAD ADD SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 DUP3 ISZERO PUSH2 0x125E JUMPI AND SWAP2 DUP3 ISZERO PUSH2 0x120E JUMPI PUSH1 0x20 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 DUP4 PUSH1 0x0 MSTORE PUSH1 0x1 DUP3 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP6 PUSH1 0x0 MSTORE DUP3 MSTORE DUP1 PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x13B3 JUMPI DUP1 PUSH2 0x12C0 JUMPI POP JUMP JUMPDEST PUSH1 0x1 DUP2 SUB PUSH2 0x130D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP2 SUB PUSH2 0x135A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x3 EQ PUSH2 0x1363 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7565 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP3 SWAP2 SWAP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 GT PUSH2 0x144C JUMPI SWAP2 PUSH1 0x80 SWAP5 SWAP4 SWAP2 PUSH1 0xFF PUSH1 0x20 SWAP5 PUSH1 0x40 MLOAD SWAP5 DUP6 MSTORE AND DUP5 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x0 SWAP4 DUP5 SWAP2 DUP3 DUP1 MSTORE PUSH1 0x1 GAS STATICCALL ISZERO PUSH2 0x143F JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x1439 JUMPI SWAP2 SWAP1 JUMP JUMPDEST POP PUSH1 0x1 SWAP1 JUMP JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 RETURNDATASIZE SWAP1 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 SWAP1 PUSH1 0x3 SWAP1 JUMP JUMPDEST ADDRESS PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x155A JUMPI JUMPDEST ISZERO PUSH2 0x14B3 JUMPI PUSH32 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F DUP3 MSTORE PUSH32 0x0 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x0 PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xA0 DUP2 MSTORE PUSH1 0xC0 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xFE4 JUMPI PUSH1 0x40 MSTORE MLOAD SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST POP PUSH32 0x0 CHAINID EQ PUSH2 0x148A JUMP JUMPDEST PUSH1 0xFF DUP2 EQ PUSH2 0x15C1 JUMPI PUSH1 0xFF DUP2 AND SWAP1 PUSH1 0x1F DUP3 GT PUSH2 0x15AF JUMPI PUSH1 0x40 MLOAD SWAP2 PUSH2 0x15A5 DUP4 PUSH2 0xFC8 JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2CD44AC3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x5 SLOAD DUP2 PUSH1 0x0 PUSH2 0x15D4 DUP4 PUSH2 0xF8E JUMP JUMPDEST DUP1 DUP4 MSTORE SWAP3 PUSH1 0x1 SWAP1 DUP2 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x165D JUMPI POP PUSH1 0x1 EQ PUSH2 0x15FE JUMPI JUMPDEST POP PUSH2 0x15FB SWAP3 POP SUB DUP3 PUSH2 0xFFA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x5 PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP2 POP PUSH32 0x36B6384B5ECA791C62761152D0C79BB0604C104A5FB6F4EB0703F3154BB3DB0 JUMPDEST DUP5 DUP4 LT PUSH2 0x1642 JUMPI POP PUSH2 0x15FB SWAP4 POP POP DUP2 ADD PUSH1 0x20 ADD CODESIZE PUSH2 0x15EE JUMP JUMPDEST DUP2 SWAP4 POP SWAP1 DUP2 PUSH1 0x20 SWAP3 SLOAD DUP4 DUP6 DUP10 ADD ADD MSTORE ADD SWAP2 ADD SWAP1 SWAP2 DUP5 SWAP3 PUSH2 0x1629 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 SWAP3 POP PUSH2 0x15FB SWAP5 SWAP2 POP PUSH1 0xFF NOT AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD CODESIZE PUSH2 0x15EE JUMP JUMPDEST PUSH1 0xFF DUP2 EQ PUSH2 0x16A1 JUMPI PUSH1 0xFF DUP2 AND SWAP1 PUSH1 0x1F DUP3 GT PUSH2 0x15AF JUMPI PUSH1 0x40 MLOAD SWAP2 PUSH2 0x15A5 DUP4 PUSH2 0xFC8 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x6 SLOAD DUP2 PUSH1 0x0 PUSH2 0x16B4 DUP4 PUSH2 0xF8E JUMP JUMPDEST DUP1 DUP4 MSTORE SWAP3 PUSH1 0x1 SWAP1 DUP2 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x165D JUMPI POP PUSH1 0x1 EQ PUSH2 0x16DA JUMPI POP PUSH2 0x15FB SWAP3 POP SUB DUP3 PUSH2 0xFFA JUMP JUMPDEST PUSH1 0x6 PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP2 POP PUSH32 0xF652222313E28459528D920B65115C16C04F3EFC82AAEDC97BE59F3F377C0D3F JUMPDEST DUP5 DUP4 LT PUSH2 0x171E JUMPI POP PUSH2 0x15FB SWAP4 POP POP DUP2 ADD PUSH1 0x20 ADD CODESIZE PUSH2 0x15EE JUMP JUMPDEST DUP2 SWAP4 POP SWAP1 DUP2 PUSH1 0x20 SWAP3 SLOAD DUP4 DUP6 DUP10 ADD ADD MSTORE ADD SWAP2 ADD SWAP1 SWAP2 DUP5 SWAP3 PUSH2 0x1705 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH15 0xB8AE5620FF3A88207D591B59936293 0xAE EXTCODESIZE STOP PUSH12 0x52D6CC83BB3128252A89D3F7 PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ",
							"sourceMap": "255:3031:16:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;255:3031:16;;;;;;:::i;:::-;1063:62:0;;;:::i;:::-;-1:-1:-1;;;;;255:3031:16;;;;2162:22:0;;255:3031:16;;;;2518:6:0;255:3031:16;;;;;;;;2518:6:0;255:3031:16;;2566:40:0;;;;255:3031:16;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;255:3031:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;-1:-1:-1;;;;;255:3031:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;255:3031:16;;;;1063:62:0;;:::i;:::-;255:3031:16;2993:22;255:3031;;;;;;;;;;;;-1:-1:-1;;255:3031:16;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;2139:15:4;;:27;255:3031:16;;;;;;;;;;;;;;;3200:7:4;255:3031:16;;;;;;;;;;;;;;;;2242:79:4;255:3031:16;2242:79:4;;255:3031:16;1125:95:4;255:3031:16;;1125:95:4;;;;255:3031:16;;;;;1125:95:4;;255:3031:16;1125:95:4;255:3031:16;1125:95:4;;255:3031:16;;1125:95:4;;255:3031:16;;1125:95:4;;255:3031:16;;2242:79:4;;255:3031:16;;;;;;;;;;;;;;;2232:90:4;;6791:5:12;;6744:25;;4893:20:13;;:::i;:::-;8496:231:12;;;;-1:-1:-1;;;8496:231:12;;;;;;;;;;255:3031:16;;;8496:231:12;255:3031:16;;8496:231:12;;6744:25;:::i;:::-;6791:5;;;;:::i;:::-;255:3031:16;2450:15:4;1125:95;;2536:5;;;;;;:::i;:::-;255:3031:16;;1125:95:4;255:3031:16;;;;;;;;;1125:95:4;;;;;;255:3031:16;1125:95:4;;255:3031:16;1125:95:4;255:3031:16;;;1125:95:4;;255:3031:16;-1:-1:-1;;;255:3031:16;;;;;;;;;;;-1:-1:-1;;;255:3031:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1282:9;:13;255:3031;;1441:12;255:3031;1282:9;;255:3031;1282:9;;255:3031;;;;;1457:4;255:3031;;1498:4;;255:3031;;;;;;;;;;1480:39;255:3031;;1628:10;1699:51;1628:10;1640:11;1628:10;;1498:4;1640:11;:::i;:::-;255:3031;;1282:9;;255:3031;;;;;;1628:10;1699:51;;255:3031;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;255:3031:16;;;;;;-1:-1:-1;;;255:3031:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3894:6:2;255:3031:16;;:::i;:::-;;;734:10:7;;3894:6:2;:::i;:::-;255:3031:16;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;734:10:7;;255:3031:16;;;;;;;;;;;;;;;;;;;;;6792:35:2;;;;255:3031:16;;;;6928:34:2;255:3031:16;;;;734:10:7;6928:34:2;:::i;255:3031:16:-;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;255:3031:16;;;;;;;;;;;;;;;;;;;;;1063:62:0;;:::i;:::-;3156:21:16;3196:11;;;255:3031;;-1:-1:-1;1273:6:0;255:3031:16;;;;;;;;;-1:-1:-1;;;;;255:3031:16;;3241:34;;;;255:3031;;;3241:34;255:3031;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;255:3031:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;255:3031:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1273:6:0;255:3031:16;;;-1:-1:-1;;;;;255:3031:16;;;;;;;;;;;;;;;;;;;;;;5427:41:13;:5;:41;:::i;:::-;5482:8;:47;:8;:47;:::i;:::-;255:3031:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;5543:13:13;;255:3031:16;;;;5578:4:13;255:3031:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;255:3031:16;;;;;;;;;;;;;-1:-1:-1;;;255:3031:16;;;;;;;;;;;;;;;;-1:-1:-1;;255:3031:16;;;;;;;;-1:-1:-1;;;;;255:3031:16;;:::i;:::-;;;;2698:7:4;255:3031:16;;;;;;;;;;;;;;;;;;;;;;;1063:62:0;;:::i;:::-;2518:6;255:3031:16;;-1:-1:-1;;;;;;255:3031:16;;;;;;;-1:-1:-1;;;;;255:3031:16;2566:40:0;255:3031:16;;2566:40:0;255:3031:16;;;;;;;;;;-1:-1:-1;;255:3031:16;;;;;;;;-1:-1:-1;;;;;255:3031:16;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1948:15;;;255:3031;;2034:10;255:3031;;;;;;;;;;2024:36;255:3031;;2206:4;255:3031;;-1:-1:-1;;255:3031:16;;;;;;2214:12;255:3031;;;;;;;2245:21;;;:34;255:3031;;2253:4;2398:11;2253:4;;2034:10;2398:11;:::i;:::-;2446:39;;;;;;;255:3031;2034:10;;;;;;;2446:39;;;;;2534:46;255:3031;;;;;;;;;;2034:10;2534:46;;255:3031;;2446:39;255:3031;;;;;;;;;2446:39;;;-1:-1:-1;2446:39:16;;255:3031;;;-1:-1:-1;;;255:3031:16;;;;;;;;;;;;;;;;;;-1:-1:-1;;;255:3031:16;;;;;;;;-1:-1:-1;;;255:3031:16;;;;;;;;;-1:-1:-1;;;255:3031:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;255:3031:16;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;1063:62:0;;;:::i;:::-;-1:-1:-1;;;;;255:3031:16;;8603:21:2;;255:3031:16;;;;;8952:37:2;255:3031:16;8731:22:2;255:3031:16;;8731:22:2;255:3031:16;8731:22:2;:::i;:::-;;255:3031:16;;;;;;;;;;;;;;;;;;;;8952:37:2;255:3031:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;370:27;255:3031;;;;;;;;;;;;;;;;;;;;;6021:38:2;255:3031:16;;6021:38:2;255:3031:16;;:::i;:::-;734:10:7;255:3031:16;;;;;;;;-1:-1:-1;;;;;255:3031:16;;;;;;;;;;;;;;6021:38:2;:::i;:::-;734:10:7;;6021:38:2;:::i;255:3031:16:-;;;;;;;;;;;;;;;2922:20:4;;;:::i;:::-;255:3031:16;;;;;;;;;;;;;;;;;;;;;;;3186:2:2;255:3031:16;;;;;;;;;;;;-1:-1:-1;;255:3031:16;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;734:10:7;255:3031:16;;;;;;11264:17:2;;;11244:37;;11240:243;;255:3031:16;;5424:6:2;;;;;;:::i;11240:243::-;11305:26;;;255:3031:16;;;;;;11432:25:2;255:3031:16;;;5424:6:2;255:3031:16;;734:10:7;11432:25:2;;:::i;:::-;11240:243;;;;;;;;255:3031:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3342:12:2;255:3031:16;;;;;;;;;;;;;;;;;;;;;;;4606:6:2;255:3031:16;;:::i;:::-;;;734:10:7;;4606:6:2;:::i;255:3031:16:-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;255:3031:16;;;;;;;;;-1:-1:-1;255:3031:16;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;255:3031:16;;;;;;:::o;:::-;;;;;;;;-1:-1:-1;;;;;255:3031:16;;;;;;:::o;1359:130:0:-;1273:6;255:3031:16;-1:-1:-1;;;;;255:3031:16;734:10:7;1422:23:0;255:3031:16;;1359:130:0:o;255:3031:16:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;;;;7456:788:2;-1:-1:-1;;;;;255:3031:16;;;;7552:18:2;;255:3031:16;;;7630:16:2;;;255:3031:16;;7568:1:2;255:3031:16;;;;;;;;;;7801:21:2;;;;255:3031:16;;;;;8163:26:2;255:3031:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;8163:26:2;7456:788::o;255:3031:16:-;;;-1:-1:-1;;;255:3031:16;;;;;;;;;;;;;;;;;-1:-1:-1;;;255:3031:16;;;;;;;;;;-1:-1:-1;;;255:3031:16;;;;;;;;;;;;;;;;;-1:-1:-1;;;255:3031:16;;;;;;;;;;-1:-1:-1;;;255:3031:16;;;;;;;;;;;;;;;;;-1:-1:-1;;;255:3031:16;;;;;;;10457:340:2;-1:-1:-1;;;;;255:3031:16;;;;10558:19:2;;255:3031:16;;;10636:21:2;;;255:3031:16;;;10758:32:2;255:3031:16;;10575:1:2;255:3031:16;;;;;10575:1:2;255:3031:16;;10575:1:2;255:3031:16;;;;;10575:1:2;255:3031:16;;;;;;;10758:32:2;10457:340::o;255:3031:16:-;;;-1:-1:-1;;;255:3031:16;;;;;;;;;;;;;;;;;-1:-1:-1;;;255:3031:16;;;;;;;;;;-1:-1:-1;;;255:3031:16;;;;;;;;;;;;;;;;;-1:-1:-1;;;255:3031:16;;;;;;;570:511:12;255:3031:16;;;;;;638:29:12;;;683:7;:::o;634:441::-;255:3031:16;734:38:12;;255:3031:16;;;;-1:-1:-1;;;788:34:12;;255:3031:16;788:34:12;;;255:3031:16;;;;;;;;;;;;;788:34:12;730:345;852:35;843:44;;852:35;;255:3031:16;;-1:-1:-1;;;903:41:12;;255:3031:16;903:41:12;;;255:3031:16;;;;;;;;;;;;;903:41:12;839:236;974:30;965:39;961:114;;570:511::o;961:114::-;255:3031:16;;-1:-1:-1;;;1020:44:12;;255:3031:16;1020:44:12;;;255:3031:16;;;;;;;;;;;-1:-1:-1;;;255:3031:16;;;;;;1020:44:12;255:3031:16;;;;647:20:12;255:3031:16;;;;;647:20:12;255:3031:16;5009:1456:12;;;;6021:66;6008:79;;6004:161;;255:3031:16;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6276:24:12;;;;;;;;;;;;;;-1:-1:-1;;;;;255:3031:16;;6314:20:12;6310:101;;6421:37;5009:1456;:::o;6310:101::-;6350:50;6276:24;6350:50;:::o;6276:24::-;255:3031:16;;;;;;;;;;;6004:161:12;6103:51;;;;6119:1;6103:51;6123:30;6103:51;:::o;3695:262:13:-;3779:4;3788:11;-1:-1:-1;;;;;255:3031:16;3771:28:13;;:63;;3695:262;3767:184;;;3857:22;3850:29;:::o;3767:184::-;255:3031:16;;4054:81:13;;;255:3031:16;1929:95:13;255:3031:16;;4077:11:13;255:3031:16;1929:95:13;;255:3031:16;4090:14:13;1929:95;;;255:3031:16;4106:13:13;1929:95;;;255:3031:16;3779:4:13;255:3031:16;1929:95:13;;255:3031:16;;4054:81:13;;1929:95;255:3031:16;;;;;;;;;;;;;;4044:92:13;;3910:30;:::o;3771:63::-;3820:14;;3803:13;:31;3771:63;;3367:268:9;1371:66;3490:47;;1371:66;;;2633:40;;2687:11;2696:2;2687:11;;2683:69;;255:3031:16;;;;;;:::i;:::-;2348:90:9;;2292:2;255:3031:16;;2348:90:9;3553:22;:::o;2683:69::-;255:3031:16;;-1:-1:-1;;;2721:20:9;;;;;3486:143;-1:-1:-1;255:3031:16;;5454:13:13;255:3031:16;;-1:-1:-1;255:3031:16;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;1371:66:9;;;;;;;:::i;:::-;3606:12;:::o;255:3031:16:-;5454:13:13;-1:-1:-1;255:3031:16;;;-1:-1:-1;;255:3031:16;;;;;;;-1:-1:-1;1371:66:9;;-1:-1:-1;;255:3031:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1371:66:9;255:3031:16;;;;;;;;;;;;5454:13:13;255:3031:16;;;;;;;3367:268:9;1371:66;3490:47;;1371:66;;;2633:40;;2687:11;2696:2;2687:11;;2683:69;;255:3031:16;;;;;;:::i;3486:143:9:-;-1:-1:-1;255:3031:16;;5512:16:13;255:3031:16;;-1:-1:-1;255:3031:16;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;1371:66:9;;;;;;;:::i;255:3031:16:-;5512:16:13;-1:-1:-1;255:3031:16;;;-1:-1:-1;;255:3031:16;;;;;;;-1:-1:-1;1371:66:9;;-1:-1:-1;;255:3031:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1199800",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"DOMAIN_SEPARATOR()": "infinite",
								"allowance(address,address)": "3054",
								"approve(address,uint256)": "24384",
								"balanceOf(address)": "2648",
								"buyTokens()": "57117",
								"decimals()": "259",
								"decreaseAllowance(address,uint256)": "27020",
								"eip712Domain()": "infinite",
								"exchangeRate()": "2431",
								"increaseAllowance(address,uint256)": "26804",
								"mint(address,uint256)": "52951",
								"name()": "infinite",
								"nonces(address)": "2692",
								"owner()": "2606",
								"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "infinite",
								"renounceOwnership()": "28323",
								"sellTokens(uint256)": "infinite",
								"setExchangeRate(uint256)": "24883",
								"symbol()": "infinite",
								"totalSupply()": "2321",
								"transfer(address,uint256)": "51161",
								"transferFrom(address,address,uint256)": "77382",
								"transferOwnership(address)": "28677",
								"withdrawEth()": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "160"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "CALLVALUE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "8"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "1F"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSHSIZE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "CODESIZE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SUB",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP6",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP5",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "AND",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP6",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "GT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP4",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP4",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "LT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "OR",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "6"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP4",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "40"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP6",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP7",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP5",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP6",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP4",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "CODECOPY",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SUB",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SLT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "8"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "20"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP4",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP5",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "10"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP7",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "1"
								},
								{
									"begin": 255,
									"end": 3286,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "10"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "B"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP7",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP7",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP7",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "2A3AB93A3632AA37B5B2B7"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A9"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP9",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP10",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP10",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP7",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP10",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "11"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP12",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "1"
								},
								{
									"begin": 255,
									"end": 3286,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "11"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "B"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP12",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP5",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP12",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP7",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP10",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "12"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP12",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "1"
								},
								{
									"begin": 255,
									"end": 3286,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "12"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "4"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP4",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP5",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP13",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "15155495"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E2"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP7",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP14",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP9",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP12",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP13",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "13"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP5",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "1"
								},
								{
									"begin": 255,
									"end": 3286,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "13"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP8",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "1"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP5",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP6",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP4",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "31"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "F8"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP6",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP8",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "GT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "27"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 2046,
									"end": 2059,
									"name": "PUSH",
									"source": 2,
									"value": "3"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP4",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SLOAD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP4",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SHR",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "AND",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ISZERO",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "16"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "tag",
									"source": -1,
									"value": "17"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "JUMPDEST",
									"source": -1
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP13",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "LT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "EQ",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "18"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP12",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP11",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP6",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP5",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "GT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "20"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "tag",
									"source": -1,
									"value": "21"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "JUMPDEST",
									"source": -1
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP12",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP10",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP4",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "GT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "1"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "EQ",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "22"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "24"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "25"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP6",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SHL",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SHR",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "NOT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "AND",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SHL",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "OR",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SSTORE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "26"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP8",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP5",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "GT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "27"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP9",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SLOAD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SHR",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "AND",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ISZERO",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "29"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "30"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP12",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "LT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "EQ",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "31"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP8",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "GT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "33"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "34"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP10",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP8",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP6",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "GT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "1"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "EQ",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "35"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP5",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP6",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP5",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP2",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP6",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "37"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "38"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SHL",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "NOT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SHL",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SHR",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "NOT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "AND",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "OR",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP5",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SSTORE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "39"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 3251,
									"end": 3296,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "40"
								},
								{
									"begin": 3251,
									"end": 3296,
									"name": "DUP10",
									"source": 13
								},
								{
									"begin": 3251,
									"end": 3296,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "2"
								},
								{
									"begin": 3251,
									"end": 3296,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 3251,
									"end": 3296,
									"name": "tag",
									"source": 13,
									"value": "40"
								},
								{
									"begin": 3251,
									"end": 3296,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 3243,
									"end": 3296,
									"name": "SWAP10",
									"source": 13
								},
								{
									"begin": 3243,
									"end": 3296,
									"name": "PUSH",
									"source": 13,
									"value": "120"
								},
								{
									"begin": 3243,
									"end": 3296,
									"name": "SWAP11",
									"source": 13
								},
								{
									"begin": 3243,
									"end": 3296,
									"name": "DUP12",
									"source": 13
								},
								{
									"begin": 3243,
									"end": 3296,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 3317,
									"end": 3368,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "41"
								},
								{
									"begin": 3317,
									"end": 3368,
									"name": "DUP13",
									"source": 13
								},
								{
									"begin": 3317,
									"end": 3368,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "3"
								},
								{
									"begin": 3317,
									"end": 3368,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 3317,
									"end": 3368,
									"name": "tag",
									"source": 13,
									"value": "41"
								},
								{
									"begin": 3317,
									"end": 3368,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 3306,
									"end": 3368,
									"name": "SWAP10",
									"source": 13
								},
								{
									"begin": 3306,
									"end": 3368,
									"name": "PUSH",
									"source": 13,
									"value": "140"
								},
								{
									"begin": 3306,
									"end": 3368,
									"name": "SWAP11",
									"source": 13
								},
								{
									"begin": 3306,
									"end": 3368,
									"name": "DUP12",
									"source": 13
								},
								{
									"begin": 3306,
									"end": 3368,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 3392,
									"end": 3414,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 3392,
									"end": 3414,
									"name": "KECCAK256",
									"source": 13
								},
								{
									"begin": 3378,
									"end": 3414,
									"name": "SWAP11",
									"source": 13
								},
								{
									"begin": 3378,
									"end": 3414,
									"name": "DUP12",
									"source": 13
								},
								{
									"begin": 3378,
									"end": 3414,
									"name": "PUSH",
									"source": 13,
									"value": "E0"
								},
								{
									"begin": 3378,
									"end": 3414,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 3441,
									"end": 3466,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 3441,
									"end": 3466,
									"name": "KECCAK256",
									"source": 13
								},
								{
									"begin": 3424,
									"end": 3466,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 3424,
									"end": 3466,
									"name": "PUSH",
									"source": 13,
									"value": "100"
								},
								{
									"begin": 3424,
									"end": 3466,
									"name": "SWAP11",
									"source": 13
								},
								{
									"begin": 3424,
									"end": 3466,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 3424,
									"end": 3466,
									"name": "DUP13",
									"source": 13
								},
								{
									"begin": 3424,
									"end": 3466,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 3494,
									"end": 3507,
									"name": "CHAINID",
									"source": 13
								},
								{
									"begin": 3477,
									"end": 3507,
									"name": "PUSH",
									"source": 13,
									"value": "A0"
								},
								{
									"begin": 3477,
									"end": 3507,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP9",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 4054,
									"end": 4135,
									"name": "SWAP3",
									"source": 13
								},
								{
									"begin": 4054,
									"end": 4135,
									"name": "DUP7",
									"source": 13
								},
								{
									"begin": 4054,
									"end": 4135,
									"name": "DUP5",
									"source": 13
								},
								{
									"begin": 4054,
									"end": 4135,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP2",
									"source": 16
								},
								{
									"begin": 1929,
									"end": 2024,
									"name": "PUSH",
									"source": 13,
									"value": "8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP4",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 1929,
									"end": 2024,
									"name": "DUP11",
									"source": 13
								},
								{
									"begin": 1929,
									"end": 2024,
									"name": "DUP6",
									"source": 13
								},
								{
									"begin": 1929,
									"end": 2024,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 1929,
									"end": 2024,
									"name": "PUSH",
									"source": 13,
									"value": "60"
								},
								{
									"begin": 1929,
									"end": 2024,
									"name": "DUP5",
									"source": 13
								},
								{
									"begin": 1929,
									"end": 2024,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 3494,
									"end": 3507,
									"name": "CHAINID",
									"source": 13
								},
								{
									"begin": 1929,
									"end": 2024,
									"name": "PUSH",
									"source": 13,
									"value": "80"
								},
								{
									"begin": 1929,
									"end": 2024,
									"name": "DUP5",
									"source": 13
								},
								{
									"begin": 1929,
									"end": 2024,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 4129,
									"end": 4133,
									"name": "ADDRESS",
									"source": 13
								},
								{
									"begin": 3477,
									"end": 3507,
									"name": "PUSH",
									"source": 13,
									"value": "A0"
								},
								{
									"begin": 1929,
									"end": 2024,
									"name": "DUP5",
									"source": 13
								},
								{
									"begin": 1929,
									"end": 2024,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 1929,
									"end": 2024,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 3477,
									"end": 3507,
									"name": "PUSH",
									"source": 13,
									"value": "A0"
								},
								{
									"begin": 4054,
									"end": 4135,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 4054,
									"end": 4135,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 1929,
									"end": 2024,
									"name": "PUSH",
									"source": 13,
									"value": "C0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP4",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP4",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP4",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP6",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "LT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP6",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "GT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "OR",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "42"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP4",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP10",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 4044,
									"end": 4136,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 4044,
									"end": 4136,
									"name": "KECCAK256",
									"source": 13
								},
								{
									"begin": 1929,
									"end": 2024,
									"name": "PUSH",
									"source": 13,
									"value": "80"
								},
								{
									"begin": 3517,
									"end": 3565,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 4129,
									"end": 4133,
									"name": "ADDRESS",
									"source": 13
								},
								{
									"begin": 1929,
									"end": 2024,
									"name": "PUSH",
									"source": 13,
									"value": "C0"
								},
								{
									"begin": 3575,
									"end": 3602,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 2518,
									"end": 2524,
									"name": "PUSH",
									"source": 0,
									"value": "9"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SLOAD",
									"source": 16
								},
								{
									"begin": 734,
									"end": 744,
									"name": "CALLER",
									"source": 7
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "AND",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "OR",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SSTORE",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "AND",
									"source": 16
								},
								{
									"begin": 2566,
									"end": 2606,
									"name": "PUSH",
									"source": 0,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "DUP1",
									"source": -1
								},
								{
									"begin": 2566,
									"end": 2606,
									"name": "LOG3",
									"source": 0
								},
								{
									"begin": 4129,
									"end": 4133,
									"name": "ADDRESS",
									"source": 13
								},
								{
									"begin": 8603,
									"end": 8624,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "44"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 8731,
									"end": 8753,
									"name": "PUSH",
									"source": 2,
									"value": "2"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SLOAD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP4",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "GT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "46"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "POP",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP2",
									"source": 16
								},
								{
									"begin": 8952,
									"end": 8989,
									"name": "PUSH",
									"source": 2,
									"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP2",
									"source": 16
								},
								{
									"begin": 8731,
									"end": 8753,
									"name": "PUSH",
									"source": 2,
									"value": "2"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SSTORE",
									"source": 16
								},
								{
									"begin": 4129,
									"end": 4133,
									"name": "ADDRESS",
									"source": 13
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP4",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP6",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP4",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "KECCAK256",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP5",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SLOAD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SSTORE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP6",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP4",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP5",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 4129,
									"end": 4133,
									"name": "ADDRESS",
									"source": 13
								},
								{
									"begin": 8952,
									"end": 8989,
									"name": "SWAP4",
									"source": 2
								},
								{
									"begin": 8952,
									"end": 8989,
									"name": "LOG3",
									"source": 2
								},
								{
									"begin": 1046,
									"end": 1074,
									"name": "PUSH",
									"source": 16,
									"value": "A"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SSTORE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH #[$]",
									"source": 16,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP4",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP5",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [$]",
									"source": 16,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP6",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "CODECOPY",
									"source": 16
								},
								{
									"begin": 1929,
									"end": 2024,
									"name": "PUSH",
									"source": 13,
									"value": "80"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP5",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ASSIGNIMMUTABLE",
									"source": 16,
									"value": "2077"
								},
								{
									"begin": 3477,
									"end": 3507,
									"name": "PUSH",
									"source": 13,
									"value": "A0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP5",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ASSIGNIMMUTABLE",
									"source": 16,
									"value": "2079"
								},
								{
									"begin": 1929,
									"end": 2024,
									"name": "PUSH",
									"source": 13,
									"value": "C0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP5",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ASSIGNIMMUTABLE",
									"source": 16,
									"value": "2081"
								},
								{
									"begin": 3378,
									"end": 3414,
									"name": "PUSH",
									"source": 13,
									"value": "E0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP5",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ASSIGNIMMUTABLE",
									"source": 16,
									"value": "2083"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP4",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ASSIGNIMMUTABLE",
									"source": 16,
									"value": "2085"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ASSIGNIMMUTABLE",
									"source": 16,
									"value": "2088"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ASSIGNIMMUTABLE",
									"source": 16,
									"value": "2091"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "RETURN",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "46"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "11"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "4E487B71"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "E0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SHL",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "24"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "REVERT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "44"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "104"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "64"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP4",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "45524332303A206D696E7420746F20746865207A65726F206164647265737300"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP8",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "461BCD"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "E5"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SHL",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP7",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "C4"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP4",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "E4"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "REVERT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "42"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "41"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP6",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "4E487B71"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "E0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SHL",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "24"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "REVERT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "37"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP4",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "CODESIZE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "38"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "35"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP5",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP5",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "AND",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP10",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP5",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP12",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "KECCAK256",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP5",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "48"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP14",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP10",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP4",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP4",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "LT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "49"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "LT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "51"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "52"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SHL",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP5",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SSTORE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "39"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "51"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "F8"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP5",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "NOT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SHL",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "AND",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SHR",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "NOT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "AND",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SSTORE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "CODESIZE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "52"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "49"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP7",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP7",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP10",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SSTORE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP8",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP7",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP5",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP6",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP5",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP9",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP4",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "48"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "33"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP10",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP11",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "KECCAK256",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP9",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP8",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "5"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SHR",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP14",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP9",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "LT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "53"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "54"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "5"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SHR",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP4",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "55"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "LT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "56"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "34"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "56"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SSTORE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP4",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "55"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "53"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "54"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "31"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "22"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP11",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "4E487B71"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "E0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SHL",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "24"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "REVERT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "29"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "7F"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "AND",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "30"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "27"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "41"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP10",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "4E487B71"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "E0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SHL",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "24"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "REVERT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "24"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "CODESIZE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "25"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "22"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP13",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP9",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP7",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP6",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "AND",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP8",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP4",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "KECCAK256",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP4",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "58"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "LT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "59"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP5",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "GT",
									"source": -1
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "61"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "62"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SHL",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SSTORE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "26"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "61"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP4",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP8",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SHL",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "F8"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "AND",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SHR",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "NOT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "AND",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SSTORE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "CODESIZE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "62"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "59"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP4",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP6",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP7",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SSTORE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP9",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP8",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP6",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP5",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP4",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP5",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP4",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP16",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "58"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "20"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP6",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP10",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "KECCAK256",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP7",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "5"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SHR",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP4",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP4",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP7",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "LT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "63"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "64"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP7",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP7",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP6",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP5",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP4",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "5"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SHR",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "65"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "LT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "66"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP14",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "21"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "66"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SSTORE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP6",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP5",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP7",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "65"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "63"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "64"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "18"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "22"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP12",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "4E487B71"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "E0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SHL",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "24"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "REVERT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "16"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "7F"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "AND",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "17"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "8"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "REVERT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "6"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "4E487B71"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "E0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SHL",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "41"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "4"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "24"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "REVERT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "1"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "40"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "LT",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "GT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "OR",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "6"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "40"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 16
								},
								{
									"begin": 2895,
									"end": 3236,
									"name": "tag",
									"source": 9,
									"value": "2"
								},
								{
									"begin": 2895,
									"end": 3236,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 3040,
									"end": 3042,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 3040,
									"end": 3042,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 3018,
									"end": 3042,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 3018,
									"end": 3042,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 3018,
									"end": 3042,
									"name": "LT",
									"source": 9
								},
								{
									"begin": 3040,
									"end": 3042,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 3040,
									"end": 3042,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "70"
								},
								{
									"begin": 3040,
									"end": 3042,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 1835,
									"end": 1837,
									"name": "PUSH",
									"source": 9,
									"value": "1F"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 1821,
									"end": 1837,
									"name": "GT",
									"source": 9
								},
								{
									"begin": 1817,
									"end": 1889,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "72"
								},
								{
									"begin": 1817,
									"end": 1889,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP4",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "LT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "74"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 1930,
									"end": 1966,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1930,
									"end": 1966,
									"name": "OR",
									"source": 9
								},
								{
									"begin": 3058,
									"end": 3085,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 3058,
									"end": 3085,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "74"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "NOT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SUB",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "3"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SHL",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SHL",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "AND",
									"source": 16
								},
								{
									"begin": 1930,
									"end": 1966,
									"name": "OR",
									"source": 9
								},
								{
									"begin": 3058,
									"end": 3085,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 3058,
									"end": 3085,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 1817,
									"end": 1889,
									"name": "tag",
									"source": 9,
									"value": "72"
								},
								{
									"begin": 1817,
									"end": 1889,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "40"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 1860,
									"end": 1878,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 1860,
									"end": 1878,
									"name": "SWAP3",
									"source": 9
								},
								{
									"begin": 1860,
									"end": 1878,
									"name": "PUSH",
									"source": 9,
									"value": "305A27A9"
								},
								{
									"begin": 1860,
									"end": 1878,
									"name": "PUSH",
									"source": 9,
									"value": "E0"
								},
								{
									"begin": 1860,
									"end": 1878,
									"name": "SHL",
									"source": 9
								},
								{
									"begin": 1860,
									"end": 1878,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 1860,
									"end": 1878,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 1860,
									"end": 1878,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 1860,
									"end": 1878,
									"name": "PUSH",
									"source": 9,
									"value": "4"
								},
								{
									"begin": 1860,
									"end": 1878,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 1860,
									"end": 1878,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "24"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP5",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP4",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "76"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP6",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "LT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "77"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "44"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "POP",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP4",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP5",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 1835,
									"end": 1837,
									"name": "PUSH",
									"source": 9,
									"value": "1F"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "NOT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "AND",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 1860,
									"end": 1878,
									"name": "SUB",
									"source": 9
								},
								{
									"begin": 1860,
									"end": 1878,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 1860,
									"end": 1878,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1860,
									"end": 1878,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "77"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP5",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP7",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP7",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "44"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP4",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP4",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP6",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP4",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "76"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMP",
									"source": 16
								},
								{
									"begin": 3014,
									"end": 3230,
									"name": "tag",
									"source": 9,
									"value": "70"
								},
								{
									"begin": 3014,
									"end": 3230,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "GT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "6"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 3282,
									"end": 3295,
									"name": "PUSH",
									"source": 13,
									"value": "5"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP4",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SLOAD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "1"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP4",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP5",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SHR",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "AND",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ISZERO",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "81"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 3014,
									"end": 3230,
									"name": "tag",
									"source": 9,
									"value": "82"
								},
								{
									"begin": 3014,
									"end": 3230,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP4",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "LT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "EQ",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "83"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "1F"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "GT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "85"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 3014,
									"end": 3230,
									"name": "tag",
									"source": 9,
									"value": "86"
								},
								{
									"begin": 3014,
									"end": 3230,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "1F"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP5",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "GT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "1"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "EQ",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "87"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP4",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP4",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP3",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP5",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "89"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "90"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SHL",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "NOT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "3"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SHL",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SHR",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "NOT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "AND",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "OR",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SSTORE",
									"source": 16
								},
								{
									"begin": 1371,
									"end": 1437,
									"name": "PUSH",
									"source": 9,
									"value": "FF"
								},
								{
									"begin": 3176,
									"end": 3219,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 3176,
									"end": 3219,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "89"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP3",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "CODESIZE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "90"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "87"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP4",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "1F"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "NOT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "AND",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP8",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP5",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "KECCAK256",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP5",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "92"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP9",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP4",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP4",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "LT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "93"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "LT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "95"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "96"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SHL",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SSTORE",
									"source": 16
								},
								{
									"begin": 1371,
									"end": 1437,
									"name": "PUSH",
									"source": 9,
									"value": "FF"
								},
								{
									"begin": 3176,
									"end": 3219,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 3176,
									"end": 3219,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "95"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "NOT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "F8"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP5",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "3"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SHL",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "AND",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SHR",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "NOT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "AND",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SSTORE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "CODESIZE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "96"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "93"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP6",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP8",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP9",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SSTORE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP7",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP6",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP5",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP6",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP5",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP8",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP4",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "92"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "85"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP6",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP5",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "1F"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP5",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "KECCAK256",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP8",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SHR",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "1F"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP7",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP9",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SHR",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "97"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "LT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "98"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "86"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "98"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SSTORE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP6",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "97"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "83"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "4E487B71"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "E0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SHL",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "22"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "4"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "24"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "REVERT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "81"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "7F"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "AND",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "82"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMP",
									"source": 16
								},
								{
									"begin": 2895,
									"end": 3236,
									"name": "tag",
									"source": 9,
									"value": "3"
								},
								{
									"begin": 2895,
									"end": 3236,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 3040,
									"end": 3042,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 3040,
									"end": 3042,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 3018,
									"end": 3042,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 3018,
									"end": 3042,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 3018,
									"end": 3042,
									"name": "LT",
									"source": 9
								},
								{
									"begin": 3040,
									"end": 3042,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 3040,
									"end": 3042,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "100"
								},
								{
									"begin": 3040,
									"end": 3042,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 1835,
									"end": 1837,
									"name": "PUSH",
									"source": 9,
									"value": "1F"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 1821,
									"end": 1837,
									"name": "GT",
									"source": 9
								},
								{
									"begin": 1817,
									"end": 1889,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "102"
								},
								{
									"begin": 1817,
									"end": 1889,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP4",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "LT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "74"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 1930,
									"end": 1966,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1930,
									"end": 1966,
									"name": "OR",
									"source": 9
								},
								{
									"begin": 3058,
									"end": 3085,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 3058,
									"end": 3085,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 1817,
									"end": 1889,
									"name": "tag",
									"source": 9,
									"value": "102"
								},
								{
									"begin": 1817,
									"end": 1889,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "40"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 1860,
									"end": 1878,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 1860,
									"end": 1878,
									"name": "SWAP3",
									"source": 9
								},
								{
									"begin": 1860,
									"end": 1878,
									"name": "PUSH",
									"source": 9,
									"value": "305A27A9"
								},
								{
									"begin": 1860,
									"end": 1878,
									"name": "PUSH",
									"source": 9,
									"value": "E0"
								},
								{
									"begin": 1860,
									"end": 1878,
									"name": "SHL",
									"source": 9
								},
								{
									"begin": 1860,
									"end": 1878,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 1860,
									"end": 1878,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 1860,
									"end": 1878,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 1860,
									"end": 1878,
									"name": "PUSH",
									"source": 9,
									"value": "4"
								},
								{
									"begin": 1860,
									"end": 1878,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 1860,
									"end": 1878,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "24"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP5",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP4",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "106"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP6",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "LT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "107"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "44"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "POP",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP4",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP5",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 1835,
									"end": 1837,
									"name": "PUSH",
									"source": 9,
									"value": "1F"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "NOT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "AND",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 1860,
									"end": 1878,
									"name": "SUB",
									"source": 9
								},
								{
									"begin": 1860,
									"end": 1878,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 1860,
									"end": 1878,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1860,
									"end": 1878,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "107"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP5",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP7",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP7",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "44"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP4",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP4",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP6",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP4",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "106"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMP",
									"source": 16
								},
								{
									"begin": 3014,
									"end": 3230,
									"name": "tag",
									"source": 9,
									"value": "100"
								},
								{
									"begin": 3014,
									"end": 3230,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "GT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "6"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 3351,
									"end": 3367,
									"name": "PUSH",
									"source": 13,
									"value": "6"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SLOAD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "1"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP4",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP5",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SHR",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "AND",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ISZERO",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "111"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 3014,
									"end": 3230,
									"name": "tag",
									"source": 9,
									"value": "112"
								},
								{
									"begin": 3014,
									"end": 3230,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP4",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "LT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "EQ",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "83"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "1F"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "GT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "115"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 3014,
									"end": 3230,
									"name": "tag",
									"source": 9,
									"value": "116"
								},
								{
									"begin": 3014,
									"end": 3230,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "1F"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP5",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "GT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "1"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "EQ",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "117"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP4",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP4",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP3",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP5",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "119"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "120"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SHL",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "NOT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "3"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SHL",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SHR",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "NOT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "AND",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "OR",
									"source": 16
								},
								{
									"begin": 3351,
									"end": 3367,
									"name": "PUSH",
									"source": 13,
									"value": "6"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SSTORE",
									"source": 16
								},
								{
									"begin": 1371,
									"end": 1437,
									"name": "PUSH",
									"source": 9,
									"value": "FF"
								},
								{
									"begin": 3176,
									"end": 3219,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 3176,
									"end": 3219,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "119"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP3",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "CODESIZE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "120"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "117"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP4",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "1F"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "NOT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "AND",
									"source": 16
								},
								{
									"begin": 3351,
									"end": 3367,
									"name": "PUSH",
									"source": 13,
									"value": "6"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP5",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "KECCAK256",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP5",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "122"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP9",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP4",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP4",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "LT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "123"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "LT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "125"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "126"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SHL",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 3351,
									"end": 3367,
									"name": "PUSH",
									"source": 13,
									"value": "6"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SSTORE",
									"source": 16
								},
								{
									"begin": 1371,
									"end": 1437,
									"name": "PUSH",
									"source": 9,
									"value": "FF"
								},
								{
									"begin": 3176,
									"end": 3219,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 3176,
									"end": 3219,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "125"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "NOT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "F8"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP5",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "3"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SHL",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "AND",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SHR",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "NOT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "AND",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SSTORE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "CODESIZE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "126"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "123"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP6",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP8",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP9",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SSTORE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP7",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP6",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP5",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP6",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP5",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP8",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP4",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "122"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "115"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 3351,
									"end": 3367,
									"name": "PUSH",
									"source": 13,
									"value": "6"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP5",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "1F"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP5",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "KECCAK256",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "5"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SHR",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "1F"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP7",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "5"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SHR",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "127"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "LT",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "128"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "116"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "128"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SSTORE",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "DUP6",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "127"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMP",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "tag",
									"source": 16,
									"value": "111"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH",
									"source": 16,
									"value": "7F"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "AND",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "112"
								},
								{
									"begin": 255,
									"end": 3286,
									"name": "JUMP",
									"source": 16
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212206eb8ae5620ff3a88207d591b59936293ae3b006b52d6cc83bb3128252a89d3f764736f6c63430008120033",
									".code": [
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "16"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "16"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "E0"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SHR",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "6FDDE03"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "18"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "95EA7B3"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "18160DDD"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "22"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "23B872DD"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "313CE567"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "26"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "3644E515"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "28"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "39509351"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "30"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "3BA0B9A9"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "32"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "40C10F19"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "34"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "6C11BCD3"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "36"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "70A08231"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "38"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "715018A6"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "7ECEBE00"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "42"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "84B0196E"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "8DA5CB5B"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "46"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "95D89B41"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "48"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "A0EF91DF"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "50"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "A457C2D7"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "52"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "A9059CBB"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "54"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "D0FEBE4C"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "56"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "D505ACCF"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "58"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "DB068E0E"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "DD62ED3E"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "62"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "F2FDE38B"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "68"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "68"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "70"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "2"
										},
										{
											"begin": 255,
											"end": 3286,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "70"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "71"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1063,
											"end": 1125,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "tag",
											"source": 0,
											"value": "71"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 2162,
											"end": 2184,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2162,
											"end": 2184,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "72"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 2518,
											"end": 2524,
											"name": "PUSH",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "A0"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "OR",
											"source": 16
										},
										{
											"begin": 2518,
											"end": 2524,
											"name": "PUSH",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 2566,
											"end": 2606,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2566,
											"end": 2606,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2566,
											"end": 2606,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2566,
											"end": 2606,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "RETURN",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "72"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "84"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "461BCD"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "E5"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "26"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "646472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "68"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "62"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "76"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "76"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "78"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "2"
										},
										{
											"begin": 255,
											"end": 3286,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "78"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "79"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 255,
											"end": 3286,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "79"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "KECCAK256",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "KECCAK256",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "RETURN",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "76"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "76"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "76"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "84"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1063,
											"end": 1125,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "tag",
											"source": 0,
											"value": "84"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 2993,
											"end": 3015,
											"name": "PUSH",
											"source": 16,
											"value": "A"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "RETURN",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "58"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "76"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "E0"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "76"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "89"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "2"
										},
										{
											"begin": 255,
											"end": 3286,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "89"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "90"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 255,
											"end": 3286,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "90"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "84"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "FF"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "91"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 2139,
											"end": 2154,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2139,
											"end": 2154,
											"name": "TIMESTAMP",
											"source": 4
										},
										{
											"begin": 2139,
											"end": 2166,
											"name": "GT",
											"source": 4
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "93"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "A0"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP10",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 3200,
											"end": 3207,
											"name": "PUSH",
											"source": 4,
											"value": "7"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP10",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP10",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "KECCAK256",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP11",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 2242,
											"end": 2321,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 2242,
											"end": 2321,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 2242,
											"end": 2321,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 1125,
											"end": 1220,
											"name": "PUSH",
											"source": 4,
											"value": "6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 1125,
											"end": 1220,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": 1125,
											"end": 1220,
											"name": "DUP14",
											"source": 4
										},
										{
											"begin": 1125,
											"end": 1220,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 1125,
											"end": 1220,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP11",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 1125,
											"end": 1220,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 1125,
											"end": 1220,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 1125,
											"end": 1220,
											"name": "DUP11",
											"source": 4
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 1125,
											"end": 1220,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 1125,
											"end": 1220,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "A0"
										},
										{
											"begin": 1125,
											"end": 1220,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 1125,
											"end": 1220,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "C0"
										},
										{
											"begin": 1125,
											"end": 1220,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1125,
											"end": 1220,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "C0"
										},
										{
											"begin": 2242,
											"end": 2321,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2242,
											"end": 2321,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "E0"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "OR",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "95"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP12",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 2232,
											"end": 2322,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2232,
											"end": 2322,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 6791,
											"end": 6796,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "97"
										},
										{
											"begin": 6791,
											"end": 6796,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6744,
											"end": 6769,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "98"
										},
										{
											"begin": 6744,
											"end": 6769,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 4893,
											"end": 4913,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "99"
										},
										{
											"begin": 4893,
											"end": 4913,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "13"
										},
										{
											"begin": 4893,
											"end": 4913,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 4893,
											"end": 4913,
											"name": "tag",
											"source": 13,
											"value": "99"
										},
										{
											"begin": 4893,
											"end": 4913,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 8496,
											"end": 8727,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8496,
											"end": 8727,
											"name": "DUP13",
											"source": 12
										},
										{
											"begin": 8496,
											"end": 8727,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 8496,
											"end": 8727,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1901"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8496,
											"end": 8727,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 8496,
											"end": 8727,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8496,
											"end": 8727,
											"name": "PUSH",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 8496,
											"end": 8727,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 8496,
											"end": 8727,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8496,
											"end": 8727,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8496,
											"end": 8727,
											"name": "PUSH",
											"source": 12,
											"value": "22"
										},
										{
											"begin": 8496,
											"end": 8727,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8496,
											"end": 8727,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8496,
											"end": 8727,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "C4"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 8496,
											"end": 8727,
											"name": "PUSH",
											"source": 12,
											"value": "42"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "A4"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 8496,
											"end": 8727,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 8496,
											"end": 8727,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 6744,
											"end": 6769,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "12"
										},
										{
											"begin": 6744,
											"end": 6769,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 6744,
											"end": 6769,
											"name": "tag",
											"source": 12,
											"value": "98"
										},
										{
											"begin": 6744,
											"end": 6769,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6791,
											"end": 6796,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6791,
											"end": 6796,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6791,
											"end": 6796,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6791,
											"end": 6796,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "11"
										},
										{
											"begin": 6791,
											"end": 6796,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 6791,
											"end": 6796,
											"name": "tag",
											"source": 12,
											"value": "97"
										},
										{
											"begin": 6791,
											"end": 6796,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 2450,
											"end": 2465,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 1125,
											"end": 1220,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 1125,
											"end": 1220,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 2536,
											"end": 2541,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2536,
											"end": 2541,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "102"
										},
										{
											"begin": 2536,
											"end": 2541,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 2536,
											"end": 2541,
											"name": "SWAP5",
											"source": 4
										},
										{
											"begin": 2536,
											"end": 2541,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2536,
											"end": 2541,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "10"
										},
										{
											"begin": 2536,
											"end": 2541,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2536,
											"end": 2541,
											"name": "tag",
											"source": 4,
											"value": "102"
										},
										{
											"begin": 2536,
											"end": 2541,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "RETURN",
											"source": 16
										},
										{
											"begin": 1125,
											"end": 1220,
											"name": "tag",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 1125,
											"end": 1220,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "461BCD"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "E5"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 1125,
											"end": 1220,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 1125,
											"end": 1220,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1125,
											"end": 1220,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1125,
											"end": 1220,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1125,
											"end": 1220,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1125,
											"end": 1220,
											"name": "PUSH",
											"source": 4,
											"value": "1E"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 1125,
											"end": 1220,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1125,
											"end": 1220,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 1125,
											"end": 1220,
											"name": "PUSH",
											"source": 4,
											"value": "45524332305065726D69743A20696E76616C6964207369676E61747572650000"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 1125,
											"end": 1220,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1125,
											"end": 1220,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "95"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP12",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "41"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP12",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "93"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "1D"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "45524332305065726D69743A206578706972656420646561646C696E65000000"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "91"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "56"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "68"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 1282,
											"end": 1291,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 1282,
											"end": 1295,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "105"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 1441,
											"end": 1453,
											"name": "PUSH",
											"source": 16,
											"value": "A"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 1282,
											"end": 1291,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 1282,
											"end": 1291,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MUL",
											"source": 16
										},
										{
											"begin": 1282,
											"end": 1291,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 1282,
											"end": 1291,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DIV",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "107"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 1457,
											"end": 1461,
											"name": "PUSH",
											"source": 16,
											"value": "DE0B6B3A7640000"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DIV",
											"source": 16
										},
										{
											"begin": 1498,
											"end": 1502,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 1498,
											"end": 1502,
											"name": "ADDRESS",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "KECCAK256",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 1480,
											"end": 1519,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "109"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 1628,
											"end": 1638,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 1699,
											"end": 1750,
											"name": "PUSH",
											"source": 16,
											"value": "8FAFEBCAF9D154343DAD25669BFA277F4FBACD7AC6B0C4FED522580E040A0F33"
										},
										{
											"begin": 1628,
											"end": 1638,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 1640,
											"end": 1651,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "111"
										},
										{
											"begin": 1628,
											"end": 1638,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 1628,
											"end": 1638,
											"name": "CALLER",
											"source": 16
										},
										{
											"begin": 1498,
											"end": 1502,
											"name": "ADDRESS",
											"source": 16
										},
										{
											"begin": 1640,
											"end": 1651,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "9"
										},
										{
											"begin": 1640,
											"end": 1651,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 1640,
											"end": 1651,
											"name": "tag",
											"source": 16,
											"value": "111"
										},
										{
											"begin": 1640,
											"end": 1651,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 1282,
											"end": 1291,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 1282,
											"end": 1291,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 1628,
											"end": 1638,
											"name": "CALLER",
											"source": 16
										},
										{
											"begin": 1699,
											"end": 1750,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 1699,
											"end": 1750,
											"name": "LOG2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "RETURN",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "109"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "84"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "461BCD"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "E5"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "26"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "496E73756666696369656E7420746F6B656E2062616C616E636520696E20636F"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1B9D1C9858DD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "107"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "11"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "105"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "461BCD"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "E5"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "19"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "4D7573742073656E642045544820746F2065786368616E676500000000000000"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "54"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "76"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "76"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 3894,
											"end": 3900,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "116"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "117"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "2"
										},
										{
											"begin": 255,
											"end": 3286,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "117"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 734,
											"end": 744,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 734,
											"end": 744,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 3894,
											"end": 3900,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 3894,
											"end": 3900,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3894,
											"end": 3900,
											"name": "tag",
											"source": 2,
											"value": "116"
										},
										{
											"begin": 3894,
											"end": 3900,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "RETURN",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "52"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "120"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "120"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "122"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "2"
										},
										{
											"begin": 255,
											"end": 3286,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "122"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 734,
											"end": 744,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 734,
											"end": 744,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "KECCAK256",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "A0"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "KECCAK256",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 6792,
											"end": 6827,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6792,
											"end": 6827,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6792,
											"end": 6827,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6792,
											"end": 6827,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "123"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 6928,
											"end": 6962,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "116"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 734,
											"end": 744,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 6928,
											"end": 6962,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "10"
										},
										{
											"begin": 6928,
											"end": 6962,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "123"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "84"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "461BCD"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "E5"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "25"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "207A65726F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "120"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "50"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "68"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "68"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "130"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1063,
											"end": 1125,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "tag",
											"source": 0,
											"value": "130"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3156,
											"end": 3177,
											"name": "SELFBALANCE",
											"source": 16
										},
										{
											"begin": 3196,
											"end": 3207,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 3196,
											"end": 3207,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 3196,
											"end": 3207,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "131"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "PUSH",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 3241,
											"end": 3275,
											"name": "CALL",
											"source": 16
										},
										{
											"begin": 3241,
											"end": 3275,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 3241,
											"end": 3275,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "133"
										},
										{
											"begin": 3241,
											"end": 3275,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "RETURN",
											"source": 16
										},
										{
											"begin": 3241,
											"end": 3275,
											"name": "tag",
											"source": 16,
											"value": "133"
										},
										{
											"begin": 3241,
											"end": 3275,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "RETURNDATASIZE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "RETURNDATACOPY",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "RETURNDATASIZE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "131"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "461BCD"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "E5"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "12"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E6F2045544820746F207769746864726177"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "70"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "48"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "68"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "68"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "139"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "5"
										},
										{
											"begin": 255,
											"end": 3286,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "139"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "140"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "142"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "143"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "144"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "145"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP12",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "7"
										},
										{
											"begin": 255,
											"end": 3286,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "145"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 255,
											"end": 3286,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "144"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "RETURN",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "142"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19B"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "146"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "147"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "145"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "144"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP6",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CODESIZE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "143"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "147"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP6",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "146"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "140"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "144"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP8",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "145"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "FF"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "5"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CODESIZE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "143"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "46"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "76"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "76"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "PUSH",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "RETURN",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "68"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "68"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 5427,
											"end": 5468,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "157"
										},
										{
											"begin": 5427,
											"end": 5432,
											"name": "PUSHIMMUTABLE",
											"source": 13,
											"value": "2088"
										},
										{
											"begin": 5427,
											"end": 5468,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "14"
										},
										{
											"begin": 5427,
											"end": 5468,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 5427,
											"end": 5468,
											"name": "tag",
											"source": 13,
											"value": "157"
										},
										{
											"begin": 5427,
											"end": 5468,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5482,
											"end": 5490,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 5482,
											"end": 5529,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "158"
										},
										{
											"begin": 5482,
											"end": 5490,
											"name": "PUSHIMMUTABLE",
											"source": 13,
											"value": "2091"
										},
										{
											"begin": 5482,
											"end": 5529,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "15"
										},
										{
											"begin": 5482,
											"end": 5529,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 5482,
											"end": 5529,
											"name": "tag",
											"source": 13,
											"value": "158"
										},
										{
											"begin": 5482,
											"end": 5529,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP6",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP9",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "OR",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "159"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "161"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP9",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP7",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "162"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP10",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP12",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP10",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP7",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP10",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP11",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP10",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "F"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "F8"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP12",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "E0"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP13",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "E0"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP12",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 255,
											"end": 3286,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "162"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP10",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP11",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 255,
											"end": 3286,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "161"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 5543,
											"end": 5556,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 5543,
											"end": 5556,
											"name": "CHAINID",
											"source": 13
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP9",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 5578,
											"end": 5582,
											"name": "ADDRESS",
											"source": 13
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP9",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "A0"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP9",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "C0"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP9",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "163"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "164"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "RETURN",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "164"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP6",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "163"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "159"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "41"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "42"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "76"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "76"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "170"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "2"
										},
										{
											"begin": 255,
											"end": 3286,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "170"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 2698,
											"end": 2705,
											"name": "PUSH",
											"source": 4,
											"value": "7"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "KECCAK256",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "RETURN",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "120"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "120"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "175"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1063,
											"end": 1125,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "tag",
											"source": 0,
											"value": "175"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2518,
											"end": 2524,
											"name": "PUSH",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 2566,
											"end": 2606,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 2566,
											"end": 2606,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "RETURN",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "38"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "76"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "76"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "180"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "2"
										},
										{
											"begin": 255,
											"end": 3286,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "180"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "KECCAK256",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "RETURN",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "36"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "68"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "183"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 1948,
											"end": 1963,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 1948,
											"end": 1963,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 1948,
											"end": 1963,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "185"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 2034,
											"end": 2044,
											"name": "CALLER",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "KECCAK256",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 2024,
											"end": 2060,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "187"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 2206,
											"end": 2210,
											"name": "PUSH",
											"source": 16,
											"value": "DE0B6B3A7640000"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MUL",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "DE0B6B3A763FFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DIV",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "189"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 2214,
											"end": 2226,
											"name": "PUSH",
											"source": 16,
											"value": "A"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "191"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DIV",
											"source": 16
										},
										{
											"begin": 2245,
											"end": 2266,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 2245,
											"end": 2266,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2245,
											"end": 2266,
											"name": "SELFBALANCE",
											"source": 16
										},
										{
											"begin": 2245,
											"end": 2279,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "193"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 2253,
											"end": 2257,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 2398,
											"end": 2409,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "195"
										},
										{
											"begin": 2253,
											"end": 2257,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 2253,
											"end": 2257,
											"name": "ADDRESS",
											"source": 16
										},
										{
											"begin": 2034,
											"end": 2044,
											"name": "CALLER",
											"source": 16
										},
										{
											"begin": 2398,
											"end": 2409,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "9"
										},
										{
											"begin": 2398,
											"end": 2409,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 2398,
											"end": 2409,
											"name": "tag",
											"source": 16,
											"value": "195"
										},
										{
											"begin": 2398,
											"end": 2409,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2446,
											"end": 2485,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 2446,
											"end": 2485,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 2446,
											"end": 2485,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 2446,
											"end": 2485,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 2446,
											"end": 2485,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 2446,
											"end": 2485,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "196"
										},
										{
											"begin": 2446,
											"end": 2485,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "197"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2034,
											"end": 2044,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 2034,
											"end": 2044,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 2034,
											"end": 2044,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 2034,
											"end": 2044,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 2034,
											"end": 2044,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2034,
											"end": 2044,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 2034,
											"end": 2044,
											"name": "CALLER",
											"source": 16
										},
										{
											"begin": 2446,
											"end": 2485,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 2446,
											"end": 2485,
											"name": "CALL",
											"source": 16
										},
										{
											"begin": 2446,
											"end": 2485,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 2446,
											"end": 2485,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "198"
										},
										{
											"begin": 2446,
											"end": 2485,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 2534,
											"end": 2580,
											"name": "PUSH",
											"source": 16,
											"value": "2DCF9433D75DB0D8B1C172641F85E319FFE4AD22E108A95D1847CEB906E5195D"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 2034,
											"end": 2044,
											"name": "CALLER",
											"source": 16
										},
										{
											"begin": 2534,
											"end": 2580,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 2534,
											"end": 2580,
											"name": "LOG2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "RETURN",
											"source": 16
										},
										{
											"begin": 2446,
											"end": 2485,
											"name": "tag",
											"source": 16,
											"value": "198"
										},
										{
											"begin": 2446,
											"end": 2485,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "RETURNDATASIZE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "RETURNDATACOPY",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "RETURNDATASIZE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 2446,
											"end": 2485,
											"name": "tag",
											"source": 16,
											"value": "196"
										},
										{
											"begin": 2446,
											"end": 2485,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2446,
											"end": 2485,
											"name": "PUSH",
											"source": 16,
											"value": "8FC"
										},
										{
											"begin": 2446,
											"end": 2485,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2446,
											"end": 2485,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "197"
										},
										{
											"begin": 2446,
											"end": 2485,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "193"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "496E73756666696369656E74204554482062616C616E636520696E20636F6E74"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1C9858DD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "84"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "191"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "12"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "189"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "11"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "187"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "461BCD"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "E5"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "1A"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "496E73756666696369656E7420746F6B656E2062616C616E6365000000000000"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "185"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "84"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "461BCD"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "E5"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "25"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "4D7573742073656C6C206120706F73697469766520616D6F756E74206F662074"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6F6B656E73"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "183"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "34"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "68"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "68"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "204"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "2"
										},
										{
											"begin": 255,
											"end": 3286,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "204"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "205"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1063,
											"end": 1125,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "tag",
											"source": 0,
											"value": "205"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 8603,
											"end": 8624,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 8603,
											"end": 8624,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "206"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 8952,
											"end": 8989,
											"name": "PUSH",
											"source": 2,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 8731,
											"end": 8753,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "208"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP6",
											"source": 16
										},
										{
											"begin": 8731,
											"end": 8753,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 8731,
											"end": 8753,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 8731,
											"end": 8753,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 8731,
											"end": 8753,
											"name": "tag",
											"source": 2,
											"value": "208"
										},
										{
											"begin": 8731,
											"end": 8753,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8731,
											"end": 8753,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "KECCAK256",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 8952,
											"end": 8989,
											"name": "LOG3",
											"source": 2
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "RETURN",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "206"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "461BCD"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "E5"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "1F"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "45524332303A206D696E7420746F20746865207A65726F206164647265737300"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "32"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "76"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "76"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 370,
											"end": 397,
											"name": "PUSH",
											"source": 16,
											"value": "A"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "RETURN",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "30"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "76"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "76"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 6021,
											"end": 6059,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "116"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 6021,
											"end": 6059,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "218"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "219"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "2"
										},
										{
											"begin": 255,
											"end": 3286,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "219"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 734,
											"end": 744,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "KECCAK256",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "KECCAK256",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 6021,
											"end": 6059,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 6021,
											"end": 6059,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6021,
											"end": 6059,
											"name": "tag",
											"source": 2,
											"value": "218"
										},
										{
											"begin": 6021,
											"end": 6059,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 734,
											"end": 744,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 734,
											"end": 744,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 6021,
											"end": 6059,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "10"
										},
										{
											"begin": 6021,
											"end": 6059,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "28"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "76"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "76"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 2922,
											"end": 2942,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2922,
											"end": 2942,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "224"
										},
										{
											"begin": 2922,
											"end": 2942,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "13"
										},
										{
											"begin": 2922,
											"end": 2942,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2922,
											"end": 2942,
											"name": "tag",
											"source": 4,
											"value": "224"
										},
										{
											"begin": 2922,
											"end": 2942,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "RETURN",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "26"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "76"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "76"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 3186,
											"end": 3188,
											"name": "PUSH",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "RETURN",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "76"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "76"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "233"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "2"
										},
										{
											"begin": 255,
											"end": 3286,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "233"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "234"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 255,
											"end": 3286,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "234"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "A0"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "KECCAK256",
											"source": 16
										},
										{
											"begin": 734,
											"end": 744,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "KECCAK256",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 11264,
											"end": 11281,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11264,
											"end": 11281,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11264,
											"end": 11281,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 11244,
											"end": 11281,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11244,
											"end": 11281,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 11240,
											"end": 11483,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "235"
										},
										{
											"begin": 11240,
											"end": 11483,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "236"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 5424,
											"end": 5430,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 5424,
											"end": 5430,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "116"
										},
										{
											"begin": 5424,
											"end": 5430,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 5424,
											"end": 5430,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 5424,
											"end": 5430,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 5424,
											"end": 5430,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 5424,
											"end": 5430,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11240,
											"end": 11483,
											"name": "tag",
											"source": 2,
											"value": "235"
										},
										{
											"begin": 11240,
											"end": 11483,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11305,
											"end": 11331,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11305,
											"end": 11331,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11305,
											"end": 11331,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "238"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 11432,
											"end": 11457,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "240"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP7",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP6",
											"source": 16
										},
										{
											"begin": 5424,
											"end": 5430,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "116"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP6",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 734,
											"end": 744,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 11432,
											"end": 11457,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 11432,
											"end": 11457,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "10"
										},
										{
											"begin": 11432,
											"end": 11457,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11432,
											"end": 11457,
											"name": "tag",
											"source": 2,
											"value": "240"
										},
										{
											"begin": 11432,
											"end": 11457,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11240,
											"end": 11483,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 11240,
											"end": 11483,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 11240,
											"end": 11483,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 11240,
											"end": 11483,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11240,
											"end": 11483,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 11240,
											"end": 11483,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11240,
											"end": 11483,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "236"
										},
										{
											"begin": 11240,
											"end": 11483,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "238"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "461BCD"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "E5"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "1D"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "22"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "76"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "76"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 3342,
											"end": 3354,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "RETURN",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "76"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "76"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 4606,
											"end": 4612,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "116"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "250"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "2"
										},
										{
											"begin": 255,
											"end": 3286,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "250"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 734,
											"end": 744,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 734,
											"end": 744,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 4606,
											"end": 4612,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "10"
										},
										{
											"begin": 4606,
											"end": 4612,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "18"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "68"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "68"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "255"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "5"
										},
										{
											"begin": 255,
											"end": 3286,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "255"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "256"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "258"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "259"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "145"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "144"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "7"
										},
										{
											"begin": 255,
											"end": 3286,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "258"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "C2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "262"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "263"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "145"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "144"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP6",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "259"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "263"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP6",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "262"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "256"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "144"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP8",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "145"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "FF"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "5"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "259"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "265"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "266"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP6",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "1F"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "266"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "265"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "2"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "268"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "268"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "268"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 1359,
											"end": 1489,
											"name": "tag",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1359,
											"end": 1489,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "PUSH",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 734,
											"end": 744,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 1422,
											"end": 1445,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "272"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 1359,
											"end": 1489,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "272"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "461BCD"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "E5"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "5"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SHR",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "274"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "275"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "276"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "276"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "4E487B71"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "E0"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "22"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "274"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "7F"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "275"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "6"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "OR",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "278"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "278"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "4E487B71"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "E0"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "41"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "7"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "1F"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "OR",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "278"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "8"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "282"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "282"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "4E487B71"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "E0"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "11"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 7456,
											"end": 8244,
											"name": "tag",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 7456,
											"end": 8244,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 7552,
											"end": 7570,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7552,
											"end": 7570,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "284"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 7630,
											"end": 7646,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7630,
											"end": 7646,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7630,
											"end": 7646,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "286"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 7568,
											"end": 7569,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "KECCAK256",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 7801,
											"end": 7822,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7801,
											"end": 7822,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7801,
											"end": 7822,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7801,
											"end": 7822,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "288"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 8163,
											"end": 8189,
											"name": "PUSH",
											"source": 2,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP6",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP7",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "KECCAK256",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "KECCAK256",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 8163,
											"end": 8189,
											"name": "LOG3",
											"source": 2
										},
										{
											"begin": 7456,
											"end": 8244,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "288"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "26"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "45524332303A207472616E7366657220616D6F756E7420657863656564732062"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "616C616E6365"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "84"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "286"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "23"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "45524332303A207472616E7366657220746F20746865207A65726F2061646472"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "84"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "284"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "25"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "45524332303A207472616E736665722066726F6D20746865207A65726F206164"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "84"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 10457,
											"end": 10797,
											"name": "tag",
											"source": 2,
											"value": "10"
										},
										{
											"begin": 10457,
											"end": 10797,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 10558,
											"end": 10577,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 10558,
											"end": 10577,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "290"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 10636,
											"end": 10657,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 10636,
											"end": 10657,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 10636,
											"end": 10657,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "292"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 10758,
											"end": 10790,
											"name": "PUSH",
											"source": 2,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 10575,
											"end": 10576,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 10575,
											"end": 10576,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "KECCAK256",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 10575,
											"end": 10576,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 10575,
											"end": 10576,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "KECCAK256",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 10758,
											"end": 10790,
											"name": "LOG3",
											"source": 2
										},
										{
											"begin": 10457,
											"end": 10797,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "292"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "22"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "45524332303A20617070726F766520746F20746865207A65726F206164647265"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "84"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "290"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "45524332303A20617070726F76652066726F6D20746865207A65726F20616464"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "72657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "84"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 570,
											"end": 1081,
											"name": "tag",
											"source": 12,
											"value": "11"
										},
										{
											"begin": 570,
											"end": 1081,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "5"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "294"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 638,
											"end": 667,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 638,
											"end": 667,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "296"
										},
										{
											"begin": 638,
											"end": 667,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 683,
											"end": 690,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 683,
											"end": 690,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 634,
											"end": 1075,
											"name": "tag",
											"source": 12,
											"value": "296"
										},
										{
											"begin": 634,
											"end": 1075,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 734,
											"end": 772,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 734,
											"end": 772,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "298"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 788,
											"end": 822,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 788,
											"end": 822,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 788,
											"end": 822,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 788,
											"end": 822,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 788,
											"end": 822,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "18"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "45434453413A20696E76616C6964207369676E61747572650000000000000000"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 788,
											"end": 822,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 730,
											"end": 1075,
											"name": "tag",
											"source": 12,
											"value": "298"
										},
										{
											"begin": 730,
											"end": 1075,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 852,
											"end": 887,
											"name": "PUSH",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 843,
											"end": 887,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 843,
											"end": 887,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 852,
											"end": 887,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "300"
										},
										{
											"begin": 852,
											"end": 887,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 903,
											"end": 944,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 903,
											"end": 944,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 903,
											"end": 944,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 903,
											"end": 944,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 903,
											"end": 944,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "1F"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "45434453413A20696E76616C6964207369676E6174757265206C656E67746800"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 903,
											"end": 944,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 839,
											"end": 1075,
											"name": "tag",
											"source": 12,
											"value": "300"
										},
										{
											"begin": 839,
											"end": 1075,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 974,
											"end": 1004,
											"name": "PUSH",
											"source": 12,
											"value": "3"
										},
										{
											"begin": 965,
											"end": 1004,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 961,
											"end": 1075,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "302"
										},
										{
											"begin": 961,
											"end": 1075,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 570,
											"end": 1081,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 961,
											"end": 1075,
											"name": "tag",
											"source": 12,
											"value": "302"
										},
										{
											"begin": 961,
											"end": 1075,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1020,
											"end": 1064,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1020,
											"end": 1064,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 1020,
											"end": 1064,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 1020,
											"end": 1064,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 1020,
											"end": 1064,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "22"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "45434453413A20696E76616C6964207369676E6174757265202773272076616C"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7565"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "84"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 1020,
											"end": 1064,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "294"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "4E487B71"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "E0"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 647,
											"end": 667,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "21"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 647,
											"end": 667,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 5009,
											"end": 6465,
											"name": "tag",
											"source": 12,
											"value": "12"
										},
										{
											"begin": 5009,
											"end": 6465,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5009,
											"end": 6465,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 5009,
											"end": 6465,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 5009,
											"end": 6465,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6021,
											"end": 6087,
											"name": "PUSH",
											"source": 12,
											"value": "7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"
										},
										{
											"begin": 6008,
											"end": 6087,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 6008,
											"end": 6087,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 6004,
											"end": 6165,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "304"
										},
										{
											"begin": 6004,
											"end": 6165,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "FF"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "GAS",
											"source": 12
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "STATICCALL",
											"source": 12
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "306"
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 6314,
											"end": 6334,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 6310,
											"end": 6411,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "308"
										},
										{
											"begin": 6310,
											"end": 6411,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 6421,
											"end": 6458,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 5009,
											"end": 6465,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 5009,
											"end": 6465,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 6310,
											"end": 6411,
											"name": "tag",
											"source": 12,
											"value": "308"
										},
										{
											"begin": 6310,
											"end": 6411,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6350,
											"end": 6400,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 6350,
											"end": 6400,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6350,
											"end": 6400,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "tag",
											"source": 12,
											"value": "306"
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "RETURNDATASIZE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "RETURNDATACOPY",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "RETURNDATASIZE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 6004,
											"end": 6165,
											"name": "tag",
											"source": 12,
											"value": "304"
										},
										{
											"begin": 6004,
											"end": 6165,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6103,
											"end": 6154,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6103,
											"end": 6154,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6103,
											"end": 6154,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6103,
											"end": 6154,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6119,
											"end": 6120,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6103,
											"end": 6154,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6123,
											"end": 6153,
											"name": "PUSH",
											"source": 12,
											"value": "3"
										},
										{
											"begin": 6103,
											"end": 6154,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6103,
											"end": 6154,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 3695,
											"end": 3957,
											"name": "tag",
											"source": 13,
											"value": "13"
										},
										{
											"begin": 3695,
											"end": 3957,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3779,
											"end": 3783,
											"name": "ADDRESS",
											"source": 13
										},
										{
											"begin": 3788,
											"end": 3799,
											"name": "PUSHIMMUTABLE",
											"source": 13,
											"value": "2081"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 3771,
											"end": 3799,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 3771,
											"end": 3799,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3771,
											"end": 3834,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "310"
										},
										{
											"begin": 3771,
											"end": 3834,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 3695,
											"end": 3957,
											"name": "tag",
											"source": 13,
											"value": "311"
										},
										{
											"begin": 3695,
											"end": 3957,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3767,
											"end": 3951,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 3767,
											"end": 3951,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "312"
										},
										{
											"begin": 3767,
											"end": 3951,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 3857,
											"end": 3879,
											"name": "PUSHIMMUTABLE",
											"source": 13,
											"value": "2077"
										},
										{
											"begin": 3850,
											"end": 3879,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3850,
											"end": 3879,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3767,
											"end": 3951,
											"name": "tag",
											"source": 13,
											"value": "312"
										},
										{
											"begin": 3767,
											"end": 3951,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 4054,
											"end": 4135,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 4054,
											"end": 4135,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4054,
											"end": 4135,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 1929,
											"end": 2024,
											"name": "PUSH",
											"source": 13,
											"value": "8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 4077,
											"end": 4088,
											"name": "PUSHIMMUTABLE",
											"source": 13,
											"value": "2083"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 1929,
											"end": 2024,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 1929,
											"end": 2024,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 4090,
											"end": 4104,
											"name": "PUSHIMMUTABLE",
											"source": 13,
											"value": "2085"
										},
										{
											"begin": 1929,
											"end": 2024,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 1929,
											"end": 2024,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 1929,
											"end": 2024,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 4106,
											"end": 4119,
											"name": "CHAINID",
											"source": 13
										},
										{
											"begin": 1929,
											"end": 2024,
											"name": "PUSH",
											"source": 13,
											"value": "80"
										},
										{
											"begin": 1929,
											"end": 2024,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 1929,
											"end": 2024,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 3779,
											"end": 3783,
											"name": "ADDRESS",
											"source": 13
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "A0"
										},
										{
											"begin": 1929,
											"end": 2024,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 1929,
											"end": 2024,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "A0"
										},
										{
											"begin": 4054,
											"end": 4135,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4054,
											"end": 4135,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 1929,
											"end": 2024,
											"name": "PUSH",
											"source": 13,
											"value": "C0"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "OR",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "278"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 4044,
											"end": 4136,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 4044,
											"end": 4136,
											"name": "KECCAK256",
											"source": 13
										},
										{
											"begin": 3910,
											"end": 3940,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3910,
											"end": 3940,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3771,
											"end": 3834,
											"name": "tag",
											"source": 13,
											"value": "310"
										},
										{
											"begin": 3771,
											"end": 3834,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3820,
											"end": 3834,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3820,
											"end": 3834,
											"name": "PUSHIMMUTABLE",
											"source": 13,
											"value": "2079"
										},
										{
											"begin": 3803,
											"end": 3816,
											"name": "CHAINID",
											"source": 13
										},
										{
											"begin": 3803,
											"end": 3834,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 3771,
											"end": 3834,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "311"
										},
										{
											"begin": 3771,
											"end": 3834,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3367,
											"end": 3635,
											"name": "tag",
											"source": 9,
											"value": "14"
										},
										{
											"begin": 3367,
											"end": 3635,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1371,
											"end": 1437,
											"name": "PUSH",
											"source": 9,
											"value": "FF"
										},
										{
											"begin": 3490,
											"end": 3537,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3490,
											"end": 3537,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1371,
											"end": 1437,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "316"
										},
										{
											"begin": 1371,
											"end": 1437,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1371,
											"end": 1437,
											"name": "PUSH",
											"source": 9,
											"value": "FF"
										},
										{
											"begin": 2633,
											"end": 2673,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2633,
											"end": 2673,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2687,
											"end": 2698,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2696,
											"end": 2698,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 2687,
											"end": 2698,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2687,
											"end": 2698,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 2683,
											"end": 2752,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "318"
										},
										{
											"begin": 2683,
											"end": 2752,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "320"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "6"
										},
										{
											"begin": 255,
											"end": 3286,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "320"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2348,
											"end": 2438,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2348,
											"end": 2438,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2292,
											"end": 2294,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2348,
											"end": 2438,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3553,
											"end": 3575,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3553,
											"end": 3575,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2683,
											"end": 2752,
											"name": "tag",
											"source": 9,
											"value": "318"
										},
										{
											"begin": 2683,
											"end": 2752,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2CD44AC3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2721,
											"end": 2741,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2721,
											"end": 2741,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2721,
											"end": 2741,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 2721,
											"end": 2741,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2721,
											"end": 2741,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 3486,
											"end": 3629,
											"name": "tag",
											"source": 9,
											"value": "316"
										},
										{
											"begin": 3486,
											"end": 3629,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 5454,
											"end": 5467,
											"name": "PUSH",
											"source": 13,
											"value": "5"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "321"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "5"
										},
										{
											"begin": 255,
											"end": 3286,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "321"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "322"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "324"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "325"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1371,
											"end": 1437,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1371,
											"end": 1437,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "326"
										},
										{
											"begin": 1371,
											"end": 1437,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 1371,
											"end": 1437,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1371,
											"end": 1437,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 1371,
											"end": 1437,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1371,
											"end": 1437,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 1371,
											"end": 1437,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1371,
											"end": 1437,
											"name": "tag",
											"source": 9,
											"value": "326"
										},
										{
											"begin": 1371,
											"end": 1437,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3606,
											"end": 3618,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3606,
											"end": 3618,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "324"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 5454,
											"end": 5467,
											"name": "PUSH",
											"source": 13,
											"value": "5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "36B6384B5ECA791C62761152D0C79BB0604C104A5FB6F4EB0703F3154BB3DB0"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "327"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "328"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1371,
											"end": 1437,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "326"
										},
										{
											"begin": 1371,
											"end": 1437,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CODESIZE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "325"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "328"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP10",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "327"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "322"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 1371,
											"end": 1437,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "326"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "FF"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 5454,
											"end": 5467,
											"name": "PUSH",
											"source": 13,
											"value": "5"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CODESIZE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "325"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 3367,
											"end": 3635,
											"name": "tag",
											"source": 9,
											"value": "15"
										},
										{
											"begin": 3367,
											"end": 3635,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1371,
											"end": 1437,
											"name": "PUSH",
											"source": 9,
											"value": "FF"
										},
										{
											"begin": 3490,
											"end": 3537,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3490,
											"end": 3537,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1371,
											"end": 1437,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "330"
										},
										{
											"begin": 1371,
											"end": 1437,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1371,
											"end": 1437,
											"name": "PUSH",
											"source": 9,
											"value": "FF"
										},
										{
											"begin": 2633,
											"end": 2673,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2633,
											"end": 2673,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2687,
											"end": 2698,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2696,
											"end": 2698,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 2687,
											"end": 2698,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2687,
											"end": 2698,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 2683,
											"end": 2752,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "318"
										},
										{
											"begin": 2683,
											"end": 2752,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "320"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "6"
										},
										{
											"begin": 255,
											"end": 3286,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 3486,
											"end": 3629,
											"name": "tag",
											"source": 9,
											"value": "330"
										},
										{
											"begin": 3486,
											"end": 3629,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 5512,
											"end": 5528,
											"name": "PUSH",
											"source": 13,
											"value": "6"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "335"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "5"
										},
										{
											"begin": 255,
											"end": 3286,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "335"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "322"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "338"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 1371,
											"end": 1437,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1371,
											"end": 1437,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "326"
										},
										{
											"begin": 1371,
											"end": 1437,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 1371,
											"end": 1437,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1371,
											"end": 1437,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 1371,
											"end": 1437,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1371,
											"end": 1437,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 1371,
											"end": 1437,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "338"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 5512,
											"end": 5528,
											"name": "PUSH",
											"source": 13,
											"value": "6"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "F652222313E28459528D920B65115C16C04F3EFC82AAEDC97BE59F3F377C0D3F"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "341"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "342"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1371,
											"end": 1437,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "326"
										},
										{
											"begin": 1371,
											"end": 1437,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "CODESIZE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "325"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "tag",
											"source": 16,
											"value": "342"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP10",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "341"
										},
										{
											"begin": 255,
											"end": 3286,
											"name": "JUMP",
											"source": 16
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC5267.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Counters.sol",
								"@openzeppelin/contracts/utils/ShortStrings.sol",
								"@openzeppelin/contracts/utils/StorageSlot.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/cryptography/EIP712.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/TurtleToken.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"buyTokens()": "d0febe4c",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"eip712Domain()": "84b0196e",
							"exchangeRate()": "3ba0b9a9",
							"increaseAllowance(address,uint256)": "39509351",
							"mint(address,uint256)": "40c10f19",
							"name()": "06fdde03",
							"nonces(address)": "7ecebe00",
							"owner()": "8da5cb5b",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf",
							"renounceOwnership()": "715018a6",
							"sellTokens(uint256)": "6c11bcd3",
							"setExchangeRate(uint256)": "db068e0e",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd",
							"transferOwnership(address)": "f2fde38b",
							"withdrawEth()": "a0ef91df"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_exchangeRate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"TokensSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"sellTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"setExchangeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"eip712Domain()\":{\"details\":\"See {EIP-5267}. _Available since v4.9._\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TurtleToken.sol\":\"TurtleToken\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fc980984badf3984b6303b377711220e067722bbd6a135b24669ff5069ef9f32\",\"dweb:/ipfs/QmPHXMSXj99XjSVM21YsY6aNtLLjLVXDbyN76J5HQYvvrz\"]},\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"keccak256\":\"0xac6c2efc64baccbde4904ae18ed45139c9aa8cff96d6888344d1e4d2eb8b659f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e416a280c610b6b7a5f158e4a41aacfaec01ef14d5d1de13b46be9e090265fc\",\"dweb:/ipfs/QmYZP2KrdyccBbhLZT42auhvBTMkwiwUS3V6HWb42rbwbG\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cac938788bc4be12101e59d45588b4e059579f4e61062e1cda8d6b06c0191b15\",\"dweb:/ipfs/QmV2JKCyjTVH3rkWNrfdJRhAT7tZ3usAN2XcnD4h53Mvih\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":{\"keccak256\":\"0xbb16110ffe0b625944fe7dd97adcf1158e514185c956a5628bc09be90d606174\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b5b412e554a4dd37a50f89ffcd7b9a6ef2ae5064f37619f89343b23d58ce89ca\",\"dweb:/ipfs/QmPWMdBvdFk8WBVv625wd1Ar7aehnBWtj1XfFRrRL5KpxJ\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd\",\"dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://28879d01fd22c07b44f006612775f8577defbe459cb01685c5e25cd518c91a71\",\"dweb:/ipfs/QmVgfkwv2Fxw6hhTcDUZhE7NkoSKjab3ipM7UaRbt6uXb5\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a367861093b74443b137564d3f3c472f70bcf114739e62059c939f25e315706c\",\"dweb:/ipfs/Qmd7JMpcxD9RuQjK3uM3EzJUgSqdN8vzp8eytEiuwxQJ6h\"]},\"@openzeppelin/contracts/utils/Counters.sol\":{\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://59e1c62884d55b70f3ae5432b44bb3166ad71ae3acd19c57ab6ddc3c87c325ee\",\"dweb:/ipfs/QmezuXg5GK5oeA4F91EZhozBFekhq5TD966bHPH18cCqhu\"]},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"keccak256\":\"0xc0e310c163edf15db45d4ff938113ab357f94fa86e61ea8e790853c4d2e13256\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://04db5bc05dcb05ba1f6ca2dfbead17adc8a2e2f911aa80b05e7a36d9eaf96516\",\"dweb:/ipfs/QmVkfHZbXVBUPsTopueCn3qGJX8aEjahFF3Fn4NcygLNm5\"]},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e26daf81e2252dc1fe1ce0e4b55c2eb7c6d1ee84ae6558d1a9554432ea1d32da\",\"dweb:/ipfs/Qmb1UANWiWq5pCKbmHSu772hd4nt374dVaghGmwSVNuk8Q\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b81d9ff6559ea5c47fc573e17ece6d9ba5d6839e213e6ebc3b4c5c8fe4199d7f\",\"dweb:/ipfs/QmPCW1bFisUzJkyjroY3yipwfism9RRCigCcK1hbXtVM8n\"]},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8b93a1e39a4a19eba1600b92c96f435442db88cac91e315c8291547a2a7bcfe2\",\"dweb:/ipfs/QmTm34KVe6uZBZwq8dZDNWwPcm24qBJdxqL3rPxBJ4LrMv\"]},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"keccak256\":\"0x8432884527a7ad91e6eed1cfc5a0811ae2073e5bca107bd0ca442e9236b03dbd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e3aa0eadab7aafcf91a95684765f778f64386f0368de88522ce873c21385278a\",\"dweb:/ipfs/QmPfaVAqWgH1QsT3dHVuL6jwMZbVKdoP8w1PvpiPT2FPWd\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cc8841b3cd48ad125e2f46323c8bad3aa0e88e399ec62acb9e57efa7e7c8058c\",\"dweb:/ipfs/QmSqE4mXHA2BXW58deDbXE8MTcsL5JSKNDbm23sVQxRLPS\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c50fcc459e49a9858b6d8ad5f911295cb7c9ab57567845a250bf0153f84a95c7\",\"dweb:/ipfs/QmcEW85JRzvDkQggxiBBLVAasXWdkhEysqypj9EaB6H2g6\"]},\"contracts/TurtleToken.sol\":{\"keccak256\":\"0x1d3b4f70cf6f1b41691b125952149818a1bd6d82cc53a625ee445568b9b6539c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be6c29fefed7b0bceed6827e944f928b3c41c4104991c30f04047d28516bf590\",\"dweb:/ipfs/QmeTeoQoCcYCvcpArmPaPdA4BTJWn49THoTpwRmefW4LNn\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 153,
								"contract": "contracts/TurtleToken.sol:TurtleToken",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 159,
								"contract": "contracts/TurtleToken.sol:TurtleToken",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 161,
								"contract": "contracts/TurtleToken.sol:TurtleToken",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 163,
								"contract": "contracts/TurtleToken.sol:TurtleToken",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 165,
								"contract": "contracts/TurtleToken.sol:TurtleToken",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							},
							{
								"astId": 2093,
								"contract": "contracts/TurtleToken.sol:TurtleToken",
								"label": "_nameFallback",
								"offset": 0,
								"slot": "5",
								"type": "t_string_storage"
							},
							{
								"astId": 2095,
								"contract": "contracts/TurtleToken.sol:TurtleToken",
								"label": "_versionFallback",
								"offset": 0,
								"slot": "6",
								"type": "t_string_storage"
							},
							{
								"astId": 825,
								"contract": "contracts/TurtleToken.sol:TurtleToken",
								"label": "_nonces",
								"offset": 0,
								"slot": "7",
								"type": "t_mapping(t_address,t_struct(Counter)1071_storage)"
							},
							{
								"astId": 833,
								"contract": "contracts/TurtleToken.sol:TurtleToken",
								"label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
								"offset": 0,
								"slot": "8",
								"type": "t_bytes32"
							},
							{
								"astId": 7,
								"contract": "contracts/TurtleToken.sol:TurtleToken",
								"label": "_owner",
								"offset": 0,
								"slot": "9",
								"type": "t_address"
							},
							{
								"astId": 3248,
								"contract": "contracts/TurtleToken.sol:TurtleToken",
								"label": "exchangeRate",
								"offset": 0,
								"slot": "10",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bytes32": {
								"encoding": "inplace",
								"label": "bytes32",
								"numberOfBytes": "32"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_struct(Counter)1071_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct Counters.Counter)",
								"numberOfBytes": "32",
								"value": "t_struct(Counter)1071_storage"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_struct(Counter)1071_storage": {
								"encoding": "inplace",
								"label": "struct Counters.Counter",
								"members": [
									{
										"astId": 1070,
										"contract": "contracts/TurtleToken.sol:TurtleToken",
										"label": "_value",
										"offset": 0,
										"slot": "0",
										"type": "t_uint256"
									}
								],
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							1065
						],
						"Ownable": [
							112
						]
					},
					"id": 113,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "102:23:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 113,
							"sourceUnit": 1066,
							"src": "127:30:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 4,
										"name": "Context",
										"nameLocations": [
											"683:7:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1065,
										"src": "683:7:0"
									},
									"id": 5,
									"nodeType": "InheritanceSpecifier",
									"src": "683:7:0"
								}
							],
							"canonicalName": "Ownable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 3,
								"nodeType": "StructuredDocumentation",
								"src": "159:494:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 112,
							"linearizedBaseContracts": [
								112,
								1065
							],
							"name": "Ownable",
							"nameLocation": "672:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 7,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "713:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 112,
									"src": "697:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 6,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "697:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"eventSelector": "8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
									"id": 13,
									"name": "OwnershipTransferred",
									"nameLocation": "732:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 9,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "769:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "753:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 8,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "753:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 11,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "800:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "784:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 10,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "784:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "752:57:0"
									},
									"src": "726:84:0"
								},
								{
									"body": {
										"id": 22,
										"nodeType": "Block",
										"src": "926:49:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 18,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1047,
																"src": "955:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 19,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "955:12:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 17,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "936:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 20,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "936:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 21,
												"nodeType": "ExpressionStatement",
												"src": "936:32:0"
											}
										]
									},
									"documentation": {
										"id": 14,
										"nodeType": "StructuredDocumentation",
										"src": "816:91:0",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 23,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "923:2:0"
									},
									"returnParameters": {
										"id": 16,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "926:0:0"
									},
									"scope": 112,
									"src": "912:63:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 30,
										"nodeType": "Block",
										"src": "1084:41:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 26,
														"name": "_checkOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 54,
														"src": "1094:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 27,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1094:13:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 28,
												"nodeType": "ExpressionStatement",
												"src": "1094:13:0"
											},
											{
												"id": 29,
												"nodeType": "PlaceholderStatement",
												"src": "1117:1:0"
											}
										]
									},
									"documentation": {
										"id": 24,
										"nodeType": "StructuredDocumentation",
										"src": "981:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 31,
									"name": "onlyOwner",
									"nameLocation": "1072:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1081:2:0"
									},
									"src": "1063:62:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 39,
										"nodeType": "Block",
										"src": "1256:30:0",
										"statements": [
											{
												"expression": {
													"id": 37,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "1273:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 36,
												"id": 38,
												"nodeType": "Return",
												"src": "1266:13:0"
											}
										]
									},
									"documentation": {
										"id": 32,
										"nodeType": "StructuredDocumentation",
										"src": "1131:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 40,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1210:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1215:2:0"
									},
									"returnParameters": {
										"id": 36,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 35,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 40,
												"src": "1247:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 34,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1247:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1246:9:0"
									},
									"scope": 112,
									"src": "1201:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 53,
										"nodeType": "Block",
										"src": "1404:85:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 49,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 45,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 40,
																	"src": "1422:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 46,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1422:7:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 47,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1047,
																	"src": "1433:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 48,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1433:12:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1422:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 50,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1447:34:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 44,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1414:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 51,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1414:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 52,
												"nodeType": "ExpressionStatement",
												"src": "1414:68:0"
											}
										]
									},
									"documentation": {
										"id": 41,
										"nodeType": "StructuredDocumentation",
										"src": "1292:62:0",
										"text": " @dev Throws if the sender is not the owner."
									},
									"id": 54,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOwner",
									"nameLocation": "1368:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 42,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1379:2:0"
									},
									"returnParameters": {
										"id": 43,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1404:0:0"
									},
									"scope": 112,
									"src": "1359:130:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 67,
										"nodeType": "Block",
										"src": "1878:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 63,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1915:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 62,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1907:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 61,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1907:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 64,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1907:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 60,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "1888:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 65,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1888:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 66,
												"nodeType": "ExpressionStatement",
												"src": "1888:30:0"
											}
										]
									},
									"documentation": {
										"id": 55,
										"nodeType": "StructuredDocumentation",
										"src": "1495:324:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 68,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 58,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 57,
												"name": "onlyOwner",
												"nameLocations": [
													"1868:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "1868:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1868:9:0"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "1833:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 56,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1850:2:0"
									},
									"returnParameters": {
										"id": 59,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1878:0:0"
									},
									"scope": 112,
									"src": "1824:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 90,
										"nodeType": "Block",
										"src": "2144:128:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 82,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 77,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 71,
																"src": "2162:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 80,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2182:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 79,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2174:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 78,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2174:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 81,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2174:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2162:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 83,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2186:40:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 76,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2154:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 84,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2154:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 85,
												"nodeType": "ExpressionStatement",
												"src": "2154:73:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 87,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 71,
															"src": "2256:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 86,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "2237:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 88,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2237:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 89,
												"nodeType": "ExpressionStatement",
												"src": "2237:28:0"
											}
										]
									},
									"documentation": {
										"id": 69,
										"nodeType": "StructuredDocumentation",
										"src": "1931:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 91,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 74,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 73,
												"name": "onlyOwner",
												"nameLocations": [
													"2134:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "2134:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2134:9:0"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "2083:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 72,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 71,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2109:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 91,
												"src": "2101:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 70,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2101:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2100:18:0"
									},
									"returnParameters": {
										"id": 75,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2144:0:0"
									},
									"scope": 112,
									"src": "2074:198:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 110,
										"nodeType": "Block",
										"src": "2489:124:0",
										"statements": [
											{
												"assignments": [
													98
												],
												"declarations": [
													{
														"constant": false,
														"id": 98,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2507:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 110,
														"src": "2499:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 97,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2499:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 100,
												"initialValue": {
													"id": 99,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "2518:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2499:25:0"
											},
											{
												"expression": {
													"id": 103,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 101,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 7,
														"src": "2534:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 102,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 94,
														"src": "2543:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2534:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 104,
												"nodeType": "ExpressionStatement",
												"src": "2534:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 106,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 98,
															"src": "2587:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 107,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 94,
															"src": "2597:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 105,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 13,
														"src": "2566:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 108,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2566:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 109,
												"nodeType": "EmitStatement",
												"src": "2561:45:0"
											}
										]
									},
									"documentation": {
										"id": 92,
										"nodeType": "StructuredDocumentation",
										"src": "2278:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 111,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2435:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 95,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 94,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2462:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 111,
												"src": "2454:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 93,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2454:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2453:18:0"
									},
									"returnParameters": {
										"id": 96,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2489:0:0"
									},
									"scope": 112,
									"src": "2426:187:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 113,
							"src": "654:1961:0",
							"usedErrors": []
						}
					],
					"src": "102:2514:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/interfaces/IERC5267.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/interfaces/IERC5267.sol",
					"exportedSymbols": {
						"IERC5267": [
							137
						]
					},
					"id": 138,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 114,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "107:23:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC5267",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 137,
							"linearizedBaseContracts": [
								137
							],
							"name": "IERC5267",
							"nameLocation": "142:8:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 115,
										"nodeType": "StructuredDocumentation",
										"src": "157:84:1",
										"text": " @dev MAY be emitted to signal that the domain could have changed."
									},
									"eventSelector": "0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31",
									"id": 117,
									"name": "EIP712DomainChanged",
									"nameLocation": "252:19:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 116,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "271:2:1"
									},
									"src": "246:28:1"
								},
								{
									"documentation": {
										"id": 118,
										"nodeType": "StructuredDocumentation",
										"src": "280:140:1",
										"text": " @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n signature."
									},
									"functionSelector": "84b0196e",
									"id": 136,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "eip712Domain",
									"nameLocation": "434:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 119,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "446:2:1"
									},
									"returnParameters": {
										"id": 135,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 121,
												"mutability": "mutable",
												"name": "fields",
												"nameLocation": "516:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 136,
												"src": "509:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes1",
													"typeString": "bytes1"
												},
												"typeName": {
													"id": 120,
													"name": "bytes1",
													"nodeType": "ElementaryTypeName",
													"src": "509:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 123,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "550:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 136,
												"src": "536:18:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 122,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "536:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 125,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "582:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 136,
												"src": "568:21:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 124,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "568:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 127,
												"mutability": "mutable",
												"name": "chainId",
												"nameLocation": "611:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 136,
												"src": "603:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 126,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "603:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 129,
												"mutability": "mutable",
												"name": "verifyingContract",
												"nameLocation": "640:17:1",
												"nodeType": "VariableDeclaration",
												"scope": 136,
												"src": "632:25:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 128,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "632:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 131,
												"mutability": "mutable",
												"name": "salt",
												"nameLocation": "679:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 136,
												"src": "671:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 130,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "671:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 134,
												"mutability": "mutable",
												"name": "extensions",
												"nameLocation": "714:10:1",
												"nodeType": "VariableDeclaration",
												"scope": 136,
												"src": "697:27:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 132,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "697:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 133,
													"nodeType": "ArrayTypeName",
													"src": "697:9:1",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "495:239:1"
									},
									"scope": 137,
									"src": "425:310:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 138,
							"src": "132:605:1",
							"usedErrors": []
						}
					],
					"src": "107:631:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
					"exportedSymbols": {
						"Context": [
							1065
						],
						"ERC20": [
							724
						],
						"IERC20": [
							802
						],
						"IERC20Metadata": [
							999
						]
					},
					"id": 725,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 139,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "105:23:2"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "./IERC20.sol",
							"id": 140,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 725,
							"sourceUnit": 803,
							"src": "130:22:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
							"file": "./extensions/IERC20Metadata.sol",
							"id": 141,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 725,
							"sourceUnit": 1000,
							"src": "153:41:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../../utils/Context.sol",
							"id": 142,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 725,
							"sourceUnit": 1066,
							"src": "195:33:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 144,
										"name": "Context",
										"nameLocations": [
											"1550:7:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1065,
										"src": "1550:7:2"
									},
									"id": 145,
									"nodeType": "InheritanceSpecifier",
									"src": "1550:7:2"
								},
								{
									"baseName": {
										"id": 146,
										"name": "IERC20",
										"nameLocations": [
											"1559:6:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 802,
										"src": "1559:6:2"
									},
									"id": 147,
									"nodeType": "InheritanceSpecifier",
									"src": "1559:6:2"
								},
								{
									"baseName": {
										"id": 148,
										"name": "IERC20Metadata",
										"nameLocations": [
											"1567:14:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 999,
										"src": "1567:14:2"
									},
									"id": 149,
									"nodeType": "InheritanceSpecifier",
									"src": "1567:14:2"
								}
							],
							"canonicalName": "ERC20",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 143,
								"nodeType": "StructuredDocumentation",
								"src": "230:1301:2",
								"text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n For a generic mechanism see {ERC20PresetMinterPauser}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n The default value of {decimals} is 18. To change this, you should override\n this function so it returns a different value.\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification.\n Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n functions have been added to mitigate the well-known issues around setting\n allowances. See {IERC20-approve}."
							},
							"fullyImplemented": true,
							"id": 724,
							"linearizedBaseContracts": [
								724,
								999,
								802,
								1065
							],
							"name": "ERC20",
							"nameLocation": "1541:5:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 153,
									"mutability": "mutable",
									"name": "_balances",
									"nameLocation": "1624:9:2",
									"nodeType": "VariableDeclaration",
									"scope": 724,
									"src": "1588:45:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 152,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 150,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1596:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1588:27:2",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 151,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1607:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 159,
									"mutability": "mutable",
									"name": "_allowances",
									"nameLocation": "1696:11:2",
									"nodeType": "VariableDeclaration",
									"scope": 724,
									"src": "1640:67:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(address => uint256))"
									},
									"typeName": {
										"id": 158,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 154,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1648:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1640:47:2",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(address => uint256))"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 157,
											"keyName": "",
											"keyNameLocation": "-1:-1:-1",
											"keyType": {
												"id": 155,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1667:7:2",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "1659:27:2",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"valueName": "",
											"valueNameLocation": "-1:-1:-1",
											"valueType": {
												"id": 156,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1678:7:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 161,
									"mutability": "mutable",
									"name": "_totalSupply",
									"nameLocation": "1730:12:2",
									"nodeType": "VariableDeclaration",
									"scope": 724,
									"src": "1714:28:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 160,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1714:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 163,
									"mutability": "mutable",
									"name": "_name",
									"nameLocation": "1764:5:2",
									"nodeType": "VariableDeclaration",
									"scope": 724,
									"src": "1749:20:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 162,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1749:6:2",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 165,
									"mutability": "mutable",
									"name": "_symbol",
									"nameLocation": "1790:7:2",
									"nodeType": "VariableDeclaration",
									"scope": 724,
									"src": "1775:22:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 164,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1775:6:2",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 181,
										"nodeType": "Block",
										"src": "2036:57:2",
										"statements": [
											{
												"expression": {
													"id": 175,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 173,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 163,
														"src": "2046:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 174,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 168,
														"src": "2054:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2046:13:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 176,
												"nodeType": "ExpressionStatement",
												"src": "2046:13:2"
											},
											{
												"expression": {
													"id": 179,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 177,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 165,
														"src": "2069:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 178,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 170,
														"src": "2079:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2069:17:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 180,
												"nodeType": "ExpressionStatement",
												"src": "2069:17:2"
											}
										]
									},
									"documentation": {
										"id": 166,
										"nodeType": "StructuredDocumentation",
										"src": "1804:171:2",
										"text": " @dev Sets the values for {name} and {symbol}.\n All two of these values are immutable: they can only be set once during\n construction."
									},
									"id": 182,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 171,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 168,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "2006:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 182,
												"src": "1992:19:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 167,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1992:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 170,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "2027:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 182,
												"src": "2013:21:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 169,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2013:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1991:44:2"
									},
									"returnParameters": {
										"id": 172,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2036:0:2"
									},
									"scope": 724,
									"src": "1980:113:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										986
									],
									"body": {
										"id": 191,
										"nodeType": "Block",
										"src": "2227:29:2",
										"statements": [
											{
												"expression": {
													"id": 189,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 163,
													"src": "2244:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 188,
												"id": 190,
												"nodeType": "Return",
												"src": "2237:12:2"
											}
										]
									},
									"documentation": {
										"id": 183,
										"nodeType": "StructuredDocumentation",
										"src": "2099:54:2",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 192,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "2167:4:2",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 185,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2194:8:2"
									},
									"parameters": {
										"id": 184,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2171:2:2"
									},
									"returnParameters": {
										"id": 188,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 187,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 192,
												"src": "2212:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 186,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2212:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2211:15:2"
									},
									"scope": 724,
									"src": "2158:98:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										992
									],
									"body": {
										"id": 201,
										"nodeType": "Block",
										"src": "2440:31:2",
										"statements": [
											{
												"expression": {
													"id": 199,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 165,
													"src": "2457:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 198,
												"id": 200,
												"nodeType": "Return",
												"src": "2450:14:2"
											}
										]
									},
									"documentation": {
										"id": 193,
										"nodeType": "StructuredDocumentation",
										"src": "2262:102:2",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 202,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "2378:6:2",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 195,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2407:8:2"
									},
									"parameters": {
										"id": 194,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2384:2:2"
									},
									"returnParameters": {
										"id": 198,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 197,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 202,
												"src": "2425:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 196,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2425:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2424:15:2"
									},
									"scope": 724,
									"src": "2369:102:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										998
									],
									"body": {
										"id": 211,
										"nodeType": "Block",
										"src": "3169:26:2",
										"statements": [
											{
												"expression": {
													"hexValue": "3138",
													"id": 209,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3186:2:2",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_18_by_1",
														"typeString": "int_const 18"
													},
													"value": "18"
												},
												"functionReturnParameters": 208,
												"id": 210,
												"nodeType": "Return",
												"src": "3179:9:2"
											}
										]
									},
									"documentation": {
										"id": 203,
										"nodeType": "StructuredDocumentation",
										"src": "2477:622:2",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the default value returned by this function, unless\n it's overridden.\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 212,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "3113:8:2",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 205,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3144:8:2"
									},
									"parameters": {
										"id": 204,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3121:2:2"
									},
									"returnParameters": {
										"id": 208,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 207,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 212,
												"src": "3162:5:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 206,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3162:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3161:7:2"
									},
									"scope": 724,
									"src": "3104:91:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										751
									],
									"body": {
										"id": 221,
										"nodeType": "Block",
										"src": "3325:36:2",
										"statements": [
											{
												"expression": {
													"id": 219,
													"name": "_totalSupply",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 161,
													"src": "3342:12:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 218,
												"id": 220,
												"nodeType": "Return",
												"src": "3335:19:2"
											}
										]
									},
									"documentation": {
										"id": 213,
										"nodeType": "StructuredDocumentation",
										"src": "3201:49:2",
										"text": " @dev See {IERC20-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 222,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "3264:11:2",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 215,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3298:8:2"
									},
									"parameters": {
										"id": 214,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3275:2:2"
									},
									"returnParameters": {
										"id": 218,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 217,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 222,
												"src": "3316:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 216,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3316:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3315:9:2"
									},
									"scope": 724,
									"src": "3255:106:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										759
									],
									"body": {
										"id": 235,
										"nodeType": "Block",
										"src": "3502:42:2",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 231,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 153,
														"src": "3519:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 233,
													"indexExpression": {
														"id": 232,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 225,
														"src": "3529:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3519:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 230,
												"id": 234,
												"nodeType": "Return",
												"src": "3512:25:2"
											}
										]
									},
									"documentation": {
										"id": 223,
										"nodeType": "StructuredDocumentation",
										"src": "3367:47:2",
										"text": " @dev See {IERC20-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 236,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "3428:9:2",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 227,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3475:8:2"
									},
									"parameters": {
										"id": 226,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 225,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3446:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 236,
												"src": "3438:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 224,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3438:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3437:17:2"
									},
									"returnParameters": {
										"id": 230,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 229,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 236,
												"src": "3493:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 228,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3493:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3492:9:2"
									},
									"scope": 724,
									"src": "3419:125:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										769
									],
									"body": {
										"id": 260,
										"nodeType": "Block",
										"src": "3825:104:2",
										"statements": [
											{
												"assignments": [
													248
												],
												"declarations": [
													{
														"constant": false,
														"id": 248,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "3843:5:2",
														"nodeType": "VariableDeclaration",
														"scope": 260,
														"src": "3835:13:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 247,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3835:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 251,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 249,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1047,
														"src": "3851:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 250,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3851:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3835:28:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 253,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 248,
															"src": "3883:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 254,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 239,
															"src": "3890:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 255,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 241,
															"src": "3894:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 252,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 484,
														"src": "3873:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 256,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3873:28:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 257,
												"nodeType": "ExpressionStatement",
												"src": "3873:28:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 258,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3918:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 246,
												"id": 259,
												"nodeType": "Return",
												"src": "3911:11:2"
											}
										]
									},
									"documentation": {
										"id": 237,
										"nodeType": "StructuredDocumentation",
										"src": "3550:185:2",
										"text": " @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `amount`."
									},
									"functionSelector": "a9059cbb",
									"id": 261,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "3749:8:2",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 243,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3801:8:2"
									},
									"parameters": {
										"id": 242,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 239,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3766:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 261,
												"src": "3758:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 238,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3758:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 241,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "3778:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 261,
												"src": "3770:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 240,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3770:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3757:28:2"
									},
									"returnParameters": {
										"id": 246,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 245,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 261,
												"src": "3819:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 244,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3819:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3818:6:2"
									},
									"scope": 724,
									"src": "3740:189:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										779
									],
									"body": {
										"id": 278,
										"nodeType": "Block",
										"src": "4085:51:2",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 272,
															"name": "_allowances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 159,
															"src": "4102:11:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 274,
														"indexExpression": {
															"id": 273,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 264,
															"src": "4114:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4102:18:2",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 276,
													"indexExpression": {
														"id": 275,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 266,
														"src": "4121:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4102:27:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 271,
												"id": 277,
												"nodeType": "Return",
												"src": "4095:34:2"
											}
										]
									},
									"documentation": {
										"id": 262,
										"nodeType": "StructuredDocumentation",
										"src": "3935:47:2",
										"text": " @dev See {IERC20-allowance}."
									},
									"functionSelector": "dd62ed3e",
									"id": 279,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "3996:9:2",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 268,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4058:8:2"
									},
									"parameters": {
										"id": 267,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 264,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4014:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "4006:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 263,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4006:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 266,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4029:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "4021:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 265,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4021:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4005:32:2"
									},
									"returnParameters": {
										"id": 271,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 270,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "4076:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 269,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4076:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4075:9:2"
									},
									"scope": 724,
									"src": "3987:149:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										789
									],
									"body": {
										"id": 303,
										"nodeType": "Block",
										"src": "4533:108:2",
										"statements": [
											{
												"assignments": [
													291
												],
												"declarations": [
													{
														"constant": false,
														"id": 291,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "4551:5:2",
														"nodeType": "VariableDeclaration",
														"scope": 303,
														"src": "4543:13:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 290,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4543:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 294,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 292,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1047,
														"src": "4559:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 293,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4559:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4543:28:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 296,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 291,
															"src": "4590:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 297,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 282,
															"src": "4597:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 298,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 284,
															"src": "4606:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 295,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 658,
														"src": "4581:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 299,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4581:32:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 300,
												"nodeType": "ExpressionStatement",
												"src": "4581:32:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 301,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4630:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 289,
												"id": 302,
												"nodeType": "Return",
												"src": "4623:11:2"
											}
										]
									},
									"documentation": {
										"id": 280,
										"nodeType": "StructuredDocumentation",
										"src": "4142:297:2",
										"text": " @dev See {IERC20-approve}.\n NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "095ea7b3",
									"id": 304,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4453:7:2",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 286,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4509:8:2"
									},
									"parameters": {
										"id": 285,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 282,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4469:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 304,
												"src": "4461:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 281,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4461:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 284,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "4486:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 304,
												"src": "4478:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 283,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4478:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4460:33:2"
									},
									"returnParameters": {
										"id": 289,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 288,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 304,
												"src": "4527:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 287,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4527:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4526:6:2"
									},
									"scope": 724,
									"src": "4444:197:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										801
									],
									"body": {
										"id": 336,
										"nodeType": "Block",
										"src": "5306:153:2",
										"statements": [
											{
												"assignments": [
													318
												],
												"declarations": [
													{
														"constant": false,
														"id": 318,
														"mutability": "mutable",
														"name": "spender",
														"nameLocation": "5324:7:2",
														"nodeType": "VariableDeclaration",
														"scope": 336,
														"src": "5316:15:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 317,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5316:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 321,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 319,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1047,
														"src": "5334:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 320,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5334:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5316:30:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 323,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 307,
															"src": "5372:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 324,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 318,
															"src": "5378:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 325,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 311,
															"src": "5387:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 322,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 701,
														"src": "5356:15:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 326,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5356:38:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 327,
												"nodeType": "ExpressionStatement",
												"src": "5356:38:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 329,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 307,
															"src": "5414:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 330,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 309,
															"src": "5420:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 331,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 311,
															"src": "5424:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 328,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 484,
														"src": "5404:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 332,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5404:27:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 333,
												"nodeType": "ExpressionStatement",
												"src": "5404:27:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 334,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5448:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 316,
												"id": 335,
												"nodeType": "Return",
												"src": "5441:11:2"
											}
										]
									},
									"documentation": {
										"id": 305,
										"nodeType": "StructuredDocumentation",
										"src": "4647:551:2",
										"text": " @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`.\n - the caller must have allowance for ``from``'s tokens of at least\n `amount`."
									},
									"functionSelector": "23b872dd",
									"id": 337,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "5212:12:2",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 313,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "5282:8:2"
									},
									"parameters": {
										"id": 312,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 307,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5233:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 337,
												"src": "5225:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 306,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5225:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 309,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5247:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 337,
												"src": "5239:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 308,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5239:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 311,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "5259:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 337,
												"src": "5251:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 310,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5251:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5224:42:2"
									},
									"returnParameters": {
										"id": 316,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 315,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 337,
												"src": "5300:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 314,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5300:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5299:6:2"
									},
									"scope": 724,
									"src": "5203:256:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 365,
										"nodeType": "Block",
										"src": "5948:140:2",
										"statements": [
											{
												"assignments": [
													348
												],
												"declarations": [
													{
														"constant": false,
														"id": 348,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "5966:5:2",
														"nodeType": "VariableDeclaration",
														"scope": 365,
														"src": "5958:13:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 347,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5958:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 351,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 349,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1047,
														"src": "5974:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 350,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5974:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5958:28:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 353,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 348,
															"src": "6005:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 354,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 340,
															"src": "6012:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 360,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 356,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 348,
																		"src": "6031:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 357,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 340,
																		"src": "6038:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 355,
																	"name": "allowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 279,
																	"src": "6021:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
																		"typeString": "function (address,address) view returns (uint256)"
																	}
																},
																"id": 358,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6021:25:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 359,
																"name": "addedValue",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 342,
																"src": "6049:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6021:38:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 352,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 658,
														"src": "5996:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 361,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5996:64:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 362,
												"nodeType": "ExpressionStatement",
												"src": "5996:64:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 363,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "6077:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 346,
												"id": 364,
												"nodeType": "Return",
												"src": "6070:11:2"
											}
										]
									},
									"documentation": {
										"id": 338,
										"nodeType": "StructuredDocumentation",
										"src": "5465:384:2",
										"text": " @dev Atomically increases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "39509351",
									"id": 366,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "increaseAllowance",
									"nameLocation": "5863:17:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 343,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 340,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "5889:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 366,
												"src": "5881:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 339,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5881:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 342,
												"mutability": "mutable",
												"name": "addedValue",
												"nameLocation": "5906:10:2",
												"nodeType": "VariableDeclaration",
												"scope": 366,
												"src": "5898:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 341,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5898:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5880:37:2"
									},
									"returnParameters": {
										"id": 346,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 345,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 366,
												"src": "5942:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 344,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5942:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5941:6:2"
									},
									"scope": 724,
									"src": "5854:234:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 406,
										"nodeType": "Block",
										"src": "6674:328:2",
										"statements": [
											{
												"assignments": [
													377
												],
												"declarations": [
													{
														"constant": false,
														"id": 377,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "6692:5:2",
														"nodeType": "VariableDeclaration",
														"scope": 406,
														"src": "6684:13:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 376,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6684:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 380,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 378,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1047,
														"src": "6700:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 379,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6700:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6684:28:2"
											},
											{
												"assignments": [
													382
												],
												"declarations": [
													{
														"constant": false,
														"id": 382,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "6730:16:2",
														"nodeType": "VariableDeclaration",
														"scope": 406,
														"src": "6722:24:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 381,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "6722:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 387,
												"initialValue": {
													"arguments": [
														{
															"id": 384,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 377,
															"src": "6759:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 385,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 369,
															"src": "6766:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 383,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 279,
														"src": "6749:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 386,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6749:25:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6722:52:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 391,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 389,
																"name": "currentAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 382,
																"src": "6792:16:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 390,
																"name": "subtractedValue",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 371,
																"src": "6812:15:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6792:35:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
															"id": 392,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6829:39:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																"typeString": "literal_string \"ERC20: decreased allowance below zero\""
															},
															"value": "ERC20: decreased allowance below zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																"typeString": "literal_string \"ERC20: decreased allowance below zero\""
															}
														],
														"id": 388,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6784:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 393,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6784:85:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 394,
												"nodeType": "ExpressionStatement",
												"src": "6784:85:2"
											},
											{
												"id": 403,
												"nodeType": "UncheckedBlock",
												"src": "6879:95:2",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"id": 396,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 377,
																	"src": "6912:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 397,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 369,
																	"src": "6919:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 400,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 398,
																		"name": "currentAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 382,
																		"src": "6928:16:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 399,
																		"name": "subtractedValue",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 371,
																		"src": "6947:15:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "6928:34:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 395,
																"name": "_approve",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 658,
																"src": "6903:8:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																	"typeString": "function (address,address,uint256)"
																}
															},
															"id": 401,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6903:60:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 402,
														"nodeType": "ExpressionStatement",
														"src": "6903:60:2"
													}
												]
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 404,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "6991:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 375,
												"id": 405,
												"nodeType": "Return",
												"src": "6984:11:2"
											}
										]
									},
									"documentation": {
										"id": 367,
										"nodeType": "StructuredDocumentation",
										"src": "6094:476:2",
										"text": " @dev Atomically decreases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address.\n - `spender` must have allowance for the caller of at least\n `subtractedValue`."
									},
									"functionSelector": "a457c2d7",
									"id": 407,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decreaseAllowance",
									"nameLocation": "6584:17:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 372,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 369,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "6610:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 407,
												"src": "6602:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 368,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6602:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 371,
												"mutability": "mutable",
												"name": "subtractedValue",
												"nameLocation": "6627:15:2",
												"nodeType": "VariableDeclaration",
												"scope": 407,
												"src": "6619:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 370,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6619:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6601:42:2"
									},
									"returnParameters": {
										"id": 375,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 374,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 407,
												"src": "6668:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 373,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6668:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6667:6:2"
									},
									"scope": 724,
									"src": "6575:427:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 483,
										"nodeType": "Block",
										"src": "7534:710:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 423,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 418,
																"name": "from",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 410,
																"src": "7552:4:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 421,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7568:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 420,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7560:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 419,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7560:7:2",
																		"typeDescriptions": {}
																	}
																},
																"id": 422,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7560:10:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "7552:18:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373",
															"id": 424,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7572:39:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															},
															"value": "ERC20: transfer from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															}
														],
														"id": 417,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7544:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 425,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7544:68:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 426,
												"nodeType": "ExpressionStatement",
												"src": "7544:68:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 433,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 428,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 412,
																"src": "7630:2:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 431,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7644:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 430,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7636:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 429,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7636:7:2",
																		"typeDescriptions": {}
																	}
																},
																"id": 432,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7636:10:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "7630:16:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472657373",
															"id": 434,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7648:37:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															},
															"value": "ERC20: transfer to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															}
														],
														"id": 427,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7622:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 435,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7622:64:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 436,
												"nodeType": "ExpressionStatement",
												"src": "7622:64:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 438,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 410,
															"src": "7718:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 439,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 412,
															"src": "7724:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 440,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 414,
															"src": "7728:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 437,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 712,
														"src": "7697:20:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 441,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7697:38:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 442,
												"nodeType": "ExpressionStatement",
												"src": "7697:38:2"
											},
											{
												"assignments": [
													444
												],
												"declarations": [
													{
														"constant": false,
														"id": 444,
														"mutability": "mutable",
														"name": "fromBalance",
														"nameLocation": "7754:11:2",
														"nodeType": "VariableDeclaration",
														"scope": 483,
														"src": "7746:19:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 443,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7746:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 448,
												"initialValue": {
													"baseExpression": {
														"id": 445,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 153,
														"src": "7768:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 447,
													"indexExpression": {
														"id": 446,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 410,
														"src": "7778:4:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "7768:15:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7746:37:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 452,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 450,
																"name": "fromBalance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 444,
																"src": "7801:11:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 451,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 414,
																"src": "7816:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7801:21:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365",
															"id": 453,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7824:40:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
															},
															"value": "ERC20: transfer amount exceeds balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
															}
														],
														"id": 449,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7793:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 454,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7793:72:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 455,
												"nodeType": "ExpressionStatement",
												"src": "7793:72:2"
											},
											{
												"id": 470,
												"nodeType": "UncheckedBlock",
												"src": "7875:273:2",
												"statements": [
													{
														"expression": {
															"id": 462,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 456,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 153,
																	"src": "7899:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 458,
																"indexExpression": {
																	"id": 457,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 410,
																	"src": "7909:4:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "7899:15:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 461,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 459,
																	"name": "fromBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 444,
																	"src": "7917:11:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 460,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 414,
																	"src": "7931:6:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7917:20:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7899:38:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 463,
														"nodeType": "ExpressionStatement",
														"src": "7899:38:2"
													},
													{
														"expression": {
															"id": 468,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 464,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 153,
																	"src": "8114:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 466,
																"indexExpression": {
																	"id": 465,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 412,
																	"src": "8124:2:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "8114:13:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"id": 467,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 414,
																"src": "8131:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8114:23:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 469,
														"nodeType": "ExpressionStatement",
														"src": "8114:23:2"
													}
												]
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 472,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 410,
															"src": "8172:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 473,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 412,
															"src": "8178:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 474,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 414,
															"src": "8182:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 471,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 736,
														"src": "8163:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 475,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8163:26:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 476,
												"nodeType": "EmitStatement",
												"src": "8158:31:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 478,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 410,
															"src": "8220:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 479,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 412,
															"src": "8226:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 480,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 414,
															"src": "8230:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 477,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 723,
														"src": "8200:19:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 481,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8200:37:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 482,
												"nodeType": "ExpressionStatement",
												"src": "8200:37:2"
											}
										]
									},
									"documentation": {
										"id": 408,
										"nodeType": "StructuredDocumentation",
										"src": "7008:443:2",
										"text": " @dev Moves `amount` of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`."
									},
									"id": 484,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "7465:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 415,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 410,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "7483:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 484,
												"src": "7475:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 409,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7475:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 412,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "7497:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 484,
												"src": "7489:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 411,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7489:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 414,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "7509:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 484,
												"src": "7501:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 413,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7501:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7474:42:2"
									},
									"returnParameters": {
										"id": 416,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7534:0:2"
									},
									"scope": 724,
									"src": "7456:788:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 540,
										"nodeType": "Block",
										"src": "8585:470:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 498,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 493,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 487,
																"src": "8603:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 496,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "8622:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 495,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "8614:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 494,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "8614:7:2",
																		"typeDescriptions": {}
																	}
																},
																"id": 497,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8614:10:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "8603:21:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206d696e7420746f20746865207a65726f2061646472657373",
															"id": 499,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8626:33:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															},
															"value": "ERC20: mint to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															}
														],
														"id": 492,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8595:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 500,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8595:65:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 501,
												"nodeType": "ExpressionStatement",
												"src": "8595:65:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 505,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8700:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 504,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8692:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 503,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8692:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 506,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8692:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 507,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 487,
															"src": "8704:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 508,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 489,
															"src": "8713:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 502,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 712,
														"src": "8671:20:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 509,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8671:49:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 510,
												"nodeType": "ExpressionStatement",
												"src": "8671:49:2"
											},
											{
												"expression": {
													"id": 513,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 511,
														"name": "_totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 161,
														"src": "8731:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 512,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 489,
														"src": "8747:6:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8731:22:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 514,
												"nodeType": "ExpressionStatement",
												"src": "8731:22:2"
											},
											{
												"id": 521,
												"nodeType": "UncheckedBlock",
												"src": "8763:175:2",
												"statements": [
													{
														"expression": {
															"id": 519,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 515,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 153,
																	"src": "8899:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 517,
																"indexExpression": {
																	"id": 516,
																	"name": "account",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 487,
																	"src": "8909:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "8899:18:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"id": 518,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 489,
																"src": "8921:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8899:28:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 520,
														"nodeType": "ExpressionStatement",
														"src": "8899:28:2"
													}
												]
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 525,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8969:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 524,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8961:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 523,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8961:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 526,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8961:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 527,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 487,
															"src": "8973:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 528,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 489,
															"src": "8982:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 522,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 736,
														"src": "8952:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 529,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8952:37:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 530,
												"nodeType": "EmitStatement",
												"src": "8947:42:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 534,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9028:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 533,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9020:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 532,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9020:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 535,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9020:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 536,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 487,
															"src": "9032:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 537,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 489,
															"src": "9041:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 531,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 723,
														"src": "9000:19:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 538,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9000:48:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 539,
												"nodeType": "ExpressionStatement",
												"src": "9000:48:2"
											}
										]
									},
									"documentation": {
										"id": 485,
										"nodeType": "StructuredDocumentation",
										"src": "8250:265:2",
										"text": "@dev Creates `amount` tokens and assigns them to `account`, increasing\n the total supply.\n Emits a {Transfer} event with `from` set to the zero address.\n Requirements:\n - `account` cannot be the zero address."
									},
									"id": 541,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "8529:5:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 490,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 487,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "8543:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 541,
												"src": "8535:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 486,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8535:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 489,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "8560:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 541,
												"src": "8552:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 488,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8552:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8534:33:2"
									},
									"returnParameters": {
										"id": 491,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8585:0:2"
									},
									"scope": 724,
									"src": "8520:535:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 612,
										"nodeType": "Block",
										"src": "9440:594:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 555,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 550,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 544,
																"src": "9458:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 553,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9477:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 552,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "9469:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 551,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "9469:7:2",
																		"typeDescriptions": {}
																	}
																},
																"id": 554,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9469:10:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "9458:21:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206275726e2066726f6d20746865207a65726f2061646472657373",
															"id": 556,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9481:35:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															},
															"value": "ERC20: burn from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															}
														],
														"id": 549,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9450:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 557,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9450:67:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 558,
												"nodeType": "ExpressionStatement",
												"src": "9450:67:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 560,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 544,
															"src": "9549:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 563,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9566:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 562,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9558:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 561,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9558:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 564,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9558:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 565,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 546,
															"src": "9570:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 559,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 712,
														"src": "9528:20:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 566,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9528:49:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 567,
												"nodeType": "ExpressionStatement",
												"src": "9528:49:2"
											},
											{
												"assignments": [
													569
												],
												"declarations": [
													{
														"constant": false,
														"id": 569,
														"mutability": "mutable",
														"name": "accountBalance",
														"nameLocation": "9596:14:2",
														"nodeType": "VariableDeclaration",
														"scope": 612,
														"src": "9588:22:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 568,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9588:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 573,
												"initialValue": {
													"baseExpression": {
														"id": 570,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 153,
														"src": "9613:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 572,
													"indexExpression": {
														"id": 571,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 544,
														"src": "9623:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "9613:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9588:43:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 577,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 575,
																"name": "accountBalance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 569,
																"src": "9649:14:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 576,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 546,
																"src": "9667:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9649:24:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365",
															"id": 578,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9675:36:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
															},
															"value": "ERC20: burn amount exceeds balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
															}
														],
														"id": 574,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9641:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 579,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9641:71:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 580,
												"nodeType": "ExpressionStatement",
												"src": "9641:71:2"
											},
											{
												"id": 593,
												"nodeType": "UncheckedBlock",
												"src": "9722:194:2",
												"statements": [
													{
														"expression": {
															"id": 587,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 581,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 153,
																	"src": "9746:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 583,
																"indexExpression": {
																	"id": 582,
																	"name": "account",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 544,
																	"src": "9756:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "9746:18:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 586,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 584,
																	"name": "accountBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 569,
																	"src": "9767:14:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 585,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 546,
																	"src": "9784:6:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "9767:23:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9746:44:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 588,
														"nodeType": "ExpressionStatement",
														"src": "9746:44:2"
													},
													{
														"expression": {
															"id": 591,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 589,
																"name": "_totalSupply",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 161,
																"src": "9883:12:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "-=",
															"rightHandSide": {
																"id": 590,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 546,
																"src": "9899:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9883:22:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 592,
														"nodeType": "ExpressionStatement",
														"src": "9883:22:2"
													}
												]
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 595,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 544,
															"src": "9940:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 598,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9957:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 597,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9949:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 596,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9949:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 599,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9949:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 600,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 546,
															"src": "9961:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 594,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 736,
														"src": "9931:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 601,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9931:37:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 602,
												"nodeType": "EmitStatement",
												"src": "9926:42:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 604,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 544,
															"src": "9999:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 607,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10016:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 606,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "10008:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 605,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "10008:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 608,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10008:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 609,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 546,
															"src": "10020:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 603,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 723,
														"src": "9979:19:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 610,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9979:48:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 611,
												"nodeType": "ExpressionStatement",
												"src": "9979:48:2"
											}
										]
									},
									"documentation": {
										"id": 542,
										"nodeType": "StructuredDocumentation",
										"src": "9061:309:2",
										"text": " @dev Destroys `amount` tokens from `account`, reducing the\n total supply.\n Emits a {Transfer} event with `to` set to the zero address.\n Requirements:\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens."
									},
									"id": 613,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "9384:5:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 547,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 544,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "9398:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 613,
												"src": "9390:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 543,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9390:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 546,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "9415:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 613,
												"src": "9407:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 545,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9407:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9389:33:2"
									},
									"returnParameters": {
										"id": 548,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9440:0:2"
									},
									"scope": 724,
									"src": "9375:659:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 657,
										"nodeType": "Block",
										"src": "10540:257:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 629,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 624,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 616,
																"src": "10558:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 627,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10575:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 626,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10567:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 625,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "10567:7:2",
																		"typeDescriptions": {}
																	}
																},
																"id": 628,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10567:10:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "10558:19:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373",
															"id": 630,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10579:38:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															},
															"value": "ERC20: approve from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															}
														],
														"id": 623,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10550:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 631,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10550:68:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 632,
												"nodeType": "ExpressionStatement",
												"src": "10550:68:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 639,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 634,
																"name": "spender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 618,
																"src": "10636:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 637,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10655:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 636,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10647:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 635,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "10647:7:2",
																		"typeDescriptions": {}
																	}
																},
																"id": 638,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10647:10:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "10636:21:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f766520746f20746865207a65726f2061646472657373",
															"id": 640,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10659:36:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															},
															"value": "ERC20: approve to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															}
														],
														"id": 633,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10628:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 641,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10628:68:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 642,
												"nodeType": "ExpressionStatement",
												"src": "10628:68:2"
											},
											{
												"expression": {
													"id": 649,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 643,
																"name": "_allowances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 159,
																"src": "10707:11:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 646,
															"indexExpression": {
																"id": 644,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 616,
																"src": "10719:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "10707:18:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 647,
														"indexExpression": {
															"id": 645,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 618,
															"src": "10726:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "10707:27:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 648,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 620,
														"src": "10737:6:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10707:36:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 650,
												"nodeType": "ExpressionStatement",
												"src": "10707:36:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 652,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 616,
															"src": "10767:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 653,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 618,
															"src": "10774:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 654,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 620,
															"src": "10783:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 651,
														"name": "Approval",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 745,
														"src": "10758:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 655,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10758:32:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 656,
												"nodeType": "EmitStatement",
												"src": "10753:37:2"
											}
										]
									},
									"documentation": {
										"id": 614,
										"nodeType": "StructuredDocumentation",
										"src": "10040:412:2",
										"text": " @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address."
									},
									"id": 658,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "10466:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 621,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 616,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10483:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 658,
												"src": "10475:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 615,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10475:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 618,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "10498:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 658,
												"src": "10490:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 617,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10490:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 620,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "10515:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 658,
												"src": "10507:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 619,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10507:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10474:48:2"
									},
									"returnParameters": {
										"id": 622,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10540:0:2"
									},
									"scope": 724,
									"src": "10457:340:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 700,
										"nodeType": "Block",
										"src": "11168:321:2",
										"statements": [
											{
												"assignments": [
													669
												],
												"declarations": [
													{
														"constant": false,
														"id": 669,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "11186:16:2",
														"nodeType": "VariableDeclaration",
														"scope": 700,
														"src": "11178:24:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 668,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "11178:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 674,
												"initialValue": {
													"arguments": [
														{
															"id": 671,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 661,
															"src": "11215:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 672,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 663,
															"src": "11222:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 670,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 279,
														"src": "11205:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 673,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11205:25:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11178:52:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 681,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 675,
														"name": "currentAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 669,
														"src": "11244:16:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 678,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "11269:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 677,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "11269:7:2",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	}
																],
																"id": 676,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "11264:4:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 679,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11264:13:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint256",
																"typeString": "type(uint256)"
															}
														},
														"id": 680,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "11278:3:2",
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "11264:17:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "11244:37:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 699,
												"nodeType": "IfStatement",
												"src": "11240:243:2",
												"trueBody": {
													"id": 698,
													"nodeType": "Block",
													"src": "11283:200:2",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 685,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 683,
																			"name": "currentAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 669,
																			"src": "11305:16:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"id": 684,
																			"name": "amount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 665,
																			"src": "11325:6:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "11305:26:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "45524332303a20696e73756666696369656e7420616c6c6f77616e6365",
																		"id": 686,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "11333:31:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
																			"typeString": "literal_string \"ERC20: insufficient allowance\""
																		},
																		"value": "ERC20: insufficient allowance"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
																			"typeString": "literal_string \"ERC20: insufficient allowance\""
																		}
																	],
																	"id": 682,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "11297:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 687,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11297:68:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 688,
															"nodeType": "ExpressionStatement",
															"src": "11297:68:2"
														},
														{
															"id": 697,
															"nodeType": "UncheckedBlock",
															"src": "11379:94:2",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"id": 690,
																				"name": "owner",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 661,
																				"src": "11416:5:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 691,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 663,
																				"src": "11423:7:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 694,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 692,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 669,
																					"src": "11432:16:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"id": 693,
																					"name": "amount",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 665,
																					"src": "11451:6:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "11432:25:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 689,
																			"name": "_approve",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 658,
																			"src": "11407:8:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																				"typeString": "function (address,address,uint256)"
																			}
																		},
																		"id": 695,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "11407:51:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 696,
																	"nodeType": "ExpressionStatement",
																	"src": "11407:51:2"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 659,
										"nodeType": "StructuredDocumentation",
										"src": "10803:270:2",
										"text": " @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n Does not update the allowance amount in case of infinite allowance.\n Revert if not enough allowance is available.\n Might emit an {Approval} event."
									},
									"id": 701,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_spendAllowance",
									"nameLocation": "11087:15:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 666,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 661,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "11111:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 701,
												"src": "11103:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 660,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11103:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 663,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "11126:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 701,
												"src": "11118:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 662,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11118:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 665,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "11143:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 701,
												"src": "11135:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 664,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11135:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11102:48:2"
									},
									"returnParameters": {
										"id": 667,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11168:0:2"
									},
									"scope": 724,
									"src": "11078:411:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 711,
										"nodeType": "Block",
										"src": "12162:2:2",
										"statements": []
									},
									"documentation": {
										"id": 702,
										"nodeType": "StructuredDocumentation",
										"src": "11495:573:2",
										"text": " @dev Hook that is called before any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n will be transferred to `to`.\n - when `from` is zero, `amount` tokens will be minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 712,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_beforeTokenTransfer",
									"nameLocation": "12082:20:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 709,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 704,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "12111:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 712,
												"src": "12103:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 703,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12103:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 706,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "12125:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 712,
												"src": "12117:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 705,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12117:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 708,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "12137:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 712,
												"src": "12129:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 707,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12129:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12102:42:2"
									},
									"returnParameters": {
										"id": 710,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12162:0:2"
									},
									"scope": 724,
									"src": "12073:91:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 722,
										"nodeType": "Block",
										"src": "12840:2:2",
										"statements": []
									},
									"documentation": {
										"id": 713,
										"nodeType": "StructuredDocumentation",
										"src": "12170:577:2",
										"text": " @dev Hook that is called after any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n has been transferred to `to`.\n - when `from` is zero, `amount` tokens have been minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 723,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_afterTokenTransfer",
									"nameLocation": "12761:19:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 720,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 715,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "12789:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 723,
												"src": "12781:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 714,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12781:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 717,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "12803:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 723,
												"src": "12795:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 716,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12795:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 719,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "12815:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 723,
												"src": "12807:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 718,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12807:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12780:42:2"
									},
									"returnParameters": {
										"id": 721,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12840:0:2"
									},
									"scope": 724,
									"src": "12752:90:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 725,
							"src": "1532:11312:2",
							"usedErrors": []
						}
					],
					"src": "105:12740:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							802
						]
					},
					"id": 803,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 726,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "106:23:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 727,
								"nodeType": "StructuredDocumentation",
								"src": "131:70:3",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 802,
							"linearizedBaseContracts": [
								802
							],
							"name": "IERC20",
							"nameLocation": "212:6:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 728,
										"nodeType": "StructuredDocumentation",
										"src": "225:158:3",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 736,
									"name": "Transfer",
									"nameLocation": "394:8:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 735,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 730,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "419:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 736,
												"src": "403:20:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 729,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "403:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 732,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "441:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 736,
												"src": "425:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 731,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "425:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 734,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "453:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 736,
												"src": "445:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 733,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "445:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "402:57:3"
									},
									"src": "388:72:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 737,
										"nodeType": "StructuredDocumentation",
										"src": "466:148:3",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 745,
									"name": "Approval",
									"nameLocation": "625:8:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 744,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 739,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "650:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 745,
												"src": "634:21:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 738,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "634:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 741,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "673:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 745,
												"src": "657:23:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 740,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "657:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 743,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "690:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 745,
												"src": "682:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 742,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "682:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "633:63:3"
									},
									"src": "619:78:3"
								},
								{
									"documentation": {
										"id": 746,
										"nodeType": "StructuredDocumentation",
										"src": "703:66:3",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 751,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "783:11:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 747,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "794:2:3"
									},
									"returnParameters": {
										"id": 750,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 749,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 751,
												"src": "820:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 748,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "820:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "819:9:3"
									},
									"scope": 802,
									"src": "774:55:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 752,
										"nodeType": "StructuredDocumentation",
										"src": "835:72:3",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 759,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "921:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 755,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 754,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "939:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 759,
												"src": "931:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 753,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "931:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "930:17:3"
									},
									"returnParameters": {
										"id": 758,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 757,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 759,
												"src": "971:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 756,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "971:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "970:9:3"
									},
									"scope": 802,
									"src": "912:68:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 760,
										"nodeType": "StructuredDocumentation",
										"src": "986:202:3",
										"text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 769,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1202:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 765,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 762,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1219:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 769,
												"src": "1211:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 761,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1211:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 764,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1231:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 769,
												"src": "1223:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 763,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1223:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1210:28:3"
									},
									"returnParameters": {
										"id": 768,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 767,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 769,
												"src": "1257:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 766,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1257:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1256:6:3"
									},
									"scope": 802,
									"src": "1193:70:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 770,
										"nodeType": "StructuredDocumentation",
										"src": "1269:264:3",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 779,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1547:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 775,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 772,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1565:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 779,
												"src": "1557:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 771,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1557:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 774,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1580:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 779,
												"src": "1572:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 773,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1572:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1556:32:3"
									},
									"returnParameters": {
										"id": 778,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 777,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 779,
												"src": "1612:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 776,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1612:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1611:9:3"
									},
									"scope": 802,
									"src": "1538:83:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 780,
										"nodeType": "StructuredDocumentation",
										"src": "1627:642:3",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 789,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2283:7:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 785,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 782,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2299:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 789,
												"src": "2291:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 781,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2291:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 784,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2316:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 789,
												"src": "2308:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 783,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2308:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2290:33:3"
									},
									"returnParameters": {
										"id": 788,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 787,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 789,
												"src": "2342:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 786,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2342:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2341:6:3"
									},
									"scope": 802,
									"src": "2274:74:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 790,
										"nodeType": "StructuredDocumentation",
										"src": "2354:287:3",
										"text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 801,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2655:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 797,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 792,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2676:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 801,
												"src": "2668:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 791,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2668:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 794,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2690:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 801,
												"src": "2682:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 793,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2682:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 796,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2702:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 801,
												"src": "2694:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 795,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2694:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2667:42:3"
									},
									"returnParameters": {
										"id": 800,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 799,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 801,
												"src": "2728:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 798,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2728:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2727:6:3"
									},
									"scope": 802,
									"src": "2646:88:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 803,
							"src": "202:2534:3",
							"usedErrors": []
						}
					],
					"src": "106:2631:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
					"exportedSymbols": {
						"Context": [
							1065
						],
						"Counters": [
							1139
						],
						"ECDSA": [
							2060
						],
						"EIP712": [
							2264
						],
						"ERC20": [
							724
						],
						"ERC20Permit": [
							974
						],
						"IERC20": [
							802
						],
						"IERC20Metadata": [
							999
						],
						"IERC20Permit": [
							1035
						],
						"IERC5267": [
							137
						],
						"Math": [
							3130
						],
						"ShortString": [
							1144
						],
						"ShortStrings": [
							1355
						],
						"SignedMath": [
							3235
						],
						"StorageSlot": [
							1465
						],
						"Strings": [
							1694
						]
					},
					"id": 975,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 804,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "122:23:4"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
							"file": "./IERC20Permit.sol",
							"id": 805,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 975,
							"sourceUnit": 1036,
							"src": "147:28:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
							"file": "../ERC20.sol",
							"id": 806,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 975,
							"sourceUnit": 725,
							"src": "176:22:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
							"file": "../../../utils/cryptography/ECDSA.sol",
							"id": 807,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 975,
							"sourceUnit": 2061,
							"src": "199:47:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/cryptography/EIP712.sol",
							"file": "../../../utils/cryptography/EIP712.sol",
							"id": 808,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 975,
							"sourceUnit": 2265,
							"src": "247:48:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Counters.sol",
							"file": "../../../utils/Counters.sol",
							"id": 809,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 975,
							"sourceUnit": 1140,
							"src": "296:37:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 811,
										"name": "ERC20",
										"nameLocations": [
											"886:5:4"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 724,
										"src": "886:5:4"
									},
									"id": 812,
									"nodeType": "InheritanceSpecifier",
									"src": "886:5:4"
								},
								{
									"baseName": {
										"id": 813,
										"name": "IERC20Permit",
										"nameLocations": [
											"893:12:4"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1035,
										"src": "893:12:4"
									},
									"id": 814,
									"nodeType": "InheritanceSpecifier",
									"src": "893:12:4"
								},
								{
									"baseName": {
										"id": 815,
										"name": "EIP712",
										"nameLocations": [
											"907:6:4"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2264,
										"src": "907:6:4"
									},
									"id": 816,
									"nodeType": "InheritanceSpecifier",
									"src": "907:6:4"
								}
							],
							"canonicalName": "ERC20Permit",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 810,
								"nodeType": "StructuredDocumentation",
								"src": "335:517:4",
								"text": " @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all.\n _Available since v3.4._"
							},
							"fullyImplemented": false,
							"id": 974,
							"linearizedBaseContracts": [
								974,
								2264,
								137,
								1035,
								724,
								999,
								802,
								1065
							],
							"name": "ERC20Permit",
							"nameLocation": "871:11:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 820,
									"libraryName": {
										"id": 817,
										"name": "Counters",
										"nameLocations": [
											"926:8:4"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1139,
										"src": "926:8:4"
									},
									"nodeType": "UsingForDirective",
									"src": "920:36:4",
									"typeName": {
										"id": 819,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 818,
											"name": "Counters.Counter",
											"nameLocations": [
												"939:8:4",
												"948:7:4"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 1071,
											"src": "939:16:4"
										},
										"referencedDeclaration": 1071,
										"src": "939:16:4",
										"typeDescriptions": {
											"typeIdentifier": "t_struct$_Counter_$1071_storage_ptr",
											"typeString": "struct Counters.Counter"
										}
									}
								},
								{
									"constant": false,
									"id": 825,
									"mutability": "mutable",
									"name": "_nonces",
									"nameLocation": "1007:7:4",
									"nodeType": "VariableDeclaration",
									"scope": 974,
									"src": "962:52:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Counter_$1071_storage_$",
										"typeString": "mapping(address => struct Counters.Counter)"
									},
									"typeName": {
										"id": 824,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 821,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "970:7:4",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "962:36:4",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Counter_$1071_storage_$",
											"typeString": "mapping(address => struct Counters.Counter)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 823,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 822,
												"name": "Counters.Counter",
												"nameLocations": [
													"981:8:4",
													"990:7:4"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1071,
												"src": "981:16:4"
											},
											"referencedDeclaration": 1071,
											"src": "981:16:4",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Counter_$1071_storage_ptr",
												"typeString": "struct Counters.Counter"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 830,
									"mutability": "constant",
									"name": "_PERMIT_TYPEHASH",
									"nameLocation": "1098:16:4",
									"nodeType": "VariableDeclaration",
									"scope": 974,
									"src": "1073:147:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 826,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "1073:7:4",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "5065726d69742861646472657373206f776e65722c61646472657373207370656e6465722c75696e743235362076616c75652c75696e74323536206e6f6e63652c75696e7432353620646561646c696e6529",
												"id": 828,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "string",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "1135:84:4",
												"typeDescriptions": {
													"typeIdentifier": "t_stringliteral_6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9",
													"typeString": "literal_string \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\""
												},
												"value": "Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_stringliteral_6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9",
													"typeString": "literal_string \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\""
												}
											],
											"id": 827,
											"name": "keccak256",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 4294967288,
											"src": "1125:9:4",
											"typeDescriptions": {
												"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
												"typeString": "function (bytes memory) pure returns (bytes32)"
											}
										},
										"id": 829,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "functionCall",
										"lValueRequested": false,
										"nameLocations": [],
										"names": [],
										"nodeType": "FunctionCall",
										"src": "1125:95:4",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"documentation": {
										"id": 831,
										"nodeType": "StructuredDocumentation",
										"src": "1226:254:4",
										"text": " @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\n However, to ensure consistency with the upgradeable transpiler, we will continue\n to reserve a slot.\n @custom:oz-renamed-from _PERMIT_TYPEHASH"
									},
									"id": 833,
									"mutability": "mutable",
									"name": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
									"nameLocation": "1553:32:4",
									"nodeType": "VariableDeclaration",
									"scope": 974,
									"src": "1537:48:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 832,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "1537:7:4",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 843,
										"nodeType": "Block",
										"src": "1867:2:4",
										"statements": []
									},
									"documentation": {
										"id": 834,
										"nodeType": "StructuredDocumentation",
										"src": "1592:220:4",
										"text": " @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n It's a good idea to use the same `name` that is defined as the ERC20 token name."
									},
									"id": 844,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 839,
													"name": "name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 836,
													"src": "1856:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												{
													"hexValue": "31",
													"id": 840,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "1862:3:4",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6",
														"typeString": "literal_string \"1\""
													},
													"value": "1"
												}
											],
											"id": 841,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 838,
												"name": "EIP712",
												"nameLocations": [
													"1849:6:4"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 2264,
												"src": "1849:6:4"
											},
											"nodeType": "ModifierInvocation",
											"src": "1849:17:4"
										}
									],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 837,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 836,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "1843:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 844,
												"src": "1829:18:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 835,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1829:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1828:20:4"
									},
									"returnParameters": {
										"id": 842,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1867:0:4"
									},
									"scope": 974,
									"src": "1817:52:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										1020
									],
									"body": {
										"id": 916,
										"nodeType": "Block",
										"src": "2121:428:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 867,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 864,
																	"name": "block",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967292,
																	"src": "2139:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_block",
																		"typeString": "block"
																	}
																},
																"id": 865,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2145:9:4",
																"memberName": "timestamp",
																"nodeType": "MemberAccess",
																"src": "2139:15:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 866,
																"name": "deadline",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 853,
																"src": "2158:8:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2139:27:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332305065726d69743a206578706972656420646561646c696e65",
															"id": 868,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2168:31:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd",
																"typeString": "literal_string \"ERC20Permit: expired deadline\""
															},
															"value": "ERC20Permit: expired deadline"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd",
																"typeString": "literal_string \"ERC20Permit: expired deadline\""
															}
														],
														"id": 863,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2131:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 869,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2131:69:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 870,
												"nodeType": "ExpressionStatement",
												"src": "2131:69:4"
											},
											{
												"assignments": [
													872
												],
												"declarations": [
													{
														"constant": false,
														"id": 872,
														"mutability": "mutable",
														"name": "structHash",
														"nameLocation": "2219:10:4",
														"nodeType": "VariableDeclaration",
														"scope": 916,
														"src": "2211:18:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 871,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "2211:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 886,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 876,
																	"name": "_PERMIT_TYPEHASH",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 830,
																	"src": "2253:16:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 877,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 847,
																	"src": "2271:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 878,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 849,
																	"src": "2278:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 879,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 851,
																	"src": "2287:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"arguments": [
																		{
																			"id": 881,
																			"name": "owner",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 847,
																			"src": "2304:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 880,
																		"name": "_useNonce",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 973,
																		"src": "2294:9:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$_t_uint256_$",
																			"typeString": "function (address) returns (uint256)"
																		}
																	},
																	"id": 882,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2294:16:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 883,
																	"name": "deadline",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 853,
																	"src": "2312:8:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 874,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2242:3:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 875,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "2246:6:4",
																"memberName": "encode",
																"nodeType": "MemberAccess",
																"src": "2242:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 884,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2242:79:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 873,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "2232:9:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 885,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2232:90:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2211:111:4"
											},
											{
												"assignments": [
													888
												],
												"declarations": [
													{
														"constant": false,
														"id": 888,
														"mutability": "mutable",
														"name": "hash",
														"nameLocation": "2341:4:4",
														"nodeType": "VariableDeclaration",
														"scope": 916,
														"src": "2333:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 887,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "2333:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 892,
												"initialValue": {
													"arguments": [
														{
															"id": 890,
															"name": "structHash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 872,
															"src": "2365:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 889,
														"name": "_hashTypedDataV4",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2216,
														"src": "2348:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$",
															"typeString": "function (bytes32) view returns (bytes32)"
														}
													},
													"id": 891,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2348:28:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2333:43:4"
											},
											{
												"assignments": [
													894
												],
												"declarations": [
													{
														"constant": false,
														"id": 894,
														"mutability": "mutable",
														"name": "signer",
														"nameLocation": "2395:6:4",
														"nodeType": "VariableDeclaration",
														"scope": 916,
														"src": "2387:14:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 893,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2387:7:4",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 902,
												"initialValue": {
													"arguments": [
														{
															"id": 897,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 888,
															"src": "2418:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 898,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 855,
															"src": "2424:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 899,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 857,
															"src": "2427:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 900,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 859,
															"src": "2430:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 895,
															"name": "ECDSA",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2060,
															"src": "2404:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_ECDSA_$2060_$",
																"typeString": "type(library ECDSA)"
															}
														},
														"id": 896,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2410:7:4",
														"memberName": "recover",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1995,
														"src": "2404:13:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address)"
														}
													},
													"id": 901,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2404:28:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2387:45:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 906,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 904,
																"name": "signer",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 894,
																"src": "2450:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 905,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 847,
																"src": "2460:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2450:15:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332305065726d69743a20696e76616c6964207369676e6174757265",
															"id": 907,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2467:32:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124",
																"typeString": "literal_string \"ERC20Permit: invalid signature\""
															},
															"value": "ERC20Permit: invalid signature"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124",
																"typeString": "literal_string \"ERC20Permit: invalid signature\""
															}
														],
														"id": 903,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2442:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 908,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2442:58:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 909,
												"nodeType": "ExpressionStatement",
												"src": "2442:58:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 911,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 847,
															"src": "2520:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 912,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 849,
															"src": "2527:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 913,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 851,
															"src": "2536:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 910,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 658,
														"src": "2511:8:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 914,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2511:31:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 915,
												"nodeType": "ExpressionStatement",
												"src": "2511:31:4"
											}
										]
									},
									"documentation": {
										"id": 845,
										"nodeType": "StructuredDocumentation",
										"src": "1875:43:4",
										"text": " @inheritdoc IERC20Permit"
									},
									"functionSelector": "d505accf",
									"id": 917,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "1932:6:4",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 861,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2112:8:4"
									},
									"parameters": {
										"id": 860,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 847,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1956:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 917,
												"src": "1948:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 846,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1948:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 849,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1979:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 917,
												"src": "1971:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 848,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1971:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 851,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2004:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 917,
												"src": "1996:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 850,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1996:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 853,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "2027:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 917,
												"src": "2019:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 852,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2019:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 855,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "2051:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 917,
												"src": "2045:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 854,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "2045:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 857,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "2070:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 917,
												"src": "2062:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 856,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2062:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 859,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "2089:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 917,
												"src": "2081:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 858,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2081:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1938:158:4"
									},
									"returnParameters": {
										"id": 862,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2121:0:4"
									},
									"scope": 974,
									"src": "1923:626:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1028
									],
									"body": {
										"id": 932,
										"nodeType": "Block",
										"src": "2681:48:4",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"baseExpression": {
																"id": 926,
																"name": "_nonces",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 825,
																"src": "2698:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Counter_$1071_storage_$",
																	"typeString": "mapping(address => struct Counters.Counter storage ref)"
																}
															},
															"id": 928,
															"indexExpression": {
																"id": 927,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 920,
																"src": "2706:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "2698:14:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Counter_$1071_storage",
																"typeString": "struct Counters.Counter storage ref"
															}
														},
														"id": 929,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2713:7:4",
														"memberName": "current",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1083,
														"src": "2698:22:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Counter_$1071_storage_ptr_$returns$_t_uint256_$attached_to$_t_struct$_Counter_$1071_storage_ptr_$",
															"typeString": "function (struct Counters.Counter storage pointer) view returns (uint256)"
														}
													},
													"id": 930,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2698:24:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 925,
												"id": 931,
												"nodeType": "Return",
												"src": "2691:31:4"
											}
										]
									},
									"documentation": {
										"id": 918,
										"nodeType": "StructuredDocumentation",
										"src": "2555:43:4",
										"text": " @inheritdoc IERC20Permit"
									},
									"functionSelector": "7ecebe00",
									"id": 933,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "2612:6:4",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 922,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2654:8:4"
									},
									"parameters": {
										"id": 921,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 920,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2627:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 933,
												"src": "2619:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 919,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2619:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2618:15:4"
									},
									"returnParameters": {
										"id": 925,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 924,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 933,
												"src": "2672:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 923,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2672:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2671:9:4"
									},
									"scope": 974,
									"src": "2603:126:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1034
									],
									"body": {
										"id": 943,
										"nodeType": "Block",
										"src": "2905:44:4",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 940,
														"name": "_domainSeparatorV4",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2179,
														"src": "2922:18:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_bytes32_$",
															"typeString": "function () view returns (bytes32)"
														}
													},
													"id": 941,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2922:20:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 939,
												"id": 942,
												"nodeType": "Return",
												"src": "2915:27:4"
											}
										]
									},
									"documentation": {
										"id": 934,
										"nodeType": "StructuredDocumentation",
										"src": "2735:43:4",
										"text": " @inheritdoc IERC20Permit"
									},
									"functionSelector": "3644e515",
									"id": 944,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "2845:16:4",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 936,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2878:8:4"
									},
									"parameters": {
										"id": 935,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2861:2:4"
									},
									"returnParameters": {
										"id": 939,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 938,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 944,
												"src": "2896:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 937,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2896:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2895:9:4"
									},
									"scope": 974,
									"src": "2836:113:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 972,
										"nodeType": "Block",
										"src": "3157:126:4",
										"statements": [
											{
												"assignments": [
													956
												],
												"declarations": [
													{
														"constant": false,
														"id": 956,
														"mutability": "mutable",
														"name": "nonce",
														"nameLocation": "3192:5:4",
														"nodeType": "VariableDeclaration",
														"scope": 972,
														"src": "3167:30:4",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Counter_$1071_storage_ptr",
															"typeString": "struct Counters.Counter"
														},
														"typeName": {
															"id": 955,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 954,
																"name": "Counters.Counter",
																"nameLocations": [
																	"3167:8:4",
																	"3176:7:4"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1071,
																"src": "3167:16:4"
															},
															"referencedDeclaration": 1071,
															"src": "3167:16:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Counter_$1071_storage_ptr",
																"typeString": "struct Counters.Counter"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 960,
												"initialValue": {
													"baseExpression": {
														"id": 957,
														"name": "_nonces",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 825,
														"src": "3200:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Counter_$1071_storage_$",
															"typeString": "mapping(address => struct Counters.Counter storage ref)"
														}
													},
													"id": 959,
													"indexExpression": {
														"id": 958,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 947,
														"src": "3208:5:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3200:14:4",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Counter_$1071_storage",
														"typeString": "struct Counters.Counter storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3167:47:4"
											},
											{
												"expression": {
													"id": 965,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 961,
														"name": "current",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 950,
														"src": "3224:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"expression": {
																"id": 962,
																"name": "nonce",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 956,
																"src": "3234:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Counter_$1071_storage_ptr",
																	"typeString": "struct Counters.Counter storage pointer"
																}
															},
															"id": 963,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3240:7:4",
															"memberName": "current",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1083,
															"src": "3234:13:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_struct$_Counter_$1071_storage_ptr_$returns$_t_uint256_$attached_to$_t_struct$_Counter_$1071_storage_ptr_$",
																"typeString": "function (struct Counters.Counter storage pointer) view returns (uint256)"
															}
														},
														"id": 964,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3234:15:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3224:25:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 966,
												"nodeType": "ExpressionStatement",
												"src": "3224:25:4"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"id": 967,
															"name": "nonce",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 956,
															"src": "3259:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Counter_$1071_storage_ptr",
																"typeString": "struct Counters.Counter storage pointer"
															}
														},
														"id": 969,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3265:9:4",
														"memberName": "increment",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1097,
														"src": "3259:15:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Counter_$1071_storage_ptr_$returns$__$attached_to$_t_struct$_Counter_$1071_storage_ptr_$",
															"typeString": "function (struct Counters.Counter storage pointer)"
														}
													},
													"id": 970,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3259:17:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 971,
												"nodeType": "ExpressionStatement",
												"src": "3259:17:4"
											}
										]
									},
									"documentation": {
										"id": 945,
										"nodeType": "StructuredDocumentation",
										"src": "2955:120:4",
										"text": " @dev \"Consume a nonce\": return the current value and increment.\n _Available since v4.1._"
									},
									"id": 973,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_useNonce",
									"nameLocation": "3089:9:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 948,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 947,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3107:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 973,
												"src": "3099:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 946,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3099:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3098:15:4"
									},
									"returnParameters": {
										"id": 951,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 950,
												"mutability": "mutable",
												"name": "current",
												"nameLocation": "3148:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 973,
												"src": "3140:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 949,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3140:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3139:17:4"
									},
									"scope": 974,
									"src": "3080:203:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 975,
							"src": "853:2432:4",
							"usedErrors": [
								1152,
								1154
							]
						}
					],
					"src": "122:3164:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
					"exportedSymbols": {
						"IERC20": [
							802
						],
						"IERC20Metadata": [
							999
						]
					},
					"id": 1000,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 976,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "110:23:5"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 977,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1000,
							"sourceUnit": 803,
							"src": "135:23:5",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 979,
										"name": "IERC20",
										"nameLocations": [
											"305:6:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 802,
										"src": "305:6:5"
									},
									"id": 980,
									"nodeType": "InheritanceSpecifier",
									"src": "305:6:5"
								}
							],
							"canonicalName": "IERC20Metadata",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 978,
								"nodeType": "StructuredDocumentation",
								"src": "160:116:5",
								"text": " @dev Interface for the optional metadata functions from the ERC20 standard.\n _Available since v4.1._"
							},
							"fullyImplemented": false,
							"id": 999,
							"linearizedBaseContracts": [
								999,
								802
							],
							"name": "IERC20Metadata",
							"nameLocation": "287:14:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 981,
										"nodeType": "StructuredDocumentation",
										"src": "318:54:5",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 986,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "386:4:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 982,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "390:2:5"
									},
									"returnParameters": {
										"id": 985,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 984,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 986,
												"src": "416:13:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 983,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "416:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "415:15:5"
									},
									"scope": 999,
									"src": "377:54:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 987,
										"nodeType": "StructuredDocumentation",
										"src": "437:56:5",
										"text": " @dev Returns the symbol of the token."
									},
									"functionSelector": "95d89b41",
									"id": 992,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "507:6:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 988,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "513:2:5"
									},
									"returnParameters": {
										"id": 991,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 990,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 992,
												"src": "539:13:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 989,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "539:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "538:15:5"
									},
									"scope": 999,
									"src": "498:56:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 993,
										"nodeType": "StructuredDocumentation",
										"src": "560:65:5",
										"text": " @dev Returns the decimals places of the token."
									},
									"functionSelector": "313ce567",
									"id": 998,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "639:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 994,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "647:2:5"
									},
									"returnParameters": {
										"id": 997,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 996,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 998,
												"src": "673:5:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 995,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "673:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "672:7:5"
									},
									"scope": 999,
									"src": "630:50:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1000,
							"src": "277:405:5",
							"usedErrors": []
						}
					],
					"src": "110:573:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
					"exportedSymbols": {
						"IERC20Permit": [
							1035
						]
					},
					"id": 1036,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1001,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "123:23:6"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Permit",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1002,
								"nodeType": "StructuredDocumentation",
								"src": "148:1963:6",
								"text": " @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all.\n ==== Security Considerations\n There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n considered as an intention to spend the allowance in any specific way. The second is that because permits have\n built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n generally recommended is:\n ```solidity\n function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n     doThing(..., value);\n }\n function doThing(..., uint256 value) public {\n     token.safeTransferFrom(msg.sender, address(this), value);\n     ...\n }\n ```\n Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n {SafeERC20-safeTransferFrom}).\n Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n contracts should have entry points that don't rely on permit."
							},
							"fullyImplemented": false,
							"id": 1035,
							"linearizedBaseContracts": [
								1035
							],
							"name": "IERC20Permit",
							"nameLocation": "2122:12:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1003,
										"nodeType": "StructuredDocumentation",
										"src": "2141:850:6",
										"text": " @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section].\n CAUTION: See Security Considerations above."
									},
									"functionSelector": "d505accf",
									"id": 1020,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "3005:6:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1018,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1005,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3029:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1020,
												"src": "3021:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1004,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3021:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1007,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3052:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 1020,
												"src": "3044:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1006,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3044:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1009,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3077:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1020,
												"src": "3069:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1008,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3069:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1011,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "3100:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 1020,
												"src": "3092:16:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1010,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3092:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1013,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "3124:1:6",
												"nodeType": "VariableDeclaration",
												"scope": 1020,
												"src": "3118:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1012,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3118:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1015,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3143:1:6",
												"nodeType": "VariableDeclaration",
												"scope": 1020,
												"src": "3135:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1014,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3135:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1017,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "3162:1:6",
												"nodeType": "VariableDeclaration",
												"scope": 1020,
												"src": "3154:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1016,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3154:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3011:158:6"
									},
									"returnParameters": {
										"id": 1019,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3178:0:6"
									},
									"scope": 1035,
									"src": "2996:183:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1021,
										"nodeType": "StructuredDocumentation",
										"src": "3185:294:6",
										"text": " @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."
									},
									"functionSelector": "7ecebe00",
									"id": 1028,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "3493:6:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1024,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1023,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3508:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1028,
												"src": "3500:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1022,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3500:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3499:15:6"
									},
									"returnParameters": {
										"id": 1027,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1026,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1028,
												"src": "3538:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1025,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3538:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3537:9:6"
									},
									"scope": 1035,
									"src": "3484:63:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1029,
										"nodeType": "StructuredDocumentation",
										"src": "3553:128:6",
										"text": " @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
									},
									"functionSelector": "3644e515",
									"id": 1034,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "3748:16:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1030,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3764:2:6"
									},
									"returnParameters": {
										"id": 1033,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1032,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1034,
												"src": "3790:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1031,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3790:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3789:9:6"
									},
									"scope": 1035,
									"src": "3739:60:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1036,
							"src": "2112:1689:6",
							"usedErrors": []
						}
					],
					"src": "123:3679:6"
				},
				"id": 6
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							1065
						]
					},
					"id": 1066,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1037,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "101:23:7"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1038,
								"nodeType": "StructuredDocumentation",
								"src": "126:496:7",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 1065,
							"linearizedBaseContracts": [
								1065
							],
							"name": "Context",
							"nameLocation": "641:7:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1046,
										"nodeType": "Block",
										"src": "717:34:7",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1043,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "734:3:7",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1044,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "738:6:7",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "734:10:7",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1042,
												"id": 1045,
												"nodeType": "Return",
												"src": "727:17:7"
											}
										]
									},
									"id": 1047,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "664:10:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1039,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "674:2:7"
									},
									"returnParameters": {
										"id": 1042,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1041,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1047,
												"src": "708:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1040,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "708:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "707:9:7"
									},
									"scope": 1065,
									"src": "655:96:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1055,
										"nodeType": "Block",
										"src": "824:32:7",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1052,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "841:3:7",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1053,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "845:4:7",
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "841:8:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 1051,
												"id": 1054,
												"nodeType": "Return",
												"src": "834:15:7"
											}
										]
									},
									"id": 1056,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "766:8:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1048,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "774:2:7"
									},
									"returnParameters": {
										"id": 1051,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1050,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1056,
												"src": "808:14:7",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1049,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "808:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "807:16:7"
									},
									"scope": 1065,
									"src": "757:99:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1063,
										"nodeType": "Block",
										"src": "934:25:7",
										"statements": [
											{
												"expression": {
													"hexValue": "30",
													"id": 1061,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "951:1:7",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"functionReturnParameters": 1060,
												"id": 1062,
												"nodeType": "Return",
												"src": "944:8:7"
											}
										]
									},
									"id": 1064,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_contextSuffixLength",
									"nameLocation": "871:20:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1057,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "891:2:7"
									},
									"returnParameters": {
										"id": 1060,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1059,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1064,
												"src": "925:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1058,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "925:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "924:9:7"
									},
									"scope": 1065,
									"src": "862:97:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1066,
							"src": "623:338:7",
							"usedErrors": []
						}
					],
					"src": "101:861:7"
				},
				"id": 7
			},
			"@openzeppelin/contracts/utils/Counters.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Counters.sol",
					"exportedSymbols": {
						"Counters": [
							1139
						]
					},
					"id": 1140,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1067,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "87:23:8"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Counters",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1068,
								"nodeType": "StructuredDocumentation",
								"src": "112:311:8",
								"text": " @title Counters\n @author Matt Condon (@shrugs)\n @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n of elements in a mapping, issuing ERC721 ids, or counting request ids.\n Include with `using Counters for Counters.Counter;`"
							},
							"fullyImplemented": true,
							"id": 1139,
							"linearizedBaseContracts": [
								1139
							],
							"name": "Counters",
							"nameLocation": "432:8:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "Counters.Counter",
									"id": 1071,
									"members": [
										{
											"constant": false,
											"id": 1070,
											"mutability": "mutable",
											"name": "_value",
											"nameLocation": "794:6:8",
											"nodeType": "VariableDeclaration",
											"scope": 1071,
											"src": "786:14:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1069,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "786:7:8",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Counter",
									"nameLocation": "454:7:8",
									"nodeType": "StructDefinition",
									"scope": 1139,
									"src": "447:374:8",
									"visibility": "public"
								},
								{
									"body": {
										"id": 1082,
										"nodeType": "Block",
										"src": "901:38:8",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1079,
														"name": "counter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1074,
														"src": "918:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Counter_$1071_storage_ptr",
															"typeString": "struct Counters.Counter storage pointer"
														}
													},
													"id": 1080,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "926:6:8",
													"memberName": "_value",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1070,
													"src": "918:14:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1078,
												"id": 1081,
												"nodeType": "Return",
												"src": "911:21:8"
											}
										]
									},
									"id": 1083,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "current",
									"nameLocation": "836:7:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1075,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1074,
												"mutability": "mutable",
												"name": "counter",
												"nameLocation": "860:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1083,
												"src": "844:23:8",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Counter_$1071_storage_ptr",
													"typeString": "struct Counters.Counter"
												},
												"typeName": {
													"id": 1073,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1072,
														"name": "Counter",
														"nameLocations": [
															"844:7:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1071,
														"src": "844:7:8"
													},
													"referencedDeclaration": 1071,
													"src": "844:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Counter_$1071_storage_ptr",
														"typeString": "struct Counters.Counter"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "843:25:8"
									},
									"returnParameters": {
										"id": 1078,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1077,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1083,
												"src": "892:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1076,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "892:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "891:9:8"
									},
									"scope": 1139,
									"src": "827:112:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1096,
										"nodeType": "Block",
										"src": "998:70:8",
										"statements": [
											{
												"id": 1095,
												"nodeType": "UncheckedBlock",
												"src": "1008:54:8",
												"statements": [
													{
														"expression": {
															"id": 1093,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"id": 1089,
																	"name": "counter",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1086,
																	"src": "1032:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Counter_$1071_storage_ptr",
																		"typeString": "struct Counters.Counter storage pointer"
																	}
																},
																"id": 1091,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberLocation": "1040:6:8",
																"memberName": "_value",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1070,
																"src": "1032:14:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"hexValue": "31",
																"id": 1092,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1050:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "1032:19:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1094,
														"nodeType": "ExpressionStatement",
														"src": "1032:19:8"
													}
												]
											}
										]
									},
									"id": 1097,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "increment",
									"nameLocation": "954:9:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1087,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1086,
												"mutability": "mutable",
												"name": "counter",
												"nameLocation": "980:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1097,
												"src": "964:23:8",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Counter_$1071_storage_ptr",
													"typeString": "struct Counters.Counter"
												},
												"typeName": {
													"id": 1085,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1084,
														"name": "Counter",
														"nameLocations": [
															"964:7:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1071,
														"src": "964:7:8"
													},
													"referencedDeclaration": 1071,
													"src": "964:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Counter_$1071_storage_ptr",
														"typeString": "struct Counters.Counter"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "963:25:8"
									},
									"returnParameters": {
										"id": 1088,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "998:0:8"
									},
									"scope": 1139,
									"src": "945:123:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1124,
										"nodeType": "Block",
										"src": "1127:176:8",
										"statements": [
											{
												"assignments": [
													1104
												],
												"declarations": [
													{
														"constant": false,
														"id": 1104,
														"mutability": "mutable",
														"name": "value",
														"nameLocation": "1145:5:8",
														"nodeType": "VariableDeclaration",
														"scope": 1124,
														"src": "1137:13:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1103,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1137:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1107,
												"initialValue": {
													"expression": {
														"id": 1105,
														"name": "counter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1100,
														"src": "1153:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Counter_$1071_storage_ptr",
															"typeString": "struct Counters.Counter storage pointer"
														}
													},
													"id": 1106,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "1161:6:8",
													"memberName": "_value",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1070,
													"src": "1153:14:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1137:30:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1111,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1109,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1104,
																"src": "1185:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1110,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1193:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1185:9:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "436f756e7465723a2064656372656d656e74206f766572666c6f77",
															"id": 1112,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1196:29:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f",
																"typeString": "literal_string \"Counter: decrement overflow\""
															},
															"value": "Counter: decrement overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f",
																"typeString": "literal_string \"Counter: decrement overflow\""
															}
														],
														"id": 1108,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1177:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1113,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1177:49:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1114,
												"nodeType": "ExpressionStatement",
												"src": "1177:49:8"
											},
											{
												"id": 1123,
												"nodeType": "UncheckedBlock",
												"src": "1236:61:8",
												"statements": [
													{
														"expression": {
															"id": 1121,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"id": 1115,
																	"name": "counter",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1100,
																	"src": "1260:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Counter_$1071_storage_ptr",
																		"typeString": "struct Counters.Counter storage pointer"
																	}
																},
																"id": 1117,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberLocation": "1268:6:8",
																"memberName": "_value",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1070,
																"src": "1260:14:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1120,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1118,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1104,
																	"src": "1277:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1119,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1285:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "1277:9:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1260:26:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1122,
														"nodeType": "ExpressionStatement",
														"src": "1260:26:8"
													}
												]
											}
										]
									},
									"id": 1125,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decrement",
									"nameLocation": "1083:9:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1101,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1100,
												"mutability": "mutable",
												"name": "counter",
												"nameLocation": "1109:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1125,
												"src": "1093:23:8",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Counter_$1071_storage_ptr",
													"typeString": "struct Counters.Counter"
												},
												"typeName": {
													"id": 1099,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1098,
														"name": "Counter",
														"nameLocations": [
															"1093:7:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1071,
														"src": "1093:7:8"
													},
													"referencedDeclaration": 1071,
													"src": "1093:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Counter_$1071_storage_ptr",
														"typeString": "struct Counters.Counter"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1092:25:8"
									},
									"returnParameters": {
										"id": 1102,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1127:0:8"
									},
									"scope": 1139,
									"src": "1074:229:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1137,
										"nodeType": "Block",
										"src": "1358:35:8",
										"statements": [
											{
												"expression": {
													"id": 1135,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1131,
															"name": "counter",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1128,
															"src": "1368:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Counter_$1071_storage_ptr",
																"typeString": "struct Counters.Counter storage pointer"
															}
														},
														"id": 1133,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "1376:6:8",
														"memberName": "_value",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1070,
														"src": "1368:14:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 1134,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1385:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1368:18:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1136,
												"nodeType": "ExpressionStatement",
												"src": "1368:18:8"
											}
										]
									},
									"id": 1138,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "reset",
									"nameLocation": "1318:5:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1129,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1128,
												"mutability": "mutable",
												"name": "counter",
												"nameLocation": "1340:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1138,
												"src": "1324:23:8",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Counter_$1071_storage_ptr",
													"typeString": "struct Counters.Counter"
												},
												"typeName": {
													"id": 1127,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1126,
														"name": "Counter",
														"nameLocations": [
															"1324:7:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1071,
														"src": "1324:7:8"
													},
													"referencedDeclaration": 1071,
													"src": "1324:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Counter_$1071_storage_ptr",
														"typeString": "struct Counters.Counter"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1323:25:8"
									},
									"returnParameters": {
										"id": 1130,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1358:0:8"
									},
									"scope": 1139,
									"src": "1309:84:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1140,
							"src": "424:971:8",
							"usedErrors": []
						}
					],
					"src": "87:1309:8"
				},
				"id": 8
			},
			"@openzeppelin/contracts/utils/ShortStrings.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/ShortStrings.sol",
					"exportedSymbols": {
						"ShortString": [
							1144
						],
						"ShortStrings": [
							1355
						],
						"StorageSlot": [
							1465
						]
					},
					"id": 1356,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1141,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".8"
							],
							"nodeType": "PragmaDirective",
							"src": "106:23:9"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/StorageSlot.sol",
							"file": "./StorageSlot.sol",
							"id": 1142,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1356,
							"sourceUnit": 1466,
							"src": "131:27:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"canonicalName": "ShortString",
							"id": 1144,
							"name": "ShortString",
							"nameLocation": "333:11:9",
							"nodeType": "UserDefinedValueTypeDefinition",
							"src": "328:28:9",
							"underlyingType": {
								"id": 1143,
								"name": "bytes32",
								"nodeType": "ElementaryTypeName",
								"src": "348:7:9",
								"typeDescriptions": {
									"typeIdentifier": "t_bytes32",
									"typeString": "bytes32"
								}
							}
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ShortStrings",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1145,
								"nodeType": "StructuredDocumentation",
								"src": "358:876:9",
								"text": " @dev This library provides functions to convert short memory strings\n into a `ShortString` type that can be used as an immutable variable.\n Strings of arbitrary length can be optimized using this library if\n they are short enough (up to 31 bytes) by packing them with their\n length (1 byte) in a single EVM word (32 bytes). Additionally, a\n fallback mechanism can be used for every other case.\n Usage example:\n ```solidity\n contract Named {\n     using ShortStrings for *;\n     ShortString private immutable _name;\n     string private _nameFallback;\n     constructor(string memory contractName) {\n         _name = contractName.toShortStringWithFallback(_nameFallback);\n     }\n     function name() external view returns (string memory) {\n         return _name.toStringWithFallback(_nameFallback);\n     }\n }\n ```"
							},
							"fullyImplemented": true,
							"id": 1355,
							"linearizedBaseContracts": [
								1355
							],
							"name": "ShortStrings",
							"nameLocation": "1243:12:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 1148,
									"mutability": "constant",
									"name": "_FALLBACK_SENTINEL",
									"nameLocation": "1350:18:9",
									"nodeType": "VariableDeclaration",
									"scope": 1355,
									"src": "1325:112:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 1146,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "1325:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030304646",
										"id": 1147,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1371:66:9",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_255_by_1",
											"typeString": "int_const 255"
										},
										"value": "0x00000000000000000000000000000000000000000000000000000000000000FF"
									},
									"visibility": "private"
								},
								{
									"errorSelector": "305a27a9",
									"id": 1152,
									"name": "StringTooLong",
									"nameLocation": "1450:13:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1151,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1150,
												"mutability": "mutable",
												"name": "str",
												"nameLocation": "1471:3:9",
												"nodeType": "VariableDeclaration",
												"scope": 1152,
												"src": "1464:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1149,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1464:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1463:12:9"
									},
									"src": "1444:32:9"
								},
								{
									"errorSelector": "b3512b0c",
									"id": 1154,
									"name": "InvalidShortString",
									"nameLocation": "1487:18:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1153,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1505:2:9"
									},
									"src": "1481:27:9"
								},
								{
									"body": {
										"id": 1197,
										"nodeType": "Block",
										"src": "1767:208:9",
										"statements": [
											{
												"assignments": [
													1164
												],
												"declarations": [
													{
														"constant": false,
														"id": 1164,
														"mutability": "mutable",
														"name": "bstr",
														"nameLocation": "1790:4:9",
														"nodeType": "VariableDeclaration",
														"scope": 1197,
														"src": "1777:17:9",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1163,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1777:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1169,
												"initialValue": {
													"arguments": [
														{
															"id": 1167,
															"name": "str",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1157,
															"src": "1803:3:9",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1166,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "1797:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
															"typeString": "type(bytes storage pointer)"
														},
														"typeName": {
															"id": 1165,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1797:5:9",
															"typeDescriptions": {}
														}
													},
													"id": 1168,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1797:10:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1777:30:9"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1173,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1170,
															"name": "bstr",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1164,
															"src": "1821:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1171,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1826:6:9",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1821:11:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "3331",
														"id": 1172,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1835:2:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_31_by_1",
															"typeString": "int_const 31"
														},
														"value": "31"
													},
													"src": "1821:16:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1179,
												"nodeType": "IfStatement",
												"src": "1817:72:9",
												"trueBody": {
													"id": 1178,
													"nodeType": "Block",
													"src": "1839:50:9",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1175,
																		"name": "str",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1157,
																		"src": "1874:3:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1174,
																	"name": "StringTooLong",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1152,
																	"src": "1860:13:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (string memory) pure"
																	}
																},
																"id": 1176,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1860:18:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1177,
															"nodeType": "RevertStatement",
															"src": "1853:25:9"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1193,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"id": 1188,
																						"name": "bstr",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1164,
																						"src": "1946:4:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes_memory_ptr",
																							"typeString": "bytes memory"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_bytes_memory_ptr",
																							"typeString": "bytes memory"
																						}
																					],
																					"id": 1187,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "1938:7:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_bytes32_$",
																						"typeString": "type(bytes32)"
																					},
																					"typeName": {
																						"id": 1186,
																						"name": "bytes32",
																						"nodeType": "ElementaryTypeName",
																						"src": "1938:7:9",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 1189,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "1938:13:9",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			],
																			"id": 1185,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "1930:7:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_uint256_$",
																				"typeString": "type(uint256)"
																			},
																			"typeName": {
																				"id": 1184,
																				"name": "uint256",
																				"nodeType": "ElementaryTypeName",
																				"src": "1930:7:9",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1190,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1930:22:9",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "|",
																	"rightExpression": {
																		"expression": {
																			"id": 1191,
																			"name": "bstr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1164,
																			"src": "1955:4:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		},
																		"id": 1192,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "1960:6:9",
																		"memberName": "length",
																		"nodeType": "MemberAccess",
																		"src": "1955:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1930:36:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1183,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1922:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 1182,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "1922:7:9",
																	"typeDescriptions": {}
																}
															},
															"id": 1194,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1922:45:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 1180,
															"name": "ShortString",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1144,
															"src": "1905:11:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_userDefinedValueType$_ShortString_$1144_$",
																"typeString": "type(ShortString)"
															}
														},
														"id": 1181,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "1917:4:9",
														"memberName": "wrap",
														"nodeType": "MemberAccess",
														"src": "1905:16:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_wrap_pure$_t_bytes32_$returns$_t_userDefinedValueType$_ShortString_$1144_$",
															"typeString": "function (bytes32) pure returns (ShortString)"
														}
													},
													"id": 1195,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1905:63:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1144",
														"typeString": "ShortString"
													}
												},
												"functionReturnParameters": 1162,
												"id": 1196,
												"nodeType": "Return",
												"src": "1898:70:9"
											}
										]
									},
									"documentation": {
										"id": 1155,
										"nodeType": "StructuredDocumentation",
										"src": "1514:170:9",
										"text": " @dev Encode a string of at most 31 chars into a `ShortString`.\n This will trigger a `StringTooLong` error is the input string is too long."
									},
									"id": 1198,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toShortString",
									"nameLocation": "1698:13:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1158,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1157,
												"mutability": "mutable",
												"name": "str",
												"nameLocation": "1726:3:9",
												"nodeType": "VariableDeclaration",
												"scope": 1198,
												"src": "1712:17:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1156,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1712:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1711:19:9"
									},
									"returnParameters": {
										"id": 1162,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1161,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1198,
												"src": "1754:11:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_ShortString_$1144",
													"typeString": "ShortString"
												},
												"typeName": {
													"id": 1160,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1159,
														"name": "ShortString",
														"nameLocations": [
															"1754:11:9"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1144,
														"src": "1754:11:9"
													},
													"referencedDeclaration": 1144,
													"src": "1754:11:9",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1144",
														"typeString": "ShortString"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1753:13:9"
									},
									"scope": 1355,
									"src": "1689:286:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1223,
										"nodeType": "Block",
										"src": "2133:331:9",
										"statements": [
											{
												"assignments": [
													1208
												],
												"declarations": [
													{
														"constant": false,
														"id": 1208,
														"mutability": "mutable",
														"name": "len",
														"nameLocation": "2151:3:9",
														"nodeType": "VariableDeclaration",
														"scope": 1223,
														"src": "2143:11:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1207,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2143:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1212,
												"initialValue": {
													"arguments": [
														{
															"id": 1210,
															"name": "sstr",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1202,
															"src": "2168:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_userDefinedValueType$_ShortString_$1144",
																"typeString": "ShortString"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_userDefinedValueType$_ShortString_$1144",
																"typeString": "ShortString"
															}
														],
														"id": 1209,
														"name": "byteLength",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1256,
														"src": "2157:10:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_userDefinedValueType$_ShortString_$1144_$returns$_t_uint256_$",
															"typeString": "function (ShortString) pure returns (uint256)"
														}
													},
													"id": 1211,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2157:16:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2143:30:9"
											},
											{
												"assignments": [
													1214
												],
												"declarations": [
													{
														"constant": false,
														"id": 1214,
														"mutability": "mutable",
														"name": "str",
														"nameLocation": "2275:3:9",
														"nodeType": "VariableDeclaration",
														"scope": 1223,
														"src": "2261:17:9",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string"
														},
														"typeName": {
															"id": 1213,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "2261:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage_ptr",
																"typeString": "string"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1219,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "3332",
															"id": 1217,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2292:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_32_by_1",
																"typeString": "int_const 32"
															},
															"value": "32"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_rational_32_by_1",
																"typeString": "int_const 32"
															}
														],
														"id": 1216,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "2281:10:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
															"typeString": "function (uint256) pure returns (string memory)"
														},
														"typeName": {
															"id": 1215,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "2285:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage_ptr",
																"typeString": "string"
															}
														}
													},
													"id": 1218,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2281:14:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2261:34:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2357:81:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "str",
																		"nodeType": "YulIdentifier",
																		"src": "2378:3:9"
																	},
																	{
																		"name": "len",
																		"nodeType": "YulIdentifier",
																		"src": "2383:3:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2371:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2371:16:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2371:16:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "str",
																				"nodeType": "YulIdentifier",
																				"src": "2411:3:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2416:4:9",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2407:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2407:14:9"
																	},
																	{
																		"name": "sstr",
																		"nodeType": "YulIdentifier",
																		"src": "2423:4:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2400:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2400:28:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2400:28:9"
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "paris",
												"externalReferences": [
													{
														"declaration": 1208,
														"isOffset": false,
														"isSlot": false,
														"src": "2383:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1202,
														"isOffset": false,
														"isSlot": false,
														"src": "2423:4:9",
														"valueSize": 1
													},
													{
														"declaration": 1214,
														"isOffset": false,
														"isSlot": false,
														"src": "2378:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1214,
														"isOffset": false,
														"isSlot": false,
														"src": "2411:3:9",
														"valueSize": 1
													}
												],
												"id": 1220,
												"nodeType": "InlineAssembly",
												"src": "2348:90:9"
											},
											{
												"expression": {
													"id": 1221,
													"name": "str",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1214,
													"src": "2454:3:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1206,
												"id": 1222,
												"nodeType": "Return",
												"src": "2447:10:9"
											}
										]
									},
									"documentation": {
										"id": 1199,
										"nodeType": "StructuredDocumentation",
										"src": "1981:73:9",
										"text": " @dev Decode a `ShortString` back to a \"normal\" string."
									},
									"id": 1224,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toString",
									"nameLocation": "2068:8:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1203,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1202,
												"mutability": "mutable",
												"name": "sstr",
												"nameLocation": "2089:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 1224,
												"src": "2077:16:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_ShortString_$1144",
													"typeString": "ShortString"
												},
												"typeName": {
													"id": 1201,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1200,
														"name": "ShortString",
														"nameLocations": [
															"2077:11:9"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1144,
														"src": "2077:11:9"
													},
													"referencedDeclaration": 1144,
													"src": "2077:11:9",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1144",
														"typeString": "ShortString"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2076:18:9"
									},
									"returnParameters": {
										"id": 1206,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1205,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1224,
												"src": "2118:13:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1204,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2118:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2117:15:9"
									},
									"scope": 1355,
									"src": "2059:405:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1255,
										"nodeType": "Block",
										"src": "2606:175:9",
										"statements": [
											{
												"assignments": [
													1234
												],
												"declarations": [
													{
														"constant": false,
														"id": 1234,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "2624:6:9",
														"nodeType": "VariableDeclaration",
														"scope": 1255,
														"src": "2616:14:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1233,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2616:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1244,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1243,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 1239,
																		"name": "sstr",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1228,
																		"src": "2660:4:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_userDefinedValueType$_ShortString_$1144",
																			"typeString": "ShortString"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_userDefinedValueType$_ShortString_$1144",
																			"typeString": "ShortString"
																		}
																	],
																	"expression": {
																		"id": 1237,
																		"name": "ShortString",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1144,
																		"src": "2641:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_userDefinedValueType$_ShortString_$1144_$",
																			"typeString": "type(ShortString)"
																		}
																	},
																	"id": 1238,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "2653:6:9",
																	"memberName": "unwrap",
																	"nodeType": "MemberAccess",
																	"src": "2641:18:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_unwrap_pure$_t_userDefinedValueType$_ShortString_$1144_$returns$_t_bytes32_$",
																		"typeString": "function (ShortString) pure returns (bytes32)"
																	}
																},
																"id": 1240,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2641:24:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 1236,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "2633:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 1235,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "2633:7:9",
																"typeDescriptions": {}
															}
														},
														"id": 1241,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2633:33:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&",
													"rightExpression": {
														"hexValue": "30784646",
														"id": 1242,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2669:4:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_255_by_1",
															"typeString": "int_const 255"
														},
														"value": "0xFF"
													},
													"src": "2633:40:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2616:57:9"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1247,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1245,
														"name": "result",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1234,
														"src": "2687:6:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "3331",
														"id": 1246,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2696:2:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_31_by_1",
															"typeString": "int_const 31"
														},
														"value": "31"
													},
													"src": "2687:11:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1252,
												"nodeType": "IfStatement",
												"src": "2683:69:9",
												"trueBody": {
													"id": 1251,
													"nodeType": "Block",
													"src": "2700:52:9",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1248,
																	"name": "InvalidShortString",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1154,
																	"src": "2721:18:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1249,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2721:20:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1250,
															"nodeType": "RevertStatement",
															"src": "2714:27:9"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1253,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1234,
													"src": "2768:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1232,
												"id": 1254,
												"nodeType": "Return",
												"src": "2761:13:9"
											}
										]
									},
									"documentation": {
										"id": 1225,
										"nodeType": "StructuredDocumentation",
										"src": "2470:61:9",
										"text": " @dev Return the length of a `ShortString`."
									},
									"id": 1256,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "byteLength",
									"nameLocation": "2545:10:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1229,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1228,
												"mutability": "mutable",
												"name": "sstr",
												"nameLocation": "2568:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 1256,
												"src": "2556:16:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_ShortString_$1144",
													"typeString": "ShortString"
												},
												"typeName": {
													"id": 1227,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1226,
														"name": "ShortString",
														"nameLocations": [
															"2556:11:9"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1144,
														"src": "2556:11:9"
													},
													"referencedDeclaration": 1144,
													"src": "2556:11:9",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1144",
														"typeString": "ShortString"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2555:18:9"
									},
									"returnParameters": {
										"id": 1232,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1231,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1256,
												"src": "2597:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1230,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2597:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2596:9:9"
									},
									"scope": 1355,
									"src": "2536:245:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1295,
										"nodeType": "Block",
										"src": "3004:232:9",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1273,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 1269,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1259,
																	"src": "3024:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 1268,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3018:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																	"typeString": "type(bytes storage pointer)"
																},
																"typeName": {
																	"id": 1267,
																	"name": "bytes",
																	"nodeType": "ElementaryTypeName",
																	"src": "3018:5:9",
																	"typeDescriptions": {}
																}
															},
															"id": 1270,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3018:12:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1271,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3031:6:9",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "3018:19:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"hexValue": "3332",
														"id": 1272,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3040:2:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_32_by_1",
															"typeString": "int_const 32"
														},
														"value": "32"
													},
													"src": "3018:24:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1293,
													"nodeType": "Block",
													"src": "3102:128:9",
													"statements": [
														{
															"expression": {
																"id": 1286,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"arguments": [
																			{
																				"id": 1282,
																				"name": "store",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1261,
																				"src": "3142:5:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_string_storage_ptr",
																					"typeString": "string storage pointer"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_string_storage_ptr",
																					"typeString": "string storage pointer"
																				}
																			],
																			"expression": {
																				"id": 1279,
																				"name": "StorageSlot",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1465,
																				"src": "3116:11:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_StorageSlot_$1465_$",
																					"typeString": "type(library StorageSlot)"
																				}
																			},
																			"id": 1281,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "3128:13:9",
																			"memberName": "getStringSlot",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 1442,
																			"src": "3116:25:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_string_storage_ptr_$returns$_t_struct$_StringSlot_$1373_storage_ptr_$",
																				"typeString": "function (string storage pointer) pure returns (struct StorageSlot.StringSlot storage pointer)"
																			}
																		},
																		"id": 1283,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3116:32:9",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_StringSlot_$1373_storage_ptr",
																			"typeString": "struct StorageSlot.StringSlot storage pointer"
																		}
																	},
																	"id": 1284,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "3149:5:9",
																	"memberName": "value",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1372,
																	"src": "3116:38:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_storage",
																		"typeString": "string storage ref"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"id": 1285,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1259,
																	"src": "3157:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																},
																"src": "3116:46:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_storage",
																	"typeString": "string storage ref"
																}
															},
															"id": 1287,
															"nodeType": "ExpressionStatement",
															"src": "3116:46:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1290,
																		"name": "_FALLBACK_SENTINEL",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1148,
																		"src": "3200:18:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	],
																	"expression": {
																		"id": 1288,
																		"name": "ShortString",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1144,
																		"src": "3183:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_userDefinedValueType$_ShortString_$1144_$",
																			"typeString": "type(ShortString)"
																		}
																	},
																	"id": 1289,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "3195:4:9",
																	"memberName": "wrap",
																	"nodeType": "MemberAccess",
																	"src": "3183:16:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_wrap_pure$_t_bytes32_$returns$_t_userDefinedValueType$_ShortString_$1144_$",
																		"typeString": "function (bytes32) pure returns (ShortString)"
																	}
																},
																"id": 1291,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3183:36:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_userDefinedValueType$_ShortString_$1144",
																	"typeString": "ShortString"
																}
															},
															"functionReturnParameters": 1266,
															"id": 1292,
															"nodeType": "Return",
															"src": "3176:43:9"
														}
													]
												},
												"id": 1294,
												"nodeType": "IfStatement",
												"src": "3014:216:9",
												"trueBody": {
													"id": 1278,
													"nodeType": "Block",
													"src": "3044:52:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1275,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1259,
																		"src": "3079:5:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1274,
																	"name": "toShortString",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1198,
																	"src": "3065:13:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$returns$_t_userDefinedValueType$_ShortString_$1144_$",
																		"typeString": "function (string memory) pure returns (ShortString)"
																	}
																},
																"id": 1276,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3065:20:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_userDefinedValueType$_ShortString_$1144",
																	"typeString": "ShortString"
																}
															},
															"functionReturnParameters": 1266,
															"id": 1277,
															"nodeType": "Return",
															"src": "3058:27:9"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1257,
										"nodeType": "StructuredDocumentation",
										"src": "2787:103:9",
										"text": " @dev Encode a string into a `ShortString`, or write it to storage if it is too long."
									},
									"id": 1296,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toShortStringWithFallback",
									"nameLocation": "2904:25:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1262,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1259,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2944:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1296,
												"src": "2930:19:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1258,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2930:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1261,
												"mutability": "mutable",
												"name": "store",
												"nameLocation": "2966:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1296,
												"src": "2951:20:9",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1260,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2951:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2929:43:9"
									},
									"returnParameters": {
										"id": 1266,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1265,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1296,
												"src": "2991:11:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_ShortString_$1144",
													"typeString": "ShortString"
												},
												"typeName": {
													"id": 1264,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1263,
														"name": "ShortString",
														"nameLocations": [
															"2991:11:9"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1144,
														"src": "2991:11:9"
													},
													"referencedDeclaration": 1144,
													"src": "2991:11:9",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1144",
														"typeString": "ShortString"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2990:13:9"
									},
									"scope": 1355,
									"src": "2895:341:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1322,
										"nodeType": "Block",
										"src": "3476:159:9",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 1312,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1309,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1300,
																"src": "3509:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_userDefinedValueType$_ShortString_$1144",
																	"typeString": "ShortString"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_userDefinedValueType$_ShortString_$1144",
																	"typeString": "ShortString"
																}
															],
															"expression": {
																"id": 1307,
																"name": "ShortString",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1144,
																"src": "3490:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_userDefinedValueType$_ShortString_$1144_$",
																	"typeString": "type(ShortString)"
																}
															},
															"id": 1308,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "3502:6:9",
															"memberName": "unwrap",
															"nodeType": "MemberAccess",
															"src": "3490:18:9",
															"typeDescriptions": {
																"typeIdentifier": "t_function_unwrap_pure$_t_userDefinedValueType$_ShortString_$1144_$returns$_t_bytes32_$",
																"typeString": "function (ShortString) pure returns (bytes32)"
															}
														},
														"id": 1310,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3490:25:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 1311,
														"name": "_FALLBACK_SENTINEL",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1148,
														"src": "3519:18:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "3490:47:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1320,
													"nodeType": "Block",
													"src": "3592:37:9",
													"statements": [
														{
															"expression": {
																"id": 1318,
																"name": "store",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1302,
																"src": "3613:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_storage_ptr",
																	"typeString": "string storage pointer"
																}
															},
															"functionReturnParameters": 1306,
															"id": 1319,
															"nodeType": "Return",
															"src": "3606:12:9"
														}
													]
												},
												"id": 1321,
												"nodeType": "IfStatement",
												"src": "3486:143:9",
												"trueBody": {
													"id": 1317,
													"nodeType": "Block",
													"src": "3539:47:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1314,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1300,
																		"src": "3569:5:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_userDefinedValueType$_ShortString_$1144",
																			"typeString": "ShortString"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_userDefinedValueType$_ShortString_$1144",
																			"typeString": "ShortString"
																		}
																	],
																	"id": 1313,
																	"name": "toString",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1224,
																	"src": "3560:8:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_userDefinedValueType$_ShortString_$1144_$returns$_t_string_memory_ptr_$",
																		"typeString": "function (ShortString) pure returns (string memory)"
																	}
																},
																"id": 1315,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3560:15:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string memory"
																}
															},
															"functionReturnParameters": 1306,
															"id": 1316,
															"nodeType": "Return",
															"src": "3553:22:9"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1297,
										"nodeType": "StructuredDocumentation",
										"src": "3242:120:9",
										"text": " @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}."
									},
									"id": 1323,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toStringWithFallback",
									"nameLocation": "3376:20:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1303,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1300,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3409:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1323,
												"src": "3397:17:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_ShortString_$1144",
													"typeString": "ShortString"
												},
												"typeName": {
													"id": 1299,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1298,
														"name": "ShortString",
														"nameLocations": [
															"3397:11:9"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1144,
														"src": "3397:11:9"
													},
													"referencedDeclaration": 1144,
													"src": "3397:11:9",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1144",
														"typeString": "ShortString"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1302,
												"mutability": "mutable",
												"name": "store",
												"nameLocation": "3431:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1323,
												"src": "3416:20:9",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1301,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3416:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3396:41:9"
									},
									"returnParameters": {
										"id": 1306,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1305,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1323,
												"src": "3461:13:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1304,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3461:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3460:15:9"
									},
									"scope": 1355,
									"src": "3367:268:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1353,
										"nodeType": "Block",
										"src": "4108:175:9",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 1339,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1336,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1327,
																"src": "4141:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_userDefinedValueType$_ShortString_$1144",
																	"typeString": "ShortString"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_userDefinedValueType$_ShortString_$1144",
																	"typeString": "ShortString"
																}
															],
															"expression": {
																"id": 1334,
																"name": "ShortString",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1144,
																"src": "4122:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_userDefinedValueType$_ShortString_$1144_$",
																	"typeString": "type(ShortString)"
																}
															},
															"id": 1335,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "4134:6:9",
															"memberName": "unwrap",
															"nodeType": "MemberAccess",
															"src": "4122:18:9",
															"typeDescriptions": {
																"typeIdentifier": "t_function_unwrap_pure$_t_userDefinedValueType$_ShortString_$1144_$returns$_t_bytes32_$",
																"typeString": "function (ShortString) pure returns (bytes32)"
															}
														},
														"id": 1337,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4122:25:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 1338,
														"name": "_FALLBACK_SENTINEL",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1148,
														"src": "4151:18:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "4122:47:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1351,
													"nodeType": "Block",
													"src": "4226:51:9",
													"statements": [
														{
															"expression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 1347,
																			"name": "store",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1329,
																			"src": "4253:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_string_storage_ptr",
																				"typeString": "string storage pointer"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_string_storage_ptr",
																				"typeString": "string storage pointer"
																			}
																		],
																		"id": 1346,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "4247:5:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																			"typeString": "type(bytes storage pointer)"
																		},
																		"typeName": {
																			"id": 1345,
																			"name": "bytes",
																			"nodeType": "ElementaryTypeName",
																			"src": "4247:5:9",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1348,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4247:12:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_storage_ptr",
																		"typeString": "bytes storage pointer"
																	}
																},
																"id": 1349,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "4260:6:9",
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "4247:19:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 1333,
															"id": 1350,
															"nodeType": "Return",
															"src": "4240:26:9"
														}
													]
												},
												"id": 1352,
												"nodeType": "IfStatement",
												"src": "4118:159:9",
												"trueBody": {
													"id": 1344,
													"nodeType": "Block",
													"src": "4171:49:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1341,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1327,
																		"src": "4203:5:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_userDefinedValueType$_ShortString_$1144",
																			"typeString": "ShortString"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_userDefinedValueType$_ShortString_$1144",
																			"typeString": "ShortString"
																		}
																	],
																	"id": 1340,
																	"name": "byteLength",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1256,
																	"src": "4192:10:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_userDefinedValueType$_ShortString_$1144_$returns$_t_uint256_$",
																		"typeString": "function (ShortString) pure returns (uint256)"
																	}
																},
																"id": 1342,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4192:17:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 1333,
															"id": 1343,
															"nodeType": "Return",
															"src": "4185:24:9"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1324,
										"nodeType": "StructuredDocumentation",
										"src": "3641:357:9",
										"text": " @dev Return the length of a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\n WARNING: This will return the \"byte length\" of the string. This may not reflect the actual length in terms of\n actual characters as the UTF-8 encoding of a single character can span over multiple bytes."
									},
									"id": 1354,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "byteLengthWithFallback",
									"nameLocation": "4012:22:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1330,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1327,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4047:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1354,
												"src": "4035:17:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_ShortString_$1144",
													"typeString": "ShortString"
												},
												"typeName": {
													"id": 1326,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1325,
														"name": "ShortString",
														"nameLocations": [
															"4035:11:9"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1144,
														"src": "4035:11:9"
													},
													"referencedDeclaration": 1144,
													"src": "4035:11:9",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1144",
														"typeString": "ShortString"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1329,
												"mutability": "mutable",
												"name": "store",
												"nameLocation": "4069:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1354,
												"src": "4054:20:9",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1328,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4054:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4034:41:9"
									},
									"returnParameters": {
										"id": 1333,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1332,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1354,
												"src": "4099:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1331,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4099:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4098:9:9"
									},
									"scope": 1355,
									"src": "4003:280:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1356,
							"src": "1235:3050:9",
							"usedErrors": [
								1152,
								1154
							]
						}
					],
					"src": "106:4180:9"
				},
				"id": 9
			},
			"@openzeppelin/contracts/utils/StorageSlot.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/StorageSlot.sol",
					"exportedSymbols": {
						"StorageSlot": [
							1465
						]
					},
					"id": 1466,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1357,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "193:23:10"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "StorageSlot",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1358,
								"nodeType": "StructuredDocumentation",
								"src": "218:1201:10",
								"text": " @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC1967 implementation slot:\n ```solidity\n contract ERC1967 {\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```\n _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n _Available since v4.9 for `string`, `bytes`._"
							},
							"fullyImplemented": true,
							"id": 1465,
							"linearizedBaseContracts": [
								1465
							],
							"name": "StorageSlot",
							"nameLocation": "1428:11:10",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "StorageSlot.AddressSlot",
									"id": 1361,
									"members": [
										{
											"constant": false,
											"id": 1360,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1483:5:10",
											"nodeType": "VariableDeclaration",
											"scope": 1361,
											"src": "1475:13:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1359,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1475:7:10",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "AddressSlot",
									"nameLocation": "1453:11:10",
									"nodeType": "StructDefinition",
									"scope": 1465,
									"src": "1446:49:10",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlot.BooleanSlot",
									"id": 1364,
									"members": [
										{
											"constant": false,
											"id": 1363,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1535:5:10",
											"nodeType": "VariableDeclaration",
											"scope": 1364,
											"src": "1530:10:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 1362,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1530:4:10",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "BooleanSlot",
									"nameLocation": "1508:11:10",
									"nodeType": "StructDefinition",
									"scope": 1465,
									"src": "1501:46:10",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlot.Bytes32Slot",
									"id": 1367,
									"members": [
										{
											"constant": false,
											"id": 1366,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1590:5:10",
											"nodeType": "VariableDeclaration",
											"scope": 1367,
											"src": "1582:13:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 1365,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "1582:7:10",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Bytes32Slot",
									"nameLocation": "1560:11:10",
									"nodeType": "StructDefinition",
									"scope": 1465,
									"src": "1553:49:10",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlot.Uint256Slot",
									"id": 1370,
									"members": [
										{
											"constant": false,
											"id": 1369,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1645:5:10",
											"nodeType": "VariableDeclaration",
											"scope": 1370,
											"src": "1637:13:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1368,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1637:7:10",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Uint256Slot",
									"nameLocation": "1615:11:10",
									"nodeType": "StructDefinition",
									"scope": 1465,
									"src": "1608:49:10",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlot.StringSlot",
									"id": 1373,
									"members": [
										{
											"constant": false,
											"id": 1372,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1698:5:10",
											"nodeType": "VariableDeclaration",
											"scope": 1373,
											"src": "1691:12:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_string_storage_ptr",
												"typeString": "string"
											},
											"typeName": {
												"id": 1371,
												"name": "string",
												"nodeType": "ElementaryTypeName",
												"src": "1691:6:10",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "StringSlot",
									"nameLocation": "1670:10:10",
									"nodeType": "StructDefinition",
									"scope": 1465,
									"src": "1663:47:10",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlot.BytesSlot",
									"id": 1376,
									"members": [
										{
											"constant": false,
											"id": 1375,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1749:5:10",
											"nodeType": "VariableDeclaration",
											"scope": 1376,
											"src": "1743:11:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 1374,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "1743:5:10",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "BytesSlot",
									"nameLocation": "1723:9:10",
									"nodeType": "StructDefinition",
									"scope": 1465,
									"src": "1716:45:10",
									"visibility": "public"
								},
								{
									"body": {
										"id": 1386,
										"nodeType": "Block",
										"src": "1943:106:10",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2005:38:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2019:14:10",
															"value": {
																"name": "slot",
																"nodeType": "YulIdentifier",
																"src": "2029:4:10"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nodeType": "YulIdentifier",
																	"src": "2019:6:10"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "paris",
												"externalReferences": [
													{
														"declaration": 1383,
														"isOffset": false,
														"isSlot": true,
														"src": "2019:6:10",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1379,
														"isOffset": false,
														"isSlot": false,
														"src": "2029:4:10",
														"valueSize": 1
													}
												],
												"id": 1385,
												"nodeType": "InlineAssembly",
												"src": "1996:47:10"
											}
										]
									},
									"documentation": {
										"id": 1377,
										"nodeType": "StructuredDocumentation",
										"src": "1767:87:10",
										"text": " @dev Returns an `AddressSlot` with member `value` located at `slot`."
									},
									"id": 1387,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getAddressSlot",
									"nameLocation": "1868:14:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1380,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1379,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "1891:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 1387,
												"src": "1883:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1378,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1883:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1882:14:10"
									},
									"returnParameters": {
										"id": 1384,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1383,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "1940:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1387,
												"src": "1920:21:10",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_AddressSlot_$1361_storage_ptr",
													"typeString": "struct StorageSlot.AddressSlot"
												},
												"typeName": {
													"id": 1382,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1381,
														"name": "AddressSlot",
														"nameLocations": [
															"1920:11:10"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1361,
														"src": "1920:11:10"
													},
													"referencedDeclaration": 1361,
													"src": "1920:11:10",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_AddressSlot_$1361_storage_ptr",
														"typeString": "struct StorageSlot.AddressSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1919:23:10"
									},
									"scope": 1465,
									"src": "1859:190:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1397,
										"nodeType": "Block",
										"src": "2231:106:10",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2293:38:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2307:14:10",
															"value": {
																"name": "slot",
																"nodeType": "YulIdentifier",
																"src": "2317:4:10"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nodeType": "YulIdentifier",
																	"src": "2307:6:10"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "paris",
												"externalReferences": [
													{
														"declaration": 1394,
														"isOffset": false,
														"isSlot": true,
														"src": "2307:6:10",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1390,
														"isOffset": false,
														"isSlot": false,
														"src": "2317:4:10",
														"valueSize": 1
													}
												],
												"id": 1396,
												"nodeType": "InlineAssembly",
												"src": "2284:47:10"
											}
										]
									},
									"documentation": {
										"id": 1388,
										"nodeType": "StructuredDocumentation",
										"src": "2055:87:10",
										"text": " @dev Returns an `BooleanSlot` with member `value` located at `slot`."
									},
									"id": 1398,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBooleanSlot",
									"nameLocation": "2156:14:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1391,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1390,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "2179:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 1398,
												"src": "2171:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1389,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2171:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2170:14:10"
									},
									"returnParameters": {
										"id": 1395,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1394,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "2228:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1398,
												"src": "2208:21:10",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_BooleanSlot_$1364_storage_ptr",
													"typeString": "struct StorageSlot.BooleanSlot"
												},
												"typeName": {
													"id": 1393,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1392,
														"name": "BooleanSlot",
														"nameLocations": [
															"2208:11:10"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1364,
														"src": "2208:11:10"
													},
													"referencedDeclaration": 1364,
													"src": "2208:11:10",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_BooleanSlot_$1364_storage_ptr",
														"typeString": "struct StorageSlot.BooleanSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2207:23:10"
									},
									"scope": 1465,
									"src": "2147:190:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1408,
										"nodeType": "Block",
										"src": "2519:106:10",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2581:38:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2595:14:10",
															"value": {
																"name": "slot",
																"nodeType": "YulIdentifier",
																"src": "2605:4:10"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nodeType": "YulIdentifier",
																	"src": "2595:6:10"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "paris",
												"externalReferences": [
													{
														"declaration": 1405,
														"isOffset": false,
														"isSlot": true,
														"src": "2595:6:10",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1401,
														"isOffset": false,
														"isSlot": false,
														"src": "2605:4:10",
														"valueSize": 1
													}
												],
												"id": 1407,
												"nodeType": "InlineAssembly",
												"src": "2572:47:10"
											}
										]
									},
									"documentation": {
										"id": 1399,
										"nodeType": "StructuredDocumentation",
										"src": "2343:87:10",
										"text": " @dev Returns an `Bytes32Slot` with member `value` located at `slot`."
									},
									"id": 1409,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBytes32Slot",
									"nameLocation": "2444:14:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1402,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1401,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "2467:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 1409,
												"src": "2459:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1400,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2459:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2458:14:10"
									},
									"returnParameters": {
										"id": 1406,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1405,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "2516:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1409,
												"src": "2496:21:10",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Bytes32Slot_$1367_storage_ptr",
													"typeString": "struct StorageSlot.Bytes32Slot"
												},
												"typeName": {
													"id": 1404,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1403,
														"name": "Bytes32Slot",
														"nameLocations": [
															"2496:11:10"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1367,
														"src": "2496:11:10"
													},
													"referencedDeclaration": 1367,
													"src": "2496:11:10",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Bytes32Slot_$1367_storage_ptr",
														"typeString": "struct StorageSlot.Bytes32Slot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2495:23:10"
									},
									"scope": 1465,
									"src": "2435:190:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1419,
										"nodeType": "Block",
										"src": "2807:106:10",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2869:38:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2883:14:10",
															"value": {
																"name": "slot",
																"nodeType": "YulIdentifier",
																"src": "2893:4:10"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nodeType": "YulIdentifier",
																	"src": "2883:6:10"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "paris",
												"externalReferences": [
													{
														"declaration": 1416,
														"isOffset": false,
														"isSlot": true,
														"src": "2883:6:10",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1412,
														"isOffset": false,
														"isSlot": false,
														"src": "2893:4:10",
														"valueSize": 1
													}
												],
												"id": 1418,
												"nodeType": "InlineAssembly",
												"src": "2860:47:10"
											}
										]
									},
									"documentation": {
										"id": 1410,
										"nodeType": "StructuredDocumentation",
										"src": "2631:87:10",
										"text": " @dev Returns an `Uint256Slot` with member `value` located at `slot`."
									},
									"id": 1420,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getUint256Slot",
									"nameLocation": "2732:14:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1413,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1412,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "2755:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 1420,
												"src": "2747:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1411,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2747:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2746:14:10"
									},
									"returnParameters": {
										"id": 1417,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1416,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "2804:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1420,
												"src": "2784:21:10",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Uint256Slot_$1370_storage_ptr",
													"typeString": "struct StorageSlot.Uint256Slot"
												},
												"typeName": {
													"id": 1415,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1414,
														"name": "Uint256Slot",
														"nameLocations": [
															"2784:11:10"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1370,
														"src": "2784:11:10"
													},
													"referencedDeclaration": 1370,
													"src": "2784:11:10",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Uint256Slot_$1370_storage_ptr",
														"typeString": "struct StorageSlot.Uint256Slot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2783:23:10"
									},
									"scope": 1465,
									"src": "2723:190:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1430,
										"nodeType": "Block",
										"src": "3092:106:10",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "3154:38:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3168:14:10",
															"value": {
																"name": "slot",
																"nodeType": "YulIdentifier",
																"src": "3178:4:10"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nodeType": "YulIdentifier",
																	"src": "3168:6:10"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "paris",
												"externalReferences": [
													{
														"declaration": 1427,
														"isOffset": false,
														"isSlot": true,
														"src": "3168:6:10",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1423,
														"isOffset": false,
														"isSlot": false,
														"src": "3178:4:10",
														"valueSize": 1
													}
												],
												"id": 1429,
												"nodeType": "InlineAssembly",
												"src": "3145:47:10"
											}
										]
									},
									"documentation": {
										"id": 1421,
										"nodeType": "StructuredDocumentation",
										"src": "2919:86:10",
										"text": " @dev Returns an `StringSlot` with member `value` located at `slot`."
									},
									"id": 1431,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getStringSlot",
									"nameLocation": "3019:13:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1424,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1423,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "3041:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 1431,
												"src": "3033:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1422,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3033:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3032:14:10"
									},
									"returnParameters": {
										"id": 1428,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1427,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3089:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1431,
												"src": "3070:20:10",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_StringSlot_$1373_storage_ptr",
													"typeString": "struct StorageSlot.StringSlot"
												},
												"typeName": {
													"id": 1426,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1425,
														"name": "StringSlot",
														"nameLocations": [
															"3070:10:10"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1373,
														"src": "3070:10:10"
													},
													"referencedDeclaration": 1373,
													"src": "3070:10:10",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StringSlot_$1373_storage_ptr",
														"typeString": "struct StorageSlot.StringSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3069:22:10"
									},
									"scope": 1465,
									"src": "3010:188:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1441,
										"nodeType": "Block",
										"src": "3400:112:10",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "3462:44:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3476:20:10",
															"value": {
																"name": "store.slot",
																"nodeType": "YulIdentifier",
																"src": "3486:10:10"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nodeType": "YulIdentifier",
																	"src": "3476:6:10"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "paris",
												"externalReferences": [
													{
														"declaration": 1438,
														"isOffset": false,
														"isSlot": true,
														"src": "3476:6:10",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1434,
														"isOffset": false,
														"isSlot": true,
														"src": "3486:10:10",
														"suffix": "slot",
														"valueSize": 1
													}
												],
												"id": 1440,
												"nodeType": "InlineAssembly",
												"src": "3453:53:10"
											}
										]
									},
									"documentation": {
										"id": 1432,
										"nodeType": "StructuredDocumentation",
										"src": "3204:101:10",
										"text": " @dev Returns an `StringSlot` representation of the string storage pointer `store`."
									},
									"id": 1442,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getStringSlot",
									"nameLocation": "3319:13:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1435,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1434,
												"mutability": "mutable",
												"name": "store",
												"nameLocation": "3348:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1442,
												"src": "3333:20:10",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1433,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3333:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3332:22:10"
									},
									"returnParameters": {
										"id": 1439,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1438,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3397:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1442,
												"src": "3378:20:10",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_StringSlot_$1373_storage_ptr",
													"typeString": "struct StorageSlot.StringSlot"
												},
												"typeName": {
													"id": 1437,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1436,
														"name": "StringSlot",
														"nameLocations": [
															"3378:10:10"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1373,
														"src": "3378:10:10"
													},
													"referencedDeclaration": 1373,
													"src": "3378:10:10",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StringSlot_$1373_storage_ptr",
														"typeString": "struct StorageSlot.StringSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3377:22:10"
									},
									"scope": 1465,
									"src": "3310:202:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1452,
										"nodeType": "Block",
										"src": "3688:106:10",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "3750:38:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3764:14:10",
															"value": {
																"name": "slot",
																"nodeType": "YulIdentifier",
																"src": "3774:4:10"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nodeType": "YulIdentifier",
																	"src": "3764:6:10"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "paris",
												"externalReferences": [
													{
														"declaration": 1449,
														"isOffset": false,
														"isSlot": true,
														"src": "3764:6:10",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1445,
														"isOffset": false,
														"isSlot": false,
														"src": "3774:4:10",
														"valueSize": 1
													}
												],
												"id": 1451,
												"nodeType": "InlineAssembly",
												"src": "3741:47:10"
											}
										]
									},
									"documentation": {
										"id": 1443,
										"nodeType": "StructuredDocumentation",
										"src": "3518:85:10",
										"text": " @dev Returns an `BytesSlot` with member `value` located at `slot`."
									},
									"id": 1453,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBytesSlot",
									"nameLocation": "3617:12:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1446,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1445,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "3638:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 1453,
												"src": "3630:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1444,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3630:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3629:14:10"
									},
									"returnParameters": {
										"id": 1450,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1449,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3685:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1453,
												"src": "3667:19:10",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_BytesSlot_$1376_storage_ptr",
													"typeString": "struct StorageSlot.BytesSlot"
												},
												"typeName": {
													"id": 1448,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1447,
														"name": "BytesSlot",
														"nameLocations": [
															"3667:9:10"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1376,
														"src": "3667:9:10"
													},
													"referencedDeclaration": 1376,
													"src": "3667:9:10",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_BytesSlot_$1376_storage_ptr",
														"typeString": "struct StorageSlot.BytesSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3666:21:10"
									},
									"scope": 1465,
									"src": "3608:186:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1463,
										"nodeType": "Block",
										"src": "3991:112:10",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "4053:44:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4067:20:10",
															"value": {
																"name": "store.slot",
																"nodeType": "YulIdentifier",
																"src": "4077:10:10"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nodeType": "YulIdentifier",
																	"src": "4067:6:10"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "paris",
												"externalReferences": [
													{
														"declaration": 1460,
														"isOffset": false,
														"isSlot": true,
														"src": "4067:6:10",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1456,
														"isOffset": false,
														"isSlot": true,
														"src": "4077:10:10",
														"suffix": "slot",
														"valueSize": 1
													}
												],
												"id": 1462,
												"nodeType": "InlineAssembly",
												"src": "4044:53:10"
											}
										]
									},
									"documentation": {
										"id": 1454,
										"nodeType": "StructuredDocumentation",
										"src": "3800:99:10",
										"text": " @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`."
									},
									"id": 1464,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBytesSlot",
									"nameLocation": "3913:12:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1457,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1456,
												"mutability": "mutable",
												"name": "store",
												"nameLocation": "3940:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1464,
												"src": "3926:19:10",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1455,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3926:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3925:21:10"
									},
									"returnParameters": {
										"id": 1461,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1460,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3988:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1464,
												"src": "3970:19:10",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_BytesSlot_$1376_storage_ptr",
													"typeString": "struct StorageSlot.BytesSlot"
												},
												"typeName": {
													"id": 1459,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1458,
														"name": "BytesSlot",
														"nameLocations": [
															"3970:9:10"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1376,
														"src": "3970:9:10"
													},
													"referencedDeclaration": 1376,
													"src": "3970:9:10",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_BytesSlot_$1376_storage_ptr",
														"typeString": "struct StorageSlot.BytesSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3969:21:10"
									},
									"scope": 1465,
									"src": "3904:199:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1466,
							"src": "1420:2685:10",
							"usedErrors": []
						}
					],
					"src": "193:3913:10"
				},
				"id": 10
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Strings.sol",
					"exportedSymbols": {
						"Math": [
							3130
						],
						"SignedMath": [
							3235
						],
						"Strings": [
							1694
						]
					},
					"id": 1695,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1467,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "101:23:11"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/math/Math.sol",
							"file": "./math/Math.sol",
							"id": 1468,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1695,
							"sourceUnit": 3131,
							"src": "126:25:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/math/SignedMath.sol",
							"file": "./math/SignedMath.sol",
							"id": 1469,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1695,
							"sourceUnit": 3236,
							"src": "152:31:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Strings",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1470,
								"nodeType": "StructuredDocumentation",
								"src": "185:34:11",
								"text": " @dev String operations."
							},
							"fullyImplemented": true,
							"id": 1694,
							"linearizedBaseContracts": [
								1694
							],
							"name": "Strings",
							"nameLocation": "228:7:11",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 1473,
									"mutability": "constant",
									"name": "_SYMBOLS",
									"nameLocation": "267:8:11",
									"nodeType": "VariableDeclaration",
									"scope": 1694,
									"src": "242:54:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes16",
										"typeString": "bytes16"
									},
									"typeName": {
										"id": 1471,
										"name": "bytes16",
										"nodeType": "ElementaryTypeName",
										"src": "242:7:11",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes16",
											"typeString": "bytes16"
										}
									},
									"value": {
										"hexValue": "30313233343536373839616263646566",
										"id": 1472,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "string",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "278:18:11",
										"typeDescriptions": {
											"typeIdentifier": "t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f",
											"typeString": "literal_string \"0123456789abcdef\""
										},
										"value": "0123456789abcdef"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 1476,
									"mutability": "constant",
									"name": "_ADDRESS_LENGTH",
									"nameLocation": "325:15:11",
									"nodeType": "VariableDeclaration",
									"scope": 1694,
									"src": "302:43:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 1474,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "302:5:11",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"hexValue": "3230",
										"id": 1475,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "343:2:11",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_20_by_1",
											"typeString": "int_const 20"
										},
										"value": "20"
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 1523,
										"nodeType": "Block",
										"src": "518:625:11",
										"statements": [
											{
												"id": 1522,
												"nodeType": "UncheckedBlock",
												"src": "528:609:11",
												"statements": [
													{
														"assignments": [
															1485
														],
														"declarations": [
															{
																"constant": false,
																"id": 1485,
																"mutability": "mutable",
																"name": "length",
																"nameLocation": "560:6:11",
																"nodeType": "VariableDeclaration",
																"scope": 1522,
																"src": "552:14:11",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1484,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "552:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1492,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1491,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 1488,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1479,
																		"src": "580:5:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1486,
																		"name": "Math",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3130,
																		"src": "569:4:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_Math_$3130_$",
																			"typeString": "type(library Math)"
																		}
																	},
																	"id": 1487,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "574:5:11",
																	"memberName": "log10",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2967,
																	"src": "569:10:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																		"typeString": "function (uint256) pure returns (uint256)"
																	}
																},
																"id": 1489,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "569:17:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "31",
																"id": 1490,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "589:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "569:21:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "552:38:11"
													},
													{
														"assignments": [
															1494
														],
														"declarations": [
															{
																"constant": false,
																"id": 1494,
																"mutability": "mutable",
																"name": "buffer",
																"nameLocation": "618:6:11",
																"nodeType": "VariableDeclaration",
																"scope": 1522,
																"src": "604:20:11",
																"stateVariable": false,
																"storageLocation": "memory",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string"
																},
																"typeName": {
																	"id": 1493,
																	"name": "string",
																	"nodeType": "ElementaryTypeName",
																	"src": "604:6:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_storage_ptr",
																		"typeString": "string"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1499,
														"initialValue": {
															"arguments": [
																{
																	"id": 1497,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1485,
																	"src": "638:6:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1496,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "NewExpression",
																"src": "627:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (string memory)"
																},
																"typeName": {
																	"id": 1495,
																	"name": "string",
																	"nodeType": "ElementaryTypeName",
																	"src": "631:6:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_storage_ptr",
																		"typeString": "string"
																	}
																}
															},
															"id": 1498,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "627:18:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "604:41:11"
													},
													{
														"assignments": [
															1501
														],
														"declarations": [
															{
																"constant": false,
																"id": 1501,
																"mutability": "mutable",
																"name": "ptr",
																"nameLocation": "667:3:11",
																"nodeType": "VariableDeclaration",
																"scope": 1522,
																"src": "659:11:11",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1500,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "659:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1502,
														"nodeType": "VariableDeclarationStatement",
														"src": "659:11:11"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "740:67:11",
															"statements": [
																{
																	"nodeType": "YulAssignment",
																	"src": "758:35:11",
																	"value": {
																		"arguments": [
																			{
																				"name": "buffer",
																				"nodeType": "YulIdentifier",
																				"src": "769:6:11"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "781:2:11",
																						"type": "",
																						"value": "32"
																					},
																					{
																						"name": "length",
																						"nodeType": "YulIdentifier",
																						"src": "785:6:11"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "777:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "777:15:11"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "765:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "765:28:11"
																	},
																	"variableNames": [
																		{
																			"name": "ptr",
																			"nodeType": "YulIdentifier",
																			"src": "758:3:11"
																		}
																	]
																}
															]
														},
														"documentation": "@solidity memory-safe-assembly",
														"evmVersion": "paris",
														"externalReferences": [
															{
																"declaration": 1494,
																"isOffset": false,
																"isSlot": false,
																"src": "769:6:11",
																"valueSize": 1
															},
															{
																"declaration": 1485,
																"isOffset": false,
																"isSlot": false,
																"src": "785:6:11",
																"valueSize": 1
															},
															{
																"declaration": 1501,
																"isOffset": false,
																"isSlot": false,
																"src": "758:3:11",
																"valueSize": 1
															}
														],
														"id": 1503,
														"nodeType": "InlineAssembly",
														"src": "731:76:11"
													},
													{
														"body": {
															"id": 1518,
															"nodeType": "Block",
															"src": "833:267:11",
															"statements": [
																{
																	"expression": {
																		"id": 1506,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "--",
																		"prefix": false,
																		"src": "851:5:11",
																		"subExpression": {
																			"id": 1505,
																			"name": "ptr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1501,
																			"src": "851:3:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1507,
																	"nodeType": "ExpressionStatement",
																	"src": "851:5:11"
																},
																{
																	"AST": {
																		"nodeType": "YulBlock",
																		"src": "934:84:11",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "ptr",
																							"nodeType": "YulIdentifier",
																							"src": "964:3:11"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value",
																											"nodeType": "YulIdentifier",
																											"src": "978:5:11"
																										},
																										{
																											"kind": "number",
																											"nodeType": "YulLiteral",
																											"src": "985:2:11",
																											"type": "",
																											"value": "10"
																										}
																									],
																									"functionName": {
																										"name": "mod",
																										"nodeType": "YulIdentifier",
																										"src": "974:3:11"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "974:14:11"
																								},
																								{
																									"name": "_SYMBOLS",
																									"nodeType": "YulIdentifier",
																									"src": "990:8:11"
																								}
																							],
																							"functionName": {
																								"name": "byte",
																								"nodeType": "YulIdentifier",
																								"src": "969:4:11"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "969:30:11"
																						}
																					],
																					"functionName": {
																						"name": "mstore8",
																						"nodeType": "YulIdentifier",
																						"src": "956:7:11"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "956:44:11"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "956:44:11"
																			}
																		]
																	},
																	"documentation": "@solidity memory-safe-assembly",
																	"evmVersion": "paris",
																	"externalReferences": [
																		{
																			"declaration": 1473,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "990:8:11",
																			"valueSize": 1
																		},
																		{
																			"declaration": 1501,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "964:3:11",
																			"valueSize": 1
																		},
																		{
																			"declaration": 1479,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "978:5:11",
																			"valueSize": 1
																		}
																	],
																	"id": 1508,
																	"nodeType": "InlineAssembly",
																	"src": "925:93:11"
																},
																{
																	"expression": {
																		"id": 1511,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1509,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1479,
																			"src": "1035:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"hexValue": "3130",
																			"id": 1510,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1044:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10_by_1",
																				"typeString": "int_const 10"
																			},
																			"value": "10"
																		},
																		"src": "1035:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1512,
																	"nodeType": "ExpressionStatement",
																	"src": "1035:11:11"
																},
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1515,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1513,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1479,
																			"src": "1068:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 1514,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1077:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1068:10:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 1517,
																	"nodeType": "IfStatement",
																	"src": "1064:21:11",
																	"trueBody": {
																		"id": 1516,
																		"nodeType": "Break",
																		"src": "1080:5:11"
																	}
																}
															]
														},
														"condition": {
															"hexValue": "74727565",
															"id": 1504,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "827:4:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														"id": 1519,
														"nodeType": "WhileStatement",
														"src": "820:280:11"
													},
													{
														"expression": {
															"id": 1520,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1494,
															"src": "1120:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"functionReturnParameters": 1483,
														"id": 1521,
														"nodeType": "Return",
														"src": "1113:13:11"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1477,
										"nodeType": "StructuredDocumentation",
										"src": "352:90:11",
										"text": " @dev Converts a `uint256` to its ASCII `string` decimal representation."
									},
									"id": 1524,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toString",
									"nameLocation": "456:8:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1480,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1479,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "473:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 1524,
												"src": "465:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1478,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "465:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "464:15:11"
									},
									"returnParameters": {
										"id": 1483,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1482,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1524,
												"src": "503:13:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1481,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "503:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "502:15:11"
									},
									"scope": 1694,
									"src": "447:696:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1551,
										"nodeType": "Block",
										"src": "1313:103:11",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		},
																		"id": 1538,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1536,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1527,
																			"src": "1354:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "<",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 1537,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1362:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1354:9:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"falseExpression": {
																		"hexValue": "",
																		"id": 1540,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1372:2:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																			"typeString": "literal_string \"\""
																		},
																		"value": ""
																	},
																	"id": 1541,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "Conditional",
																	"src": "1354:20:11",
																	"trueExpression": {
																		"hexValue": "2d",
																		"id": 1539,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1366:3:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561",
																			"typeString": "literal_string \"-\""
																		},
																		"value": "-"
																	},
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																},
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 1545,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1527,
																					"src": "1400:5:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_int256",
																						"typeString": "int256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_int256",
																						"typeString": "int256"
																					}
																				],
																				"expression": {
																					"id": 1543,
																					"name": "SignedMath",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3235,
																					"src": "1385:10:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_SignedMath_$3235_$",
																						"typeString": "type(library SignedMath)"
																					}
																				},
																				"id": 1544,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "1396:3:11",
																				"memberName": "abs",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 3234,
																				"src": "1385:14:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_pure$_t_int256_$returns$_t_uint256_$",
																					"typeString": "function (int256) pure returns (uint256)"
																				}
																			},
																			"id": 1546,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1385:21:11",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 1542,
																		"name": "toString",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [
																			1524,
																			1552
																		],
																		"referencedDeclaration": 1524,
																		"src": "1376:8:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																			"typeString": "function (uint256) pure returns (string memory)"
																		}
																	},
																	"id": 1547,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1376:31:11",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"expression": {
																	"id": 1534,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1337:3:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1535,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "1341:12:11",
																"memberName": "encodePacked",
																"nodeType": "MemberAccess",
																"src": "1337:16:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 1548,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1337:71:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1533,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "1330:6:11",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_string_storage_ptr_$",
															"typeString": "type(string storage pointer)"
														},
														"typeName": {
															"id": 1532,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "1330:6:11",
															"typeDescriptions": {}
														}
													},
													"id": 1549,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1330:79:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1531,
												"id": 1550,
												"nodeType": "Return",
												"src": "1323:86:11"
											}
										]
									},
									"documentation": {
										"id": 1525,
										"nodeType": "StructuredDocumentation",
										"src": "1149:89:11",
										"text": " @dev Converts a `int256` to its ASCII `string` decimal representation."
									},
									"id": 1552,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toString",
									"nameLocation": "1252:8:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1528,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1527,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1268:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 1552,
												"src": "1261:12:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1526,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1261:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1260:14:11"
									},
									"returnParameters": {
										"id": 1531,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1530,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1552,
												"src": "1298:13:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1529,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1298:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1297:15:11"
									},
									"scope": 1694,
									"src": "1243:173:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1571,
										"nodeType": "Block",
										"src": "1595:100:11",
										"statements": [
											{
												"id": 1570,
												"nodeType": "UncheckedBlock",
												"src": "1605:84:11",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"id": 1561,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1555,
																	"src": "1648:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1567,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"arguments": [
																			{
																				"id": 1564,
																				"name": "value",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1555,
																				"src": "1667:5:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"expression": {
																				"id": 1562,
																				"name": "Math",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3130,
																				"src": "1655:4:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_Math_$3130_$",
																					"typeString": "type(library Math)"
																				}
																			},
																			"id": 1563,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "1660:6:11",
																			"memberName": "log256",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 3090,
																			"src": "1655:11:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																				"typeString": "function (uint256) pure returns (uint256)"
																			}
																		},
																		"id": 1565,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1655:18:11",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"hexValue": "31",
																		"id": 1566,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1676:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	},
																	"src": "1655:22:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1560,
																"name": "toHexString",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	1572,
																	1648,
																	1668
																],
																"referencedDeclaration": 1648,
																"src": "1636:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256,uint256) pure returns (string memory)"
																}
															},
															"id": 1568,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1636:42:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"functionReturnParameters": 1559,
														"id": 1569,
														"nodeType": "Return",
														"src": "1629:49:11"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1553,
										"nodeType": "StructuredDocumentation",
										"src": "1422:94:11",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."
									},
									"id": 1572,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "1530:11:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1556,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1555,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1550:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 1572,
												"src": "1542:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1554,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1542:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1541:15:11"
									},
									"returnParameters": {
										"id": 1559,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1558,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1572,
												"src": "1580:13:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1557,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1580:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1579:15:11"
									},
									"scope": 1694,
									"src": "1521:174:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1647,
										"nodeType": "Block",
										"src": "1908:347:11",
										"statements": [
											{
												"assignments": [
													1583
												],
												"declarations": [
													{
														"constant": false,
														"id": 1583,
														"mutability": "mutable",
														"name": "buffer",
														"nameLocation": "1931:6:11",
														"nodeType": "VariableDeclaration",
														"scope": 1647,
														"src": "1918:19:11",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1582,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1918:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1592,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1590,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1588,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 1586,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1950:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 1587,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1577,
																	"src": "1954:6:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1950:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "32",
																"id": 1589,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1963:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "1950:14:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1585,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "1940:9:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes memory)"
														},
														"typeName": {
															"id": 1584,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1944:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														}
													},
													"id": 1591,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1940:25:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1918:47:11"
											},
											{
												"expression": {
													"id": 1597,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1593,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1583,
															"src": "1975:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1595,
														"indexExpression": {
															"hexValue": "30",
															"id": 1594,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1982:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1975:9:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 1596,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1987:3:11",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
															"typeString": "literal_string \"0\""
														},
														"value": "0"
													},
													"src": "1975:15:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 1598,
												"nodeType": "ExpressionStatement",
												"src": "1975:15:11"
											},
											{
												"expression": {
													"id": 1603,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1599,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1583,
															"src": "2000:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1601,
														"indexExpression": {
															"hexValue": "31",
															"id": 1600,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2007:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2000:9:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "78",
														"id": 1602,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2012:3:11",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83",
															"typeString": "literal_string \"x\""
														},
														"value": "x"
													},
													"src": "2000:15:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 1604,
												"nodeType": "ExpressionStatement",
												"src": "2000:15:11"
											},
											{
												"body": {
													"id": 1633,
													"nodeType": "Block",
													"src": "2070:83:11",
													"statements": [
														{
															"expression": {
																"id": 1627,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 1619,
																		"name": "buffer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1583,
																		"src": "2084:6:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 1621,
																	"indexExpression": {
																		"id": 1620,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1606,
																		"src": "2091:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "2084:9:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"baseExpression": {
																		"id": 1622,
																		"name": "_SYMBOLS",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1473,
																		"src": "2096:8:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes16",
																			"typeString": "bytes16"
																		}
																	},
																	"id": 1626,
																	"indexExpression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1625,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1623,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1575,
																			"src": "2105:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&",
																		"rightExpression": {
																			"hexValue": "307866",
																			"id": 1624,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2113:3:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_15_by_1",
																				"typeString": "int_const 15"
																			},
																			"value": "0xf"
																		},
																		"src": "2105:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "2096:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"src": "2084:33:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"id": 1628,
															"nodeType": "ExpressionStatement",
															"src": "2084:33:11"
														},
														{
															"expression": {
																"id": 1631,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1629,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1575,
																	"src": "2131:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "34",
																	"id": 1630,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2141:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "2131:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1632,
															"nodeType": "ExpressionStatement",
															"src": "2131:11:11"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1615,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1613,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1606,
														"src": "2058:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "31",
														"id": 1614,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2062:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "2058:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1634,
												"initializationExpression": {
													"assignments": [
														1606
													],
													"declarations": [
														{
															"constant": false,
															"id": 1606,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "2038:1:11",
															"nodeType": "VariableDeclaration",
															"scope": 1634,
															"src": "2030:9:11",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1605,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "2030:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1612,
													"initialValue": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1611,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1609,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "32",
																"id": 1607,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2042:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 1608,
																"name": "length",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1577,
																"src": "2046:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2042:10:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 1610,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2055:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "2042:14:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "2030:26:11"
												},
												"loopExpression": {
													"expression": {
														"id": 1617,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "--",
														"prefix": true,
														"src": "2065:3:11",
														"subExpression": {
															"id": 1616,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1606,
															"src": "2067:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1618,
													"nodeType": "ExpressionStatement",
													"src": "2065:3:11"
												},
												"nodeType": "ForStatement",
												"src": "2025:128:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1638,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1636,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1575,
																"src": "2170:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 1637,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2179:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2170:10:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "537472696e67733a20686578206c656e67746820696e73756666696369656e74",
															"id": 1639,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2182:34:11",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2",
																"typeString": "literal_string \"Strings: hex length insufficient\""
															},
															"value": "Strings: hex length insufficient"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2",
																"typeString": "literal_string \"Strings: hex length insufficient\""
															}
														],
														"id": 1635,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2162:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1640,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2162:55:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1641,
												"nodeType": "ExpressionStatement",
												"src": "2162:55:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1644,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1583,
															"src": "2241:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1643,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "2234:6:11",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_string_storage_ptr_$",
															"typeString": "type(string storage pointer)"
														},
														"typeName": {
															"id": 1642,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "2234:6:11",
															"typeDescriptions": {}
														}
													},
													"id": 1645,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2234:14:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1581,
												"id": 1646,
												"nodeType": "Return",
												"src": "2227:21:11"
											}
										]
									},
									"documentation": {
										"id": 1573,
										"nodeType": "StructuredDocumentation",
										"src": "1701:112:11",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."
									},
									"id": 1648,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "1827:11:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1578,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1575,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1847:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 1648,
												"src": "1839:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1574,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1839:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1577,
												"mutability": "mutable",
												"name": "length",
												"nameLocation": "1862:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 1648,
												"src": "1854:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1576,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1854:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1838:31:11"
									},
									"returnParameters": {
										"id": 1581,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1580,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1648,
												"src": "1893:13:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1579,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1893:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1892:15:11"
									},
									"scope": 1694,
									"src": "1818:437:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1667,
										"nodeType": "Block",
										"src": "2480:76:11",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 1661,
																			"name": "addr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1651,
																			"src": "2525:4:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 1660,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2517:7:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint160_$",
																			"typeString": "type(uint160)"
																		},
																		"typeName": {
																			"id": 1659,
																			"name": "uint160",
																			"nodeType": "ElementaryTypeName",
																			"src": "2517:7:11",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1662,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2517:13:11",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																],
																"id": 1658,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2509:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																},
																"typeName": {
																	"id": 1657,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2509:7:11",
																	"typeDescriptions": {}
																}
															},
															"id": 1663,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2509:22:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1664,
															"name": "_ADDRESS_LENGTH",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1476,
															"src": "2533:15:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														],
														"id": 1656,
														"name": "toHexString",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1572,
															1648,
															1668
														],
														"referencedDeclaration": 1648,
														"src": "2497:11:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
															"typeString": "function (uint256,uint256) pure returns (string memory)"
														}
													},
													"id": 1665,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2497:52:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1655,
												"id": 1666,
												"nodeType": "Return",
												"src": "2490:59:11"
											}
										]
									},
									"documentation": {
										"id": 1649,
										"nodeType": "StructuredDocumentation",
										"src": "2261:141:11",
										"text": " @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."
									},
									"id": 1668,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "2416:11:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1652,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1651,
												"mutability": "mutable",
												"name": "addr",
												"nameLocation": "2436:4:11",
												"nodeType": "VariableDeclaration",
												"scope": 1668,
												"src": "2428:12:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1650,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2428:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2427:14:11"
									},
									"returnParameters": {
										"id": 1655,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1654,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1668,
												"src": "2465:13:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1653,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2465:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2464:15:11"
									},
									"scope": 1694,
									"src": "2407:149:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1692,
										"nodeType": "Block",
										"src": "2711:66:11",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 1690,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 1681,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1671,
																		"src": "2744:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1680,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2738:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 1679,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "2738:5:11",
																		"typeDescriptions": {}
																	}
																},
																"id": 1682,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2738:8:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 1678,
															"name": "keccak256",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967288,
															"src": "2728:9:11",
															"typeDescriptions": {
																"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																"typeString": "function (bytes memory) pure returns (bytes32)"
															}
														},
														"id": 1683,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2728:19:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 1687,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1673,
																		"src": "2767:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1686,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2761:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 1685,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "2761:5:11",
																		"typeDescriptions": {}
																	}
																},
																"id": 1688,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2761:8:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 1684,
															"name": "keccak256",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967288,
															"src": "2751:9:11",
															"typeDescriptions": {
																"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																"typeString": "function (bytes memory) pure returns (bytes32)"
															}
														},
														"id": 1689,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2751:19:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "2728:42:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1677,
												"id": 1691,
												"nodeType": "Return",
												"src": "2721:49:11"
											}
										]
									},
									"documentation": {
										"id": 1669,
										"nodeType": "StructuredDocumentation",
										"src": "2562:66:11",
										"text": " @dev Returns true if the two strings are equal."
									},
									"id": 1693,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "equal",
									"nameLocation": "2642:5:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1674,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1671,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2662:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 1693,
												"src": "2648:15:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1670,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2648:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1673,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2679:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 1693,
												"src": "2665:15:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1672,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2665:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2647:34:11"
									},
									"returnParameters": {
										"id": 1677,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1676,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1693,
												"src": "2705:4:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1675,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2705:4:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2704:6:11"
									},
									"scope": 1694,
									"src": "2633:144:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1695,
							"src": "220:2559:11",
							"usedErrors": []
						}
					],
					"src": "101:2679:11"
				},
				"id": 11
			},
			"@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
					"exportedSymbols": {
						"ECDSA": [
							2060
						],
						"Math": [
							3130
						],
						"SignedMath": [
							3235
						],
						"Strings": [
							1694
						]
					},
					"id": 2061,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1696,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "112:23:12"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Strings.sol",
							"file": "../Strings.sol",
							"id": 1697,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2061,
							"sourceUnit": 1695,
							"src": "137:24:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ECDSA",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1698,
								"nodeType": "StructuredDocumentation",
								"src": "163:205:12",
								"text": " @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n These functions can be used to verify that a message was signed by the holder\n of the private keys of a given address."
							},
							"fullyImplemented": true,
							"id": 2060,
							"linearizedBaseContracts": [
								2060
							],
							"name": "ECDSA",
							"nameLocation": "377:5:12",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "ECDSA.RecoverError",
									"id": 1704,
									"members": [
										{
											"id": 1699,
											"name": "NoError",
											"nameLocation": "417:7:12",
											"nodeType": "EnumValue",
											"src": "417:7:12"
										},
										{
											"id": 1700,
											"name": "InvalidSignature",
											"nameLocation": "434:16:12",
											"nodeType": "EnumValue",
											"src": "434:16:12"
										},
										{
											"id": 1701,
											"name": "InvalidSignatureLength",
											"nameLocation": "460:22:12",
											"nodeType": "EnumValue",
											"src": "460:22:12"
										},
										{
											"id": 1702,
											"name": "InvalidSignatureS",
											"nameLocation": "492:17:12",
											"nodeType": "EnumValue",
											"src": "492:17:12"
										},
										{
											"id": 1703,
											"name": "InvalidSignatureV",
											"nameLocation": "519:17:12",
											"nodeType": "EnumValue",
											"src": "519:17:12"
										}
									],
									"name": "RecoverError",
									"nameLocation": "394:12:12",
									"nodeType": "EnumDefinition",
									"src": "389:175:12"
								},
								{
									"body": {
										"id": 1747,
										"nodeType": "Block",
										"src": "624:457:12",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_enum$_RecoverError_$1704",
														"typeString": "enum ECDSA.RecoverError"
													},
													"id": 1713,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1710,
														"name": "error",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1707,
														"src": "638:5:12",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$1704",
															"typeString": "enum ECDSA.RecoverError"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"expression": {
															"id": 1711,
															"name": "RecoverError",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1704,
															"src": "647:12:12",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_enum$_RecoverError_$1704_$",
																"typeString": "type(enum ECDSA.RecoverError)"
															}
														},
														"id": 1712,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "660:7:12",
														"memberName": "NoError",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1699,
														"src": "647:20:12",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$1704",
															"typeString": "enum ECDSA.RecoverError"
														}
													},
													"src": "638:29:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_enum$_RecoverError_$1704",
															"typeString": "enum ECDSA.RecoverError"
														},
														"id": 1719,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1716,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1707,
															"src": "734:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1704",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"expression": {
																"id": 1717,
																"name": "RecoverError",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1704,
																"src": "743:12:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_RecoverError_$1704_$",
																	"typeString": "type(enum ECDSA.RecoverError)"
																}
															},
															"id": 1718,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "756:16:12",
															"memberName": "InvalidSignature",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1700,
															"src": "743:29:12",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1704",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"src": "734:38:12",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseBody": {
														"condition": {
															"commonType": {
																"typeIdentifier": "t_enum$_RecoverError_$1704",
																"typeString": "enum ECDSA.RecoverError"
															},
															"id": 1728,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1725,
																"name": "error",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1707,
																"src": "843:5:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_RecoverError_$1704",
																	"typeString": "enum ECDSA.RecoverError"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 1726,
																	"name": "RecoverError",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1704,
																	"src": "852:12:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_enum$_RecoverError_$1704_$",
																		"typeString": "type(enum ECDSA.RecoverError)"
																	}
																},
																"id": 1727,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "865:22:12",
																"memberName": "InvalidSignatureLength",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1701,
																"src": "852:35:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_RecoverError_$1704",
																	"typeString": "enum ECDSA.RecoverError"
																}
															},
															"src": "843:44:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"falseBody": {
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_enum$_RecoverError_$1704",
																	"typeString": "enum ECDSA.RecoverError"
																},
																"id": 1737,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1734,
																	"name": "error",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1707,
																	"src": "965:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_enum$_RecoverError_$1704",
																		"typeString": "enum ECDSA.RecoverError"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"expression": {
																		"id": 1735,
																		"name": "RecoverError",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1704,
																		"src": "974:12:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_enum$_RecoverError_$1704_$",
																			"typeString": "type(enum ECDSA.RecoverError)"
																		}
																	},
																	"id": 1736,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "987:17:12",
																	"memberName": "InvalidSignatureS",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1702,
																	"src": "974:30:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_enum$_RecoverError_$1704",
																		"typeString": "enum ECDSA.RecoverError"
																	}
																},
																"src": "965:39:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1743,
															"nodeType": "IfStatement",
															"src": "961:114:12",
															"trueBody": {
																"id": 1742,
																"nodeType": "Block",
																"src": "1006:69:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"hexValue": "45434453413a20696e76616c6964207369676e6174757265202773272076616c7565",
																					"id": 1739,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "string",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "1027:36:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd",
																						"typeString": "literal_string \"ECDSA: invalid signature 's' value\""
																					},
																					"value": "ECDSA: invalid signature 's' value"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd",
																						"typeString": "literal_string \"ECDSA: invalid signature 's' value\""
																					}
																				],
																				"id": 1738,
																				"name": "revert",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967277,
																					4294967277
																				],
																				"referencedDeclaration": 4294967277,
																				"src": "1020:6:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (string memory) pure"
																				}
																			},
																			"id": 1740,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1020:44:12",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 1741,
																		"nodeType": "ExpressionStatement",
																		"src": "1020:44:12"
																	}
																]
															}
														},
														"id": 1744,
														"nodeType": "IfStatement",
														"src": "839:236:12",
														"trueBody": {
															"id": 1733,
															"nodeType": "Block",
															"src": "889:66:12",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"hexValue": "45434453413a20696e76616c6964207369676e6174757265206c656e677468",
																				"id": 1730,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "string",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "910:33:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77",
																					"typeString": "literal_string \"ECDSA: invalid signature length\""
																				},
																				"value": "ECDSA: invalid signature length"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77",
																					"typeString": "literal_string \"ECDSA: invalid signature length\""
																				}
																			],
																			"id": 1729,
																			"name": "revert",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [
																				4294967277,
																				4294967277
																			],
																			"referencedDeclaration": 4294967277,
																			"src": "903:6:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																				"typeString": "function (string memory) pure"
																			}
																		},
																		"id": 1731,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "903:41:12",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 1732,
																	"nodeType": "ExpressionStatement",
																	"src": "903:41:12"
																}
															]
														}
													},
													"id": 1745,
													"nodeType": "IfStatement",
													"src": "730:345:12",
													"trueBody": {
														"id": 1724,
														"nodeType": "Block",
														"src": "774:59:12",
														"statements": [
															{
																"expression": {
																	"arguments": [
																		{
																			"hexValue": "45434453413a20696e76616c6964207369676e6174757265",
																			"id": 1721,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "string",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "795:26:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be",
																				"typeString": "literal_string \"ECDSA: invalid signature\""
																			},
																			"value": "ECDSA: invalid signature"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be",
																				"typeString": "literal_string \"ECDSA: invalid signature\""
																			}
																		],
																		"id": 1720,
																		"name": "revert",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [
																			4294967277,
																			4294967277
																		],
																		"referencedDeclaration": 4294967277,
																		"src": "788:6:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																			"typeString": "function (string memory) pure"
																		}
																	},
																	"id": 1722,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "788:34:12",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$__$",
																		"typeString": "tuple()"
																	}
																},
																"id": 1723,
																"nodeType": "ExpressionStatement",
																"src": "788:34:12"
															}
														]
													}
												},
												"id": 1746,
												"nodeType": "IfStatement",
												"src": "634:441:12",
												"trueBody": {
													"id": 1715,
													"nodeType": "Block",
													"src": "669:55:12",
													"statements": [
														{
															"functionReturnParameters": 1709,
															"id": 1714,
															"nodeType": "Return",
															"src": "683:7:12"
														}
													]
												}
											}
										]
									},
									"id": 1748,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_throwError",
									"nameLocation": "579:11:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1708,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1707,
												"mutability": "mutable",
												"name": "error",
												"nameLocation": "604:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 1748,
												"src": "591:18:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$1704",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 1706,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1705,
														"name": "RecoverError",
														"nameLocations": [
															"591:12:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1704,
														"src": "591:12:12"
													},
													"referencedDeclaration": 1704,
													"src": "591:12:12",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$1704",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "590:20:12"
									},
									"returnParameters": {
										"id": 1709,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "624:0:12"
									},
									"scope": 2060,
									"src": "570:511:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1793,
										"nodeType": "Block",
										"src": "2249:626:12",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1764,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1761,
															"name": "signature",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1753,
															"src": "2263:9:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1762,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2273:6:12",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "2263:16:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "3635",
														"id": 1763,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2283:2:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_65_by_1",
															"typeString": "int_const 65"
														},
														"value": "65"
													},
													"src": "2263:22:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1791,
													"nodeType": "Block",
													"src": "2788:81:12",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 1785,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2818:1:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 1784,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "2810:7:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1783,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "2810:7:12",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1786,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2810:10:12",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 1787,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1704,
																			"src": "2822:12:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$1704_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 1788,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "2835:22:12",
																		"memberName": "InvalidSignatureLength",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1701,
																		"src": "2822:35:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$1704",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	}
																],
																"id": 1789,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2809:49:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1704_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError)"
																}
															},
															"functionReturnParameters": 1760,
															"id": 1790,
															"nodeType": "Return",
															"src": "2802:56:12"
														}
													]
												},
												"id": 1792,
												"nodeType": "IfStatement",
												"src": "2259:610:12",
												"trueBody": {
													"id": 1782,
													"nodeType": "Block",
													"src": "2287:495:12",
													"statements": [
														{
															"assignments": [
																1766
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1766,
																	"mutability": "mutable",
																	"name": "r",
																	"nameLocation": "2309:1:12",
																	"nodeType": "VariableDeclaration",
																	"scope": 1782,
																	"src": "2301:9:12",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 1765,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "2301:7:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1767,
															"nodeType": "VariableDeclarationStatement",
															"src": "2301:9:12"
														},
														{
															"assignments": [
																1769
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1769,
																	"mutability": "mutable",
																	"name": "s",
																	"nameLocation": "2332:1:12",
																	"nodeType": "VariableDeclaration",
																	"scope": 1782,
																	"src": "2324:9:12",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 1768,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "2324:7:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1770,
															"nodeType": "VariableDeclarationStatement",
															"src": "2324:9:12"
														},
														{
															"assignments": [
																1772
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1772,
																	"mutability": "mutable",
																	"name": "v",
																	"nameLocation": "2353:1:12",
																	"nodeType": "VariableDeclaration",
																	"scope": 1782,
																	"src": "2347:7:12",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	},
																	"typeName": {
																		"id": 1771,
																		"name": "uint8",
																		"nodeType": "ElementaryTypeName",
																		"src": "2347:5:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1773,
															"nodeType": "VariableDeclarationStatement",
															"src": "2347:7:12"
														},
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "2555:171:12",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "2573:32:12",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "signature",
																							"nodeType": "YulIdentifier",
																							"src": "2588:9:12"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2599:4:12",
																							"type": "",
																							"value": "0x20"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "2584:3:12"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2584:20:12"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "2578:5:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2578:27:12"
																		},
																		"variableNames": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "2573:1:12"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "2622:32:12",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "signature",
																							"nodeType": "YulIdentifier",
																							"src": "2637:9:12"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2648:4:12",
																							"type": "",
																							"value": "0x40"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "2633:3:12"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2633:20:12"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "2627:5:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2627:27:12"
																		},
																		"variableNames": [
																			{
																				"name": "s",
																				"nodeType": "YulIdentifier",
																				"src": "2622:1:12"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "2671:41:12",
																		"value": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2681:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "signature",
																									"nodeType": "YulIdentifier",
																									"src": "2694:9:12"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "2705:4:12",
																									"type": "",
																									"value": "0x60"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "2690:3:12"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "2690:20:12"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "2684:5:12"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2684:27:12"
																				}
																			],
																			"functionName": {
																				"name": "byte",
																				"nodeType": "YulIdentifier",
																				"src": "2676:4:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2676:36:12"
																		},
																		"variableNames": [
																			{
																				"name": "v",
																				"nodeType": "YulIdentifier",
																				"src": "2671:1:12"
																			}
																		]
																	}
																]
															},
															"documentation": "@solidity memory-safe-assembly",
															"evmVersion": "paris",
															"externalReferences": [
																{
																	"declaration": 1766,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2573:1:12",
																	"valueSize": 1
																},
																{
																	"declaration": 1769,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2622:1:12",
																	"valueSize": 1
																},
																{
																	"declaration": 1753,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2588:9:12",
																	"valueSize": 1
																},
																{
																	"declaration": 1753,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2637:9:12",
																	"valueSize": 1
																},
																{
																	"declaration": 1753,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2694:9:12",
																	"valueSize": 1
																},
																{
																	"declaration": 1772,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2671:1:12",
																	"valueSize": 1
																}
															],
															"id": 1774,
															"nodeType": "InlineAssembly",
															"src": "2546:180:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1776,
																		"name": "hash",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1751,
																		"src": "2757:4:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 1777,
																		"name": "v",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1772,
																		"src": "2763:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	{
																		"id": 1778,
																		"name": "r",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1766,
																		"src": "2766:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 1779,
																		"name": "s",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1769,
																		"src": "2769:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		},
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	],
																	"id": 1775,
																	"name": "tryRecover",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		1794,
																		1868,
																		1962
																	],
																	"referencedDeclaration": 1962,
																	"src": "2746:10:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1704_$",
																		"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"
																	}
																},
																"id": 1780,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2746:25:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1704_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError)"
																}
															},
															"functionReturnParameters": 1760,
															"id": 1781,
															"nodeType": "Return",
															"src": "2739:32:12"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1749,
										"nodeType": "StructuredDocumentation",
										"src": "1087:1053:12",
										"text": " @dev Returns the address that signed a hashed message (`hash`) with\n `signature` or error string. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it.\n Documentation for signature generation:\n - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n _Available since v4.3._"
									},
									"id": 1794,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryRecover",
									"nameLocation": "2154:10:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1754,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1751,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "2173:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 1794,
												"src": "2165:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1750,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2165:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1753,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "2192:9:12",
												"nodeType": "VariableDeclaration",
												"scope": 1794,
												"src": "2179:22:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1752,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2179:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2164:38:12"
									},
									"returnParameters": {
										"id": 1760,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1756,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1794,
												"src": "2226:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1755,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2226:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1759,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1794,
												"src": "2235:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$1704",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 1758,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1757,
														"name": "RecoverError",
														"nameLocations": [
															"2235:12:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1704,
														"src": "2235:12:12"
													},
													"referencedDeclaration": 1704,
													"src": "2235:12:12",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$1704",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2225:23:12"
									},
									"scope": 2060,
									"src": "2145:730:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1820,
										"nodeType": "Block",
										"src": "3748:140:12",
										"statements": [
											{
												"assignments": [
													1805,
													1808
												],
												"declarations": [
													{
														"constant": false,
														"id": 1805,
														"mutability": "mutable",
														"name": "recovered",
														"nameLocation": "3767:9:12",
														"nodeType": "VariableDeclaration",
														"scope": 1820,
														"src": "3759:17:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1804,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3759:7:12",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1808,
														"mutability": "mutable",
														"name": "error",
														"nameLocation": "3791:5:12",
														"nodeType": "VariableDeclaration",
														"scope": 1820,
														"src": "3778:18:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$1704",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 1807,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1806,
																"name": "RecoverError",
																"nameLocations": [
																	"3778:12:12"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1704,
																"src": "3778:12:12"
															},
															"referencedDeclaration": 1704,
															"src": "3778:12:12",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1704",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1813,
												"initialValue": {
													"arguments": [
														{
															"id": 1810,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1797,
															"src": "3811:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1811,
															"name": "signature",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1799,
															"src": "3817:9:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1809,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1794,
															1868,
															1962
														],
														"referencedDeclaration": 1794,
														"src": "3800:10:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$1704_$",
															"typeString": "function (bytes32,bytes memory) pure returns (address,enum ECDSA.RecoverError)"
														}
													},
													"id": 1812,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3800:27:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1704_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3758:69:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1815,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1808,
															"src": "3849:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1704",
																"typeString": "enum ECDSA.RecoverError"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_enum$_RecoverError_$1704",
																"typeString": "enum ECDSA.RecoverError"
															}
														],
														"id": 1814,
														"name": "_throwError",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1748,
														"src": "3837:11:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$1704_$returns$__$",
															"typeString": "function (enum ECDSA.RecoverError) pure"
														}
													},
													"id": 1816,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3837:18:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1817,
												"nodeType": "ExpressionStatement",
												"src": "3837:18:12"
											},
											{
												"expression": {
													"id": 1818,
													"name": "recovered",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1805,
													"src": "3872:9:12",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1803,
												"id": 1819,
												"nodeType": "Return",
												"src": "3865:16:12"
											}
										]
									},
									"documentation": {
										"id": 1795,
										"nodeType": "StructuredDocumentation",
										"src": "2881:775:12",
										"text": " @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it."
									},
									"id": 1821,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nameLocation": "3670:7:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1800,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1797,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "3686:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 1821,
												"src": "3678:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1796,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3678:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1799,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "3705:9:12",
												"nodeType": "VariableDeclaration",
												"scope": 1821,
												"src": "3692:22:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1798,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3692:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3677:38:12"
									},
									"returnParameters": {
										"id": 1803,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1802,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1821,
												"src": "3739:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1801,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3739:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3738:9:12"
									},
									"scope": 2060,
									"src": "3661:227:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1867,
										"nodeType": "Block",
										"src": "4245:203:12",
										"statements": [
											{
												"assignments": [
													1837
												],
												"declarations": [
													{
														"constant": false,
														"id": 1837,
														"mutability": "mutable",
														"name": "s",
														"nameLocation": "4263:1:12",
														"nodeType": "VariableDeclaration",
														"scope": 1867,
														"src": "4255:9:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 1836,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "4255:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1844,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 1843,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1838,
														"name": "vs",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1828,
														"src": "4267:2:12",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "307837666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666",
																"id": 1841,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4280:66:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1",
																	"typeString": "int_const 5789...(69 digits omitted)...9967"
																},
																"value": "0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1",
																	"typeString": "int_const 5789...(69 digits omitted)...9967"
																}
															],
															"id": 1840,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "4272:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_bytes32_$",
																"typeString": "type(bytes32)"
															},
															"typeName": {
																"id": 1839,
																"name": "bytes32",
																"nodeType": "ElementaryTypeName",
																"src": "4272:7:12",
																"typeDescriptions": {}
															}
														},
														"id": 1842,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4272:75:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "4267:80:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4255:92:12"
											},
											{
												"assignments": [
													1846
												],
												"declarations": [
													{
														"constant": false,
														"id": 1846,
														"mutability": "mutable",
														"name": "v",
														"nameLocation": "4363:1:12",
														"nodeType": "VariableDeclaration",
														"scope": 1867,
														"src": "4357:7:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														},
														"typeName": {
															"id": 1845,
															"name": "uint8",
															"nodeType": "ElementaryTypeName",
															"src": "4357:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1859,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1857,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1854,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"arguments": [
																				{
																					"id": 1851,
																					"name": "vs",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1828,
																					"src": "4382:2:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				],
																				"id": 1850,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "4374:7:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint256_$",
																					"typeString": "type(uint256)"
																				},
																				"typeName": {
																					"id": 1849,
																					"name": "uint256",
																					"nodeType": "ElementaryTypeName",
																					"src": "4374:7:12",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 1852,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "4374:11:12",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">>",
																		"rightExpression": {
																			"hexValue": "323535",
																			"id": 1853,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "4389:3:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_255_by_1",
																				"typeString": "int_const 255"
																			},
																			"value": "255"
																		},
																		"src": "4374:18:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1855,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "4373:20:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "3237",
																"id": 1856,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4396:2:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_27_by_1",
																	"typeString": "int_const 27"
																},
																"value": "27"
															},
															"src": "4373:25:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1848,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "4367:5:12",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_uint8_$",
															"typeString": "type(uint8)"
														},
														"typeName": {
															"id": 1847,
															"name": "uint8",
															"nodeType": "ElementaryTypeName",
															"src": "4367:5:12",
															"typeDescriptions": {}
														}
													},
													"id": 1858,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4367:32:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4357:42:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1861,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1824,
															"src": "4427:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1862,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1846,
															"src": "4433:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 1863,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1826,
															"src": "4436:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1864,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1837,
															"src": "4439:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1860,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1794,
															1868,
															1962
														],
														"referencedDeclaration": 1962,
														"src": "4416:10:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1704_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"
														}
													},
													"id": 1865,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4416:25:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1704_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError)"
													}
												},
												"functionReturnParameters": 1835,
												"id": 1866,
												"nodeType": "Return",
												"src": "4409:32:12"
											}
										]
									},
									"documentation": {
										"id": 1822,
										"nodeType": "StructuredDocumentation",
										"src": "3894:243:12",
										"text": " @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n _Available since v4.3._"
									},
									"id": 1868,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryRecover",
									"nameLocation": "4151:10:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1829,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1824,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "4170:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 1868,
												"src": "4162:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1823,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4162:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1826,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "4184:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 1868,
												"src": "4176:9:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1825,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4176:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1828,
												"mutability": "mutable",
												"name": "vs",
												"nameLocation": "4195:2:12",
												"nodeType": "VariableDeclaration",
												"scope": 1868,
												"src": "4187:10:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1827,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4187:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4161:37:12"
									},
									"returnParameters": {
										"id": 1835,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1831,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1868,
												"src": "4222:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1830,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4222:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1834,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1868,
												"src": "4231:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$1704",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 1833,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1832,
														"name": "RecoverError",
														"nameLocations": [
															"4231:12:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1704,
														"src": "4231:12:12"
													},
													"referencedDeclaration": 1704,
													"src": "4231:12:12",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$1704",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4221:23:12"
									},
									"scope": 2060,
									"src": "4142:306:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1897,
										"nodeType": "Block",
										"src": "4699:136:12",
										"statements": [
											{
												"assignments": [
													1881,
													1884
												],
												"declarations": [
													{
														"constant": false,
														"id": 1881,
														"mutability": "mutable",
														"name": "recovered",
														"nameLocation": "4718:9:12",
														"nodeType": "VariableDeclaration",
														"scope": 1897,
														"src": "4710:17:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1880,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4710:7:12",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1884,
														"mutability": "mutable",
														"name": "error",
														"nameLocation": "4742:5:12",
														"nodeType": "VariableDeclaration",
														"scope": 1897,
														"src": "4729:18:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$1704",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 1883,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1882,
																"name": "RecoverError",
																"nameLocations": [
																	"4729:12:12"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1704,
																"src": "4729:12:12"
															},
															"referencedDeclaration": 1704,
															"src": "4729:12:12",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1704",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1890,
												"initialValue": {
													"arguments": [
														{
															"id": 1886,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1871,
															"src": "4762:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1887,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1873,
															"src": "4768:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1888,
															"name": "vs",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1875,
															"src": "4771:2:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1885,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1794,
															1868,
															1962
														],
														"referencedDeclaration": 1868,
														"src": "4751:10:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1704_$",
															"typeString": "function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"
														}
													},
													"id": 1889,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4751:23:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1704_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4709:65:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1892,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1884,
															"src": "4796:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1704",
																"typeString": "enum ECDSA.RecoverError"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_enum$_RecoverError_$1704",
																"typeString": "enum ECDSA.RecoverError"
															}
														],
														"id": 1891,
														"name": "_throwError",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1748,
														"src": "4784:11:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$1704_$returns$__$",
															"typeString": "function (enum ECDSA.RecoverError) pure"
														}
													},
													"id": 1893,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4784:18:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1894,
												"nodeType": "ExpressionStatement",
												"src": "4784:18:12"
											},
											{
												"expression": {
													"id": 1895,
													"name": "recovered",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1881,
													"src": "4819:9:12",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1879,
												"id": 1896,
												"nodeType": "Return",
												"src": "4812:16:12"
											}
										]
									},
									"documentation": {
										"id": 1869,
										"nodeType": "StructuredDocumentation",
										"src": "4454:154:12",
										"text": " @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n _Available since v4.2._"
									},
									"id": 1898,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nameLocation": "4622:7:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1876,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1871,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "4638:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 1898,
												"src": "4630:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1870,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4630:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1873,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "4652:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 1898,
												"src": "4644:9:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1872,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4644:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1875,
												"mutability": "mutable",
												"name": "vs",
												"nameLocation": "4663:2:12",
												"nodeType": "VariableDeclaration",
												"scope": 1898,
												"src": "4655:10:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1874,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4655:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4629:37:12"
									},
									"returnParameters": {
										"id": 1879,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1878,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1898,
												"src": "4690:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1877,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4690:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4689:9:12"
									},
									"scope": 2060,
									"src": "4613:222:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1961,
										"nodeType": "Block",
										"src": "5120:1345:12",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1920,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1917,
																"name": "s",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1907,
																"src": "6016:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 1916,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6008:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 1915,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "6008:7:12",
																"typeDescriptions": {}
															}
														},
														"id": 1918,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6008:10:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130",
														"id": 1919,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6021:66:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1",
															"typeString": "int_const 5789...(69 digits omitted)...7168"
														},
														"value": "0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"
													},
													"src": "6008:79:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1930,
												"nodeType": "IfStatement",
												"src": "6004:161:12",
												"trueBody": {
													"id": 1929,
													"nodeType": "Block",
													"src": "6089:76:12",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 1923,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "6119:1:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 1922,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "6111:7:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1921,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "6111:7:12",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1924,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6111:10:12",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 1925,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1704,
																			"src": "6123:12:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$1704_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 1926,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "6136:17:12",
																		"memberName": "InvalidSignatureS",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1702,
																		"src": "6123:30:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$1704",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	}
																],
																"id": 1927,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6110:44:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1704_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError)"
																}
															},
															"functionReturnParameters": 1914,
															"id": 1928,
															"nodeType": "Return",
															"src": "6103:51:12"
														}
													]
												}
											},
											{
												"assignments": [
													1932
												],
												"declarations": [
													{
														"constant": false,
														"id": 1932,
														"mutability": "mutable",
														"name": "signer",
														"nameLocation": "6267:6:12",
														"nodeType": "VariableDeclaration",
														"scope": 1961,
														"src": "6259:14:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1931,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6259:7:12",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1939,
												"initialValue": {
													"arguments": [
														{
															"id": 1934,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1901,
															"src": "6286:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1935,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1903,
															"src": "6292:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 1936,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1905,
															"src": "6295:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1937,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1907,
															"src": "6298:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1933,
														"name": "ecrecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967290,
														"src": "6276:9:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address)"
														}
													},
													"id": 1938,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6276:24:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6259:41:12"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1945,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1940,
														"name": "signer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1932,
														"src": "6314:6:12",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1943,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6332:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1942,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6324:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1941,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6324:7:12",
																"typeDescriptions": {}
															}
														},
														"id": 1944,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6324:10:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6314:20:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1955,
												"nodeType": "IfStatement",
												"src": "6310:101:12",
												"trueBody": {
													"id": 1954,
													"nodeType": "Block",
													"src": "6336:75:12",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 1948,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "6366:1:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 1947,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "6358:7:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1946,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "6358:7:12",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1949,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6358:10:12",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 1950,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1704,
																			"src": "6370:12:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$1704_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 1951,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "6383:16:12",
																		"memberName": "InvalidSignature",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1700,
																		"src": "6370:29:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$1704",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	}
																],
																"id": 1952,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6357:43:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1704_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError)"
																}
															},
															"functionReturnParameters": 1914,
															"id": 1953,
															"nodeType": "Return",
															"src": "6350:50:12"
														}
													]
												}
											},
											{
												"expression": {
													"components": [
														{
															"id": 1956,
															"name": "signer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1932,
															"src": "6429:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 1957,
																"name": "RecoverError",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1704,
																"src": "6437:12:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_RecoverError_$1704_$",
																	"typeString": "type(enum ECDSA.RecoverError)"
																}
															},
															"id": 1958,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "6450:7:12",
															"memberName": "NoError",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1699,
															"src": "6437:20:12",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1704",
																"typeString": "enum ECDSA.RecoverError"
															}
														}
													],
													"id": 1959,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "6428:30:12",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1704_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError)"
													}
												},
												"functionReturnParameters": 1914,
												"id": 1960,
												"nodeType": "Return",
												"src": "6421:37:12"
											}
										]
									},
									"documentation": {
										"id": 1899,
										"nodeType": "StructuredDocumentation",
										"src": "4841:163:12",
										"text": " @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n `r` and `s` signature fields separately.\n _Available since v4.3._"
									},
									"id": 1962,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryRecover",
									"nameLocation": "5018:10:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1908,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1901,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "5037:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 1962,
												"src": "5029:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1900,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5029:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1903,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "5049:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 1962,
												"src": "5043:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1902,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5043:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1905,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "5060:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 1962,
												"src": "5052:9:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1904,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5052:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1907,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "5071:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 1962,
												"src": "5063:9:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1906,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5063:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5028:45:12"
									},
									"returnParameters": {
										"id": 1914,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1910,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1962,
												"src": "5097:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1909,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5097:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1913,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1962,
												"src": "5106:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$1704",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 1912,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1911,
														"name": "RecoverError",
														"nameLocations": [
															"5106:12:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1704,
														"src": "5106:12:12"
													},
													"referencedDeclaration": 1704,
													"src": "5106:12:12",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$1704",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5096:23:12"
									},
									"scope": 2060,
									"src": "5009:1456:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1994,
										"nodeType": "Block",
										"src": "6692:138:12",
										"statements": [
											{
												"assignments": [
													1977,
													1980
												],
												"declarations": [
													{
														"constant": false,
														"id": 1977,
														"mutability": "mutable",
														"name": "recovered",
														"nameLocation": "6711:9:12",
														"nodeType": "VariableDeclaration",
														"scope": 1994,
														"src": "6703:17:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1976,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6703:7:12",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1980,
														"mutability": "mutable",
														"name": "error",
														"nameLocation": "6735:5:12",
														"nodeType": "VariableDeclaration",
														"scope": 1994,
														"src": "6722:18:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$1704",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 1979,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1978,
																"name": "RecoverError",
																"nameLocations": [
																	"6722:12:12"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1704,
																"src": "6722:12:12"
															},
															"referencedDeclaration": 1704,
															"src": "6722:12:12",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1704",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1987,
												"initialValue": {
													"arguments": [
														{
															"id": 1982,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1965,
															"src": "6755:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1983,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1967,
															"src": "6761:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 1984,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1969,
															"src": "6764:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1985,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1971,
															"src": "6767:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1981,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1794,
															1868,
															1962
														],
														"referencedDeclaration": 1962,
														"src": "6744:10:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1704_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"
														}
													},
													"id": 1986,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6744:25:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1704_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6702:67:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1989,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1980,
															"src": "6791:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1704",
																"typeString": "enum ECDSA.RecoverError"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_enum$_RecoverError_$1704",
																"typeString": "enum ECDSA.RecoverError"
															}
														],
														"id": 1988,
														"name": "_throwError",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1748,
														"src": "6779:11:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$1704_$returns$__$",
															"typeString": "function (enum ECDSA.RecoverError) pure"
														}
													},
													"id": 1990,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6779:18:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1991,
												"nodeType": "ExpressionStatement",
												"src": "6779:18:12"
											},
											{
												"expression": {
													"id": 1992,
													"name": "recovered",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1977,
													"src": "6814:9:12",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1975,
												"id": 1993,
												"nodeType": "Return",
												"src": "6807:16:12"
											}
										]
									},
									"documentation": {
										"id": 1963,
										"nodeType": "StructuredDocumentation",
										"src": "6471:122:12",
										"text": " @dev Overload of {ECDSA-recover} that receives the `v`,\n `r` and `s` signature fields separately."
									},
									"id": 1995,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nameLocation": "6607:7:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1972,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1965,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "6623:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 1995,
												"src": "6615:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1964,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6615:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1967,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "6635:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 1995,
												"src": "6629:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1966,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "6629:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1969,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "6646:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 1995,
												"src": "6638:9:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1968,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6638:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1971,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "6657:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 1995,
												"src": "6649:9:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1970,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6649:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6614:45:12"
									},
									"returnParameters": {
										"id": 1975,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1974,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1995,
												"src": "6683:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1973,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6683:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6682:9:12"
									},
									"scope": 2060,
									"src": "6598:232:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2004,
										"nodeType": "Block",
										"src": "7206:310:12",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7362:148:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7383:4:12",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"hexValue": "19457468657265756d205369676e6564204d6573736167653a0a3332",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7389:34:12",
																		"type": "",
																		"value": "\u0019Ethereum Signed Message:\n32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7376:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7376:48:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7376:48:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7444:4:12",
																		"type": "",
																		"value": "0x1c"
																	},
																	{
																		"name": "hash",
																		"nodeType": "YulIdentifier",
																		"src": "7450:4:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7437:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7437:18:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7437:18:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7468:32:12",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7489:4:12",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7495:4:12",
																		"type": "",
																		"value": "0x3c"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nodeType": "YulIdentifier",
																	"src": "7479:9:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7479:21:12"
															},
															"variableNames": [
																{
																	"name": "message",
																	"nodeType": "YulIdentifier",
																	"src": "7468:7:12"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "paris",
												"externalReferences": [
													{
														"declaration": 1998,
														"isOffset": false,
														"isSlot": false,
														"src": "7450:4:12",
														"valueSize": 1
													},
													{
														"declaration": 2001,
														"isOffset": false,
														"isSlot": false,
														"src": "7468:7:12",
														"valueSize": 1
													}
												],
												"id": 2003,
												"nodeType": "InlineAssembly",
												"src": "7353:157:12"
											}
										]
									},
									"documentation": {
										"id": 1996,
										"nodeType": "StructuredDocumentation",
										"src": "6836:279:12",
										"text": " @dev Returns an Ethereum Signed Message, created from a `hash`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."
									},
									"id": 2005,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toEthSignedMessageHash",
									"nameLocation": "7129:22:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1999,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1998,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "7160:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 2005,
												"src": "7152:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1997,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7152:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7151:14:12"
									},
									"returnParameters": {
										"id": 2002,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2001,
												"mutability": "mutable",
												"name": "message",
												"nameLocation": "7197:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 2005,
												"src": "7189:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2000,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7189:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7188:17:12"
									},
									"scope": 2060,
									"src": "7120:396:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2026,
										"nodeType": "Block",
										"src": "7881:116:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "19457468657265756d205369676e6564204d6573736167653a0a",
																	"id": 2016,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7925:32:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4",
																		"typeString": "literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""
																	},
																	"value": "\u0019Ethereum Signed Message:\n"
																},
																{
																	"arguments": [
																		{
																			"expression": {
																				"id": 2019,
																				"name": "s",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2008,
																				"src": "7976:1:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			"id": 2020,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "7978:6:12",
																			"memberName": "length",
																			"nodeType": "MemberAccess",
																			"src": "7976:8:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 2017,
																			"name": "Strings",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1694,
																			"src": "7959:7:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_Strings_$1694_$",
																				"typeString": "type(library Strings)"
																			}
																		},
																		"id": 2018,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "7967:8:12",
																		"memberName": "toString",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1524,
																		"src": "7959:16:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																			"typeString": "function (uint256) pure returns (string memory)"
																		}
																	},
																	"id": 2021,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7959:26:12",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																},
																{
																	"id": 2022,
																	"name": "s",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2008,
																	"src": "7987:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4",
																		"typeString": "literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"expression": {
																	"id": 2014,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "7908:3:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2015,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "7912:12:12",
																"memberName": "encodePacked",
																"nodeType": "MemberAccess",
																"src": "7908:16:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 2023,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7908:81:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2013,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "7898:9:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 2024,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7898:92:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 2012,
												"id": 2025,
												"nodeType": "Return",
												"src": "7891:99:12"
											}
										]
									},
									"documentation": {
										"id": 2006,
										"nodeType": "StructuredDocumentation",
										"src": "7522:274:12",
										"text": " @dev Returns an Ethereum Signed Message, created from `s`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."
									},
									"id": 2027,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toEthSignedMessageHash",
									"nameLocation": "7810:22:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2009,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2008,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "7846:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 2027,
												"src": "7833:14:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2007,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7833:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7832:16:12"
									},
									"returnParameters": {
										"id": 2012,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2011,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2027,
												"src": "7872:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2010,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7872:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7871:9:12"
									},
									"scope": 2060,
									"src": "7801:196:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2038,
										"nodeType": "Block",
										"src": "8443:290:12",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "8505:222:12",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8519:22:12",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8536:4:12",
																		"type": "",
																		"value": "0x40"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "8530:5:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8530:11:12"
															},
															"variables": [
																{
																	"name": "ptr",
																	"nodeType": "YulTypedName",
																	"src": "8523:3:12",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "ptr",
																		"nodeType": "YulIdentifier",
																		"src": "8561:3:12"
																	},
																	{
																		"hexValue": "1901",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8566:10:12",
																		"type": "",
																		"value": "\u0019\u0001"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8554:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8554:23:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8554:23:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "ptr",
																				"nodeType": "YulIdentifier",
																				"src": "8601:3:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8606:4:12",
																				"type": "",
																				"value": "0x02"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8597:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8597:14:12"
																	},
																	{
																		"name": "domainSeparator",
																		"nodeType": "YulIdentifier",
																		"src": "8613:15:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8590:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8590:39:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8590:39:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "ptr",
																				"nodeType": "YulIdentifier",
																				"src": "8653:3:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8658:4:12",
																				"type": "",
																				"value": "0x22"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8649:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8649:14:12"
																	},
																	{
																		"name": "structHash",
																		"nodeType": "YulIdentifier",
																		"src": "8665:10:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8642:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8642:34:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8642:34:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8689:28:12",
															"value": {
																"arguments": [
																	{
																		"name": "ptr",
																		"nodeType": "YulIdentifier",
																		"src": "8707:3:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8712:4:12",
																		"type": "",
																		"value": "0x42"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nodeType": "YulIdentifier",
																	"src": "8697:9:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8697:20:12"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nodeType": "YulIdentifier",
																	"src": "8689:4:12"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "paris",
												"externalReferences": [
													{
														"declaration": 2035,
														"isOffset": false,
														"isSlot": false,
														"src": "8689:4:12",
														"valueSize": 1
													},
													{
														"declaration": 2030,
														"isOffset": false,
														"isSlot": false,
														"src": "8613:15:12",
														"valueSize": 1
													},
													{
														"declaration": 2032,
														"isOffset": false,
														"isSlot": false,
														"src": "8665:10:12",
														"valueSize": 1
													}
												],
												"id": 2037,
												"nodeType": "InlineAssembly",
												"src": "8496:231:12"
											}
										]
									},
									"documentation": {
										"id": 2028,
										"nodeType": "StructuredDocumentation",
										"src": "8003:328:12",
										"text": " @dev Returns an Ethereum Signed Typed Data, created from a\n `domainSeparator` and a `structHash`. This produces hash corresponding\n to the one signed with the\n https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n JSON-RPC method as part of EIP-712.\n See {recover}."
									},
									"id": 2039,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toTypedDataHash",
									"nameLocation": "8345:15:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2033,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2030,
												"mutability": "mutable",
												"name": "domainSeparator",
												"nameLocation": "8369:15:12",
												"nodeType": "VariableDeclaration",
												"scope": 2039,
												"src": "8361:23:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2029,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "8361:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2032,
												"mutability": "mutable",
												"name": "structHash",
												"nameLocation": "8394:10:12",
												"nodeType": "VariableDeclaration",
												"scope": 2039,
												"src": "8386:18:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2031,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "8386:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8360:45:12"
									},
									"returnParameters": {
										"id": 2036,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2035,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "8437:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 2039,
												"src": "8429:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2034,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "8429:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8428:14:12"
									},
									"scope": 2060,
									"src": "8336:397:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2058,
										"nodeType": "Block",
										"src": "9048:80:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "1900",
																	"id": 2052,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9092:10:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a",
																		"typeString": "literal_string hex\"1900\""
																	},
																	"value": "\u0019\u0000"
																},
																{
																	"id": 2053,
																	"name": "validator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2042,
																	"src": "9104:9:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2054,
																	"name": "data",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2044,
																	"src": "9115:4:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a",
																		"typeString": "literal_string hex\"1900\""
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"expression": {
																	"id": 2050,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "9075:3:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2051,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "9079:12:12",
																"memberName": "encodePacked",
																"nodeType": "MemberAccess",
																"src": "9075:16:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 2055,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9075:45:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2049,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "9065:9:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 2056,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9065:56:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 2048,
												"id": 2057,
												"nodeType": "Return",
												"src": "9058:63:12"
											}
										]
									},
									"documentation": {
										"id": 2040,
										"nodeType": "StructuredDocumentation",
										"src": "8739:193:12",
										"text": " @dev Returns an Ethereum Signed Data with intended validator, created from a\n `validator` and `data` according to the version 0 of EIP-191.\n See {recover}."
									},
									"id": 2059,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toDataWithIntendedValidatorHash",
									"nameLocation": "8946:31:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2045,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2042,
												"mutability": "mutable",
												"name": "validator",
												"nameLocation": "8986:9:12",
												"nodeType": "VariableDeclaration",
												"scope": 2059,
												"src": "8978:17:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2041,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8978:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2044,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "9010:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 2059,
												"src": "8997:17:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2043,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8997:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8977:38:12"
									},
									"returnParameters": {
										"id": 2048,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2047,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2059,
												"src": "9039:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2046,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "9039:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9038:9:12"
									},
									"scope": 2060,
									"src": "8937:191:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2061,
							"src": "369:8761:12",
							"usedErrors": []
						}
					],
					"src": "112:9019:12"
				},
				"id": 12
			},
			"@openzeppelin/contracts/utils/cryptography/EIP712.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/cryptography/EIP712.sol",
					"exportedSymbols": {
						"ECDSA": [
							2060
						],
						"EIP712": [
							2264
						],
						"IERC5267": [
							137
						],
						"Math": [
							3130
						],
						"ShortString": [
							1144
						],
						"ShortStrings": [
							1355
						],
						"SignedMath": [
							3235
						],
						"StorageSlot": [
							1465
						],
						"Strings": [
							1694
						]
					},
					"id": 2265,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2062,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".8"
							],
							"nodeType": "PragmaDirective",
							"src": "113:23:13"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
							"file": "./ECDSA.sol",
							"id": 2063,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2265,
							"sourceUnit": 2061,
							"src": "138:21:13",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/ShortStrings.sol",
							"file": "../ShortStrings.sol",
							"id": 2064,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2265,
							"sourceUnit": 1356,
							"src": "160:29:13",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/interfaces/IERC5267.sol",
							"file": "../../interfaces/IERC5267.sol",
							"id": 2065,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2265,
							"sourceUnit": 138,
							"src": "190:39:13",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 2067,
										"name": "IERC5267",
										"nameLocations": [
											"1837:8:13"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 137,
										"src": "1837:8:13"
									},
									"id": 2068,
									"nodeType": "InheritanceSpecifier",
									"src": "1837:8:13"
								}
							],
							"canonicalName": "EIP712",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 2066,
								"nodeType": "StructuredDocumentation",
								"src": "231:1577:13",
								"text": " @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n they need in their contracts using a combination of `abi.encode` and `keccak256`.\n This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n ({_hashTypedDataV4}).\n The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n the chain id to protect against replay attacks on an eventual fork of the chain.\n NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\n separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n _Available since v3.4._\n @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment"
							},
							"fullyImplemented": true,
							"id": 2264,
							"linearizedBaseContracts": [
								2264,
								137
							],
							"name": "EIP712",
							"nameLocation": "1827:6:13",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 2070,
									"libraryName": {
										"id": 2069,
										"name": "ShortStrings",
										"nameLocations": [
											"1858:12:13"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1355,
										"src": "1858:12:13"
									},
									"nodeType": "UsingForDirective",
									"src": "1852:25:13"
								},
								{
									"constant": true,
									"id": 2075,
									"mutability": "constant",
									"name": "_TYPE_HASH",
									"nameLocation": "1908:10:13",
									"nodeType": "VariableDeclaration",
									"scope": 2264,
									"src": "1883:141:13",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 2071,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "1883:7:13",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429",
												"id": 2073,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "string",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "1939:84:13",
												"typeDescriptions": {
													"typeIdentifier": "t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f",
													"typeString": "literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""
												},
												"value": "EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f",
													"typeString": "literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""
												}
											],
											"id": 2072,
											"name": "keccak256",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 4294967288,
											"src": "1929:9:13",
											"typeDescriptions": {
												"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
												"typeString": "function (bytes memory) pure returns (bytes32)"
											}
										},
										"id": 2074,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "functionCall",
										"lValueRequested": false,
										"nameLocations": [],
										"names": [],
										"nodeType": "FunctionCall",
										"src": "1929:95:13",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2077,
									"mutability": "immutable",
									"name": "_cachedDomainSeparator",
									"nameLocation": "2249:22:13",
									"nodeType": "VariableDeclaration",
									"scope": 2264,
									"src": "2223:48:13",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 2076,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "2223:7:13",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2079,
									"mutability": "immutable",
									"name": "_cachedChainId",
									"nameLocation": "2303:14:13",
									"nodeType": "VariableDeclaration",
									"scope": 2264,
									"src": "2277:40:13",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2078,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "2277:7:13",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2081,
									"mutability": "immutable",
									"name": "_cachedThis",
									"nameLocation": "2349:11:13",
									"nodeType": "VariableDeclaration",
									"scope": 2264,
									"src": "2323:37:13",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 2080,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "2323:7:13",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2083,
									"mutability": "immutable",
									"name": "_hashedName",
									"nameLocation": "2393:11:13",
									"nodeType": "VariableDeclaration",
									"scope": 2264,
									"src": "2367:37:13",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 2082,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "2367:7:13",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2085,
									"mutability": "immutable",
									"name": "_hashedVersion",
									"nameLocation": "2436:14:13",
									"nodeType": "VariableDeclaration",
									"scope": 2264,
									"src": "2410:40:13",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 2084,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "2410:7:13",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2088,
									"mutability": "immutable",
									"name": "_name",
									"nameLocation": "2487:5:13",
									"nodeType": "VariableDeclaration",
									"scope": 2264,
									"src": "2457:35:13",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_userDefinedValueType$_ShortString_$1144",
										"typeString": "ShortString"
									},
									"typeName": {
										"id": 2087,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 2086,
											"name": "ShortString",
											"nameLocations": [
												"2457:11:13"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 1144,
											"src": "2457:11:13"
										},
										"referencedDeclaration": 1144,
										"src": "2457:11:13",
										"typeDescriptions": {
											"typeIdentifier": "t_userDefinedValueType$_ShortString_$1144",
											"typeString": "ShortString"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2091,
									"mutability": "immutable",
									"name": "_version",
									"nameLocation": "2528:8:13",
									"nodeType": "VariableDeclaration",
									"scope": 2264,
									"src": "2498:38:13",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_userDefinedValueType$_ShortString_$1144",
										"typeString": "ShortString"
									},
									"typeName": {
										"id": 2090,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 2089,
											"name": "ShortString",
											"nameLocations": [
												"2498:11:13"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 1144,
											"src": "2498:11:13"
										},
										"referencedDeclaration": 1144,
										"src": "2498:11:13",
										"typeDescriptions": {
											"typeIdentifier": "t_userDefinedValueType$_ShortString_$1144",
											"typeString": "ShortString"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2093,
									"mutability": "mutable",
									"name": "_nameFallback",
									"nameLocation": "2557:13:13",
									"nodeType": "VariableDeclaration",
									"scope": 2264,
									"src": "2542:28:13",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 2092,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "2542:6:13",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2095,
									"mutability": "mutable",
									"name": "_versionFallback",
									"nameLocation": "2591:16:13",
									"nodeType": "VariableDeclaration",
									"scope": 2264,
									"src": "2576:31:13",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 2094,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "2576:6:13",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 2152,
										"nodeType": "Block",
										"src": "3233:376:13",
										"statements": [
											{
												"expression": {
													"id": 2108,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2103,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2088,
														"src": "3243:5:13",
														"typeDescriptions": {
															"typeIdentifier": "t_userDefinedValueType$_ShortString_$1144",
															"typeString": "ShortString"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 2106,
																"name": "_nameFallback",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2093,
																"src": "3282:13:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_storage",
																	"typeString": "string storage ref"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_string_storage",
																	"typeString": "string storage ref"
																}
															],
															"expression": {
																"id": 2104,
																"name": "name",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2098,
																"src": "3251:4:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string memory"
																}
															},
															"id": 2105,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3256:25:13",
															"memberName": "toShortStringWithFallback",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1296,
															"src": "3251:30:13",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_storage_ptr_$returns$_t_userDefinedValueType$_ShortString_$1144_$attached_to$_t_string_memory_ptr_$",
																"typeString": "function (string memory,string storage pointer) returns (ShortString)"
															}
														},
														"id": 2107,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3251:45:13",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_userDefinedValueType$_ShortString_$1144",
															"typeString": "ShortString"
														}
													},
													"src": "3243:53:13",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1144",
														"typeString": "ShortString"
													}
												},
												"id": 2109,
												"nodeType": "ExpressionStatement",
												"src": "3243:53:13"
											},
											{
												"expression": {
													"id": 2115,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2110,
														"name": "_version",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2091,
														"src": "3306:8:13",
														"typeDescriptions": {
															"typeIdentifier": "t_userDefinedValueType$_ShortString_$1144",
															"typeString": "ShortString"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 2113,
																"name": "_versionFallback",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2095,
																"src": "3351:16:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_storage",
																	"typeString": "string storage ref"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_string_storage",
																	"typeString": "string storage ref"
																}
															],
															"expression": {
																"id": 2111,
																"name": "version",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2100,
																"src": "3317:7:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string memory"
																}
															},
															"id": 2112,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3325:25:13",
															"memberName": "toShortStringWithFallback",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1296,
															"src": "3317:33:13",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_storage_ptr_$returns$_t_userDefinedValueType$_ShortString_$1144_$attached_to$_t_string_memory_ptr_$",
																"typeString": "function (string memory,string storage pointer) returns (ShortString)"
															}
														},
														"id": 2114,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3317:51:13",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_userDefinedValueType$_ShortString_$1144",
															"typeString": "ShortString"
														}
													},
													"src": "3306:62:13",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1144",
														"typeString": "ShortString"
													}
												},
												"id": 2116,
												"nodeType": "ExpressionStatement",
												"src": "3306:62:13"
											},
											{
												"expression": {
													"id": 2124,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2117,
														"name": "_hashedName",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2083,
														"src": "3378:11:13",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 2121,
																		"name": "name",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2098,
																		"src": "3408:4:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 2120,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3402:5:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 2119,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "3402:5:13",
																		"typeDescriptions": {}
																	}
																},
																"id": 2122,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3402:11:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 2118,
															"name": "keccak256",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967288,
															"src": "3392:9:13",
															"typeDescriptions": {
																"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																"typeString": "function (bytes memory) pure returns (bytes32)"
															}
														},
														"id": 2123,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3392:22:13",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "3378:36:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 2125,
												"nodeType": "ExpressionStatement",
												"src": "3378:36:13"
											},
											{
												"expression": {
													"id": 2133,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2126,
														"name": "_hashedVersion",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2085,
														"src": "3424:14:13",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 2130,
																		"name": "version",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2100,
																		"src": "3457:7:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 2129,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3451:5:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 2128,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "3451:5:13",
																		"typeDescriptions": {}
																	}
																},
																"id": 2131,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3451:14:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 2127,
															"name": "keccak256",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967288,
															"src": "3441:9:13",
															"typeDescriptions": {
																"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																"typeString": "function (bytes memory) pure returns (bytes32)"
															}
														},
														"id": 2132,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3441:25:13",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "3424:42:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 2134,
												"nodeType": "ExpressionStatement",
												"src": "3424:42:13"
											},
											{
												"expression": {
													"id": 2138,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2135,
														"name": "_cachedChainId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2079,
														"src": "3477:14:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 2136,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "3494:5:13",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 2137,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3500:7:13",
														"memberName": "chainid",
														"nodeType": "MemberAccess",
														"src": "3494:13:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3477:30:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2139,
												"nodeType": "ExpressionStatement",
												"src": "3477:30:13"
											},
											{
												"expression": {
													"id": 2143,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2140,
														"name": "_cachedDomainSeparator",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2077,
														"src": "3517:22:13",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 2141,
															"name": "_buildDomainSeparator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2200,
															"src": "3542:21:13",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_bytes32_$",
																"typeString": "function () view returns (bytes32)"
															}
														},
														"id": 2142,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3542:23:13",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "3517:48:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 2144,
												"nodeType": "ExpressionStatement",
												"src": "3517:48:13"
											},
											{
												"expression": {
													"id": 2150,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2145,
														"name": "_cachedThis",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2081,
														"src": "3575:11:13",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 2148,
																"name": "this",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967268,
																"src": "3597:4:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_EIP712_$2264",
																	"typeString": "contract EIP712"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_EIP712_$2264",
																	"typeString": "contract EIP712"
																}
															],
															"id": 2147,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "3589:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 2146,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "3589:7:13",
																"typeDescriptions": {}
															}
														},
														"id": 2149,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3589:13:13",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3575:27:13",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 2151,
												"nodeType": "ExpressionStatement",
												"src": "3575:27:13"
											}
										]
									},
									"documentation": {
										"id": 2096,
										"nodeType": "StructuredDocumentation",
										"src": "2614:559:13",
										"text": " @dev Initializes the domain separator and parameter caches.\n The meaning of `name` and `version` is specified in\n https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n - `version`: the current major version of the signing domain.\n NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n contract upgrade]."
									},
									"id": 2153,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2101,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2098,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "3204:4:13",
												"nodeType": "VariableDeclaration",
												"scope": 2153,
												"src": "3190:18:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2097,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3190:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2100,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "3224:7:13",
												"nodeType": "VariableDeclaration",
												"scope": 2153,
												"src": "3210:21:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2099,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3210:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3189:43:13"
									},
									"returnParameters": {
										"id": 2102,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3233:0:13"
									},
									"scope": 2264,
									"src": "3178:431:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2178,
										"nodeType": "Block",
										"src": "3757:200:13",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 2169,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"id": 2164,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 2161,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "3779:4:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_EIP712_$2264",
																		"typeString": "contract EIP712"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_EIP712_$2264",
																		"typeString": "contract EIP712"
																	}
																],
																"id": 2160,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3771:7:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2159,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3771:7:13",
																	"typeDescriptions": {}
																}
															},
															"id": 2162,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3771:13:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"id": 2163,
															"name": "_cachedThis",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2081,
															"src": "3788:11:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"src": "3771:28:13",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2168,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 2165,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967292,
																"src": "3803:5:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 2166,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3809:7:13",
															"memberName": "chainid",
															"nodeType": "MemberAccess",
															"src": "3803:13:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"id": 2167,
															"name": "_cachedChainId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2079,
															"src": "3820:14:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3803:31:13",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "3771:63:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2176,
													"nodeType": "Block",
													"src": "3896:55:13",
													"statements": [
														{
															"expression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 2173,
																	"name": "_buildDomainSeparator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2200,
																	"src": "3917:21:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_bytes32_$",
																		"typeString": "function () view returns (bytes32)"
																	}
																},
																"id": 2174,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3917:23:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"functionReturnParameters": 2158,
															"id": 2175,
															"nodeType": "Return",
															"src": "3910:30:13"
														}
													]
												},
												"id": 2177,
												"nodeType": "IfStatement",
												"src": "3767:184:13",
												"trueBody": {
													"id": 2172,
													"nodeType": "Block",
													"src": "3836:54:13",
													"statements": [
														{
															"expression": {
																"id": 2170,
																"name": "_cachedDomainSeparator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2077,
																"src": "3857:22:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"functionReturnParameters": 2158,
															"id": 2171,
															"nodeType": "Return",
															"src": "3850:29:13"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2154,
										"nodeType": "StructuredDocumentation",
										"src": "3615:75:13",
										"text": " @dev Returns the domain separator for the current chain."
									},
									"id": 2179,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_domainSeparatorV4",
									"nameLocation": "3704:18:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2155,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3722:2:13"
									},
									"returnParameters": {
										"id": 2158,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2157,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2179,
												"src": "3748:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2156,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3748:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3747:9:13"
									},
									"scope": 2264,
									"src": "3695:262:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2199,
										"nodeType": "Block",
										"src": "4027:116:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 2187,
																	"name": "_TYPE_HASH",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2075,
																	"src": "4065:10:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 2188,
																	"name": "_hashedName",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2083,
																	"src": "4077:11:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 2189,
																	"name": "_hashedVersion",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2085,
																	"src": "4090:14:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"expression": {
																		"id": 2190,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "4106:5:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 2191,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "4112:7:13",
																	"memberName": "chainid",
																	"nodeType": "MemberAccess",
																	"src": "4106:13:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"arguments": [
																		{
																			"id": 2194,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "4129:4:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_EIP712_$2264",
																				"typeString": "contract EIP712"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_EIP712_$2264",
																				"typeString": "contract EIP712"
																			}
																		],
																		"id": 2193,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "4121:7:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 2192,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "4121:7:13",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2195,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4121:13:13",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 2185,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "4054:3:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2186,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "4058:6:13",
																"memberName": "encode",
																"nodeType": "MemberAccess",
																"src": "4054:10:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 2196,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4054:81:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2184,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "4044:9:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 2197,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4044:92:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 2183,
												"id": 2198,
												"nodeType": "Return",
												"src": "4037:99:13"
											}
										]
									},
									"id": 2200,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_buildDomainSeparator",
									"nameLocation": "3972:21:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2180,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3993:2:13"
									},
									"returnParameters": {
										"id": 2183,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2182,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2200,
												"src": "4018:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2181,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4018:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4017:9:13"
									},
									"scope": 2264,
									"src": "3963:180:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 2215,
										"nodeType": "Block",
										"src": "4854:79:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2210,
																"name": "_domainSeparatorV4",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2179,
																"src": "4893:18:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_bytes32_$",
																	"typeString": "function () view returns (bytes32)"
																}
															},
															"id": 2211,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4893:20:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2212,
															"name": "structHash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2203,
															"src": "4915:10:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 2208,
															"name": "ECDSA",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2060,
															"src": "4871:5:13",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_ECDSA_$2060_$",
																"typeString": "type(library ECDSA)"
															}
														},
														"id": 2209,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4877:15:13",
														"memberName": "toTypedDataHash",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2039,
														"src": "4871:21:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
															"typeString": "function (bytes32,bytes32) pure returns (bytes32)"
														}
													},
													"id": 2213,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4871:55:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 2207,
												"id": 2214,
												"nodeType": "Return",
												"src": "4864:62:13"
											}
										]
									},
									"documentation": {
										"id": 2201,
										"nodeType": "StructuredDocumentation",
										"src": "4149:614:13",
										"text": " @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n function returns the hash of the fully encoded EIP712 message for this domain.\n This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n ```solidity\n bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     keccak256(\"Mail(address to,string contents)\"),\n     mailTo,\n     keccak256(bytes(mailContents))\n )));\n address signer = ECDSA.recover(digest, signature);\n ```"
									},
									"id": 2216,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_hashTypedDataV4",
									"nameLocation": "4777:16:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2204,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2203,
												"mutability": "mutable",
												"name": "structHash",
												"nameLocation": "4802:10:13",
												"nodeType": "VariableDeclaration",
												"scope": 2216,
												"src": "4794:18:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2202,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4794:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4793:20:13"
									},
									"returnParameters": {
										"id": 2207,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2206,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2216,
												"src": "4845:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2205,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4845:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4844:9:13"
									},
									"scope": 2264,
									"src": "4768:165:13",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										136
									],
									"body": {
										"id": 2262,
										"nodeType": "Block",
										"src": "5366:288:13",
										"statements": [
											{
												"expression": {
													"components": [
														{
															"hexValue": "0f",
															"id": 2236,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "hexString",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5397:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_3d725c5ee53025f027da36bea8d3af3b6a3e9d2d1542d47c162631de48e66c1c",
																"typeString": "literal_string hex\"0f\""
															},
															"value": "\u000f"
														},
														{
															"arguments": [
																{
																	"id": 2239,
																	"name": "_nameFallback",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2093,
																	"src": "5454:13:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_storage",
																		"typeString": "string storage ref"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_string_storage",
																		"typeString": "string storage ref"
																	}
																],
																"expression": {
																	"id": 2237,
																	"name": "_name",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2088,
																	"src": "5427:5:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_userDefinedValueType$_ShortString_$1144",
																		"typeString": "ShortString"
																	}
																},
																"id": 2238,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "5433:20:13",
																"memberName": "toStringWithFallback",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1323,
																"src": "5427:26:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_userDefinedValueType$_ShortString_$1144_$_t_string_storage_ptr_$returns$_t_string_memory_ptr_$attached_to$_t_userDefinedValueType$_ShortString_$1144_$",
																	"typeString": "function (ShortString,string storage pointer) pure returns (string memory)"
																}
															},
															"id": 2240,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5427:41:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"arguments": [
																{
																	"id": 2243,
																	"name": "_versionFallback",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2095,
																	"src": "5512:16:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_storage",
																		"typeString": "string storage ref"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_string_storage",
																		"typeString": "string storage ref"
																	}
																],
																"expression": {
																	"id": 2241,
																	"name": "_version",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2091,
																	"src": "5482:8:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_userDefinedValueType$_ShortString_$1144",
																		"typeString": "ShortString"
																	}
																},
																"id": 2242,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "5491:20:13",
																"memberName": "toStringWithFallback",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1323,
																"src": "5482:29:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_userDefinedValueType$_ShortString_$1144_$_t_string_storage_ptr_$returns$_t_string_memory_ptr_$attached_to$_t_userDefinedValueType$_ShortString_$1144_$",
																	"typeString": "function (ShortString,string storage pointer) pure returns (string memory)"
																}
															},
															"id": 2244,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5482:47:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"expression": {
																"id": 2245,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967292,
																"src": "5543:5:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 2246,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5549:7:13",
															"memberName": "chainid",
															"nodeType": "MemberAccess",
															"src": "5543:13:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"arguments": [
																{
																	"id": 2249,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "5578:4:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_EIP712_$2264",
																		"typeString": "contract EIP712"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_EIP712_$2264",
																		"typeString": "contract EIP712"
																	}
																],
																"id": 2248,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5570:7:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2247,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "5570:7:13",
																	"typeDescriptions": {}
																}
															},
															"id": 2250,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5570:13:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 2253,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5605:1:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 2252,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5597:7:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 2251,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "5597:7:13",
																	"typeDescriptions": {}
																}
															},
															"id": 2254,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5597:10:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 2258,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5635:1:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 2257,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "NewExpression",
																"src": "5621:13:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (uint256[] memory)"
																},
																"typeName": {
																	"baseType": {
																		"id": 2255,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "5625:7:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2256,
																	"nodeType": "ArrayTypeName",
																	"src": "5625:9:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
																		"typeString": "uint256[]"
																	}
																}
															},
															"id": 2259,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5621:16:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
																"typeString": "uint256[] memory"
															}
														}
													],
													"id": 2260,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "5383:264:13",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_stringliteral_3d725c5ee53025f027da36bea8d3af3b6a3e9d2d1542d47c162631de48e66c1c_$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_uint256_$_t_address_$_t_bytes32_$_t_array$_t_uint256_$dyn_memory_ptr_$",
														"typeString": "tuple(literal_string hex\"0f\",string memory,string memory,uint256,address,bytes32,uint256[] memory)"
													}
												},
												"functionReturnParameters": 2235,
												"id": 2261,
												"nodeType": "Return",
												"src": "5376:271:13"
											}
										]
									},
									"documentation": {
										"id": 2217,
										"nodeType": "StructuredDocumentation",
										"src": "4939:77:13",
										"text": " @dev See {EIP-5267}.\n _Available since v4.9._"
									},
									"functionSelector": "84b0196e",
									"id": 2263,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "eip712Domain",
									"nameLocation": "5030:12:13",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2219,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "5097:8:13"
									},
									"parameters": {
										"id": 2218,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5042:2:13"
									},
									"returnParameters": {
										"id": 2235,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2221,
												"mutability": "mutable",
												"name": "fields",
												"nameLocation": "5143:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 2263,
												"src": "5136:13:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes1",
													"typeString": "bytes1"
												},
												"typeName": {
													"id": 2220,
													"name": "bytes1",
													"nodeType": "ElementaryTypeName",
													"src": "5136:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2223,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "5177:4:13",
												"nodeType": "VariableDeclaration",
												"scope": 2263,
												"src": "5163:18:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2222,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5163:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2225,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "5209:7:13",
												"nodeType": "VariableDeclaration",
												"scope": 2263,
												"src": "5195:21:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2224,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5195:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2227,
												"mutability": "mutable",
												"name": "chainId",
												"nameLocation": "5238:7:13",
												"nodeType": "VariableDeclaration",
												"scope": 2263,
												"src": "5230:15:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2226,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5230:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2229,
												"mutability": "mutable",
												"name": "verifyingContract",
												"nameLocation": "5267:17:13",
												"nodeType": "VariableDeclaration",
												"scope": 2263,
												"src": "5259:25:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2228,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5259:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2231,
												"mutability": "mutable",
												"name": "salt",
												"nameLocation": "5306:4:13",
												"nodeType": "VariableDeclaration",
												"scope": 2263,
												"src": "5298:12:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2230,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5298:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2234,
												"mutability": "mutable",
												"name": "extensions",
												"nameLocation": "5341:10:13",
												"nodeType": "VariableDeclaration",
												"scope": 2263,
												"src": "5324:27:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 2232,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "5324:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2233,
													"nodeType": "ArrayTypeName",
													"src": "5324:9:13",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5122:239:13"
									},
									"scope": 2264,
									"src": "5021:633:13",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								}
							],
							"scope": 2265,
							"src": "1809:3847:13",
							"usedErrors": [
								1152,
								1154
							]
						}
					],
					"src": "113:5544:13"
				},
				"id": 13
			},
			"@openzeppelin/contracts/utils/math/Math.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/math/Math.sol",
					"exportedSymbols": {
						"Math": [
							3130
						]
					},
					"id": 3131,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2266,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "103:23:14"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Math",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2267,
								"nodeType": "StructuredDocumentation",
								"src": "128:73:14",
								"text": " @dev Standard math utilities missing in the Solidity language."
							},
							"fullyImplemented": true,
							"id": 3130,
							"linearizedBaseContracts": [
								3130
							],
							"name": "Math",
							"nameLocation": "210:4:14",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "Math.Rounding",
									"id": 2271,
									"members": [
										{
											"id": 2268,
											"name": "Down",
											"nameLocation": "245:4:14",
											"nodeType": "EnumValue",
											"src": "245:4:14"
										},
										{
											"id": 2269,
											"name": "Up",
											"nameLocation": "287:2:14",
											"nodeType": "EnumValue",
											"src": "287:2:14"
										},
										{
											"id": 2270,
											"name": "Zero",
											"nameLocation": "318:4:14",
											"nodeType": "EnumValue",
											"src": "318:4:14"
										}
									],
									"name": "Rounding",
									"nameLocation": "226:8:14",
									"nodeType": "EnumDefinition",
									"src": "221:122:14"
								},
								{
									"body": {
										"id": 2288,
										"nodeType": "Block",
										"src": "480:37:14",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2283,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2281,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2274,
															"src": "497:1:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"id": 2282,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2276,
															"src": "501:1:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "497:5:14",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 2285,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2276,
														"src": "509:1:14",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2286,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "497:13:14",
													"trueExpression": {
														"id": 2284,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2274,
														"src": "505:1:14",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2280,
												"id": 2287,
												"nodeType": "Return",
												"src": "490:20:14"
											}
										]
									},
									"documentation": {
										"id": 2272,
										"nodeType": "StructuredDocumentation",
										"src": "349:59:14",
										"text": " @dev Returns the largest of two numbers."
									},
									"id": 2289,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "max",
									"nameLocation": "422:3:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2277,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2274,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "434:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 2289,
												"src": "426:9:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2273,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "426:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2276,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "445:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 2289,
												"src": "437:9:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2275,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "437:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "425:22:14"
									},
									"returnParameters": {
										"id": 2280,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2279,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2289,
												"src": "471:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2278,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "471:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "470:9:14"
									},
									"scope": 3130,
									"src": "413:104:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2306,
										"nodeType": "Block",
										"src": "655:37:14",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2301,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2299,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2292,
															"src": "672:1:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"id": 2300,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2294,
															"src": "676:1:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "672:5:14",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 2303,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2294,
														"src": "684:1:14",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2304,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "672:13:14",
													"trueExpression": {
														"id": 2302,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2292,
														"src": "680:1:14",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2298,
												"id": 2305,
												"nodeType": "Return",
												"src": "665:20:14"
											}
										]
									},
									"documentation": {
										"id": 2290,
										"nodeType": "StructuredDocumentation",
										"src": "523:60:14",
										"text": " @dev Returns the smallest of two numbers."
									},
									"id": 2307,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "min",
									"nameLocation": "597:3:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2295,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2292,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "609:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 2307,
												"src": "601:9:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2291,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "601:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2294,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "620:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 2307,
												"src": "612:9:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2293,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "612:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "600:22:14"
									},
									"returnParameters": {
										"id": 2298,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2297,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2307,
												"src": "646:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2296,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "646:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "645:9:14"
									},
									"scope": 3130,
									"src": "588:104:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2329,
										"nodeType": "Block",
										"src": "876:82:14",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2327,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2319,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2317,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2310,
																	"src": "931:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 2318,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2312,
																	"src": "935:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "931:5:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 2320,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "930:7:14",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2326,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2323,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2321,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2310,
																		"src": "941:1:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "^",
																	"rightExpression": {
																		"id": 2322,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2312,
																		"src": "945:1:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "941:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2324,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "940:7:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"hexValue": "32",
															"id": 2325,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "950:1:14",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"src": "940:11:14",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "930:21:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2316,
												"id": 2328,
												"nodeType": "Return",
												"src": "923:28:14"
											}
										]
									},
									"documentation": {
										"id": 2308,
										"nodeType": "StructuredDocumentation",
										"src": "698:102:14",
										"text": " @dev Returns the average of two numbers. The result is rounded towards\n zero."
									},
									"id": 2330,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "average",
									"nameLocation": "814:7:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2313,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2310,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "830:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 2330,
												"src": "822:9:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2309,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "822:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2312,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "841:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 2330,
												"src": "833:9:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2311,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "833:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "821:22:14"
									},
									"returnParameters": {
										"id": 2316,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2315,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2330,
												"src": "867:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2314,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "867:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "866:9:14"
									},
									"scope": 3130,
									"src": "805:153:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2354,
										"nodeType": "Block",
										"src": "1228:123:14",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2342,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2340,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2333,
															"src": "1316:1:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 2341,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1321:1:14",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "1316:6:14",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2351,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2349,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2346,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2344,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2333,
																			"src": "1330:1:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"hexValue": "31",
																			"id": 2345,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1334:1:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "1330:5:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2347,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1329:7:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 2348,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2335,
																"src": "1339:1:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1329:11:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 2350,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1343:1:14",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "1329:15:14",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2352,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "1316:28:14",
													"trueExpression": {
														"hexValue": "30",
														"id": 2343,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1325:1:14",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2339,
												"id": 2353,
												"nodeType": "Return",
												"src": "1309:35:14"
											}
										]
									},
									"documentation": {
										"id": 2331,
										"nodeType": "StructuredDocumentation",
										"src": "964:188:14",
										"text": " @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."
									},
									"id": 2355,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "ceilDiv",
									"nameLocation": "1166:7:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2336,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2333,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1182:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 2355,
												"src": "1174:9:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2332,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1174:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2335,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1193:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 2355,
												"src": "1185:9:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2334,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1185:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1173:22:14"
									},
									"returnParameters": {
										"id": 2339,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2338,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2355,
												"src": "1219:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2337,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1219:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1218:9:14"
									},
									"scope": 3130,
									"src": "1157:194:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2477,
										"nodeType": "Block",
										"src": "1765:4115:14",
										"statements": [
											{
												"id": 2476,
												"nodeType": "UncheckedBlock",
												"src": "1775:4099:14",
												"statements": [
													{
														"assignments": [
															2368
														],
														"declarations": [
															{
																"constant": false,
																"id": 2368,
																"mutability": "mutable",
																"name": "prod0",
																"nameLocation": "2104:5:14",
																"nodeType": "VariableDeclaration",
																"scope": 2476,
																"src": "2096:13:14",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2367,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2096:7:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2369,
														"nodeType": "VariableDeclarationStatement",
														"src": "2096:13:14"
													},
													{
														"assignments": [
															2371
														],
														"declarations": [
															{
																"constant": false,
																"id": 2371,
																"mutability": "mutable",
																"name": "prod1",
																"nameLocation": "2176:5:14",
																"nodeType": "VariableDeclaration",
																"scope": 2476,
																"src": "2168:13:14",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2370,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2168:7:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2372,
														"nodeType": "VariableDeclarationStatement",
														"src": "2168:13:14"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "2248:157:14",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2266:30:14",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nodeType": "YulIdentifier",
																				"src": "2283:1:14"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "2286:1:14"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2293:1:14",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nodeType": "YulIdentifier",
																					"src": "2289:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2289:6:14"
																			}
																		],
																		"functionName": {
																			"name": "mulmod",
																			"nodeType": "YulIdentifier",
																			"src": "2276:6:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2276:20:14"
																	},
																	"variables": [
																		{
																			"name": "mm",
																			"nodeType": "YulTypedName",
																			"src": "2270:2:14",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2313:18:14",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nodeType": "YulIdentifier",
																				"src": "2326:1:14"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "2329:1:14"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "2322:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2322:9:14"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nodeType": "YulIdentifier",
																			"src": "2313:5:14"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2348:43:14",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "mm",
																						"nodeType": "YulIdentifier",
																						"src": "2365:2:14"
																					},
																					{
																						"name": "prod0",
																						"nodeType": "YulIdentifier",
																						"src": "2369:5:14"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "2361:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2361:14:14"
																			},
																			{
																				"arguments": [
																					{
																						"name": "mm",
																						"nodeType": "YulIdentifier",
																						"src": "2380:2:14"
																					},
																					{
																						"name": "prod0",
																						"nodeType": "YulIdentifier",
																						"src": "2384:5:14"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "2377:2:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2377:13:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2357:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2357:34:14"
																	},
																	"variableNames": [
																		{
																			"name": "prod1",
																			"nodeType": "YulIdentifier",
																			"src": "2348:5:14"
																		}
																	]
																}
															]
														},
														"evmVersion": "paris",
														"externalReferences": [
															{
																"declaration": 2368,
																"isOffset": false,
																"isSlot": false,
																"src": "2313:5:14",
																"valueSize": 1
															},
															{
																"declaration": 2368,
																"isOffset": false,
																"isSlot": false,
																"src": "2369:5:14",
																"valueSize": 1
															},
															{
																"declaration": 2368,
																"isOffset": false,
																"isSlot": false,
																"src": "2384:5:14",
																"valueSize": 1
															},
															{
																"declaration": 2371,
																"isOffset": false,
																"isSlot": false,
																"src": "2348:5:14",
																"valueSize": 1
															},
															{
																"declaration": 2358,
																"isOffset": false,
																"isSlot": false,
																"src": "2283:1:14",
																"valueSize": 1
															},
															{
																"declaration": 2358,
																"isOffset": false,
																"isSlot": false,
																"src": "2326:1:14",
																"valueSize": 1
															},
															{
																"declaration": 2360,
																"isOffset": false,
																"isSlot": false,
																"src": "2286:1:14",
																"valueSize": 1
															},
															{
																"declaration": 2360,
																"isOffset": false,
																"isSlot": false,
																"src": "2329:1:14",
																"valueSize": 1
															}
														],
														"id": 2373,
														"nodeType": "InlineAssembly",
														"src": "2239:166:14"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2376,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2374,
																"name": "prod1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2371,
																"src": "2486:5:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2375,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2495:1:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2486:10:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2382,
														"nodeType": "IfStatement",
														"src": "2482:368:14",
														"trueBody": {
															"id": 2381,
															"nodeType": "Block",
															"src": "2498:352:14",
															"statements": [
																{
																	"expression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2379,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2377,
																			"name": "prod0",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2368,
																			"src": "2816:5:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "/",
																		"rightExpression": {
																			"id": 2378,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2362,
																			"src": "2824:11:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "2816:19:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"functionReturnParameters": 2366,
																	"id": 2380,
																	"nodeType": "Return",
																	"src": "2809:26:14"
																}
															]
														}
													},
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2386,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2384,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2362,
																		"src": "2960:11:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"id": 2385,
																		"name": "prod1",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2371,
																		"src": "2974:5:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2960:19:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"hexValue": "4d6174683a206d756c446976206f766572666c6f77",
																	"id": 2387,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2981:23:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851",
																		"typeString": "literal_string \"Math: mulDiv overflow\""
																	},
																	"value": "Math: mulDiv overflow"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851",
																		"typeString": "literal_string \"Math: mulDiv overflow\""
																	}
																],
																"id": 2383,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "2952:7:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 2388,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2952:53:14",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 2389,
														"nodeType": "ExpressionStatement",
														"src": "2952:53:14"
													},
													{
														"assignments": [
															2391
														],
														"declarations": [
															{
																"constant": false,
																"id": 2391,
																"mutability": "mutable",
																"name": "remainder",
																"nameLocation": "3269:9:14",
																"nodeType": "VariableDeclaration",
																"scope": 2476,
																"src": "3261:17:14",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2390,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "3261:7:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2392,
														"nodeType": "VariableDeclarationStatement",
														"src": "3261:17:14"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "3301:291:14",
															"statements": [
																{
																	"nodeType": "YulAssignment",
																	"src": "3370:38:14",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nodeType": "YulIdentifier",
																				"src": "3390:1:14"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "3393:1:14"
																			},
																			{
																				"name": "denominator",
																				"nodeType": "YulIdentifier",
																				"src": "3396:11:14"
																			}
																		],
																		"functionName": {
																			"name": "mulmod",
																			"nodeType": "YulIdentifier",
																			"src": "3383:6:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3383:25:14"
																	},
																	"variableNames": [
																		{
																			"name": "remainder",
																			"nodeType": "YulIdentifier",
																			"src": "3370:9:14"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3490:41:14",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod1",
																				"nodeType": "YulIdentifier",
																				"src": "3503:5:14"
																			},
																			{
																				"arguments": [
																					{
																						"name": "remainder",
																						"nodeType": "YulIdentifier",
																						"src": "3513:9:14"
																					},
																					{
																						"name": "prod0",
																						"nodeType": "YulIdentifier",
																						"src": "3524:5:14"
																					}
																				],
																				"functionName": {
																					"name": "gt",
																					"nodeType": "YulIdentifier",
																					"src": "3510:2:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3510:20:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3499:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3499:32:14"
																	},
																	"variableNames": [
																		{
																			"name": "prod1",
																			"nodeType": "YulIdentifier",
																			"src": "3490:5:14"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3548:30:14",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod0",
																				"nodeType": "YulIdentifier",
																				"src": "3561:5:14"
																			},
																			{
																				"name": "remainder",
																				"nodeType": "YulIdentifier",
																				"src": "3568:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3557:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3557:21:14"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nodeType": "YulIdentifier",
																			"src": "3548:5:14"
																		}
																	]
																}
															]
														},
														"evmVersion": "paris",
														"externalReferences": [
															{
																"declaration": 2362,
																"isOffset": false,
																"isSlot": false,
																"src": "3396:11:14",
																"valueSize": 1
															},
															{
																"declaration": 2368,
																"isOffset": false,
																"isSlot": false,
																"src": "3524:5:14",
																"valueSize": 1
															},
															{
																"declaration": 2368,
																"isOffset": false,
																"isSlot": false,
																"src": "3548:5:14",
																"valueSize": 1
															},
															{
																"declaration": 2368,
																"isOffset": false,
																"isSlot": false,
																"src": "3561:5:14",
																"valueSize": 1
															},
															{
																"declaration": 2371,
																"isOffset": false,
																"isSlot": false,
																"src": "3490:5:14",
																"valueSize": 1
															},
															{
																"declaration": 2371,
																"isOffset": false,
																"isSlot": false,
																"src": "3503:5:14",
																"valueSize": 1
															},
															{
																"declaration": 2391,
																"isOffset": false,
																"isSlot": false,
																"src": "3370:9:14",
																"valueSize": 1
															},
															{
																"declaration": 2391,
																"isOffset": false,
																"isSlot": false,
																"src": "3513:9:14",
																"valueSize": 1
															},
															{
																"declaration": 2391,
																"isOffset": false,
																"isSlot": false,
																"src": "3568:9:14",
																"valueSize": 1
															},
															{
																"declaration": 2358,
																"isOffset": false,
																"isSlot": false,
																"src": "3390:1:14",
																"valueSize": 1
															},
															{
																"declaration": 2360,
																"isOffset": false,
																"isSlot": false,
																"src": "3393:1:14",
																"valueSize": 1
															}
														],
														"id": 2393,
														"nodeType": "InlineAssembly",
														"src": "3292:300:14"
													},
													{
														"assignments": [
															2395
														],
														"declarations": [
															{
																"constant": false,
																"id": 2395,
																"mutability": "mutable",
																"name": "twos",
																"nameLocation": "3907:4:14",
																"nodeType": "VariableDeclaration",
																"scope": 2476,
																"src": "3899:12:14",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2394,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "3899:7:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2403,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2402,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2396,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2362,
																"src": "3914:11:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2400,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2398,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "UnaryOperation",
																			"operator": "~",
																			"prefix": true,
																			"src": "3929:12:14",
																			"subExpression": {
																				"id": 2397,
																				"name": "denominator",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2362,
																				"src": "3930:11:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"hexValue": "31",
																			"id": 2399,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3944:1:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "3929:16:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2401,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3928:18:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3914:32:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "3899:47:14"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "3969:362:14",
															"statements": [
																{
																	"nodeType": "YulAssignment",
																	"src": "4034:37:14",
																	"value": {
																		"arguments": [
																			{
																				"name": "denominator",
																				"nodeType": "YulIdentifier",
																				"src": "4053:11:14"
																			},
																			{
																				"name": "twos",
																				"nodeType": "YulIdentifier",
																				"src": "4066:4:14"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nodeType": "YulIdentifier",
																			"src": "4049:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4049:22:14"
																	},
																	"variableNames": [
																		{
																			"name": "denominator",
																			"nodeType": "YulIdentifier",
																			"src": "4034:11:14"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "4138:25:14",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod0",
																				"nodeType": "YulIdentifier",
																				"src": "4151:5:14"
																			},
																			{
																				"name": "twos",
																				"nodeType": "YulIdentifier",
																				"src": "4158:4:14"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nodeType": "YulIdentifier",
																			"src": "4147:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4147:16:14"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nodeType": "YulIdentifier",
																			"src": "4138:5:14"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "4278:39:14",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4298:1:14",
																								"type": "",
																								"value": "0"
																							},
																							{
																								"name": "twos",
																								"nodeType": "YulIdentifier",
																								"src": "4301:4:14"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "4294:3:14"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4294:12:14"
																					},
																					{
																						"name": "twos",
																						"nodeType": "YulIdentifier",
																						"src": "4308:4:14"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "4290:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4290:23:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4315:1:14",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4286:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4286:31:14"
																	},
																	"variableNames": [
																		{
																			"name": "twos",
																			"nodeType": "YulIdentifier",
																			"src": "4278:4:14"
																		}
																	]
																}
															]
														},
														"evmVersion": "paris",
														"externalReferences": [
															{
																"declaration": 2362,
																"isOffset": false,
																"isSlot": false,
																"src": "4034:11:14",
																"valueSize": 1
															},
															{
																"declaration": 2362,
																"isOffset": false,
																"isSlot": false,
																"src": "4053:11:14",
																"valueSize": 1
															},
															{
																"declaration": 2368,
																"isOffset": false,
																"isSlot": false,
																"src": "4138:5:14",
																"valueSize": 1
															},
															{
																"declaration": 2368,
																"isOffset": false,
																"isSlot": false,
																"src": "4151:5:14",
																"valueSize": 1
															},
															{
																"declaration": 2395,
																"isOffset": false,
																"isSlot": false,
																"src": "4066:4:14",
																"valueSize": 1
															},
															{
																"declaration": 2395,
																"isOffset": false,
																"isSlot": false,
																"src": "4158:4:14",
																"valueSize": 1
															},
															{
																"declaration": 2395,
																"isOffset": false,
																"isSlot": false,
																"src": "4278:4:14",
																"valueSize": 1
															},
															{
																"declaration": 2395,
																"isOffset": false,
																"isSlot": false,
																"src": "4301:4:14",
																"valueSize": 1
															},
															{
																"declaration": 2395,
																"isOffset": false,
																"isSlot": false,
																"src": "4308:4:14",
																"valueSize": 1
															}
														],
														"id": 2404,
														"nodeType": "InlineAssembly",
														"src": "3960:371:14"
													},
													{
														"expression": {
															"id": 2409,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2405,
																"name": "prod0",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2368,
																"src": "4397:5:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "|=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2408,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2406,
																	"name": "prod1",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2371,
																	"src": "4406:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 2407,
																	"name": "twos",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2395,
																	"src": "4414:4:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4406:12:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4397:21:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2410,
														"nodeType": "ExpressionStatement",
														"src": "4397:21:14"
													},
													{
														"assignments": [
															2412
														],
														"declarations": [
															{
																"constant": false,
																"id": 2412,
																"mutability": "mutable",
																"name": "inverse",
																"nameLocation": "4744:7:14",
																"nodeType": "VariableDeclaration",
																"scope": 2476,
																"src": "4736:15:14",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2411,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "4736:7:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2419,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2418,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2415,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "33",
																			"id": 2413,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "4755:1:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_3_by_1",
																				"typeString": "int_const 3"
																			},
																			"value": "3"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"id": 2414,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2362,
																			"src": "4759:11:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "4755:15:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2416,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "4754:17:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "^",
															"rightExpression": {
																"hexValue": "32",
																"id": 2417,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4774:1:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "4754:21:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "4736:39:14"
													},
													{
														"expression": {
															"id": 2426,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2420,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2412,
																"src": "4992:7:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2425,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2421,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5003:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2424,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2422,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2362,
																		"src": "5007:11:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2423,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2412,
																		"src": "5021:7:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5007:21:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5003:25:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4992:36:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2427,
														"nodeType": "ExpressionStatement",
														"src": "4992:36:14"
													},
													{
														"expression": {
															"id": 2434,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2428,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2412,
																"src": "5061:7:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2433,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2429,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5072:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2432,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2430,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2362,
																		"src": "5076:11:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2431,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2412,
																		"src": "5090:7:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5076:21:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5072:25:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5061:36:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2435,
														"nodeType": "ExpressionStatement",
														"src": "5061:36:14"
													},
													{
														"expression": {
															"id": 2442,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2436,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2412,
																"src": "5131:7:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2441,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2437,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5142:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2440,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2438,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2362,
																		"src": "5146:11:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2439,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2412,
																		"src": "5160:7:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5146:21:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5142:25:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5131:36:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2443,
														"nodeType": "ExpressionStatement",
														"src": "5131:36:14"
													},
													{
														"expression": {
															"id": 2450,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2444,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2412,
																"src": "5201:7:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2449,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2445,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5212:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2448,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2446,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2362,
																		"src": "5216:11:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2447,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2412,
																		"src": "5230:7:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5216:21:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5212:25:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5201:36:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2451,
														"nodeType": "ExpressionStatement",
														"src": "5201:36:14"
													},
													{
														"expression": {
															"id": 2458,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2452,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2412,
																"src": "5271:7:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2457,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2453,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5282:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2456,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2454,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2362,
																		"src": "5286:11:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2455,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2412,
																		"src": "5300:7:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5286:21:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5282:25:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5271:36:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2459,
														"nodeType": "ExpressionStatement",
														"src": "5271:36:14"
													},
													{
														"expression": {
															"id": 2466,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2460,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2412,
																"src": "5342:7:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2465,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2461,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5353:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2464,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2462,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2362,
																		"src": "5357:11:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2463,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2412,
																		"src": "5371:7:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5357:21:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5353:25:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5342:36:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2467,
														"nodeType": "ExpressionStatement",
														"src": "5342:36:14"
													},
													{
														"expression": {
															"id": 2472,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2468,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2365,
																"src": "5812:6:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2471,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2469,
																	"name": "prod0",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2368,
																	"src": "5821:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 2470,
																	"name": "inverse",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2412,
																	"src": "5829:7:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5821:15:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5812:24:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2473,
														"nodeType": "ExpressionStatement",
														"src": "5812:24:14"
													},
													{
														"expression": {
															"id": 2474,
															"name": "result",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2365,
															"src": "5857:6:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2366,
														"id": 2475,
														"nodeType": "Return",
														"src": "5850:13:14"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2356,
										"nodeType": "StructuredDocumentation",
										"src": "1357:305:14",
										"text": " @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."
									},
									"id": 2478,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nameLocation": "1676:6:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2363,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2358,
												"mutability": "mutable",
												"name": "x",
												"nameLocation": "1691:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 2478,
												"src": "1683:9:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2357,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1683:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2360,
												"mutability": "mutable",
												"name": "y",
												"nameLocation": "1702:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 2478,
												"src": "1694:9:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2359,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1694:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2362,
												"mutability": "mutable",
												"name": "denominator",
												"nameLocation": "1713:11:14",
												"nodeType": "VariableDeclaration",
												"scope": 2478,
												"src": "1705:19:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2361,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1705:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1682:43:14"
									},
									"returnParameters": {
										"id": 2366,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2365,
												"mutability": "mutable",
												"name": "result",
												"nameLocation": "1757:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 2478,
												"src": "1749:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2364,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1749:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1748:16:14"
									},
									"scope": 3130,
									"src": "1667:4213:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2521,
										"nodeType": "Block",
										"src": "6122:189:14",
										"statements": [
											{
												"assignments": [
													2494
												],
												"declarations": [
													{
														"constant": false,
														"id": 2494,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "6140:6:14",
														"nodeType": "VariableDeclaration",
														"scope": 2521,
														"src": "6132:14:14",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2493,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "6132:7:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2500,
												"initialValue": {
													"arguments": [
														{
															"id": 2496,
															"name": "x",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2481,
															"src": "6156:1:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2497,
															"name": "y",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2483,
															"src": "6159:1:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2498,
															"name": "denominator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2485,
															"src": "6162:11:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2495,
														"name": "mulDiv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2478,
															2522
														],
														"referencedDeclaration": 2478,
														"src": "6149:6:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 2499,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6149:25:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6132:42:14"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 2512,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_enum$_Rounding_$2271",
															"typeString": "enum Math.Rounding"
														},
														"id": 2504,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2501,
															"name": "rounding",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2488,
															"src": "6188:8:14",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$2271",
																"typeString": "enum Math.Rounding"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"expression": {
																"id": 2502,
																"name": "Rounding",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2271,
																"src": "6200:8:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_Rounding_$2271_$",
																	"typeString": "type(enum Math.Rounding)"
																}
															},
															"id": 2503,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "6209:2:14",
															"memberName": "Up",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2269,
															"src": "6200:11:14",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$2271",
																"typeString": "enum Math.Rounding"
															}
														},
														"src": "6188:23:14",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2511,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 2506,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2481,
																	"src": "6222:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 2507,
																	"name": "y",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2483,
																	"src": "6225:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 2508,
																	"name": "denominator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2485,
																	"src": "6228:11:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2505,
																"name": "mulmod",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967280,
																"src": "6215:6:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 2509,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6215:25:14",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 2510,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6243:1:14",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "6215:29:14",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "6188:56:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2518,
												"nodeType": "IfStatement",
												"src": "6184:98:14",
												"trueBody": {
													"id": 2517,
													"nodeType": "Block",
													"src": "6246:36:14",
													"statements": [
														{
															"expression": {
																"id": 2515,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2513,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2494,
																	"src": "6260:6:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"hexValue": "31",
																	"id": 2514,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6270:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "6260:11:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 2516,
															"nodeType": "ExpressionStatement",
															"src": "6260:11:14"
														}
													]
												}
											},
											{
												"expression": {
													"id": 2519,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2494,
													"src": "6298:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2492,
												"id": 2520,
												"nodeType": "Return",
												"src": "6291:13:14"
											}
										]
									},
									"documentation": {
										"id": 2479,
										"nodeType": "StructuredDocumentation",
										"src": "5886:121:14",
										"text": " @notice Calculates x * y / denominator with full precision, following the selected rounding direction."
									},
									"id": 2522,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nameLocation": "6021:6:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2489,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2481,
												"mutability": "mutable",
												"name": "x",
												"nameLocation": "6036:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 2522,
												"src": "6028:9:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2480,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6028:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2483,
												"mutability": "mutable",
												"name": "y",
												"nameLocation": "6047:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 2522,
												"src": "6039:9:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2482,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6039:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2485,
												"mutability": "mutable",
												"name": "denominator",
												"nameLocation": "6058:11:14",
												"nodeType": "VariableDeclaration",
												"scope": 2522,
												"src": "6050:19:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2484,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6050:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2488,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "6080:8:14",
												"nodeType": "VariableDeclaration",
												"scope": 2522,
												"src": "6071:17:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2271",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 2487,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2486,
														"name": "Rounding",
														"nameLocations": [
															"6071:8:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2271,
														"src": "6071:8:14"
													},
													"referencedDeclaration": 2271,
													"src": "6071:8:14",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2271",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6027:62:14"
									},
									"returnParameters": {
										"id": 2492,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2491,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2522,
												"src": "6113:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2490,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6113:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6112:9:14"
									},
									"scope": 3130,
									"src": "6012:299:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2633,
										"nodeType": "Block",
										"src": "6587:1585:14",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2532,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2530,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2525,
														"src": "6601:1:14",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 2531,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6606:1:14",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "6601:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2536,
												"nodeType": "IfStatement",
												"src": "6597:45:14",
												"trueBody": {
													"id": 2535,
													"nodeType": "Block",
													"src": "6609:33:14",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 2533,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6630:1:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 2529,
															"id": 2534,
															"nodeType": "Return",
															"src": "6623:8:14"
														}
													]
												}
											},
											{
												"assignments": [
													2538
												],
												"declarations": [
													{
														"constant": false,
														"id": 2538,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "7329:6:14",
														"nodeType": "VariableDeclaration",
														"scope": 2633,
														"src": "7321:14:14",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2537,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7321:7:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2547,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2546,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"hexValue": "31",
														"id": 2539,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7338:1:14",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2544,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 2541,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2525,
																			"src": "7349:1:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 2540,
																		"name": "log2",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [
																			2802,
																			2838
																		],
																		"referencedDeclaration": 2802,
																		"src": "7344:4:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256) pure returns (uint256)"
																		}
																	},
																	"id": 2542,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7344:7:14",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2543,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7355:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7344:12:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 2545,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "7343:14:14",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7338:19:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7321:36:14"
											},
											{
												"id": 2632,
												"nodeType": "UncheckedBlock",
												"src": "7758:408:14",
												"statements": [
													{
														"expression": {
															"id": 2557,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2548,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2538,
																"src": "7782:6:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2556,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2553,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2549,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2538,
																				"src": "7792:6:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2552,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2550,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2525,
																					"src": "7801:1:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2551,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2538,
																					"src": "7805:6:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7801:10:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7792:19:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2554,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7791:21:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2555,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7816:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7791:26:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7782:35:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2558,
														"nodeType": "ExpressionStatement",
														"src": "7782:35:14"
													},
													{
														"expression": {
															"id": 2568,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2559,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2538,
																"src": "7831:6:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2567,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2564,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2560,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2538,
																				"src": "7841:6:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2563,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2561,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2525,
																					"src": "7850:1:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2562,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2538,
																					"src": "7854:6:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7850:10:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7841:19:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2565,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7840:21:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2566,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7865:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7840:26:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7831:35:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2569,
														"nodeType": "ExpressionStatement",
														"src": "7831:35:14"
													},
													{
														"expression": {
															"id": 2579,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2570,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2538,
																"src": "7880:6:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2578,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2575,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2571,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2538,
																				"src": "7890:6:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2574,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2572,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2525,
																					"src": "7899:1:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2573,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2538,
																					"src": "7903:6:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7899:10:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7890:19:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2576,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7889:21:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2577,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7914:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7889:26:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7880:35:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2580,
														"nodeType": "ExpressionStatement",
														"src": "7880:35:14"
													},
													{
														"expression": {
															"id": 2590,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2581,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2538,
																"src": "7929:6:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2589,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2586,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2582,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2538,
																				"src": "7939:6:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2585,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2583,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2525,
																					"src": "7948:1:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2584,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2538,
																					"src": "7952:6:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7948:10:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7939:19:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2587,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7938:21:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2588,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7963:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7938:26:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7929:35:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2591,
														"nodeType": "ExpressionStatement",
														"src": "7929:35:14"
													},
													{
														"expression": {
															"id": 2601,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2592,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2538,
																"src": "7978:6:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2600,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2597,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2593,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2538,
																				"src": "7988:6:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2596,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2594,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2525,
																					"src": "7997:1:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2595,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2538,
																					"src": "8001:6:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7997:10:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7988:19:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2598,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7987:21:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2599,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8012:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7987:26:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7978:35:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2602,
														"nodeType": "ExpressionStatement",
														"src": "7978:35:14"
													},
													{
														"expression": {
															"id": 2612,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2603,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2538,
																"src": "8027:6:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2611,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2608,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2604,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2538,
																				"src": "8037:6:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2607,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2605,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2525,
																					"src": "8046:1:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2606,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2538,
																					"src": "8050:6:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "8046:10:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "8037:19:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2609,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "8036:21:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2610,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8061:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "8036:26:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8027:35:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2613,
														"nodeType": "ExpressionStatement",
														"src": "8027:35:14"
													},
													{
														"expression": {
															"id": 2623,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2614,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2538,
																"src": "8076:6:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2622,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2619,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2615,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2538,
																				"src": "8086:6:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2618,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2616,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2525,
																					"src": "8095:1:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2617,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2538,
																					"src": "8099:6:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "8095:10:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "8086:19:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2620,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "8085:21:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2621,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8110:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "8085:26:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8076:35:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2624,
														"nodeType": "ExpressionStatement",
														"src": "8076:35:14"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 2626,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2538,
																	"src": "8136:6:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2629,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2627,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2525,
																		"src": "8144:1:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 2628,
																		"name": "result",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2538,
																		"src": "8148:6:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "8144:10:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2625,
																"name": "min",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2307,
																"src": "8132:3:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 2630,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8132:23:14",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2529,
														"id": 2631,
														"nodeType": "Return",
														"src": "8125:30:14"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2523,
										"nodeType": "StructuredDocumentation",
										"src": "6317:208:14",
										"text": " @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."
									},
									"id": 2634,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sqrt",
									"nameLocation": "6539:4:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2526,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2525,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "6552:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 2634,
												"src": "6544:9:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2524,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6544:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6543:11:14"
									},
									"returnParameters": {
										"id": 2529,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2528,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2634,
												"src": "6578:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2527,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6578:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6577:9:14"
									},
									"scope": 3130,
									"src": "6530:1642:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2669,
										"nodeType": "Block",
										"src": "8348:161:14",
										"statements": [
											{
												"id": 2668,
												"nodeType": "UncheckedBlock",
												"src": "8358:145:14",
												"statements": [
													{
														"assignments": [
															2646
														],
														"declarations": [
															{
																"constant": false,
																"id": 2646,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "8390:6:14",
																"nodeType": "VariableDeclaration",
																"scope": 2668,
																"src": "8382:14:14",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2645,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "8382:7:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2650,
														"initialValue": {
															"arguments": [
																{
																	"id": 2648,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2637,
																	"src": "8404:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2647,
																"name": "sqrt",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	2634,
																	2670
																],
																"referencedDeclaration": 2634,
																"src": "8399:4:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 2649,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8399:7:14",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "8382:24:14"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2666,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2651,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2646,
																"src": "8427:6:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 2661,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_enum$_Rounding_$2271",
																					"typeString": "enum Math.Rounding"
																				},
																				"id": 2655,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2652,
																					"name": "rounding",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2640,
																					"src": "8437:8:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$2271",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"expression": {
																						"id": 2653,
																						"name": "Rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2271,
																						"src": "8449:8:14",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_enum$_Rounding_$2271_$",
																							"typeString": "type(enum Math.Rounding)"
																						}
																					},
																					"id": 2654,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberLocation": "8458:2:14",
																					"memberName": "Up",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 2269,
																					"src": "8449:11:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$2271",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"src": "8437:23:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2660,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 2658,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 2656,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2646,
																						"src": "8464:6:14",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"id": 2657,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2646,
																						"src": "8473:6:14",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "8464:15:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 2659,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2637,
																					"src": "8482:1:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "8464:19:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "8437:46:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 2663,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8490:1:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 2664,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "8437:54:14",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 2662,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8486:1:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 2665,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "8436:56:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "8427:65:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2644,
														"id": 2667,
														"nodeType": "Return",
														"src": "8420:72:14"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2635,
										"nodeType": "StructuredDocumentation",
										"src": "8178:89:14",
										"text": " @notice Calculates sqrt(a), following the selected rounding direction."
									},
									"id": 2670,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sqrt",
									"nameLocation": "8281:4:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2641,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2637,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "8294:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 2670,
												"src": "8286:9:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2636,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8286:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2640,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "8306:8:14",
												"nodeType": "VariableDeclaration",
												"scope": 2670,
												"src": "8297:17:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2271",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 2639,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2638,
														"name": "Rounding",
														"nameLocations": [
															"8297:8:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2271,
														"src": "8297:8:14"
													},
													"referencedDeclaration": 2271,
													"src": "8297:8:14",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2271",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8285:30:14"
									},
									"returnParameters": {
										"id": 2644,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2643,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2670,
												"src": "8339:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2642,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8339:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8338:9:14"
									},
									"scope": 3130,
									"src": "8272:237:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2801,
										"nodeType": "Block",
										"src": "8694:922:14",
										"statements": [
											{
												"assignments": [
													2679
												],
												"declarations": [
													{
														"constant": false,
														"id": 2679,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "8712:6:14",
														"nodeType": "VariableDeclaration",
														"scope": 2801,
														"src": "8704:14:14",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2678,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8704:7:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2681,
												"initialValue": {
													"hexValue": "30",
													"id": 2680,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "8721:1:14",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8704:18:14"
											},
											{
												"id": 2798,
												"nodeType": "UncheckedBlock",
												"src": "8732:855:14",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2686,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2684,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2682,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2673,
																	"src": "8760:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 2683,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8769:3:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "8760:12:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2685,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8775:1:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "8760:16:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2696,
														"nodeType": "IfStatement",
														"src": "8756:99:14",
														"trueBody": {
															"id": 2695,
															"nodeType": "Block",
															"src": "8778:77:14",
															"statements": [
																{
																	"expression": {
																		"id": 2689,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2687,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2673,
																			"src": "8796:5:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 2688,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8806:3:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "8796:13:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2690,
																	"nodeType": "ExpressionStatement",
																	"src": "8796:13:14"
																},
																{
																	"expression": {
																		"id": 2693,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2691,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2679,
																			"src": "8827:6:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 2692,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8837:3:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "8827:13:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2694,
																	"nodeType": "ExpressionStatement",
																	"src": "8827:13:14"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2701,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2699,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2697,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2673,
																	"src": "8872:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 2698,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8881:2:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "8872:11:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2700,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8886:1:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "8872:15:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2711,
														"nodeType": "IfStatement",
														"src": "8868:96:14",
														"trueBody": {
															"id": 2710,
															"nodeType": "Block",
															"src": "8889:75:14",
															"statements": [
																{
																	"expression": {
																		"id": 2704,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2702,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2673,
																			"src": "8907:5:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 2703,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8917:2:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "8907:12:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2705,
																	"nodeType": "ExpressionStatement",
																	"src": "8907:12:14"
																},
																{
																	"expression": {
																		"id": 2708,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2706,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2679,
																			"src": "8937:6:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 2707,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8947:2:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "8937:12:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2709,
																	"nodeType": "ExpressionStatement",
																	"src": "8937:12:14"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2716,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2714,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2712,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2673,
																	"src": "8981:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 2713,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8990:2:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "8981:11:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2715,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8995:1:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "8981:15:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2726,
														"nodeType": "IfStatement",
														"src": "8977:96:14",
														"trueBody": {
															"id": 2725,
															"nodeType": "Block",
															"src": "8998:75:14",
															"statements": [
																{
																	"expression": {
																		"id": 2719,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2717,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2673,
																			"src": "9016:5:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 2718,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9026:2:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "9016:12:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2720,
																	"nodeType": "ExpressionStatement",
																	"src": "9016:12:14"
																},
																{
																	"expression": {
																		"id": 2723,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2721,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2679,
																			"src": "9046:6:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 2722,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9056:2:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "9046:12:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2724,
																	"nodeType": "ExpressionStatement",
																	"src": "9046:12:14"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2731,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2729,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2727,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2673,
																	"src": "9090:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 2728,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9099:2:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "9090:11:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2730,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9104:1:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "9090:15:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2741,
														"nodeType": "IfStatement",
														"src": "9086:96:14",
														"trueBody": {
															"id": 2740,
															"nodeType": "Block",
															"src": "9107:75:14",
															"statements": [
																{
																	"expression": {
																		"id": 2734,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2732,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2673,
																			"src": "9125:5:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 2733,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9135:2:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "9125:12:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2735,
																	"nodeType": "ExpressionStatement",
																	"src": "9125:12:14"
																},
																{
																	"expression": {
																		"id": 2738,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2736,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2679,
																			"src": "9155:6:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 2737,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9165:2:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "9155:12:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2739,
																	"nodeType": "ExpressionStatement",
																	"src": "9155:12:14"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2746,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2744,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2742,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2673,
																	"src": "9199:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 2743,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9208:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "9199:10:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2745,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9212:1:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "9199:14:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2756,
														"nodeType": "IfStatement",
														"src": "9195:93:14",
														"trueBody": {
															"id": 2755,
															"nodeType": "Block",
															"src": "9215:73:14",
															"statements": [
																{
																	"expression": {
																		"id": 2749,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2747,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2673,
																			"src": "9233:5:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 2748,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9243:1:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "9233:11:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2750,
																	"nodeType": "ExpressionStatement",
																	"src": "9233:11:14"
																},
																{
																	"expression": {
																		"id": 2753,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2751,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2679,
																			"src": "9262:6:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 2752,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9272:1:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "9262:11:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2754,
																	"nodeType": "ExpressionStatement",
																	"src": "9262:11:14"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2761,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2759,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2757,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2673,
																	"src": "9305:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "34",
																	"id": 2758,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9314:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "9305:10:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2760,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9318:1:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "9305:14:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2771,
														"nodeType": "IfStatement",
														"src": "9301:93:14",
														"trueBody": {
															"id": 2770,
															"nodeType": "Block",
															"src": "9321:73:14",
															"statements": [
																{
																	"expression": {
																		"id": 2764,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2762,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2673,
																			"src": "9339:5:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 2763,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9349:1:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "9339:11:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2765,
																	"nodeType": "ExpressionStatement",
																	"src": "9339:11:14"
																},
																{
																	"expression": {
																		"id": 2768,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2766,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2679,
																			"src": "9368:6:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 2767,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9378:1:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "9368:11:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2769,
																	"nodeType": "ExpressionStatement",
																	"src": "9368:11:14"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2776,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2774,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2772,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2673,
																	"src": "9411:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "32",
																	"id": 2773,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9420:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "9411:10:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2775,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9424:1:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "9411:14:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2786,
														"nodeType": "IfStatement",
														"src": "9407:93:14",
														"trueBody": {
															"id": 2785,
															"nodeType": "Block",
															"src": "9427:73:14",
															"statements": [
																{
																	"expression": {
																		"id": 2779,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2777,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2673,
																			"src": "9445:5:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 2778,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9455:1:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "9445:11:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2780,
																	"nodeType": "ExpressionStatement",
																	"src": "9445:11:14"
																},
																{
																	"expression": {
																		"id": 2783,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2781,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2679,
																			"src": "9474:6:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 2782,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9484:1:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "9474:11:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2784,
																	"nodeType": "ExpressionStatement",
																	"src": "9474:11:14"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2791,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2789,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2787,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2673,
																	"src": "9517:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2788,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9526:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9517:10:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2790,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9530:1:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "9517:14:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2797,
														"nodeType": "IfStatement",
														"src": "9513:64:14",
														"trueBody": {
															"id": 2796,
															"nodeType": "Block",
															"src": "9533:44:14",
															"statements": [
																{
																	"expression": {
																		"id": 2794,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2792,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2679,
																			"src": "9551:6:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 2793,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9561:1:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "9551:11:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2795,
																	"nodeType": "ExpressionStatement",
																	"src": "9551:11:14"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 2799,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2679,
													"src": "9603:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2677,
												"id": 2800,
												"nodeType": "Return",
												"src": "9596:13:14"
											}
										]
									},
									"documentation": {
										"id": 2671,
										"nodeType": "StructuredDocumentation",
										"src": "8515:113:14",
										"text": " @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."
									},
									"id": 2802,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log2",
									"nameLocation": "8642:4:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2674,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2673,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "8655:5:14",
												"nodeType": "VariableDeclaration",
												"scope": 2802,
												"src": "8647:13:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2672,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8647:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8646:15:14"
									},
									"returnParameters": {
										"id": 2677,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2676,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2802,
												"src": "8685:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2675,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8685:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8684:9:14"
									},
									"scope": 3130,
									"src": "8633:983:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2837,
										"nodeType": "Block",
										"src": "9849:165:14",
										"statements": [
											{
												"id": 2836,
												"nodeType": "UncheckedBlock",
												"src": "9859:149:14",
												"statements": [
													{
														"assignments": [
															2814
														],
														"declarations": [
															{
																"constant": false,
																"id": 2814,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "9891:6:14",
																"nodeType": "VariableDeclaration",
																"scope": 2836,
																"src": "9883:14:14",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2813,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "9883:7:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2818,
														"initialValue": {
															"arguments": [
																{
																	"id": 2816,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2805,
																	"src": "9905:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2815,
																"name": "log2",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	2802,
																	2838
																],
																"referencedDeclaration": 2802,
																"src": "9900:4:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 2817,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9900:11:14",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "9883:28:14"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2834,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2819,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2814,
																"src": "9932:6:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 2829,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_enum$_Rounding_$2271",
																					"typeString": "enum Math.Rounding"
																				},
																				"id": 2823,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2820,
																					"name": "rounding",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2808,
																					"src": "9942:8:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$2271",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"expression": {
																						"id": 2821,
																						"name": "Rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2271,
																						"src": "9954:8:14",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_enum$_Rounding_$2271_$",
																							"typeString": "type(enum Math.Rounding)"
																						}
																					},
																					"id": 2822,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberLocation": "9963:2:14",
																					"memberName": "Up",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 2269,
																					"src": "9954:11:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$2271",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"src": "9942:23:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2828,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 2826,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "31",
																						"id": 2824,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "9969:1:14",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<<",
																					"rightExpression": {
																						"id": 2825,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2814,
																						"src": "9974:6:14",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "9969:11:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 2827,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2805,
																					"src": "9983:5:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "9969:19:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "9942:46:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 2831,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9995:1:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 2832,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "9942:54:14",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 2830,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9991:1:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 2833,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "9941:56:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "9932:65:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2812,
														"id": 2835,
														"nodeType": "Return",
														"src": "9925:72:14"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2803,
										"nodeType": "StructuredDocumentation",
										"src": "9622:142:14",
										"text": " @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 2838,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log2",
									"nameLocation": "9778:4:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2809,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2805,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "9791:5:14",
												"nodeType": "VariableDeclaration",
												"scope": 2838,
												"src": "9783:13:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2804,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9783:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2808,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "9807:8:14",
												"nodeType": "VariableDeclaration",
												"scope": 2838,
												"src": "9798:17:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2271",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 2807,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2806,
														"name": "Rounding",
														"nameLocations": [
															"9798:8:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2271,
														"src": "9798:8:14"
													},
													"referencedDeclaration": 2271,
													"src": "9798:8:14",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2271",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9782:34:14"
									},
									"returnParameters": {
										"id": 2812,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2811,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2838,
												"src": "9840:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2810,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9840:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9839:9:14"
									},
									"scope": 3130,
									"src": "9769:245:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2966,
										"nodeType": "Block",
										"src": "10201:854:14",
										"statements": [
											{
												"assignments": [
													2847
												],
												"declarations": [
													{
														"constant": false,
														"id": 2847,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "10219:6:14",
														"nodeType": "VariableDeclaration",
														"scope": 2966,
														"src": "10211:14:14",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2846,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10211:7:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2849,
												"initialValue": {
													"hexValue": "30",
													"id": 2848,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "10228:1:14",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10211:18:14"
											},
											{
												"id": 2963,
												"nodeType": "UncheckedBlock",
												"src": "10239:787:14",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2854,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2850,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2841,
																"src": "10267:5:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(57 digits omitted)...0000"
																},
																"id": 2853,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2851,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10276:2:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 2852,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10282:2:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "10276:8:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(57 digits omitted)...0000"
																}
															},
															"src": "10267:17:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2866,
														"nodeType": "IfStatement",
														"src": "10263:103:14",
														"trueBody": {
															"id": 2865,
															"nodeType": "Block",
															"src": "10286:80:14",
															"statements": [
																{
																	"expression": {
																		"id": 2859,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2855,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2841,
																			"src": "10304:5:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(57 digits omitted)...0000"
																			},
																			"id": 2858,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 2856,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10313:2:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3634",
																				"id": 2857,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10319:2:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_64_by_1",
																					"typeString": "int_const 64"
																				},
																				"value": "64"
																			},
																			"src": "10313:8:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(57 digits omitted)...0000"
																			}
																		},
																		"src": "10304:17:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2860,
																	"nodeType": "ExpressionStatement",
																	"src": "10304:17:14"
																},
																{
																	"expression": {
																		"id": 2863,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2861,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2847,
																			"src": "10339:6:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 2862,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10349:2:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "10339:12:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2864,
																	"nodeType": "ExpressionStatement",
																	"src": "10339:12:14"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2871,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2867,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2841,
																"src": "10383:5:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(25 digits omitted)...0000"
																},
																"id": 2870,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2868,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10392:2:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 2869,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10398:2:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "10392:8:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(25 digits omitted)...0000"
																}
															},
															"src": "10383:17:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2883,
														"nodeType": "IfStatement",
														"src": "10379:103:14",
														"trueBody": {
															"id": 2882,
															"nodeType": "Block",
															"src": "10402:80:14",
															"statements": [
																{
																	"expression": {
																		"id": 2876,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2872,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2841,
																			"src": "10420:5:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(25 digits omitted)...0000"
																			},
																			"id": 2875,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 2873,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10429:2:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3332",
																				"id": 2874,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10435:2:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_32_by_1",
																					"typeString": "int_const 32"
																				},
																				"value": "32"
																			},
																			"src": "10429:8:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(25 digits omitted)...0000"
																			}
																		},
																		"src": "10420:17:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2877,
																	"nodeType": "ExpressionStatement",
																	"src": "10420:17:14"
																},
																{
																	"expression": {
																		"id": 2880,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2878,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2847,
																			"src": "10455:6:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 2879,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10465:2:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "10455:12:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2881,
																	"nodeType": "ExpressionStatement",
																	"src": "10455:12:14"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2888,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2884,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2841,
																"src": "10499:5:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000000000000000_by_1",
																	"typeString": "int_const 10000000000000000"
																},
																"id": 2887,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2885,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10508:2:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 2886,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10514:2:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "10508:8:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000_by_1",
																	"typeString": "int_const 10000000000000000"
																}
															},
															"src": "10499:17:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2900,
														"nodeType": "IfStatement",
														"src": "10495:103:14",
														"trueBody": {
															"id": 2899,
															"nodeType": "Block",
															"src": "10518:80:14",
															"statements": [
																{
																	"expression": {
																		"id": 2893,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2889,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2841,
																			"src": "10536:5:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000000000000000_by_1",
																				"typeString": "int_const 10000000000000000"
																			},
																			"id": 2892,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 2890,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10545:2:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3136",
																				"id": 2891,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10551:2:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_16_by_1",
																					"typeString": "int_const 16"
																				},
																				"value": "16"
																			},
																			"src": "10545:8:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000000000000000_by_1",
																				"typeString": "int_const 10000000000000000"
																			}
																		},
																		"src": "10536:17:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2894,
																	"nodeType": "ExpressionStatement",
																	"src": "10536:17:14"
																},
																{
																	"expression": {
																		"id": 2897,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2895,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2847,
																			"src": "10571:6:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 2896,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10581:2:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "10571:12:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2898,
																	"nodeType": "ExpressionStatement",
																	"src": "10571:12:14"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2905,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2901,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2841,
																"src": "10615:5:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																},
																"id": 2904,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2902,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10624:2:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 2903,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10630:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "10624:7:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																}
															},
															"src": "10615:16:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2917,
														"nodeType": "IfStatement",
														"src": "10611:100:14",
														"trueBody": {
															"id": 2916,
															"nodeType": "Block",
															"src": "10633:78:14",
															"statements": [
																{
																	"expression": {
																		"id": 2910,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2906,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2841,
																			"src": "10651:5:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100000000_by_1",
																				"typeString": "int_const 100000000"
																			},
																			"id": 2909,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 2907,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10660:2:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "38",
																				"id": 2908,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10666:1:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_8_by_1",
																					"typeString": "int_const 8"
																				},
																				"value": "8"
																			},
																			"src": "10660:7:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100000000_by_1",
																				"typeString": "int_const 100000000"
																			}
																		},
																		"src": "10651:16:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2911,
																	"nodeType": "ExpressionStatement",
																	"src": "10651:16:14"
																},
																{
																	"expression": {
																		"id": 2914,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2912,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2847,
																			"src": "10685:6:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 2913,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10695:1:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "10685:11:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2915,
																	"nodeType": "ExpressionStatement",
																	"src": "10685:11:14"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2922,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2918,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2841,
																"src": "10728:5:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000_by_1",
																	"typeString": "int_const 10000"
																},
																"id": 2921,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2919,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10737:2:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "34",
																	"id": 2920,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10743:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "10737:7:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000_by_1",
																	"typeString": "int_const 10000"
																}
															},
															"src": "10728:16:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2934,
														"nodeType": "IfStatement",
														"src": "10724:100:14",
														"trueBody": {
															"id": 2933,
															"nodeType": "Block",
															"src": "10746:78:14",
															"statements": [
																{
																	"expression": {
																		"id": 2927,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2923,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2841,
																			"src": "10764:5:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000_by_1",
																				"typeString": "int_const 10000"
																			},
																			"id": 2926,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 2924,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10773:2:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "34",
																				"id": 2925,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10779:1:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_4_by_1",
																					"typeString": "int_const 4"
																				},
																				"value": "4"
																			},
																			"src": "10773:7:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000_by_1",
																				"typeString": "int_const 10000"
																			}
																		},
																		"src": "10764:16:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2928,
																	"nodeType": "ExpressionStatement",
																	"src": "10764:16:14"
																},
																{
																	"expression": {
																		"id": 2931,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2929,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2847,
																			"src": "10798:6:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 2930,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10808:1:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "10798:11:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2932,
																	"nodeType": "ExpressionStatement",
																	"src": "10798:11:14"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2939,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2935,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2841,
																"src": "10841:5:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																},
																"id": 2938,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2936,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10850:2:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "32",
																	"id": 2937,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10856:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "10850:7:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																}
															},
															"src": "10841:16:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2951,
														"nodeType": "IfStatement",
														"src": "10837:100:14",
														"trueBody": {
															"id": 2950,
															"nodeType": "Block",
															"src": "10859:78:14",
															"statements": [
																{
																	"expression": {
																		"id": 2944,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2940,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2841,
																			"src": "10877:5:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			},
																			"id": 2943,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 2941,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10886:2:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "32",
																				"id": 2942,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10892:1:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_2_by_1",
																					"typeString": "int_const 2"
																				},
																				"value": "2"
																			},
																			"src": "10886:7:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			}
																		},
																		"src": "10877:16:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2945,
																	"nodeType": "ExpressionStatement",
																	"src": "10877:16:14"
																},
																{
																	"expression": {
																		"id": 2948,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2946,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2847,
																			"src": "10911:6:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 2947,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10921:1:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "10911:11:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2949,
																	"nodeType": "ExpressionStatement",
																	"src": "10911:11:14"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2956,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2952,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2841,
																"src": "10954:5:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																},
																"id": 2955,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2953,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10963:2:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2954,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10969:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10963:7:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																}
															},
															"src": "10954:16:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2962,
														"nodeType": "IfStatement",
														"src": "10950:66:14",
														"trueBody": {
															"id": 2961,
															"nodeType": "Block",
															"src": "10972:44:14",
															"statements": [
																{
																	"expression": {
																		"id": 2959,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2957,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2847,
																			"src": "10990:6:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 2958,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11000:1:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "10990:11:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2960,
																	"nodeType": "ExpressionStatement",
																	"src": "10990:11:14"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 2964,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2847,
													"src": "11042:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2845,
												"id": 2965,
												"nodeType": "Return",
												"src": "11035:13:14"
											}
										]
									},
									"documentation": {
										"id": 2839,
										"nodeType": "StructuredDocumentation",
										"src": "10020:114:14",
										"text": " @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."
									},
									"id": 2967,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log10",
									"nameLocation": "10148:5:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2842,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2841,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10162:5:14",
												"nodeType": "VariableDeclaration",
												"scope": 2967,
												"src": "10154:13:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2840,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10154:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10153:15:14"
									},
									"returnParameters": {
										"id": 2845,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2844,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2967,
												"src": "10192:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2843,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10192:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10191:9:14"
									},
									"scope": 3130,
									"src": "10139:916:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3002,
										"nodeType": "Block",
										"src": "11290:167:14",
										"statements": [
											{
												"id": 3001,
												"nodeType": "UncheckedBlock",
												"src": "11300:151:14",
												"statements": [
													{
														"assignments": [
															2979
														],
														"declarations": [
															{
																"constant": false,
																"id": 2979,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "11332:6:14",
																"nodeType": "VariableDeclaration",
																"scope": 3001,
																"src": "11324:14:14",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2978,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "11324:7:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2983,
														"initialValue": {
															"arguments": [
																{
																	"id": 2981,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2970,
																	"src": "11347:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2980,
																"name": "log10",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	2967,
																	3003
																],
																"referencedDeclaration": 2967,
																"src": "11341:5:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 2982,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11341:12:14",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "11324:29:14"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2999,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2984,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2979,
																"src": "11374:6:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 2994,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_enum$_Rounding_$2271",
																					"typeString": "enum Math.Rounding"
																				},
																				"id": 2988,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2985,
																					"name": "rounding",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2973,
																					"src": "11384:8:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$2271",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"expression": {
																						"id": 2986,
																						"name": "Rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2271,
																						"src": "11396:8:14",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_enum$_Rounding_$2271_$",
																							"typeString": "type(enum Math.Rounding)"
																						}
																					},
																					"id": 2987,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberLocation": "11405:2:14",
																					"memberName": "Up",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 2269,
																					"src": "11396:11:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$2271",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"src": "11384:23:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2993,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 2991,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "3130",
																						"id": 2989,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "11411:2:14",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_10_by_1",
																							"typeString": "int_const 10"
																						},
																						"value": "10"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "**",
																					"rightExpression": {
																						"id": 2990,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2979,
																						"src": "11417:6:14",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "11411:12:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 2992,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2970,
																					"src": "11426:5:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "11411:20:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "11384:47:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 2996,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11438:1:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 2997,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "11384:55:14",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 2995,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11434:1:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 2998,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "11383:57:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "11374:66:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2977,
														"id": 3000,
														"nodeType": "Return",
														"src": "11367:73:14"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2968,
										"nodeType": "StructuredDocumentation",
										"src": "11061:143:14",
										"text": " @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 3003,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log10",
									"nameLocation": "11218:5:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2974,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2970,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "11232:5:14",
												"nodeType": "VariableDeclaration",
												"scope": 3003,
												"src": "11224:13:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2969,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11224:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2973,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "11248:8:14",
												"nodeType": "VariableDeclaration",
												"scope": 3003,
												"src": "11239:17:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2271",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 2972,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2971,
														"name": "Rounding",
														"nameLocations": [
															"11239:8:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2271,
														"src": "11239:8:14"
													},
													"referencedDeclaration": 2271,
													"src": "11239:8:14",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2271",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11223:34:14"
									},
									"returnParameters": {
										"id": 2977,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2976,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3003,
												"src": "11281:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2975,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11281:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11280:9:14"
									},
									"scope": 3130,
									"src": "11209:248:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3089,
										"nodeType": "Block",
										"src": "11771:600:14",
										"statements": [
											{
												"assignments": [
													3012
												],
												"declarations": [
													{
														"constant": false,
														"id": 3012,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "11789:6:14",
														"nodeType": "VariableDeclaration",
														"scope": 3089,
														"src": "11781:14:14",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3011,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "11781:7:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3014,
												"initialValue": {
													"hexValue": "30",
													"id": 3013,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "11798:1:14",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11781:18:14"
											},
											{
												"id": 3086,
												"nodeType": "UncheckedBlock",
												"src": "11809:533:14",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3019,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3017,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3015,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3006,
																	"src": "11837:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 3016,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11846:3:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "11837:12:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3018,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11852:1:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11837:16:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3029,
														"nodeType": "IfStatement",
														"src": "11833:98:14",
														"trueBody": {
															"id": 3028,
															"nodeType": "Block",
															"src": "11855:76:14",
															"statements": [
																{
																	"expression": {
																		"id": 3022,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3020,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3006,
																			"src": "11873:5:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 3021,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11883:3:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "11873:13:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3023,
																	"nodeType": "ExpressionStatement",
																	"src": "11873:13:14"
																},
																{
																	"expression": {
																		"id": 3026,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3024,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3012,
																			"src": "11904:6:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3025,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11914:2:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "11904:12:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3027,
																	"nodeType": "ExpressionStatement",
																	"src": "11904:12:14"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3034,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3032,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3030,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3006,
																	"src": "11948:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 3031,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11957:2:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "11948:11:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3033,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11962:1:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11948:15:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3044,
														"nodeType": "IfStatement",
														"src": "11944:95:14",
														"trueBody": {
															"id": 3043,
															"nodeType": "Block",
															"src": "11965:74:14",
															"statements": [
																{
																	"expression": {
																		"id": 3037,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3035,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3006,
																			"src": "11983:5:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 3036,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11993:2:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "11983:12:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3038,
																	"nodeType": "ExpressionStatement",
																	"src": "11983:12:14"
																},
																{
																	"expression": {
																		"id": 3041,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3039,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3012,
																			"src": "12013:6:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 3040,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12023:1:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "12013:11:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3042,
																	"nodeType": "ExpressionStatement",
																	"src": "12013:11:14"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3049,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3047,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3045,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3006,
																	"src": "12056:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 3046,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12065:2:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "12056:11:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3048,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "12070:1:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "12056:15:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3059,
														"nodeType": "IfStatement",
														"src": "12052:95:14",
														"trueBody": {
															"id": 3058,
															"nodeType": "Block",
															"src": "12073:74:14",
															"statements": [
																{
																	"expression": {
																		"id": 3052,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3050,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3006,
																			"src": "12091:5:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 3051,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12101:2:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "12091:12:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3053,
																	"nodeType": "ExpressionStatement",
																	"src": "12091:12:14"
																},
																{
																	"expression": {
																		"id": 3056,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3054,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3012,
																			"src": "12121:6:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 3055,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12131:1:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "12121:11:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3057,
																	"nodeType": "ExpressionStatement",
																	"src": "12121:11:14"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3064,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3062,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3060,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3006,
																	"src": "12164:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 3061,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12173:2:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "12164:11:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3063,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "12178:1:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "12164:15:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3074,
														"nodeType": "IfStatement",
														"src": "12160:95:14",
														"trueBody": {
															"id": 3073,
															"nodeType": "Block",
															"src": "12181:74:14",
															"statements": [
																{
																	"expression": {
																		"id": 3067,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3065,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3006,
																			"src": "12199:5:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3066,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12209:2:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "12199:12:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3068,
																	"nodeType": "ExpressionStatement",
																	"src": "12199:12:14"
																},
																{
																	"expression": {
																		"id": 3071,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3069,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3012,
																			"src": "12229:6:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 3070,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12239:1:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "12229:11:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3072,
																	"nodeType": "ExpressionStatement",
																	"src": "12229:11:14"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3079,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3077,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3075,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3006,
																	"src": "12272:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 3076,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12281:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "12272:10:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3078,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "12285:1:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "12272:14:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3085,
														"nodeType": "IfStatement",
														"src": "12268:64:14",
														"trueBody": {
															"id": 3084,
															"nodeType": "Block",
															"src": "12288:44:14",
															"statements": [
																{
																	"expression": {
																		"id": 3082,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3080,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3012,
																			"src": "12306:6:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 3081,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12316:1:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "12306:11:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3083,
																	"nodeType": "ExpressionStatement",
																	"src": "12306:11:14"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 3087,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3012,
													"src": "12358:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3010,
												"id": 3088,
												"nodeType": "Return",
												"src": "12351:13:14"
											}
										]
									},
									"documentation": {
										"id": 3004,
										"nodeType": "StructuredDocumentation",
										"src": "11463:240:14",
										"text": " @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."
									},
									"id": 3090,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log256",
									"nameLocation": "11717:6:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3007,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3006,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "11732:5:14",
												"nodeType": "VariableDeclaration",
												"scope": 3090,
												"src": "11724:13:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3005,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11724:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11723:15:14"
									},
									"returnParameters": {
										"id": 3010,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3009,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3090,
												"src": "11762:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3008,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11762:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11761:9:14"
									},
									"scope": 3130,
									"src": "11708:663:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3128,
										"nodeType": "Block",
										"src": "12608:174:14",
										"statements": [
											{
												"id": 3127,
												"nodeType": "UncheckedBlock",
												"src": "12618:158:14",
												"statements": [
													{
														"assignments": [
															3102
														],
														"declarations": [
															{
																"constant": false,
																"id": 3102,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "12650:6:14",
																"nodeType": "VariableDeclaration",
																"scope": 3127,
																"src": "12642:14:14",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3101,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "12642:7:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3106,
														"initialValue": {
															"arguments": [
																{
																	"id": 3104,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3093,
																	"src": "12666:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3103,
																"name": "log256",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	3090,
																	3129
																],
																"referencedDeclaration": 3090,
																"src": "12659:6:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 3105,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "12659:13:14",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "12642:30:14"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3125,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3107,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3102,
																"src": "12693:6:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 3120,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_enum$_Rounding_$2271",
																					"typeString": "enum Math.Rounding"
																				},
																				"id": 3111,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 3108,
																					"name": "rounding",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3096,
																					"src": "12703:8:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$2271",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"expression": {
																						"id": 3109,
																						"name": "Rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2271,
																						"src": "12715:8:14",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_enum$_Rounding_$2271_$",
																							"typeString": "type(enum Math.Rounding)"
																						}
																					},
																					"id": 3110,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberLocation": "12724:2:14",
																					"memberName": "Up",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 2269,
																					"src": "12715:11:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$2271",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"src": "12703:23:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3119,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 3117,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "31",
																						"id": 3112,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "12730:1:14",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<<",
																					"rightExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 3115,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"id": 3113,
																									"name": "result",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 3102,
																									"src": "12736:6:14",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "<<",
																								"rightExpression": {
																									"hexValue": "33",
																									"id": 3114,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "12746:1:14",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_3_by_1",
																										"typeString": "int_const 3"
																									},
																									"value": "3"
																								},
																								"src": "12736:11:14",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 3116,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "12735:13:14",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "12730:18:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 3118,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3093,
																					"src": "12751:5:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "12730:26:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "12703:53:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 3122,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12763:1:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 3123,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "12703:61:14",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 3121,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12759:1:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 3124,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "12702:63:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "12693:72:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3100,
														"id": 3126,
														"nodeType": "Return",
														"src": "12686:79:14"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3091,
										"nodeType": "StructuredDocumentation",
										"src": "12377:144:14",
										"text": " @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 3129,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log256",
									"nameLocation": "12535:6:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3097,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3093,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "12550:5:14",
												"nodeType": "VariableDeclaration",
												"scope": 3129,
												"src": "12542:13:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3092,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12542:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3096,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "12566:8:14",
												"nodeType": "VariableDeclaration",
												"scope": 3129,
												"src": "12557:17:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2271",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 3095,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3094,
														"name": "Rounding",
														"nameLocations": [
															"12557:8:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2271,
														"src": "12557:8:14"
													},
													"referencedDeclaration": 2271,
													"src": "12557:8:14",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2271",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12541:34:14"
									},
									"returnParameters": {
										"id": 3100,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3099,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3129,
												"src": "12599:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3098,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12599:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12598:9:14"
									},
									"scope": 3130,
									"src": "12526:256:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3131,
							"src": "202:12582:14",
							"usedErrors": []
						}
					],
					"src": "103:12682:14"
				},
				"id": 14
			},
			"@openzeppelin/contracts/utils/math/SignedMath.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/math/SignedMath.sol",
					"exportedSymbols": {
						"SignedMath": [
							3235
						]
					},
					"id": 3236,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 3132,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "109:23:15"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SignedMath",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 3133,
								"nodeType": "StructuredDocumentation",
								"src": "134:80:15",
								"text": " @dev Standard signed math utilities missing in the Solidity language."
							},
							"fullyImplemented": true,
							"id": 3235,
							"linearizedBaseContracts": [
								3235
							],
							"name": "SignedMath",
							"nameLocation": "223:10:15",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 3150,
										"nodeType": "Block",
										"src": "375:37:15",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"id": 3145,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 3143,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3136,
															"src": "392:1:15",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"id": 3144,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3138,
															"src": "396:1:15",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"src": "392:5:15",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 3147,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3138,
														"src": "404:1:15",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"id": 3148,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "392:13:15",
													"trueExpression": {
														"id": 3146,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3136,
														"src": "400:1:15",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"functionReturnParameters": 3142,
												"id": 3149,
												"nodeType": "Return",
												"src": "385:20:15"
											}
										]
									},
									"documentation": {
										"id": 3134,
										"nodeType": "StructuredDocumentation",
										"src": "240:66:15",
										"text": " @dev Returns the largest of two signed numbers."
									},
									"id": 3151,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "max",
									"nameLocation": "320:3:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3139,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3136,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "331:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 3151,
												"src": "324:8:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3135,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "324:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3138,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "341:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 3151,
												"src": "334:8:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3137,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "334:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "323:20:15"
									},
									"returnParameters": {
										"id": 3142,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3141,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3151,
												"src": "367:6:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3140,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "367:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "366:8:15"
									},
									"scope": 3235,
									"src": "311:101:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3168,
										"nodeType": "Block",
										"src": "554:37:15",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"id": 3163,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 3161,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3154,
															"src": "571:1:15",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"id": 3162,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3156,
															"src": "575:1:15",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"src": "571:5:15",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 3165,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3156,
														"src": "583:1:15",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"id": 3166,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "571:13:15",
													"trueExpression": {
														"id": 3164,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3154,
														"src": "579:1:15",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"functionReturnParameters": 3160,
												"id": 3167,
												"nodeType": "Return",
												"src": "564:20:15"
											}
										]
									},
									"documentation": {
										"id": 3152,
										"nodeType": "StructuredDocumentation",
										"src": "418:67:15",
										"text": " @dev Returns the smallest of two signed numbers."
									},
									"id": 3169,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "min",
									"nameLocation": "499:3:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3157,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3154,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "510:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 3169,
												"src": "503:8:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3153,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "503:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3156,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "520:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 3169,
												"src": "513:8:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3155,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "513:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "502:20:15"
									},
									"returnParameters": {
										"id": 3160,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3159,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3169,
												"src": "546:6:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3158,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "546:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "545:8:15"
									},
									"scope": 3235,
									"src": "490:101:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3212,
										"nodeType": "Block",
										"src": "796:162:15",
										"statements": [
											{
												"assignments": [
													3180
												],
												"declarations": [
													{
														"constant": false,
														"id": 3180,
														"mutability": "mutable",
														"name": "x",
														"nameLocation": "865:1:15",
														"nodeType": "VariableDeclaration",
														"scope": 3212,
														"src": "858:8:15",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"typeName": {
															"id": 3179,
															"name": "int256",
															"nodeType": "ElementaryTypeName",
															"src": "858:6:15",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3193,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 3192,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 3183,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3181,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3172,
																	"src": "870:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 3182,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3174,
																	"src": "874:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"src": "870:5:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 3184,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "869:7:15",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 3190,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			},
																			"id": 3187,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3185,
																				"name": "a",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3172,
																				"src": "881:1:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "^",
																			"rightExpression": {
																				"id": 3186,
																				"name": "b",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3174,
																				"src": "885:1:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"src": "881:5:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"id": 3188,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "880:7:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3189,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "891:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "880:12:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 3191,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "879:14:15",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"src": "869:24:15",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "858:35:15"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 3210,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 3194,
														"name": "x",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3180,
														"src": "910:1:15",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 3208,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3202,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 3199,
																						"name": "x",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3180,
																						"src": "930:1:15",
																						"typeDescriptions": {
																							"typeIdentifier": "t_int256",
																							"typeString": "int256"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_int256",
																							"typeString": "int256"
																						}
																					],
																					"id": 3198,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "922:7:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint256_$",
																						"typeString": "type(uint256)"
																					},
																					"typeName": {
																						"id": 3197,
																						"name": "uint256",
																						"nodeType": "ElementaryTypeName",
																						"src": "922:7:15",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 3200,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "922:10:15",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": ">>",
																			"rightExpression": {
																				"hexValue": "323535",
																				"id": 3201,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "936:3:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_255_by_1",
																					"typeString": "int_const 255"
																				},
																				"value": "255"
																			},
																			"src": "922:17:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 3196,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "915:6:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_int256_$",
																			"typeString": "type(int256)"
																		},
																		"typeName": {
																			"id": 3195,
																			"name": "int256",
																			"nodeType": "ElementaryTypeName",
																			"src": "915:6:15",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 3203,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "915:25:15",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			},
																			"id": 3206,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3204,
																				"name": "a",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3172,
																				"src": "944:1:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "^",
																			"rightExpression": {
																				"id": 3205,
																				"name": "b",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3174,
																				"src": "948:1:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"src": "944:5:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"id": 3207,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "943:7:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"src": "915:35:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 3209,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "914:37:15",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"src": "910:41:15",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"functionReturnParameters": 3178,
												"id": 3211,
												"nodeType": "Return",
												"src": "903:48:15"
											}
										]
									},
									"documentation": {
										"id": 3170,
										"nodeType": "StructuredDocumentation",
										"src": "597:126:15",
										"text": " @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."
									},
									"id": 3213,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "average",
									"nameLocation": "737:7:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3175,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3172,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "752:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 3213,
												"src": "745:8:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3171,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "745:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3174,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "762:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 3213,
												"src": "755:8:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3173,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "755:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "744:20:15"
									},
									"returnParameters": {
										"id": 3178,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3177,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3213,
												"src": "788:6:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3176,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "788:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "787:8:15"
									},
									"scope": 3235,
									"src": "728:230:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3233,
										"nodeType": "Block",
										"src": "1102:158:15",
										"statements": [
											{
												"id": 3232,
												"nodeType": "UncheckedBlock",
												"src": "1112:142:15",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		},
																		"id": 3225,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 3223,
																			"name": "n",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3216,
																			"src": "1227:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 3224,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1232:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1227:6:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"falseExpression": {
																		"id": 3228,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "-",
																		"prefix": true,
																		"src": "1240:2:15",
																		"subExpression": {
																			"id": 3227,
																			"name": "n",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3216,
																			"src": "1241:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	},
																	"id": 3229,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "Conditional",
																	"src": "1227:15:15",
																	"trueExpression": {
																		"id": 3226,
																		"name": "n",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3216,
																		"src": "1236:1:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	},
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																],
																"id": 3222,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1219:7:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																},
																"typeName": {
																	"id": 3221,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1219:7:15",
																	"typeDescriptions": {}
																}
															},
															"id": 3230,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1219:24:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3220,
														"id": 3231,
														"nodeType": "Return",
														"src": "1212:31:15"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3214,
										"nodeType": "StructuredDocumentation",
										"src": "964:78:15",
										"text": " @dev Returns the absolute unsigned value of a signed value."
									},
									"id": 3234,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "abs",
									"nameLocation": "1056:3:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3217,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3216,
												"mutability": "mutable",
												"name": "n",
												"nameLocation": "1067:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 3234,
												"src": "1060:8:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3215,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1060:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1059:10:15"
									},
									"returnParameters": {
										"id": 3220,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3219,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3234,
												"src": "1093:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3218,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1093:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1092:9:15"
									},
									"scope": 3235,
									"src": "1047:213:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3236,
							"src": "215:1047:15",
							"usedErrors": []
						}
					],
					"src": "109:1154:15"
				},
				"id": 15
			},
			"contracts/TurtleToken.sol": {
				"ast": {
					"absolutePath": "contracts/TurtleToken.sol",
					"exportedSymbols": {
						"Context": [
							1065
						],
						"Counters": [
							1139
						],
						"ECDSA": [
							2060
						],
						"EIP712": [
							2264
						],
						"ERC20": [
							724
						],
						"ERC20Permit": [
							974
						],
						"IERC20": [
							802
						],
						"IERC20Metadata": [
							999
						],
						"IERC20Permit": [
							1035
						],
						"IERC5267": [
							137
						],
						"Math": [
							3130
						],
						"Ownable": [
							112
						],
						"ShortString": [
							1144
						],
						"ShortStrings": [
							1355
						],
						"SignedMath": [
							3235
						],
						"StorageSlot": [
							1465
						],
						"Strings": [
							1694
						],
						"TurtleToken": [
							3472
						]
					},
					"id": 3473,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 3237,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".0",
								"<",
								"0.9",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:31:16"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
							"id": 3238,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3473,
							"sourceUnit": 725,
							"src": "68:55:16",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
							"file": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
							"id": 3239,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3473,
							"sourceUnit": 975,
							"src": "125:72:16",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
							"file": "@openzeppelin/contracts/access/Ownable.sol",
							"id": 3240,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3473,
							"sourceUnit": 113,
							"src": "199:52:16",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 3241,
										"name": "ERC20",
										"nameLocations": [
											"279:5:16"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 724,
										"src": "279:5:16"
									},
									"id": 3242,
									"nodeType": "InheritanceSpecifier",
									"src": "279:5:16"
								},
								{
									"baseName": {
										"id": 3243,
										"name": "ERC20Permit",
										"nameLocations": [
											"286:11:16"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 974,
										"src": "286:11:16"
									},
									"id": 3244,
									"nodeType": "InheritanceSpecifier",
									"src": "286:11:16"
								},
								{
									"baseName": {
										"id": 3245,
										"name": "Ownable",
										"nameLocations": [
											"299:7:16"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 112,
										"src": "299:7:16"
									},
									"id": 3246,
									"nodeType": "InheritanceSpecifier",
									"src": "299:7:16"
								}
							],
							"canonicalName": "TurtleToken",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 3472,
							"linearizedBaseContracts": [
								3472,
								112,
								974,
								2264,
								137,
								1035,
								724,
								999,
								802,
								1065
							],
							"name": "TurtleToken",
							"nameLocation": "264:11:16",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"functionSelector": "3ba0b9a9",
									"id": 3248,
									"mutability": "mutable",
									"name": "exchangeRate",
									"nameLocation": "385:12:16",
									"nodeType": "VariableDeclaration",
									"scope": 3472,
									"src": "370:27:16",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 3247,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "370:7:16",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"anonymous": false,
									"eventSelector": "8fafebcaf9d154343dad25669bfa277f4fbacd7ac6b0c4fed522580e040a0f33",
									"id": 3256,
									"name": "TokensPurchased",
									"nameLocation": "474:15:16",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 3255,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3250,
												"indexed": true,
												"mutability": "mutable",
												"name": "buyer",
												"nameLocation": "506:5:16",
												"nodeType": "VariableDeclaration",
												"scope": 3256,
												"src": "490:21:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3249,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "490:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3252,
												"indexed": false,
												"mutability": "mutable",
												"name": "ethAmount",
												"nameLocation": "521:9:16",
												"nodeType": "VariableDeclaration",
												"scope": 3256,
												"src": "513:17:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3251,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "513:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3254,
												"indexed": false,
												"mutability": "mutable",
												"name": "tokenAmount",
												"nameLocation": "540:11:16",
												"nodeType": "VariableDeclaration",
												"scope": 3256,
												"src": "532:19:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3253,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "532:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "489:63:16"
									},
									"src": "468:85:16"
								},
								{
									"anonymous": false,
									"eventSelector": "2dcf9433d75db0d8b1c172641f85e319ffe4ad22e108a95d1847ceb906e5195d",
									"id": 3264,
									"name": "TokensSold",
									"nameLocation": "600:10:16",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 3263,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3258,
												"indexed": true,
												"mutability": "mutable",
												"name": "seller",
												"nameLocation": "627:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 3264,
												"src": "611:22:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3257,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "611:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3260,
												"indexed": false,
												"mutability": "mutable",
												"name": "tokenAmount",
												"nameLocation": "643:11:16",
												"nodeType": "VariableDeclaration",
												"scope": 3264,
												"src": "635:19:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3259,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "635:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3262,
												"indexed": false,
												"mutability": "mutable",
												"name": "ethAmount",
												"nameLocation": "664:9:16",
												"nodeType": "VariableDeclaration",
												"scope": 3264,
												"src": "656:17:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3261,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "656:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "610:64:16"
									},
									"src": "594:81:16"
								},
								{
									"body": {
										"id": 3292,
										"nodeType": "Block",
										"src": "989:93:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 3283,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "1014:4:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_TurtleToken_$3472",
																		"typeString": "contract TurtleToken"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_TurtleToken_$3472",
																		"typeString": "contract TurtleToken"
																	}
																],
																"id": 3282,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1006:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 3281,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1006:7:16",
																	"typeDescriptions": {}
																}
															},
															"id": 3284,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1006:13:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3285,
															"name": "initialSupply",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3266,
															"src": "1021:13:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 3280,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 541,
														"src": "1000:5:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 3286,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1000:35:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3287,
												"nodeType": "ExpressionStatement",
												"src": "1000:35:16"
											},
											{
												"expression": {
													"id": 3290,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 3288,
														"name": "exchangeRate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3248,
														"src": "1046:12:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 3289,
														"name": "_exchangeRate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3268,
														"src": "1061:13:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1046:28:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 3291,
												"nodeType": "ExpressionStatement",
												"src": "1046:28:16"
											}
										]
									},
									"id": 3293,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"hexValue": "547572746c65546f6b656e",
													"id": 3271,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "929:13:16",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_9ceffc145c0fee7d5087304007bf9e8b979c476953f72160bd13951b947b0d94",
														"typeString": "literal_string \"TurtleToken\""
													},
													"value": "TurtleToken"
												},
												{
													"hexValue": "54555254",
													"id": 3272,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "944:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_61cfc121b469de8ae54c6be53b27fa2fccca7781b8abc9666570fd8c707d80c8",
														"typeString": "literal_string \"TURT\""
													},
													"value": "TURT"
												}
											],
											"id": 3273,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 3270,
												"name": "ERC20",
												"nameLocations": [
													"923:5:16"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 724,
												"src": "923:5:16"
											},
											"nodeType": "ModifierInvocation",
											"src": "923:28:16"
										},
										{
											"arguments": [
												{
													"hexValue": "547572746c65546f6b656e",
													"id": 3275,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "964:13:16",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_9ceffc145c0fee7d5087304007bf9e8b979c476953f72160bd13951b947b0d94",
														"typeString": "literal_string \"TurtleToken\""
													},
													"value": "TurtleToken"
												}
											],
											"id": 3276,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 3274,
												"name": "ERC20Permit",
												"nameLocations": [
													"952:11:16"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 974,
												"src": "952:11:16"
											},
											"nodeType": "ModifierInvocation",
											"src": "952:26:16"
										},
										{
											"arguments": [],
											"id": 3278,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 3277,
												"name": "Ownable",
												"nameLocations": [
													"979:7:16"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 112,
												"src": "979:7:16"
											},
											"nodeType": "ModifierInvocation",
											"src": "979:9:16"
										}
									],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3269,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3266,
												"mutability": "mutable",
												"name": "initialSupply",
												"nameLocation": "885:13:16",
												"nodeType": "VariableDeclaration",
												"scope": 3293,
												"src": "877:21:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3265,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "877:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3268,
												"mutability": "mutable",
												"name": "_exchangeRate",
												"nameLocation": "908:13:16",
												"nodeType": "VariableDeclaration",
												"scope": 3293,
												"src": "900:21:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3267,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "900:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "876:46:16"
									},
									"returnParameters": {
										"id": 3279,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "989:0:16"
									},
									"scope": 3472,
									"src": "865:217:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 3344,
										"nodeType": "Block",
										"src": "1263:495:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3300,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 3297,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "1282:3:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 3298,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1286:5:16",
																"memberName": "value",
																"nodeType": "MemberAccess",
																"src": "1282:9:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3299,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1294:1:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1282:13:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4d7573742073656e642045544820746f2065786368616e6765",
															"id": 3301,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1297:27:16",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9958828078c3b88217fdf99191c4145ea73f2dc831ceb6b17c87bbd9704eb371",
																"typeString": "literal_string \"Must send ETH to exchange\""
															},
															"value": "Must send ETH to exchange"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9958828078c3b88217fdf99191c4145ea73f2dc831ceb6b17c87bbd9704eb371",
																"typeString": "literal_string \"Must send ETH to exchange\""
															}
														],
														"id": 3296,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1274:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 3302,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1274:51:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3303,
												"nodeType": "ExpressionStatement",
												"src": "1274:51:16"
											},
											{
												"assignments": [
													3305
												],
												"declarations": [
													{
														"constant": false,
														"id": 3305,
														"mutability": "mutable",
														"name": "tokenAmount",
														"nameLocation": "1414:11:16",
														"nodeType": "VariableDeclaration",
														"scope": 3344,
														"src": "1406:19:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3304,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1406:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3313,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 3312,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3309,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 3306,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "1429:3:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 3307,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1433:5:16",
																	"memberName": "value",
																	"nodeType": "MemberAccess",
																	"src": "1429:9:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 3308,
																	"name": "exchangeRate",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3248,
																	"src": "1441:12:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1429:24:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 3310,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "1428:26:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "31653138",
														"id": 3311,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1457:4:16",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1000000000000000000_by_1",
															"typeString": "int_const 1000000000000000000"
														},
														"value": "1e18"
													},
													"src": "1428:33:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1406:55:16"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3322,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 3318,
																				"name": "this",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967268,
																				"src": "1498:4:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_TurtleToken_$3472",
																					"typeString": "contract TurtleToken"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_TurtleToken_$3472",
																					"typeString": "contract TurtleToken"
																				}
																			],
																			"id": 3317,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "1490:7:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 3316,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "1490:7:16",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 3319,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1490:13:16",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 3315,
																	"name": "balanceOf",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 236,
																	"src": "1480:9:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
																		"typeString": "function (address) view returns (uint256)"
																	}
																},
																"id": 3320,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1480:24:16",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 3321,
																"name": "tokenAmount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3305,
																"src": "1508:11:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1480:39:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e73756666696369656e7420746f6b656e2062616c616e636520696e20636f6e7472616374",
															"id": 3323,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1521:40:16",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_e390cd67d6ce01771cc4e4628f327a71fccd54886099705171d2231640f9ef13",
																"typeString": "literal_string \"Insufficient token balance in contract\""
															},
															"value": "Insufficient token balance in contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_e390cd67d6ce01771cc4e4628f327a71fccd54886099705171d2231640f9ef13",
																"typeString": "literal_string \"Insufficient token balance in contract\""
															}
														],
														"id": 3314,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1472:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 3324,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1472:90:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3325,
												"nodeType": "ExpressionStatement",
												"src": "1472:90:16"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 3329,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "1621:4:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_TurtleToken_$3472",
																		"typeString": "contract TurtleToken"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_TurtleToken_$3472",
																		"typeString": "contract TurtleToken"
																	}
																],
																"id": 3328,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1613:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 3327,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1613:7:16",
																	"typeDescriptions": {}
																}
															},
															"id": 3330,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1613:13:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 3331,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1628:3:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 3332,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1632:6:16",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1628:10:16",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3333,
															"name": "tokenAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3305,
															"src": "1640:11:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 3326,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 484,
														"src": "1603:9:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 3334,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1603:49:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3335,
												"nodeType": "ExpressionStatement",
												"src": "1603:49:16"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 3337,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1715:3:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 3338,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1719:6:16",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1715:10:16",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 3339,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1727:3:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 3340,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1731:5:16",
															"memberName": "value",
															"nodeType": "MemberAccess",
															"src": "1727:9:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 3341,
															"name": "tokenAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3305,
															"src": "1738:11:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 3336,
														"name": "TokensPurchased",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3256,
														"src": "1699:15:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256,uint256)"
														}
													},
													"id": 3342,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1699:51:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3343,
												"nodeType": "EmitStatement",
												"src": "1694:56:16"
											}
										]
									},
									"functionSelector": "d0febe4c",
									"id": 3345,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "buyTokens",
									"nameLocation": "1236:9:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3294,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1245:2:16"
									},
									"returnParameters": {
										"id": 3295,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1263:0:16"
									},
									"scope": 3472,
									"src": "1227:531:16",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 3413,
										"nodeType": "Block",
										"src": "1929:659:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3353,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3351,
																"name": "tokenAmount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3347,
																"src": "1948:11:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3352,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1962:1:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1948:15:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4d7573742073656c6c206120706f73697469766520616d6f756e74206f6620746f6b656e73",
															"id": 3354,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1965:39:16",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_20f6fd7bd66a4b6c63dae90b77d6538af48c1d53cd7a418c4a2b4f65b329e2e6",
																"typeString": "literal_string \"Must sell a positive amount of tokens\""
															},
															"value": "Must sell a positive amount of tokens"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_20f6fd7bd66a4b6c63dae90b77d6538af48c1d53cd7a418c4a2b4f65b329e2e6",
																"typeString": "literal_string \"Must sell a positive amount of tokens\""
															}
														],
														"id": 3350,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1940:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 3355,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1940:65:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3356,
												"nodeType": "ExpressionStatement",
												"src": "1940:65:16"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3363,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"expression": {
																			"id": 3359,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "2034:3:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 3360,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "2038:6:16",
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "2034:10:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 3358,
																	"name": "balanceOf",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 236,
																	"src": "2024:9:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
																		"typeString": "function (address) view returns (uint256)"
																	}
																},
																"id": 3361,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2024:21:16",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 3362,
																"name": "tokenAmount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3347,
																"src": "2049:11:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2024:36:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e73756666696369656e7420746f6b656e2062616c616e6365",
															"id": 3364,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2062:28:16",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a7e5e4d46ea524835ea36125140e247d59a2bce707f2094f88605dba8157d192",
																"typeString": "literal_string \"Insufficient token balance\""
															},
															"value": "Insufficient token balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_a7e5e4d46ea524835ea36125140e247d59a2bce707f2094f88605dba8157d192",
																"typeString": "literal_string \"Insufficient token balance\""
															}
														],
														"id": 3357,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2016:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 3365,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2016:75:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3366,
												"nodeType": "ExpressionStatement",
												"src": "2016:75:16"
											},
											{
												"assignments": [
													3368
												],
												"declarations": [
													{
														"constant": false,
														"id": 3368,
														"mutability": "mutable",
														"name": "ethAmount",
														"nameLocation": "2179:9:16",
														"nodeType": "VariableDeclaration",
														"scope": 3413,
														"src": "2171:17:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3367,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2171:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3375,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 3374,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3371,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3369,
																	"name": "tokenAmount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3347,
																	"src": "2192:11:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"hexValue": "31653138",
																	"id": 3370,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2206:4:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1000000000000000000_by_1",
																		"typeString": "int_const 1000000000000000000"
																	},
																	"value": "1e18"
																},
																"src": "2192:18:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 3372,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "2191:20:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"id": 3373,
														"name": "exchangeRate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3248,
														"src": "2214:12:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2191:35:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2171:55:16"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3383,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 3379,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2253:4:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_TurtleToken_$3472",
																				"typeString": "contract TurtleToken"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_TurtleToken_$3472",
																				"typeString": "contract TurtleToken"
																			}
																		],
																		"id": 3378,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2245:7:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 3377,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2245:7:16",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 3380,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2245:13:16",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 3381,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2259:7:16",
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "2245:21:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 3382,
																"name": "ethAmount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3368,
																"src": "2270:9:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2245:34:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e73756666696369656e74204554482062616c616e636520696e20636f6e7472616374",
															"id": 3384,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2281:38:16",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a8f19cffe5964e41334d0f2bb02ca7d6df9bc6525aedf1e3c16d949dd5b6b279",
																"typeString": "literal_string \"Insufficient ETH balance in contract\""
															},
															"value": "Insufficient ETH balance in contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_a8f19cffe5964e41334d0f2bb02ca7d6df9bc6525aedf1e3c16d949dd5b6b279",
																"typeString": "literal_string \"Insufficient ETH balance in contract\""
															}
														],
														"id": 3376,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2237:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 3385,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2237:83:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3386,
												"nodeType": "ExpressionStatement",
												"src": "2237:83:16"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 3388,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2371:3:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 3389,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2375:6:16",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "2371:10:16",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 3392,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "2391:4:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_TurtleToken_$3472",
																		"typeString": "contract TurtleToken"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_TurtleToken_$3472",
																		"typeString": "contract TurtleToken"
																	}
																],
																"id": 3391,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2383:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 3390,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2383:7:16",
																	"typeDescriptions": {}
																}
															},
															"id": 3393,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2383:13:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3394,
															"name": "tokenAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3347,
															"src": "2398:11:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 3387,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 484,
														"src": "2361:9:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 3395,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2361:49:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3396,
												"nodeType": "ExpressionStatement",
												"src": "2361:49:16"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 3403,
															"name": "ethAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3368,
															"src": "2475:9:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"expression": {
																		"id": 3399,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "2454:3:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 3400,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2458:6:16",
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "2454:10:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 3398,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2446:8:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_payable_$",
																	"typeString": "type(address payable)"
																},
																"typeName": {
																	"id": 3397,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2446:8:16",
																	"stateMutability": "payable",
																	"typeDescriptions": {}
																}
															},
															"id": 3401,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2446:19:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"id": 3402,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2466:8:16",
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"src": "2446:28:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 3404,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2446:39:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3405,
												"nodeType": "ExpressionStatement",
												"src": "2446:39:16"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 3407,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2545:3:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 3408,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2549:6:16",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "2545:10:16",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3409,
															"name": "tokenAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3347,
															"src": "2557:11:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 3410,
															"name": "ethAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3368,
															"src": "2570:9:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 3406,
														"name": "TokensSold",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3264,
														"src": "2534:10:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256,uint256)"
														}
													},
													"id": 3411,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2534:46:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3412,
												"nodeType": "EmitStatement",
												"src": "2529:51:16"
											}
										]
									},
									"functionSelector": "6c11bcd3",
									"id": 3414,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sellTokens",
									"nameLocation": "1890:10:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3348,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3347,
												"mutability": "mutable",
												"name": "tokenAmount",
												"nameLocation": "1909:11:16",
												"nodeType": "VariableDeclaration",
												"scope": 3414,
												"src": "1901:19:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3346,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1901:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1900:21:16"
									},
									"returnParameters": {
										"id": 3349,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1929:0:16"
									},
									"scope": 3472,
									"src": "1881:707:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 3428,
										"nodeType": "Block",
										"src": "2767:36:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 3424,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3416,
															"src": "2784:2:16",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3425,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3418,
															"src": "2788:6:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 3423,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 541,
														"src": "2778:5:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 3426,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2778:17:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3427,
												"nodeType": "ExpressionStatement",
												"src": "2778:17:16"
											}
										]
									},
									"functionSelector": "40c10f19",
									"id": 3429,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 3421,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 3420,
												"name": "onlyOwner",
												"nameLocations": [
													"2757:9:16"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "2757:9:16"
											},
											"nodeType": "ModifierInvocation",
											"src": "2757:9:16"
										}
									],
									"name": "mint",
									"nameLocation": "2717:4:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3419,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3416,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2730:2:16",
												"nodeType": "VariableDeclaration",
												"scope": 3429,
												"src": "2722:10:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3415,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2722:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3418,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2742:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 3429,
												"src": "2734:14:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3417,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2734:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2721:28:16"
									},
									"returnParameters": {
										"id": 3422,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2767:0:16"
									},
									"scope": 3472,
									"src": "2708:95:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 3440,
										"nodeType": "Block",
										"src": "2982:41:16",
										"statements": [
											{
												"expression": {
													"id": 3438,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 3436,
														"name": "exchangeRate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3248,
														"src": "2993:12:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 3437,
														"name": "newRate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3431,
														"src": "3008:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2993:22:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 3439,
												"nodeType": "ExpressionStatement",
												"src": "2993:22:16"
											}
										]
									},
									"functionSelector": "db068e0e",
									"id": 3441,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 3434,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 3433,
												"name": "onlyOwner",
												"nameLocations": [
													"2972:9:16"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "2972:9:16"
											},
											"nodeType": "ModifierInvocation",
											"src": "2972:9:16"
										}
									],
									"name": "setExchangeRate",
									"nameLocation": "2932:15:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3432,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3431,
												"mutability": "mutable",
												"name": "newRate",
												"nameLocation": "2956:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 3441,
												"src": "2948:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3430,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2948:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2947:17:16"
									},
									"returnParameters": {
										"id": 3435,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2982:0:16"
									},
									"scope": 3472,
									"src": "2923:100:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 3470,
										"nodeType": "Block",
										"src": "3127:156:16",
										"statements": [
											{
												"assignments": [
													3447
												],
												"declarations": [
													{
														"constant": false,
														"id": 3447,
														"mutability": "mutable",
														"name": "balance",
														"nameLocation": "3146:7:16",
														"nodeType": "VariableDeclaration",
														"scope": 3470,
														"src": "3138:15:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3446,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3138:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3453,
												"initialValue": {
													"expression": {
														"arguments": [
															{
																"id": 3450,
																"name": "this",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967268,
																"src": "3164:4:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_TurtleToken_$3472",
																	"typeString": "contract TurtleToken"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_TurtleToken_$3472",
																	"typeString": "contract TurtleToken"
																}
															],
															"id": 3449,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "3156:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 3448,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "3156:7:16",
																"typeDescriptions": {}
															}
														},
														"id": 3451,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3156:13:16",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 3452,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "3170:7:16",
													"memberName": "balance",
													"nodeType": "MemberAccess",
													"src": "3156:21:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3138:39:16"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3457,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3455,
																"name": "balance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3447,
																"src": "3196:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3456,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3206:1:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "3196:11:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e6f2045544820746f207769746864726177",
															"id": 3458,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3209:20:16",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9df16c5c3e9f487854502591282f9dbd29044f6d3f3bf4c9daa5d3460486dd95",
																"typeString": "literal_string \"No ETH to withdraw\""
															},
															"value": "No ETH to withdraw"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9df16c5c3e9f487854502591282f9dbd29044f6d3f3bf4c9daa5d3460486dd95",
																"typeString": "literal_string \"No ETH to withdraw\""
															}
														],
														"id": 3454,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3188:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 3459,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3188:42:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3460,
												"nodeType": "ExpressionStatement",
												"src": "3188:42:16"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 3467,
															"name": "balance",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3447,
															"src": "3267:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 3463,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 40,
																		"src": "3249:5:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																			"typeString": "function () view returns (address)"
																		}
																	},
																	"id": 3464,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3249:7:16",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 3462,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3241:8:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_payable_$",
																	"typeString": "type(address payable)"
																},
																"typeName": {
																	"id": 3461,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3241:8:16",
																	"stateMutability": "payable",
																	"typeDescriptions": {}
																}
															},
															"id": 3465,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3241:16:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"id": 3466,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3258:8:16",
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"src": "3241:25:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 3468,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3241:34:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3469,
												"nodeType": "ExpressionStatement",
												"src": "3241:34:16"
											}
										]
									},
									"functionSelector": "a0ef91df",
									"id": 3471,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 3444,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 3443,
												"name": "onlyOwner",
												"nameLocations": [
													"3117:9:16"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "3117:9:16"
											},
											"nodeType": "ModifierInvocation",
											"src": "3117:9:16"
										}
									],
									"name": "withdrawEth",
									"nameLocation": "3096:11:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3442,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3107:2:16"
									},
									"returnParameters": {
										"id": 3445,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3127:0:16"
									},
									"scope": 3472,
									"src": "3087:196:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 3473,
							"src": "255:3031:16",
							"usedErrors": [
								1152,
								1154
							]
						}
					],
					"src": "33:3255:16"
				},
				"id": 16
			}
		}
	}
}