{
	"id": "4ab7b71db648f7ddf7107b641da9c06c",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.18",
	"solcLongVersion": "0.8.18+commit.87f61d96",
	"input": {
		"language": "Solidity",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"viaIR": true,
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		},
		"sources": {
			"contracts/TurtleToken.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\n\r\ncontract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {\r\n    // - 1 ETH당 TURT 토큰 수 (18자리 소수점)\r\n    uint256 public exchangeRate;\r\n\r\n    // - 화이트리스트 매핑\r\n    mapping(address => bool) private _whitelistedAddresses;\r\n\r\n    // - 이벤트 정의\r\n    // - 토큰 구매 시 발생\r\n    event TokensPurchased(address indexed buyer, uint256 ethAmount, uint256 tokenAmount);\r\n    // - 토큰 판매 시 발생\r\n    event TokensSold(address indexed seller, uint256 tokenAmount, uint256 ethAmount);\r\n    // - 화이트리스트 추가 시 발생\r\n    event AddedToWhitelist(address indexed account);\r\n    // - 화이트리스트 제거 시 발생\r\n    event RemovedFromWhitelist(address indexed account);\r\n\r\n    // - 생성자: 컨트랙트 배포 시 초기 설정\r\n    // - 매개변수:\r\n    //   - initialSupply: 초기 토큰 공급량\r\n    //   - _exchangeRate: 초기 환율 설정\r\n    constructor(uint256 initialSupply, uint256 _exchangeRate) ERC20(\"TurtleToken\", \"TURT\") ERC20Permit(\"TurtleToken\") Ownable() {\r\n        _mint(address(this), initialSupply * 1e18);\r\n        exchangeRate = _exchangeRate * 1e18;\r\n    }\r\n\r\n    // - ETH를 TURT로 환전하는 함수\r\n    // - payable: ETH를 받을 수 있음\r\n    // - nonReentrant: 재진입 공격 방지\r\n    function buyTokens() public payable nonReentrant {\r\n        require(msg.value > 0, \"Must send ETH to exchange\");\r\n        // - 환전할 토큰 양 계산 (18자리 소수점 고려)\r\n        uint256 tokenAmount = (msg.value * exchangeRate) / 1e18;\r\n        require(balanceOf(address(this)) >= tokenAmount, \"Insufficient token balance in contract\");\r\n\r\n        // - 토큰 전송\r\n        _transfer(address(this), msg.sender, tokenAmount);\r\n        // - 이벤트 발생\r\n        emit TokensPurchased(msg.sender, msg.value, tokenAmount);\r\n    }\r\n\r\n    // - TURT를 ETH로 환전하는 함수\r\n    // - 매개변수:\r\n    //   - tokenAmount: 판매할 토큰 양\r\n    function sellTokens(uint256 tokenAmount) public nonReentrant {\r\n        require(tokenAmount > 0, \"Must sell a positive amount of tokens\");\r\n        require(balanceOf(msg.sender) >= tokenAmount, \"Insufficient token balance\");\r\n\r\n        // - 환전할 ETH 양 계산 (18자리 소수점 고려)\r\n        uint256 ethAmount = (tokenAmount * 1e18) / exchangeRate;\r\n        require(address(this).balance >= ethAmount, \"Insufficient ETH balance in contract\");\r\n\r\n        // - 토큰 전송\r\n        _transfer(msg.sender, address(this), tokenAmount);\r\n        // - ETH 전송\r\n        payable(msg.sender).transfer(ethAmount);\r\n\r\n        // - 이벤트 발생\r\n        emit TokensSold(msg.sender, tokenAmount, ethAmount);\r\n    }\r\n\r\n    // - 관리자용 토큰 발행 함수\r\n    // - onlyOwner: 오직 컨트랙트 소유자만 호출 가능\r\n    function mint(address to, uint256 amount) public onlyOwner {\r\n        _mint(to, amount);\r\n    }\r\n\r\n    // - 환율 설정 함수 (관리자 전용)\r\n    // - 매개변수:\r\n    //   - newRate: 새로운 환율\r\n    function setExchangeRate(uint256 newRate) public onlyOwner {\r\n        exchangeRate = newRate;\r\n    }\r\n\r\n    // - 컨트랙트의 ETH 출금 (관리자 전용)\r\n    function withdrawEth() public onlyOwner {\r\n        uint256 balance = address(this).balance;\r\n        require(balance > 0, \"No ETH to withdraw\");\r\n        payable(owner()).transfer(balance);\r\n    }\r\n\r\n    /**\r\n    * @dev 화이트리스트 관련 함수\r\n    */\r\n    // 화이트리스트에 주소 추가 (관리자 전용)\r\n    function addToWhitelist(address account) public onlyOwner {\r\n        _whitelistedAddresses[account] = true;\r\n        emit AddedToWhitelist(account);\r\n    }\r\n\r\n    // 화이트리스트에서 주소 제거 (관리자 전용)\r\n    function removeFromWhitelist(address account) public onlyOwner {\r\n        _whitelistedAddresses[account] = false;\r\n        emit RemovedFromWhitelist(account);\r\n    }\r\n\r\n    // 주소가 화이트리스트에 있는지 확인\r\n    function inWhitelisted(address account) public view returns (bool) {\r\n        return _whitelistedAddresses[account];\r\n    }\r\n\r\n    // ERC20 transfer 함수 오버라이드\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        if (_whitelistedAddresses[msg.sender]) {\r\n            _transfer(_msgSender(), recipient, amount);\r\n            return true;\r\n        }\r\n        return super.transfer(recipient, amount);\r\n    }\r\n\r\n    // ERC20 transferFrom 함수 오버라이드\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        if (_whitelistedAddresses[msg.sender]) {\r\n            _transfer(sender, recipient, amount);\r\n            return true;\r\n        }\r\n        return super.transferFrom(sender, recipient, amount);\r\n    }\r\n}\r\n"
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
			},
			"@openzeppelin/contracts/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/ERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Permit.sol\";\nimport \"../ERC20.sol\";\nimport \"../../../utils/cryptography/ECDSA.sol\";\nimport \"../../../utils/cryptography/EIP712.sol\";\nimport \"../../../utils/Counters.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n */\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\n    using Counters for Counters.Counter;\n\n    mapping(address => Counters.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private constant _PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    /**\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\n     * to reserve a slot.\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    constructor(string memory name) EIP712(name, \"1\") {}\n\n    /**\n     * @inheritdoc IERC20Permit\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @inheritdoc IERC20Permit\n     */\n    function nonces(address owner) public view virtual override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @inheritdoc IERC20Permit\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     * _Available since v4.1._\n     */\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\n        Counters.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
			},
			"@openzeppelin/contracts/utils/Counters.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/cryptography/EIP712.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.8;\n\nimport \"./ECDSA.sol\";\nimport \"../ShortStrings.sol\";\nimport \"../../interfaces/IERC5267.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n *\n * _Available since v3.4._\n *\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n */\nabstract contract EIP712 is IERC5267 {\n    using ShortStrings for *;\n\n    bytes32 private constant _TYPE_HASH =\n        keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _cachedDomainSeparator;\n    uint256 private immutable _cachedChainId;\n    address private immutable _cachedThis;\n\n    bytes32 private immutable _hashedName;\n    bytes32 private immutable _hashedVersion;\n\n    ShortString private immutable _name;\n    ShortString private immutable _version;\n    string private _nameFallback;\n    string private _versionFallback;\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        _name = name.toShortStringWithFallback(_nameFallback);\n        _version = version.toShortStringWithFallback(_versionFallback);\n        _hashedName = keccak256(bytes(name));\n        _hashedVersion = keccak256(bytes(version));\n\n        _cachedChainId = block.chainid;\n        _cachedDomainSeparator = _buildDomainSeparator();\n        _cachedThis = address(this);\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\n            return _cachedDomainSeparator;\n        } else {\n            return _buildDomainSeparator();\n        }\n    }\n\n    function _buildDomainSeparator() private view returns (bytes32) {\n        return keccak256(abi.encode(_TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev See {EIP-5267}.\n     *\n     * _Available since v4.9._\n     */\n    function eip712Domain()\n        public\n        view\n        virtual\n        override\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        )\n    {\n        return (\n            hex\"0f\", // 01111\n            _name.toStringWithFallback(_nameFallback),\n            _version.toStringWithFallback(_versionFallback),\n            block.chainid,\n            address(this),\n            bytes32(0),\n            new uint256[](0)\n        );\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\")\n            mstore(0x1c, hash)\n            message := keccak256(0x00, 0x3c)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, \"\\x19\\x01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            data := keccak256(ptr, 0x42)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\n     * `validator` and `data` according to the version 0 of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x00\", validator, data));\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/interfaces/IERC5267.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\n\npragma solidity ^0.8.0;\n\ninterface IERC5267 {\n    /**\n     * @dev MAY be emitted to signal that the domain could have changed.\n     */\n    event EIP712DomainChanged();\n\n    /**\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n     * signature.\n     */\n    function eip712Domain()\n        external\n        view\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        );\n}\n"
			},
			"@openzeppelin/contracts/utils/ShortStrings.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/ShortStrings.sol)\n\npragma solidity ^0.8.8;\n\nimport \"./StorageSlot.sol\";\n\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\n// | length  | 0x                                                              BB |\ntype ShortString is bytes32;\n\n/**\n * @dev This library provides functions to convert short memory strings\n * into a `ShortString` type that can be used as an immutable variable.\n *\n * Strings of arbitrary length can be optimized using this library if\n * they are short enough (up to 31 bytes) by packing them with their\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\n * fallback mechanism can be used for every other case.\n *\n * Usage example:\n *\n * ```solidity\n * contract Named {\n *     using ShortStrings for *;\n *\n *     ShortString private immutable _name;\n *     string private _nameFallback;\n *\n *     constructor(string memory contractName) {\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\n *     }\n *\n *     function name() external view returns (string memory) {\n *         return _name.toStringWithFallback(_nameFallback);\n *     }\n * }\n * ```\n */\nlibrary ShortStrings {\n    // Used as an identifier for strings longer than 31 bytes.\n    bytes32 private constant _FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\n\n    error StringTooLong(string str);\n    error InvalidShortString();\n\n    /**\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\n     *\n     * This will trigger a `StringTooLong` error is the input string is too long.\n     */\n    function toShortString(string memory str) internal pure returns (ShortString) {\n        bytes memory bstr = bytes(str);\n        if (bstr.length > 31) {\n            revert StringTooLong(str);\n        }\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\n    }\n\n    /**\n     * @dev Decode a `ShortString` back to a \"normal\" string.\n     */\n    function toString(ShortString sstr) internal pure returns (string memory) {\n        uint256 len = byteLength(sstr);\n        // using `new string(len)` would work locally but is not memory safe.\n        string memory str = new string(32);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(str, len)\n            mstore(add(str, 0x20), sstr)\n        }\n        return str;\n    }\n\n    /**\n     * @dev Return the length of a `ShortString`.\n     */\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\n        if (result > 31) {\n            revert InvalidShortString();\n        }\n        return result;\n    }\n\n    /**\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\n     */\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\n        if (bytes(value).length < 32) {\n            return toShortString(value);\n        } else {\n            StorageSlot.getStringSlot(store).value = value;\n            return ShortString.wrap(_FALLBACK_SENTINEL);\n        }\n    }\n\n    /**\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\n     */\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\n            return toString(value);\n        } else {\n            return store;\n        }\n    }\n\n    /**\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\n     *\n     * WARNING: This will return the \"byte length\" of the string. This may not reflect the actual length in terms of\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\n     */\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\n            return byteLength(value);\n        } else {\n            return bytes(store).length;\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/math/SignedMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/math/Math.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/StorageSlot.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fc980984badf3984b6303b377711220e067722bbd6a135b24669ff5069ef9f32\",\"dweb:/ipfs/QmPHXMSXj99XjSVM21YsY6aNtLLjLVXDbyN76J5HQYvvrz\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a367861093b74443b137564d3f3c472f70bcf114739e62059c939f25e315706c\",\"dweb:/ipfs/Qmd7JMpcxD9RuQjK3uM3EzJUgSqdN8vzp8eytEiuwxQJ6h\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 7,
								"contract": "@openzeppelin/contracts/access/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/interfaces/IERC5267.sol": {
				"IERC5267": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [],
							"name": "EIP712DomainChanged",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "eip712Domain",
							"outputs": [
								{
									"internalType": "bytes1",
									"name": "fields",
									"type": "bytes1"
								},
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "version",
									"type": "string"
								},
								{
									"internalType": "uint256",
									"name": "chainId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "verifyingContract",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "salt",
									"type": "bytes32"
								},
								{
									"internalType": "uint256[]",
									"name": "extensions",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"EIP712DomainChanged()": {
								"details": "MAY be emitted to signal that the domain could have changed."
							}
						},
						"kind": "dev",
						"methods": {
							"eip712Domain()": {
								"details": "returns the fields and values that describe the domain separator used by this contract for EIP-712 signature."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"eip712Domain()": "84b0196e"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"}},\"kind\":\"dev\",\"methods\":{\"eip712Domain()\":{\"details\":\"returns the fields and values that describe the domain separator used by this contract for EIP-712 signature.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/IERC5267.sol\":\"IERC5267\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"keccak256\":\"0xac6c2efc64baccbde4904ae18ed45139c9aa8cff96d6888344d1e4d2eb8b659f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e416a280c610b6b7a5f158e4a41aacfaec01ef14d5d1de13b46be9e090265fc\",\"dweb:/ipfs/QmYZP2KrdyccBbhLZT42auhvBTMkwiwUS3V6HWb42rbwbG\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"ReentrancyGuard": {
					"abi": [],
					"devdoc": {
						"details": "Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://41319e7f621f2dc3733511332c4fd032f8e32ad2aa7fd6f665c19741d9941a34\",\"dweb:/ipfs/QmcYR3bd862GD1Bc7jwrU9bGxrhUu5na1oP964bDCu2id1\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 148,
								"contract": "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
								"label": "_status",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"ERC20": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "name_",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "symbol_",
									"type": "string"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"constructor": {
								"details": "Sets the values for {name} and {symbol}. All two of these values are immutable: they can only be set once during construction."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n  mstore(0x40, 0x80)\n  jumpi(tag_11, callvalue)\n  bytecodeSize\n  dup1\n  codesize\n  sub\n  dup1\n  tag_5\n  dup2\n  tag_1\n  jump\t// in\ntag_5:\n  swap3\n  dup4\n  codecopy\n  dup2\n  add\n  swap1\n  0x40\n  dup2\n  dup4\n  sub\n  slt\n  tag_11\n  jumpi\n  dup1\n  mload\n  sub(shl(0x40, 0x01), 0x01)\n  swap1\n  dup2\n  dup2\n  gt\n  tag_11\n  jumpi\n  dup4\n  tag_10\n  swap2\n  dup5\n  add\n  tag_2\n  jump\t// in\ntag_10:\n  swap2\n  0x20\n  swap4\n  dup5\n  dup3\n  add\n  mload\n  dup4\n  dup2\n  gt\n  tag_11\n  jumpi\n  tag_13\n  swap3\n  add\n  tag_2\n  jump\t// in\ntag_13:\n  dup3\n  mload\n  dup3\n  dup2\n  gt\n  tag_27\n  jumpi\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2046:2059  _name = name_ */\n  0x03\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n  swap2\n  dup3\n  sload\n  swap2\n  0x01\n  swap6\n  dup7\n  dup5\n  dup2\n  shr\n  swap5\n  and\n  dup1\n  iszero\n  tag_16\n  jumpi\ntag_17:\n  dup9\n  dup6\n  lt\n  eq\n  tag_18\n  jumpi\n  dup2\n  swap1\n  0x1f\n  swap5\n  dup6\n  dup2\n  gt\n  tag_20\n  jumpi\ntag_21:\n  pop\n  dup9\n  swap1\n  dup6\n  dup4\n  gt\n  0x01\n  eq\n  tag_22\n  jumpi\n  0x00\n  swap3\n  tag_24\n  jumpi\ntag_25:\n  pop\n  pop\n  not(0x00)\n  dup3\n  dup7\n  shl\n  shr\n  not\n  and\n  swap1\n  dup7\n  shl\n  or\n  dup4\n  sstore\ntag_26:\n  dup1\n  mload\n  swap4\n  dup5\n  gt\n  tag_27\n  jumpi\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2069:2086  _symbol = symbol_ */\n  0x04\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n  swap6\n  dup7\n  sload\n  dup7\n  dup2\n  dup2\n  shr\n  swap2\n  and\n  dup1\n  iszero\n  tag_29\n  jumpi\ntag_30:\n  dup3\n  dup3\n  lt\n  eq\n  tag_31\n  jumpi\n  dup4\n  dup2\n  gt\n  tag_33\n  jumpi\ntag_34:\n  pop\n  dup1\n  swap3\n  dup6\n  gt\n  0x01\n  eq\n  tag_35\n  jumpi\n  pop\n  swap4\n  dup4\n  swap5\n  swap2\n  dup5\n  swap3\n  0x00\n  swap6\n  tag_37\n  jumpi\ntag_38:\n  pop\n  pop\n  shl\n  swap3\n  not(0x00)\n  swap2\n  shl\n  shr\n  not\n  and\n  or\n  swap1\n  sstore\ntag_39:\n  mload(0x40)\n  dataSize(sub_0)\n  swap1\n  dup2\n  dataOffset(sub_0)\n  dup3\n  codecopy\n  return\ntag_37:\n  add\n  mload\n  swap4\n  pop\n  codesize\n  dup1\n  jump(tag_38)\ntag_35:\n  swap3\n  swap2\n  swap1\n  dup5\n  not(0x1f)\n  dup2\n  and\n  dup9\n  0x00\n  mstore\n  dup6\n  0x00\n  keccak256\n  swap6\n  0x00\n  swap1\ntag_40:\n  dup10\n  dup4\n  dup4\n  lt\n  tag_41\n  jumpi\n  pop\n  pop\n  pop\n  lt\n  tag_43\n  jumpi\ntag_44:\n  pop\n  pop\n  pop\n  pop\n  dup2\n  shl\n  add\n  swap1\n  sstore\n  jump(tag_39)\ntag_43:\n  add\n  mload\n  swap1\n  0xf8\n  dup5\n  not(0x00)\n  swap3\n  shl\n  and\n  shr\n  not\n  and\n  swap1\n  sstore\n  codesize\n  dup1\n  dup1\n  dup1\n  jump(tag_44)\ntag_41:\n  dup6\n  dup8\n  add\n  mload\n  dup10\n  sstore\n  swap1\n  swap8\n  add\n  swap7\n  swap5\n  dup6\n  add\n  swap5\n  dup9\n  swap4\n  pop\n  swap1\n  dup2\n  add\n  swap1\n  jump(tag_40)\ntag_33:\n  dup8\n  0x00\n  mstore\n  dup2\n  0x00\n  keccak256\n  dup5\n  dup1\n  dup9\n  add\n  0x05\n  shr\n  dup3\n  add\n  swap3\n  dup5\n  dup10\n  lt\n  tag_45\n  jumpi\ntag_46:\n  add\n  0x05\n  shr\n  add\n  swap1\n  dup8\n  swap1\ntag_47:\n  dup3\n  dup2\n  lt\n  tag_48\n  jumpi\n  pop\n  pop\n  jump(tag_34)\ntag_48:\n  0x00\n  dup2\n  sstore\n  add\n  dup8\n  swap1\n  jump(tag_47)\ntag_45:\n  swap3\n  pop\n  dup2\n  swap3\n  jump(tag_46)\ntag_31:\n  0x22\n  dup9\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore\n  revert(0x00, 0x24)\ntag_29:\n  swap1\n  0x7f\n  and\n  swap1\n  jump(tag_30)\ntag_27:\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  0x41\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2069:2086  _symbol = symbol_ */\n  0x04\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n  mstore\n  revert(0x00, 0x24)\ntag_24:\n  add\n  mload\n  swap1\n  pop\n  codesize\n  dup1\n  jump(tag_25)\ntag_22:\n  swap1\n  dup9\n  swap4\n  pop\n  not(0x1f)\n  dup4\n  and\n  swap2\n  dup8\n  0x00\n  mstore\n  dup11\n  0x00\n  keccak256\n  swap3\n  0x00\ntag_50:\n  dup13\n  dup3\n  dup3\n  lt\n  tag_51\n  jumpi\n  pop\n  pop\n  dup5\n  gt\n  tag_53\n  jumpi\ntag_54:\n  pop\n  pop\n  pop\n  dup2\n  shl\n  add\n  dup4\n  sstore\n  jump(tag_26)\ntag_53:\n  add\n  mload\n  not(0x00)\n  dup4\n  dup9\n  shl\n  0xf8\n  and\n  shr\n  not\n  and\n  swap1\n  sstore\n  codesize\n  dup1\n  dup1\n  jump(tag_54)\ntag_51:\n  dup4\n  dup6\n  add\n  mload\n  dup7\n  sstore\n  dup13\n  swap8\n  swap1\n  swap6\n  add\n  swap5\n  swap4\n  dup5\n  add\n  swap4\n  add\n  jump(tag_50)\ntag_20:\n  swap1\n  swap2\n  pop\n  dup6\n  0x00\n  mstore\n  dup9\n  0x00\n  keccak256\n  dup6\n  dup1\n  dup6\n  add\n  0x05\n  shr\n  dup3\n  add\n  swap3\n  dup12\n  dup7\n  lt\n  tag_55\n  jumpi\ntag_56:\n  swap2\n  dup11\n  swap2\n  dup7\n  swap6\n  swap5\n  swap4\n  add\n  0x05\n  shr\n  add\n  swap2\ntag_57:\n  dup3\n  dup2\n  lt\n  tag_58\n  jumpi\n  pop\n  pop\n  jump(tag_21)\ntag_58:\n  0x00\n  dup2\n  sstore\n  dup6\n  swap5\n  pop\n  dup11\n  swap2\n  add\n  jump(tag_57)\ntag_55:\n  swap3\n  pop\n  dup2\n  swap3\n  jump(tag_56)\ntag_18:\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x22)\n  revert(0x00, 0x24)\ntag_16:\n  swap4\n  0x7f\n  and\n  swap4\n  jump(tag_17)\ntag_11:\n  0x00\n  dup1\n  revert\ntag_1:\n  mload(0x40)\n  swap2\n  swap1\n  0x1f\n  add\n  not(0x1f)\n  and\n  dup3\n  add\n  sub(shl(0x40, 0x01), 0x01)\n  dup2\n  gt\n  dup4\n  dup3\n  lt\n  or\n  tag_27\n  jumpi\n  0x40\n  mstore\n  jump\t// out\ntag_2:\n  swap2\n  swap1\n  dup1\n  0x1f\n  dup5\n  add\n  slt\n  iszero\n  tag_11\n  jumpi\n  dup3\n  mload\n  sub(shl(0x40, 0x01), 0x01)\n  dup2\n  gt\n  tag_27\n  jumpi\n  0x20\n  swap1\n  tag_66\n  0x1f\n  dup3\n  add\n  not(0x1f)\n  and\n  dup4\n  add\n  tag_1\n  jump\t// in\ntag_66:\n  swap3\n  dup2\n  dup5\n  mstore\n  dup3\n  dup3\n  dup8\n  add\n  add\n  gt\n  tag_11\n  jumpi\n  0x00\ntag_69:\n  dup2\n  dup2\n  lt\n  tag_70\n  jumpi\n  pop\n  dup3\n  0x00\n  swap4\n  swap5\n  swap6\n  pop\n  add\n  add\n  mstore\n  swap1\n  jump\t// out\ntag_70:\n  dup6\n  dup2\n  add\n  dup4\n  add\n  mload\n  dup5\n  dup3\n  add\n  dup5\n  add\n  mstore\n  dup3\n  add\n  jump(tag_69)\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      0x80\n      0x40\n      dup2\n      dup2\n      mstore\n      0x04\n      swap2\n      dup3\n      calldatasize\n      lt\n      iszero\n      tag_6\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_6:\n      0x00\n      swap3\n      dup4\n      calldataload\n      0xe0\n      shr\n      swap2\n      dup3\n      0x06fdde03\n      eq\n      tag_8\n      jumpi\n      pop\n      dup2\n      0x095ea7b3\n      eq\n      tag_10\n      jumpi\n      dup2\n      0x18160ddd\n      eq\n      tag_12\n      jumpi\n      dup2\n      0x23b872dd\n      eq\n      tag_14\n      jumpi\n      dup2\n      0x313ce567\n      eq\n      tag_16\n      jumpi\n      dup2\n      0x39509351\n      eq\n      tag_18\n      jumpi\n      dup2\n      0x70a08231\n      eq\n      tag_20\n      jumpi\n      dup2\n      0x95d89b41\n      eq\n      tag_22\n      jumpi\n      dup2\n      0xa457c2d7\n      eq\n      tag_24\n      jumpi\n      pop\n      dup1\n      0xa9059cbb\n      eq\n      tag_26\n      jumpi\n      0xdd62ed3e\n      eq\n      tag_28\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_28:\n      jumpi(tag_32, callvalue)\n      dup1\n      add(calldatasize, not(0x03))\n      slt\n      tag_32\n      jumpi\n      dup1\n      0x20\n      swap3\n      tag_34\n      tag_2\n      jump\t// in\n    tag_34:\n      tag_35\n      tag_3\n      jump\t// in\n    tag_35:\n      sub(shl(0xa0, 0x01), 0x01)\n      swap2\n      dup3\n      and\n      dup4\n      mstore\n      0x01\n      dup7\n      mstore\n      dup4\n      dup4\n      keccak256\n      swap2\n      and\n      dup3\n      mstore\n      dup5\n      mstore\n      keccak256\n      sload\n      swap1\n      mload\n      swap1\n      dup2\n      mstore\n      return\n    tag_32:\n      pop\n      dup1\n      revert\n    tag_26:\n      pop\n      jumpi(tag_32, callvalue)\n      dup1\n      add(calldatasize, not(0x03))\n      slt\n      tag_32\n      jumpi\n      0x20\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3894:3900  amount */\n      tag_40\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      tag_41\n      tag_2\n      jump\t// in\n    tag_41:\n      calldataload(0x24)\n        /* \"@openzeppelin/contracts/utils/Context.sol\":734:744  msg.sender */\n      swap1\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3894:3900  amount */\n      tag_4\n      jump\t// in\n    tag_40:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      mload\n      0x01\n      dup2\n      mstore\n      return\n    tag_24:\n      swap1\n      pop\n      dup3\n      jumpi(tag_44, callvalue)\n      dup3\n      add(calldatasize, not(0x03))\n      slt\n      tag_44\n      jumpi\n      tag_46\n      tag_2\n      jump\t// in\n    tag_46:\n      swap2\n      dup4\n      calldataload(0x24)\n        /* \"@openzeppelin/contracts/utils/Context.sol\":734:744  msg.sender */\n      swap3\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      dup2\n      mstore\n      mstore(0x20, 0x01)\n      dup2\n      dup2\n      keccak256\n      0x01\n      dup1\n      0xa0\n      shl\n      sub\n      dup7\n      and\n      dup3\n      mstore\n      0x20\n      mstore\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6792:6827  currentAllowance >= subtractedValue */\n      swap1\n      dup3\n      dup3\n      lt\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      tag_47\n      jumpi\n      0x20\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6928:6962  currentAllowance - subtractedValue */\n      tag_40\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      dup6\n      dup6\n      sub\n      dup8\n        /* \"@openzeppelin/contracts/utils/Context.sol\":734:744  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6928:6962  currentAllowance - subtractedValue */\n      tag_5\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n    tag_47:\n      0x84\n      swap1\n      0x20\n      dup7\n      mload\n      swap2\n      shl(0xe5, 0x461bcd)\n      dup4\n      mstore\n      dup3\n      add\n      mstore\n      0x25\n      0x24\n      dup3\n      add\n      mstore\n      0x45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77\n      0x44\n      dup3\n      add\n      mstore\n      shl(0xd8, 0x207a65726f)\n      0x64\n      dup3\n      add\n      mstore\n      revert\n    tag_44:\n      dup1\n      revert\n    tag_22:\n      dup4\n      dup4\n      jumpi(tag_32, callvalue)\n      dup2\n      add(calldatasize, not(0x03))\n      slt\n      tag_32\n      jumpi\n      dup1\n      mload\n      swap1\n      dup3\n      dup5\n      sload\n      0x01\n      dup2\n      dup2\n      shr\n      swap1\n      dup1\n      dup4\n      and\n      swap3\n      dup4\n      iszero\n      tag_54\n      jumpi\n    tag_55:\n      0x20\n      swap4\n      dup5\n      dup5\n      lt\n      dup2\n      eq\n      tag_56\n      jumpi\n      dup4\n      dup9\n      mstore\n      swap1\n      dup2\n      iszero\n      tag_58\n      jumpi\n      pop\n      0x01\n      eq\n      tag_60\n      jumpi\n    tag_61:\n      pop\n      pop\n      pop\n      dup3\n      swap1\n      sub\n      0x1f\n      add\n      not(0x1f)\n      and\n      dup3\n      add\n      swap3\n      0xffffffffffffffff\n      dup5\n      gt\n      dup4\n      dup6\n      lt\n      or\n      tag_62\n      jumpi\n      pop\n      dup3\n      swap2\n      dup3\n      tag_64\n      swap3\n      mstore\n      dup3\n      tag_1\n      jump\t// in\n    tag_64:\n      sub\n      swap1\n      return\n    tag_62:\n      shl(0xe0, 0x4e487b71)\n      dup2\n      mstore\n      0x41\n      dup6\n      mstore\n      0x24\n      swap1\n      revert\n    tag_60:\n      dup8\n      dup8\n      mstore\n      swap2\n      swap3\n      pop\n      dup6\n      swap2\n      dup4\n      0x8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b\n    tag_65:\n      dup4\n      dup6\n      lt\n      tag_66\n      jumpi\n      pop\n      pop\n      pop\n      pop\n      dup4\n      add\n      add\n      dup6\n      dup1\n      dup1\n      jump(tag_61)\n    tag_66:\n      dup1\n      sload\n      dup9\n      dup7\n      add\n      dup4\n      add\n      mstore\n      swap4\n      add\n      swap3\n      dup5\n      swap1\n      dup3\n      add\n      jump(tag_65)\n    tag_58:\n      not(0xff)\n      and\n      dup8\n      dup6\n      add\n      mstore\n      pop\n      pop\n      iszero\n      iszero\n      0x05\n      shl\n      dup5\n      add\n      add\n      swap1\n      pop\n      dup6\n      dup1\n      dup1\n      jump(tag_61)\n    tag_56:\n      shl(0xe0, 0x4e487b71)\n      dup10\n      mstore\n      0x22\n      dup11\n      mstore\n      0x24\n      dup10\n      revert\n    tag_54:\n      swap2\n      0x7f\n      and\n      swap2\n      jump(tag_55)\n    tag_20:\n      pop\n      pop\n      jumpi(tag_32, callvalue)\n      jumpi(tag_32, slt(add(not(0x03), calldatasize), 0x20))\n      0x20\n      swap2\n      dup2\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      tag_72\n      tag_2\n      jump\t// in\n    tag_72:\n      and\n      dup2\n      mstore\n      dup1\n      dup5\n      mstore\n      keccak256\n      sload\n      swap1\n      mload\n      swap1\n      dup2\n      mstore\n      return\n    tag_18:\n      dup3\n      dup5\n      jumpi(tag_44, callvalue)\n      dup2\n      add(calldatasize, not(0x03))\n      slt\n      tag_44\n      jumpi\n      tag_77\n      tag_2\n      jump\t// in\n    tag_77:\n        /* \"@openzeppelin/contracts/utils/Context.sol\":734:744  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      dup3\n      mstore\n      0x01\n      0x20\n      swap1\n      dup2\n      mstore\n      dup4\n      dup4\n      keccak256\n      sub(shl(0xa0, 0x01), 0x01)\n      dup4\n      and\n      dup5\n      mstore\n      swap1\n      mstore\n      dup3\n      dup3\n      keccak256\n      sload\n      calldataload(0x24)\n      dup2\n      add\n      swap3\n      swap1\n      dup4\n      lt\n      tag_78\n      jumpi\n      0x20\n        /* \"@openzeppelin/contracts/utils/Context.sol\":734:744  msg.sender */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6021:6059  allowance(owner, spender) + addedValue */\n      tag_40\n        /* \"@openzeppelin/contracts/utils/Context.sol\":734:744  msg.sender */\n      dup6\n      dup6\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6021:6059  allowance(owner, spender) + addedValue */\n      tag_5\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n    tag_78:\n      shl(0xe0, 0x4e487b71)\n      dup2\n      mstore\n      0x11\n      dup6\n      mstore\n      0x24\n      swap1\n      revert\n    tag_16:\n      pop\n      pop\n      jumpi(tag_32, callvalue)\n      dup2\n      add(calldatasize, not(0x03))\n      slt\n      tag_32\n      jumpi\n      0x20\n      swap1\n      mload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3186:3188  18 */\n      0x12\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      dup2\n      mstore\n      return\n    tag_14:\n      dup4\n      swap2\n      pop\n      jumpi(tag_32, callvalue)\n      jumpi(tag_32, slt(add(not(0x03), calldatasize), 0x60))\n      tag_89\n      tag_2\n      jump\t// in\n    tag_89:\n      tag_90\n      tag_3\n      jump\t// in\n    tag_90:\n      swap2\n      dup5\n      calldataload(0x44)\n      swap5\n      0x01\n      dup1\n      0xa0\n      shl\n      sub\n      dup5\n      and\n      dup2\n      mstore\n      mstore(0x20, 0x01)\n      dup2\n      dup2\n      keccak256\n        /* \"@openzeppelin/contracts/utils/Context.sol\":734:744  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      dup3\n      mstore\n      0x20\n      mstore\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11264:11281  type(uint256).max */\n      swap1\n      not(0x00)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11244:11281  currentAllowance != type(uint256).max */\n      dup3\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11240:11483  if (currentAllowance != type(uint256).max) {... */\n      tag_91\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n    tag_92:\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5424:5430  amount */\n      dup7\n      tag_40\n      dup8\n      dup8\n      dup8\n      tag_4\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11240:11483  if (currentAllowance != type(uint256).max) {... */\n    tag_91:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11305:11331  currentAllowance >= amount */\n      dup5\n      dup3\n      lt\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      tag_94\n      jumpi\n      pop\n      swap2\n      dup4\n      swap2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11432:11457  currentAllowance - amount */\n      tag_96\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      0x20\n      swap7\n      swap6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5424:5430  amount */\n      tag_40\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      swap6\n      sub\n        /* \"@openzeppelin/contracts/utils/Context.sol\":734:744  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11432:11457  currentAllowance - amount */\n      dup4\n      tag_5\n      jump\t// in\n    tag_96:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11240:11483  if (currentAllowance != type(uint256).max) {... */\n      swap2\n      swap4\n      swap5\n      dup2\n      swap4\n      pop\n      jump(tag_92)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n    tag_94:\n      0x64\n      swap1\n      0x20\n      dup8\n      mload\n      swap2\n      shl(0xe5, 0x461bcd)\n      dup4\n      mstore\n      dup3\n      add\n      mstore\n      0x1d\n      0x24\n      dup3\n      add\n      mstore\n      0x45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000\n      0x44\n      dup3\n      add\n      mstore\n      revert\n    tag_12:\n      pop\n      pop\n      jumpi(tag_32, callvalue)\n      dup2\n      add(calldatasize, not(0x03))\n      slt\n      tag_32\n      jumpi\n      0x20\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3342:3354  _totalSupply */\n      0x02\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      sload\n      swap1\n      mload\n      swap1\n      dup2\n      mstore\n      return\n    tag_10:\n      pop\n      pop\n      jumpi(tag_32, callvalue)\n      dup1\n      add(calldatasize, not(0x03))\n      slt\n      tag_32\n      jumpi\n      0x20\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4606:4612  amount */\n      tag_40\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      tag_106\n      tag_2\n      jump\t// in\n    tag_106:\n      calldataload(0x24)\n        /* \"@openzeppelin/contracts/utils/Context.sol\":734:744  msg.sender */\n      swap1\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4606:4612  amount */\n      tag_5\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n    tag_8:\n      dup5\n      swap1\n      dup5\n      jumpi(tag_109, callvalue)\n      dup3\n      add(calldatasize, not(0x03))\n      slt\n      tag_109\n      jumpi\n      dup3\n      sload(0x03)\n      0x01\n      dup2\n      dup2\n      shr\n      swap1\n      dup1\n      dup4\n      and\n      swap3\n      dup4\n      iszero\n      tag_111\n      jumpi\n    tag_112:\n      0x20\n      swap4\n      dup5\n      dup5\n      lt\n      dup2\n      eq\n      tag_56\n      jumpi\n      dup4\n      dup9\n      mstore\n      swap1\n      dup2\n      iszero\n      tag_58\n      jumpi\n      pop\n      0x01\n      eq\n      tag_117\n      jumpi\n      pop\n      pop\n      pop\n      dup3\n      swap1\n      sub\n      0x1f\n      add\n      not(0x1f)\n      and\n      dup3\n      add\n      swap3\n      0xffffffffffffffff\n      dup5\n      gt\n      dup4\n      dup6\n      lt\n      or\n      tag_62\n      jumpi\n      pop\n      dup3\n      swap2\n      dup3\n      tag_64\n      swap3\n      mstore\n      dup3\n      tag_1\n      jump\t// in\n    tag_117:\n      0x03\n      dup8\n      mstore\n      swap2\n      swap3\n      pop\n      dup6\n      swap2\n      dup4\n      0xc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b\n    tag_122:\n      dup4\n      dup6\n      lt\n      tag_123\n      jumpi\n      pop\n      pop\n      pop\n      pop\n      dup4\n      add\n      add\n      dup6\n      dup1\n      dup1\n      jump(tag_61)\n    tag_123:\n      dup1\n      sload\n      dup9\n      dup7\n      add\n      dup4\n      add\n      mstore\n      swap4\n      add\n      swap3\n      dup5\n      swap1\n      dup3\n      add\n      jump(tag_122)\n    tag_111:\n      swap2\n      0x7f\n      and\n      swap2\n      jump(tag_112)\n    tag_109:\n      dup3\n      dup1\n      revert\n    tag_1:\n      0x20\n      dup1\n      dup3\n      mstore\n      dup3\n      mload\n      dup2\n      dup4\n      add\n      dup2\n      swap1\n      mstore\n      swap1\n      swap4\n      swap3\n      0x00\n    tag_125:\n      dup3\n      dup2\n      lt\n      tag_126\n      jumpi\n      pop\n      pop\n      0x40\n      swap3\n      swap4\n      pop\n      0x00\n      dup4\n      dup3\n      dup5\n      add\n      add\n      mstore\n      0x1f\n      dup1\n      not\n      swap2\n      add\n      and\n      add\n      add\n      swap1\n      jump\t// out\n    tag_126:\n      dup2\n      dup2\n      add\n      dup7\n      add\n      mload\n      dup5\n      dup3\n      add\n      0x40\n      add\n      mstore\n      dup6\n      add\n      jump(tag_125)\n    tag_2:\n      calldataload(0x04)\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      dup3\n      and\n      dup3\n      sub\n      tag_128\n      jumpi\n      jump\t// out\n    tag_128:\n      0x00\n      dup1\n      revert\n    tag_3:\n      calldataload(0x24)\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      dup3\n      and\n      dup3\n      sub\n      tag_128\n      jumpi\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7456:8244  function _transfer(address from, address to, uint256 amount) internal virtual {... */\n    tag_4:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      swap1\n      dup2\n      and\n      swap2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7552:7570  from != address(0) */\n      dup3\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      tag_132\n      jumpi\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7630:7646  to != address(0) */\n      swap2\n      dup3\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      tag_134\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7568:7569  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      dup3\n      dup2\n      mstore\n      dup1\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7801:7822  fromBalance >= amount */\n      swap2\n      dup1\n      dup4\n      lt\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      tag_136\n      jumpi\n      0x40\n      dup3\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8163:8189  Transfer(from, to, amount) */\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      swap6\n      dup8\n      0x20\n      swap7\n      mstore\n      dup3\n      dup7\n      mstore\n      sub\n      dup3\n      dup3\n      keccak256\n      sstore\n      dup7\n      dup2\n      mstore\n      keccak256\n      dup2\n      dup2\n      sload\n      add\n      swap1\n      sstore\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8163:8189  Transfer(from, to, amount) */\n      log3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7456:8244  function _transfer(address from, address to, uint256 amount) internal virtual {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n    tag_136:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x26\n      0x24\n      dup3\n      add\n      mstore\n      0x45524332303a207472616e7366657220616d6f756e7420657863656564732062\n      0x44\n      dup3\n      add\n      mstore\n      shl(0xd0, 0x616c616e6365)\n      0x64\n      dup3\n      add\n      mstore\n      0x84\n      swap1\n      revert\n    tag_134:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x23\n      0x24\n      dup3\n      add\n      mstore\n      0x45524332303a207472616e7366657220746f20746865207a65726f2061646472\n      0x44\n      dup3\n      add\n      mstore\n      shl(0xe8, 0x657373)\n      0x64\n      dup3\n      add\n      mstore\n      0x84\n      swap1\n      revert\n    tag_132:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x25\n      0x24\n      dup3\n      add\n      mstore\n      0x45524332303a207472616e736665722066726f6d20746865207a65726f206164\n      0x44\n      dup3\n      add\n      mstore\n      shl(0xd8, 0x6472657373)\n      0x64\n      dup3\n      add\n      mstore\n      0x84\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10457:10797  function _approve(address owner, address spender, uint256 amount) internal virtual {... */\n    tag_5:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      swap1\n      dup2\n      and\n      swap2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10558:10577  owner != address(0) */\n      dup3\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      tag_138\n      jumpi\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10636:10657  spender != address(0) */\n      swap2\n      dup3\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      tag_140\n      jumpi\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10758:10790  Approval(owner, spender, amount) */\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      swap2\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10575:10576  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      mstore\n      0x01\n      dup3\n      mstore\n      0x40\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10575:10576  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      keccak256\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10575:10576  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      mstore\n      dup3\n      mstore\n      dup1\n      0x40\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10575:10576  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      keccak256\n      sstore\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10758:10790  Approval(owner, spender, amount) */\n      log3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10457:10797  function _approve(address owner, address spender, uint256 amount) internal virtual {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1532:12844  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n    tag_140:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x22\n      0x24\n      dup3\n      add\n      mstore\n      0x45524332303a20617070726f766520746f20746865207a65726f206164647265\n      0x44\n      dup3\n      add\n      mstore\n      shl(0xf0, 0x7373)\n      0x64\n      dup3\n      add\n      mstore\n      0x84\n      swap1\n      revert\n    tag_138:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x24\n      dup1\n      dup3\n      add\n      mstore\n      0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464\n      0x44\n      dup3\n      add\n      mstore\n      shl(0xe0, 0x72657373)\n      0x64\n      dup3\n      add\n      mstore\n      0x84\n      swap1\n      revert\n\n    auxdata: 0xa26469706673582212203fc65d7e0460c6e5cc0eaf0cd82ade8705eccb8c10c25e9aebb98c74fa20c38a64736f6c63430008120033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"abi_decode_string_fromMemory": {
									"entryPoint": 840,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_memory": {
									"entryPoint": 802,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								}
							},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080604052346200031d5762000c64803803806200001d8162000322565b9283398101906040818303126200031d5780516001600160401b03908181116200031d57836200004f91840162000348565b91602093848201518381116200031d576200006b920162000348565b82518281116200021d576003918254916001958684811c9416801562000312575b88851014620002fc578190601f94858111620002a6575b5088908583116001146200023f5760009262000233575b505060001982861b1c191690861b1783555b80519384116200021d5760049586548681811c9116801562000212575b82821014620001fd57838111620001b2575b508092851160011462000144575093839491849260009562000138575b50501b92600019911b1c19161790555b6040516108a99081620003bb8239f35b01519350388062000118565b92919084601f1981168860005285600020956000905b898383106200019757505050106200017c575b50505050811b01905562000128565b01519060f884600019921b161c19169055388080806200016d565b8587015189559097019694850194889350908101906200015a565b87600052816000208480880160051c820192848910620001f3575b0160051c019087905b828110620001e6575050620000fb565b60008155018790620001d6565b92508192620001cd565b602288634e487b7160e01b6000525260246000fd5b90607f1690620000e9565b634e487b7160e01b600052604160045260246000fd5b015190503880620000ba565b90889350601f19831691876000528a6000209260005b8c8282106200028f575050841162000276575b505050811b018355620000cc565b015160001983881b60f8161c1916905538808062000268565b8385015186558c9790950194938401930162000255565b90915085600052886000208580850160051c8201928b8610620002f2575b918a91869594930160051c01915b828110620002e2575050620000a3565b600081558594508a9101620002d2565b92508192620002c4565b634e487b7160e01b600052602260045260246000fd5b93607f16936200008c565b600080fd5b6040519190601f01601f191682016001600160401b038111838210176200021d57604052565b919080601f840112156200031d5782516001600160401b0381116200021d576020906200037e601f8201601f1916830162000322565b928184528282870101116200031d5760005b818110620003a657508260009394955001015290565b85810183015184820184015282016200039056fe608060408181526004918236101561001657600080fd5b600092833560e01c91826306fdde03146104ad57508163095ea7b31461048357816318160ddd1461046457816323b872dd1461039a578163313ce5671461037e578163395093511461031757816370a08231146102e057816395d89b41146101c1578163a457c2d71461011957508063a9059cbb146100e95763dd62ed3e1461009e57600080fd5b346100e557806003193601126100e557806020926100ba6105d2565b6100c26105ed565b6001600160a01b0391821683526001865283832091168252845220549051908152f35b5080fd5b50346100e557806003193601126100e5576020906101126101086105d2565b6024359033610603565b5160018152f35b905082346101be57826003193601126101be576101346105d2565b918360243592338152600160205281812060018060a01b038616825260205220549082821061016d576020856101128585038733610771565b608490602086519162461bcd60e51b8352820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152fd5b80fd5b8383346100e557816003193601126100e557805190828454600181811c908083169283156102d6575b60209384841081146102c3578388529081156102a75750600114610252575b505050829003601f01601f191682019267ffffffffffffffff84118385101761023f575082918261023b925282610589565b0390f35b634e487b7160e01b815260418552602490fd5b8787529192508591837f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8385106102935750505050830101858080610209565b80548886018301529301928490820161027d565b60ff1916878501525050151560051b8401019050858080610209565b634e487b7160e01b895260228a52602489fd5b91607f16916101ea565b5050346100e55760203660031901126100e55760209181906001600160a01b036103086105d2565b16815280845220549051908152f35b8284346101be57816003193601126101be576103316105d2565b338252600160209081528383206001600160a01b038316845290528282205460243581019290831061036b57602084610112858533610771565b634e487b7160e01b815260118552602490fd5b5050346100e557816003193601126100e5576020905160128152f35b839150346100e55760603660031901126100e5576103b66105d2565b6103be6105ed565b91846044359460018060a01b0384168152600160205281812033825260205220549060001982036103f8575b602086610112878787610603565b84821061042157509183916104166020969561011295033383610771565b9193948193506103ea565b606490602087519162461bcd60e51b8352820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152fd5b5050346100e557816003193601126100e5576020906002549051908152f35b5050346100e557806003193601126100e5576020906101126104a36105d2565b6024359033610771565b8490843461058557826003193601126105855782600354600181811c9080831692831561057b575b60209384841081146102c3578388529081156102a7575060011461052557505050829003601f01601f191682019267ffffffffffffffff84118385101761023f575082918261023b925282610589565b600387529192508591837fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b8385106105675750505050830101858080610209565b805488860183015293019284908201610551565b91607f16916104d5565b8280fd5b6020808252825181830181905290939260005b8281106105be57505060409293506000838284010152601f8019910116010190565b81810186015184820160400152850161059c565b600435906001600160a01b03821682036105e857565b600080fd5b602435906001600160a01b03821682036105e857565b6001600160a01b0390811691821561071e57169182156106cd5760008281528060205260408120549180831061067957604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220818154019055604051908152a3565b60405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b6001600160a01b0390811691821561082257169182156107d25760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260018252604060002085600052825280604060002055604051908152a3565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fdfea26469706673582212203fc65d7e0460c6e5cc0eaf0cd82ade8705eccb8c10c25e9aebb98c74fa20c38a64736f6c63430008120033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH3 0x31D JUMPI PUSH3 0xC64 DUP1 CODESIZE SUB DUP1 PUSH3 0x1D DUP2 PUSH3 0x322 JUMP JUMPDEST SWAP3 DUP4 CODECOPY DUP2 ADD SWAP1 PUSH1 0x40 DUP2 DUP4 SUB SLT PUSH3 0x31D JUMPI DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 DUP2 DUP2 GT PUSH3 0x31D JUMPI DUP4 PUSH3 0x4F SWAP2 DUP5 ADD PUSH3 0x348 JUMP JUMPDEST SWAP2 PUSH1 0x20 SWAP4 DUP5 DUP3 ADD MLOAD DUP4 DUP2 GT PUSH3 0x31D JUMPI PUSH3 0x6B SWAP3 ADD PUSH3 0x348 JUMP JUMPDEST DUP3 MLOAD DUP3 DUP2 GT PUSH3 0x21D JUMPI PUSH1 0x3 SWAP2 DUP3 SLOAD SWAP2 PUSH1 0x1 SWAP6 DUP7 DUP5 DUP2 SHR SWAP5 AND DUP1 ISZERO PUSH3 0x312 JUMPI JUMPDEST DUP9 DUP6 LT EQ PUSH3 0x2FC JUMPI DUP2 SWAP1 PUSH1 0x1F SWAP5 DUP6 DUP2 GT PUSH3 0x2A6 JUMPI JUMPDEST POP DUP9 SWAP1 DUP6 DUP4 GT PUSH1 0x1 EQ PUSH3 0x23F JUMPI PUSH1 0x0 SWAP3 PUSH3 0x233 JUMPI JUMPDEST POP POP PUSH1 0x0 NOT DUP3 DUP7 SHL SHR NOT AND SWAP1 DUP7 SHL OR DUP4 SSTORE JUMPDEST DUP1 MLOAD SWAP4 DUP5 GT PUSH3 0x21D JUMPI PUSH1 0x4 SWAP6 DUP7 SLOAD DUP7 DUP2 DUP2 SHR SWAP2 AND DUP1 ISZERO PUSH3 0x212 JUMPI JUMPDEST DUP3 DUP3 LT EQ PUSH3 0x1FD JUMPI DUP4 DUP2 GT PUSH3 0x1B2 JUMPI JUMPDEST POP DUP1 SWAP3 DUP6 GT PUSH1 0x1 EQ PUSH3 0x144 JUMPI POP SWAP4 DUP4 SWAP5 SWAP2 DUP5 SWAP3 PUSH1 0x0 SWAP6 PUSH3 0x138 JUMPI JUMPDEST POP POP SHL SWAP3 PUSH1 0x0 NOT SWAP2 SHL SHR NOT AND OR SWAP1 SSTORE JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8A9 SWAP1 DUP2 PUSH3 0x3BB DUP3 CODECOPY RETURN JUMPDEST ADD MLOAD SWAP4 POP CODESIZE DUP1 PUSH3 0x118 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 DUP5 PUSH1 0x1F NOT DUP2 AND DUP9 PUSH1 0x0 MSTORE DUP6 PUSH1 0x0 KECCAK256 SWAP6 PUSH1 0x0 SWAP1 JUMPDEST DUP10 DUP4 DUP4 LT PUSH3 0x197 JUMPI POP POP POP LT PUSH3 0x17C JUMPI JUMPDEST POP POP POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH3 0x128 JUMP JUMPDEST ADD MLOAD SWAP1 PUSH1 0xF8 DUP5 PUSH1 0x0 NOT SWAP3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 DUP1 PUSH3 0x16D JUMP JUMPDEST DUP6 DUP8 ADD MLOAD DUP10 SSTORE SWAP1 SWAP8 ADD SWAP7 SWAP5 DUP6 ADD SWAP5 DUP9 SWAP4 POP SWAP1 DUP2 ADD SWAP1 PUSH3 0x15A JUMP JUMPDEST DUP8 PUSH1 0x0 MSTORE DUP2 PUSH1 0x0 KECCAK256 DUP5 DUP1 DUP9 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP5 DUP10 LT PUSH3 0x1F3 JUMPI JUMPDEST ADD PUSH1 0x5 SHR ADD SWAP1 DUP8 SWAP1 JUMPDEST DUP3 DUP2 LT PUSH3 0x1E6 JUMPI POP POP PUSH3 0xFB JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE ADD DUP8 SWAP1 PUSH3 0x1D6 JUMP JUMPDEST SWAP3 POP DUP2 SWAP3 PUSH3 0x1CD JUMP JUMPDEST PUSH1 0x22 DUP9 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x7F AND SWAP1 PUSH3 0xE9 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH3 0xBA JUMP JUMPDEST SWAP1 DUP9 SWAP4 POP PUSH1 0x1F NOT DUP4 AND SWAP2 DUP8 PUSH1 0x0 MSTORE DUP11 PUSH1 0x0 KECCAK256 SWAP3 PUSH1 0x0 JUMPDEST DUP13 DUP3 DUP3 LT PUSH3 0x28F JUMPI POP POP DUP5 GT PUSH3 0x276 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD DUP4 SSTORE PUSH3 0xCC JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT DUP4 DUP9 SHL PUSH1 0xF8 AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH3 0x268 JUMP JUMPDEST DUP4 DUP6 ADD MLOAD DUP7 SSTORE DUP13 SWAP8 SWAP1 SWAP6 ADD SWAP5 SWAP4 DUP5 ADD SWAP4 ADD PUSH3 0x255 JUMP JUMPDEST SWAP1 SWAP2 POP DUP6 PUSH1 0x0 MSTORE DUP9 PUSH1 0x0 KECCAK256 DUP6 DUP1 DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP12 DUP7 LT PUSH3 0x2F2 JUMPI JUMPDEST SWAP2 DUP11 SWAP2 DUP7 SWAP6 SWAP5 SWAP4 ADD PUSH1 0x5 SHR ADD SWAP2 JUMPDEST DUP3 DUP2 LT PUSH3 0x2E2 JUMPI POP POP PUSH3 0xA3 JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE DUP6 SWAP5 POP DUP11 SWAP2 ADD PUSH3 0x2D2 JUMP JUMPDEST SWAP3 POP DUP2 SWAP3 PUSH3 0x2C4 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP4 PUSH1 0x7F AND SWAP4 PUSH3 0x8C JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP2 SWAP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP4 DUP3 LT OR PUSH3 0x21D JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP2 SWAP1 DUP1 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH3 0x31D JUMPI DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH3 0x21D JUMPI PUSH1 0x20 SWAP1 PUSH3 0x37E PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP4 ADD PUSH3 0x322 JUMP JUMPDEST SWAP3 DUP2 DUP5 MSTORE DUP3 DUP3 DUP8 ADD ADD GT PUSH3 0x31D JUMPI PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH3 0x3A6 JUMPI POP DUP3 PUSH1 0x0 SWAP4 SWAP5 SWAP6 POP ADD ADD MSTORE SWAP1 JUMP JUMPDEST DUP6 DUP2 ADD DUP4 ADD MLOAD DUP5 DUP3 ADD DUP5 ADD MSTORE DUP3 ADD PUSH3 0x390 JUMP INVALID PUSH1 0x80 PUSH1 0x40 DUP2 DUP2 MSTORE PUSH1 0x4 SWAP2 DUP3 CALLDATASIZE LT ISZERO PUSH2 0x16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP3 DUP4 CALLDATALOAD PUSH1 0xE0 SHR SWAP2 DUP3 PUSH4 0x6FDDE03 EQ PUSH2 0x4AD JUMPI POP DUP2 PUSH4 0x95EA7B3 EQ PUSH2 0x483 JUMPI DUP2 PUSH4 0x18160DDD EQ PUSH2 0x464 JUMPI DUP2 PUSH4 0x23B872DD EQ PUSH2 0x39A JUMPI DUP2 PUSH4 0x313CE567 EQ PUSH2 0x37E JUMPI DUP2 PUSH4 0x39509351 EQ PUSH2 0x317 JUMPI DUP2 PUSH4 0x70A08231 EQ PUSH2 0x2E0 JUMPI DUP2 PUSH4 0x95D89B41 EQ PUSH2 0x1C1 JUMPI DUP2 PUSH4 0xA457C2D7 EQ PUSH2 0x119 JUMPI POP DUP1 PUSH4 0xA9059CBB EQ PUSH2 0xE9 JUMPI PUSH4 0xDD62ED3E EQ PUSH2 0x9E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0xE5 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE5 JUMPI DUP1 PUSH1 0x20 SWAP3 PUSH2 0xBA PUSH2 0x5D2 JUMP JUMPDEST PUSH2 0xC2 PUSH2 0x5ED JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND DUP4 MSTORE PUSH1 0x1 DUP7 MSTORE DUP4 DUP4 KECCAK256 SWAP2 AND DUP3 MSTORE DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0xE5 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE5 JUMPI PUSH1 0x20 SWAP1 PUSH2 0x112 PUSH2 0x108 PUSH2 0x5D2 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER PUSH2 0x603 JUMP JUMPDEST MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST SWAP1 POP DUP3 CALLVALUE PUSH2 0x1BE JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1BE JUMPI PUSH2 0x134 PUSH2 0x5D2 JUMP JUMPDEST SWAP2 DUP4 PUSH1 0x24 CALLDATALOAD SWAP3 CALLER DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP2 DUP2 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP7 AND DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 SLOAD SWAP1 DUP3 DUP3 LT PUSH2 0x16D JUMPI PUSH1 0x20 DUP6 PUSH2 0x112 DUP6 DUP6 SUB DUP8 CALLER PUSH2 0x771 JUMP JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x20 DUP7 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST DUP1 REVERT JUMPDEST DUP4 DUP4 CALLVALUE PUSH2 0xE5 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE5 JUMPI DUP1 MLOAD SWAP1 DUP3 DUP5 SLOAD PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP1 DUP4 AND SWAP3 DUP4 ISZERO PUSH2 0x2D6 JUMPI JUMPDEST PUSH1 0x20 SWAP4 DUP5 DUP5 LT DUP2 EQ PUSH2 0x2C3 JUMPI DUP4 DUP9 MSTORE SWAP1 DUP2 ISZERO PUSH2 0x2A7 JUMPI POP PUSH1 0x1 EQ PUSH2 0x252 JUMPI JUMPDEST POP POP POP DUP3 SWAP1 SUB PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP5 GT DUP4 DUP6 LT OR PUSH2 0x23F JUMPI POP DUP3 SWAP2 DUP3 PUSH2 0x23B SWAP3 MSTORE DUP3 PUSH2 0x589 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x41 DUP6 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST DUP8 DUP8 MSTORE SWAP2 SWAP3 POP DUP6 SWAP2 DUP4 PUSH32 0x8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19B JUMPDEST DUP4 DUP6 LT PUSH2 0x293 JUMPI POP POP POP POP DUP4 ADD ADD DUP6 DUP1 DUP1 PUSH2 0x209 JUMP JUMPDEST DUP1 SLOAD DUP9 DUP7 ADD DUP4 ADD MSTORE SWAP4 ADD SWAP3 DUP5 SWAP1 DUP3 ADD PUSH2 0x27D JUMP JUMPDEST PUSH1 0xFF NOT AND DUP8 DUP6 ADD MSTORE POP POP ISZERO ISZERO PUSH1 0x5 SHL DUP5 ADD ADD SWAP1 POP DUP6 DUP1 DUP1 PUSH2 0x209 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP10 MSTORE PUSH1 0x22 DUP11 MSTORE PUSH1 0x24 DUP10 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x1EA JUMP JUMPDEST POP POP CALLVALUE PUSH2 0xE5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE5 JUMPI PUSH1 0x20 SWAP2 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x308 PUSH2 0x5D2 JUMP JUMPDEST AND DUP2 MSTORE DUP1 DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 DUP5 CALLVALUE PUSH2 0x1BE JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1BE JUMPI PUSH2 0x331 PUSH2 0x5D2 JUMP JUMPDEST CALLER DUP3 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE DUP4 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP5 MSTORE SWAP1 MSTORE DUP3 DUP3 KECCAK256 SLOAD PUSH1 0x24 CALLDATALOAD DUP2 ADD SWAP3 SWAP1 DUP4 LT PUSH2 0x36B JUMPI PUSH1 0x20 DUP5 PUSH2 0x112 DUP6 DUP6 CALLER PUSH2 0x771 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 DUP6 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0xE5 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE5 JUMPI PUSH1 0x20 SWAP1 MLOAD PUSH1 0x12 DUP2 MSTORE RETURN JUMPDEST DUP4 SWAP2 POP CALLVALUE PUSH2 0xE5 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE5 JUMPI PUSH2 0x3B6 PUSH2 0x5D2 JUMP JUMPDEST PUSH2 0x3BE PUSH2 0x5ED JUMP JUMPDEST SWAP2 DUP5 PUSH1 0x44 CALLDATALOAD SWAP5 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP2 DUP2 KECCAK256 CALLER DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 SLOAD SWAP1 PUSH1 0x0 NOT DUP3 SUB PUSH2 0x3F8 JUMPI JUMPDEST PUSH1 0x20 DUP7 PUSH2 0x112 DUP8 DUP8 DUP8 PUSH2 0x603 JUMP JUMPDEST DUP5 DUP3 LT PUSH2 0x421 JUMPI POP SWAP2 DUP4 SWAP2 PUSH2 0x416 PUSH1 0x20 SWAP7 SWAP6 PUSH2 0x112 SWAP6 SUB CALLER DUP4 PUSH2 0x771 JUMP JUMPDEST SWAP2 SWAP4 SWAP5 DUP2 SWAP4 POP PUSH2 0x3EA JUMP JUMPDEST PUSH1 0x64 SWAP1 PUSH1 0x20 DUP8 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP POP CALLVALUE PUSH2 0xE5 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE5 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x2 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP POP CALLVALUE PUSH2 0xE5 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE5 JUMPI PUSH1 0x20 SWAP1 PUSH2 0x112 PUSH2 0x4A3 PUSH2 0x5D2 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER PUSH2 0x771 JUMP JUMPDEST DUP5 SWAP1 DUP5 CALLVALUE PUSH2 0x585 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x585 JUMPI DUP3 PUSH1 0x3 SLOAD PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP1 DUP4 AND SWAP3 DUP4 ISZERO PUSH2 0x57B JUMPI JUMPDEST PUSH1 0x20 SWAP4 DUP5 DUP5 LT DUP2 EQ PUSH2 0x2C3 JUMPI DUP4 DUP9 MSTORE SWAP1 DUP2 ISZERO PUSH2 0x2A7 JUMPI POP PUSH1 0x1 EQ PUSH2 0x525 JUMPI POP POP POP DUP3 SWAP1 SUB PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP5 GT DUP4 DUP6 LT OR PUSH2 0x23F JUMPI POP DUP3 SWAP2 DUP3 PUSH2 0x23B SWAP3 MSTORE DUP3 PUSH2 0x589 JUMP JUMPDEST PUSH1 0x3 DUP8 MSTORE SWAP2 SWAP3 POP DUP6 SWAP2 DUP4 PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B JUMPDEST DUP4 DUP6 LT PUSH2 0x567 JUMPI POP POP POP POP DUP4 ADD ADD DUP6 DUP1 DUP1 PUSH2 0x209 JUMP JUMPDEST DUP1 SLOAD DUP9 DUP7 ADD DUP4 ADD MSTORE SWAP4 ADD SWAP3 DUP5 SWAP1 DUP3 ADD PUSH2 0x551 JUMP JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x4D5 JUMP JUMPDEST DUP3 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP2 DUP4 ADD DUP2 SWAP1 MSTORE SWAP1 SWAP4 SWAP3 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x5BE JUMPI POP POP PUSH1 0x40 SWAP3 SWAP4 POP PUSH1 0x0 DUP4 DUP3 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND ADD ADD SWAP1 JUMP JUMPDEST DUP2 DUP2 ADD DUP7 ADD MLOAD DUP5 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP6 ADD PUSH2 0x59C JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x5E8 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x5E8 JUMPI JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 DUP3 ISZERO PUSH2 0x71E JUMPI AND SWAP2 DUP3 ISZERO PUSH2 0x6CD JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE DUP1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 DUP1 DUP4 LT PUSH2 0x679 JUMPI PUSH1 0x40 DUP3 DUP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP6 DUP8 PUSH1 0x20 SWAP7 MSTORE DUP3 DUP7 MSTORE SUB DUP3 DUP3 KECCAK256 SSTORE DUP7 DUP2 MSTORE KECCAK256 DUP2 DUP2 SLOAD ADD SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 DUP3 ISZERO PUSH2 0x822 JUMPI AND SWAP2 DUP3 ISZERO PUSH2 0x7D2 JUMPI PUSH1 0x20 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 DUP4 PUSH1 0x0 MSTORE PUSH1 0x1 DUP3 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP6 PUSH1 0x0 MSTORE DUP3 MSTORE DUP1 PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXTCODEHASH 0xC6 0x5D PUSH31 0x460C6E5CC0EAF0CD82ADE8705ECCB8C10C25E9AEBB98C74FA20C38A64736F PUSH13 0x63430008120033000000000000 ",
							"sourceMap": "1532:11312:3:-:0;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1532:11312:3;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;2046:13;1532:11312;;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:3;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:3;;;;;;;;;;-1:-1:-1;1532:11312:3;;;;-1:-1:-1;;;;1532:11312:3;;;;;;;;;;;;;;;;;;;;2069:17;1532:11312;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:3;;;;;;;;;;;;;;-1:-1:-1;1532:11312:3;;-1:-1:-1;1532:11312:3;;-1:-1:-1;1532:11312:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:3;;;;;;;;-1:-1:-1;1532:11312:3;;-1:-1:-1;1532:11312:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:3;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:3;;;-1:-1:-1;1532:11312:3;;;;;;;;;;;;-1:-1:-1;1532:11312:3;;2069:17;1532:11312;;-1:-1:-1;1532:11312:3;;;;;-1:-1:-1;1532:11312:3;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:3;;-1:-1:-1;1532:11312:3;;-1:-1:-1;1532:11312:3;;;;;;;;;;-1:-1:-1;1532:11312:3;;;;;;;;;;;;;;;;-1:-1:-1;;1532:11312:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:3;;-1:-1:-1;1532:11312:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:3;;;;-1:-1:-1;1532:11312:3;;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:3;;;;;-1:-1:-1;1532:11312:3;;;;;;;;;-1:-1:-1;1532:11312:3;;;;;;;;;-1:-1:-1;;1532:11312:3;;;-1:-1:-1;;;;;1532:11312:3;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;1532:11312:3;;;;;;;;;;-1:-1:-1;;1532:11312:3;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;1532:11312:3;;;;;;;;-1:-1:-1;1532:11312:3;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"abi_decode_address": {
									"entryPoint": 1490,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"abi_decode_address_4782": {
									"entryPoint": 1517,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"abi_encode_string": {
									"entryPoint": 1417,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"fun_approve": {
									"entryPoint": 1905,
									"id": 723,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"fun_transfer": {
									"entryPoint": 1539,
									"id": 549,
									"parameterSlots": 3,
									"returnSlots": 0
								}
							},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060408181526004918236101561001657600080fd5b600092833560e01c91826306fdde03146104ad57508163095ea7b31461048357816318160ddd1461046457816323b872dd1461039a578163313ce5671461037e578163395093511461031757816370a08231146102e057816395d89b41146101c1578163a457c2d71461011957508063a9059cbb146100e95763dd62ed3e1461009e57600080fd5b346100e557806003193601126100e557806020926100ba6105d2565b6100c26105ed565b6001600160a01b0391821683526001865283832091168252845220549051908152f35b5080fd5b50346100e557806003193601126100e5576020906101126101086105d2565b6024359033610603565b5160018152f35b905082346101be57826003193601126101be576101346105d2565b918360243592338152600160205281812060018060a01b038616825260205220549082821061016d576020856101128585038733610771565b608490602086519162461bcd60e51b8352820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152fd5b80fd5b8383346100e557816003193601126100e557805190828454600181811c908083169283156102d6575b60209384841081146102c3578388529081156102a75750600114610252575b505050829003601f01601f191682019267ffffffffffffffff84118385101761023f575082918261023b925282610589565b0390f35b634e487b7160e01b815260418552602490fd5b8787529192508591837f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8385106102935750505050830101858080610209565b80548886018301529301928490820161027d565b60ff1916878501525050151560051b8401019050858080610209565b634e487b7160e01b895260228a52602489fd5b91607f16916101ea565b5050346100e55760203660031901126100e55760209181906001600160a01b036103086105d2565b16815280845220549051908152f35b8284346101be57816003193601126101be576103316105d2565b338252600160209081528383206001600160a01b038316845290528282205460243581019290831061036b57602084610112858533610771565b634e487b7160e01b815260118552602490fd5b5050346100e557816003193601126100e5576020905160128152f35b839150346100e55760603660031901126100e5576103b66105d2565b6103be6105ed565b91846044359460018060a01b0384168152600160205281812033825260205220549060001982036103f8575b602086610112878787610603565b84821061042157509183916104166020969561011295033383610771565b9193948193506103ea565b606490602087519162461bcd60e51b8352820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152fd5b5050346100e557816003193601126100e5576020906002549051908152f35b5050346100e557806003193601126100e5576020906101126104a36105d2565b6024359033610771565b8490843461058557826003193601126105855782600354600181811c9080831692831561057b575b60209384841081146102c3578388529081156102a7575060011461052557505050829003601f01601f191682019267ffffffffffffffff84118385101761023f575082918261023b925282610589565b600387529192508591837fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b8385106105675750505050830101858080610209565b805488860183015293019284908201610551565b91607f16916104d5565b8280fd5b6020808252825181830181905290939260005b8281106105be57505060409293506000838284010152601f8019910116010190565b81810186015184820160400152850161059c565b600435906001600160a01b03821682036105e857565b600080fd5b602435906001600160a01b03821682036105e857565b6001600160a01b0390811691821561071e57169182156106cd5760008281528060205260408120549180831061067957604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220818154019055604051908152a3565b60405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b6001600160a01b0390811691821561082257169182156107d25760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260018252604060002085600052825280604060002055604051908152a3565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fdfea26469706673582212203fc65d7e0460c6e5cc0eaf0cd82ade8705eccb8c10c25e9aebb98c74fa20c38a64736f6c63430008120033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 DUP2 DUP2 MSTORE PUSH1 0x4 SWAP2 DUP3 CALLDATASIZE LT ISZERO PUSH2 0x16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP3 DUP4 CALLDATALOAD PUSH1 0xE0 SHR SWAP2 DUP3 PUSH4 0x6FDDE03 EQ PUSH2 0x4AD JUMPI POP DUP2 PUSH4 0x95EA7B3 EQ PUSH2 0x483 JUMPI DUP2 PUSH4 0x18160DDD EQ PUSH2 0x464 JUMPI DUP2 PUSH4 0x23B872DD EQ PUSH2 0x39A JUMPI DUP2 PUSH4 0x313CE567 EQ PUSH2 0x37E JUMPI DUP2 PUSH4 0x39509351 EQ PUSH2 0x317 JUMPI DUP2 PUSH4 0x70A08231 EQ PUSH2 0x2E0 JUMPI DUP2 PUSH4 0x95D89B41 EQ PUSH2 0x1C1 JUMPI DUP2 PUSH4 0xA457C2D7 EQ PUSH2 0x119 JUMPI POP DUP1 PUSH4 0xA9059CBB EQ PUSH2 0xE9 JUMPI PUSH4 0xDD62ED3E EQ PUSH2 0x9E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0xE5 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE5 JUMPI DUP1 PUSH1 0x20 SWAP3 PUSH2 0xBA PUSH2 0x5D2 JUMP JUMPDEST PUSH2 0xC2 PUSH2 0x5ED JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND DUP4 MSTORE PUSH1 0x1 DUP7 MSTORE DUP4 DUP4 KECCAK256 SWAP2 AND DUP3 MSTORE DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0xE5 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE5 JUMPI PUSH1 0x20 SWAP1 PUSH2 0x112 PUSH2 0x108 PUSH2 0x5D2 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER PUSH2 0x603 JUMP JUMPDEST MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST SWAP1 POP DUP3 CALLVALUE PUSH2 0x1BE JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1BE JUMPI PUSH2 0x134 PUSH2 0x5D2 JUMP JUMPDEST SWAP2 DUP4 PUSH1 0x24 CALLDATALOAD SWAP3 CALLER DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP2 DUP2 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP7 AND DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 SLOAD SWAP1 DUP3 DUP3 LT PUSH2 0x16D JUMPI PUSH1 0x20 DUP6 PUSH2 0x112 DUP6 DUP6 SUB DUP8 CALLER PUSH2 0x771 JUMP JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x20 DUP7 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST DUP1 REVERT JUMPDEST DUP4 DUP4 CALLVALUE PUSH2 0xE5 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE5 JUMPI DUP1 MLOAD SWAP1 DUP3 DUP5 SLOAD PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP1 DUP4 AND SWAP3 DUP4 ISZERO PUSH2 0x2D6 JUMPI JUMPDEST PUSH1 0x20 SWAP4 DUP5 DUP5 LT DUP2 EQ PUSH2 0x2C3 JUMPI DUP4 DUP9 MSTORE SWAP1 DUP2 ISZERO PUSH2 0x2A7 JUMPI POP PUSH1 0x1 EQ PUSH2 0x252 JUMPI JUMPDEST POP POP POP DUP3 SWAP1 SUB PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP5 GT DUP4 DUP6 LT OR PUSH2 0x23F JUMPI POP DUP3 SWAP2 DUP3 PUSH2 0x23B SWAP3 MSTORE DUP3 PUSH2 0x589 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x41 DUP6 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST DUP8 DUP8 MSTORE SWAP2 SWAP3 POP DUP6 SWAP2 DUP4 PUSH32 0x8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19B JUMPDEST DUP4 DUP6 LT PUSH2 0x293 JUMPI POP POP POP POP DUP4 ADD ADD DUP6 DUP1 DUP1 PUSH2 0x209 JUMP JUMPDEST DUP1 SLOAD DUP9 DUP7 ADD DUP4 ADD MSTORE SWAP4 ADD SWAP3 DUP5 SWAP1 DUP3 ADD PUSH2 0x27D JUMP JUMPDEST PUSH1 0xFF NOT AND DUP8 DUP6 ADD MSTORE POP POP ISZERO ISZERO PUSH1 0x5 SHL DUP5 ADD ADD SWAP1 POP DUP6 DUP1 DUP1 PUSH2 0x209 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP10 MSTORE PUSH1 0x22 DUP11 MSTORE PUSH1 0x24 DUP10 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x1EA JUMP JUMPDEST POP POP CALLVALUE PUSH2 0xE5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE5 JUMPI PUSH1 0x20 SWAP2 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x308 PUSH2 0x5D2 JUMP JUMPDEST AND DUP2 MSTORE DUP1 DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 DUP5 CALLVALUE PUSH2 0x1BE JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1BE JUMPI PUSH2 0x331 PUSH2 0x5D2 JUMP JUMPDEST CALLER DUP3 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE DUP4 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP5 MSTORE SWAP1 MSTORE DUP3 DUP3 KECCAK256 SLOAD PUSH1 0x24 CALLDATALOAD DUP2 ADD SWAP3 SWAP1 DUP4 LT PUSH2 0x36B JUMPI PUSH1 0x20 DUP5 PUSH2 0x112 DUP6 DUP6 CALLER PUSH2 0x771 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 DUP6 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0xE5 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE5 JUMPI PUSH1 0x20 SWAP1 MLOAD PUSH1 0x12 DUP2 MSTORE RETURN JUMPDEST DUP4 SWAP2 POP CALLVALUE PUSH2 0xE5 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE5 JUMPI PUSH2 0x3B6 PUSH2 0x5D2 JUMP JUMPDEST PUSH2 0x3BE PUSH2 0x5ED JUMP JUMPDEST SWAP2 DUP5 PUSH1 0x44 CALLDATALOAD SWAP5 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP2 DUP2 KECCAK256 CALLER DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 SLOAD SWAP1 PUSH1 0x0 NOT DUP3 SUB PUSH2 0x3F8 JUMPI JUMPDEST PUSH1 0x20 DUP7 PUSH2 0x112 DUP8 DUP8 DUP8 PUSH2 0x603 JUMP JUMPDEST DUP5 DUP3 LT PUSH2 0x421 JUMPI POP SWAP2 DUP4 SWAP2 PUSH2 0x416 PUSH1 0x20 SWAP7 SWAP6 PUSH2 0x112 SWAP6 SUB CALLER DUP4 PUSH2 0x771 JUMP JUMPDEST SWAP2 SWAP4 SWAP5 DUP2 SWAP4 POP PUSH2 0x3EA JUMP JUMPDEST PUSH1 0x64 SWAP1 PUSH1 0x20 DUP8 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP POP CALLVALUE PUSH2 0xE5 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE5 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x2 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP POP CALLVALUE PUSH2 0xE5 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE5 JUMPI PUSH1 0x20 SWAP1 PUSH2 0x112 PUSH2 0x4A3 PUSH2 0x5D2 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER PUSH2 0x771 JUMP JUMPDEST DUP5 SWAP1 DUP5 CALLVALUE PUSH2 0x585 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x585 JUMPI DUP3 PUSH1 0x3 SLOAD PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP1 DUP4 AND SWAP3 DUP4 ISZERO PUSH2 0x57B JUMPI JUMPDEST PUSH1 0x20 SWAP4 DUP5 DUP5 LT DUP2 EQ PUSH2 0x2C3 JUMPI DUP4 DUP9 MSTORE SWAP1 DUP2 ISZERO PUSH2 0x2A7 JUMPI POP PUSH1 0x1 EQ PUSH2 0x525 JUMPI POP POP POP DUP3 SWAP1 SUB PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP5 GT DUP4 DUP6 LT OR PUSH2 0x23F JUMPI POP DUP3 SWAP2 DUP3 PUSH2 0x23B SWAP3 MSTORE DUP3 PUSH2 0x589 JUMP JUMPDEST PUSH1 0x3 DUP8 MSTORE SWAP2 SWAP3 POP DUP6 SWAP2 DUP4 PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B JUMPDEST DUP4 DUP6 LT PUSH2 0x567 JUMPI POP POP POP POP DUP4 ADD ADD DUP6 DUP1 DUP1 PUSH2 0x209 JUMP JUMPDEST DUP1 SLOAD DUP9 DUP7 ADD DUP4 ADD MSTORE SWAP4 ADD SWAP3 DUP5 SWAP1 DUP3 ADD PUSH2 0x551 JUMP JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x4D5 JUMP JUMPDEST DUP3 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP2 DUP4 ADD DUP2 SWAP1 MSTORE SWAP1 SWAP4 SWAP3 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x5BE JUMPI POP POP PUSH1 0x40 SWAP3 SWAP4 POP PUSH1 0x0 DUP4 DUP3 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND ADD ADD SWAP1 JUMP JUMPDEST DUP2 DUP2 ADD DUP7 ADD MLOAD DUP5 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP6 ADD PUSH2 0x59C JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x5E8 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x5E8 JUMPI JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 DUP3 ISZERO PUSH2 0x71E JUMPI AND SWAP2 DUP3 ISZERO PUSH2 0x6CD JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE DUP1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 DUP1 DUP4 LT PUSH2 0x679 JUMPI PUSH1 0x40 DUP3 DUP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP6 DUP8 PUSH1 0x20 SWAP7 MSTORE DUP3 DUP7 MSTORE SUB DUP3 DUP3 KECCAK256 SSTORE DUP7 DUP2 MSTORE KECCAK256 DUP2 DUP2 SLOAD ADD SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 DUP3 ISZERO PUSH2 0x822 JUMPI AND SWAP2 DUP3 ISZERO PUSH2 0x7D2 JUMPI PUSH1 0x20 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 DUP4 PUSH1 0x0 MSTORE PUSH1 0x1 DUP3 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP6 PUSH1 0x0 MSTORE DUP3 MSTORE DUP1 PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXTCODEHASH 0xC6 0x5D PUSH31 0x460C6E5CC0EAF0CD82ADE8705ECCB8C10C25E9AEBB98C74FA20C38A64736F PUSH13 0x63430008120033000000000000 ",
							"sourceMap": "1532:11312:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;-1:-1:-1;;;;;1532:11312:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3894:6;1532:11312;;:::i;:::-;;;734:10:8;;3894:6:3;:::i;:::-;1532:11312;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;734:10:8;;1532:11312:3;;;;;;;;;;;;;;;;;;;;;6792:35;;;;1532:11312;;;;6928:34;1532:11312;;;;734:10:8;6928:34:3;:::i;1532:11312::-;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1532:11312:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1532:11312:3;;;;;-1:-1:-1;;1532:11312:3;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;1532:11312:3;;;;;;;;;;;;;;-1:-1:-1;1532:11312:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1532:11312:3;;;;;-1:-1:-1;;1532:11312:3;;;;;;;;-1:-1:-1;1532:11312:3;;;;;;-1:-1:-1;;;1532:11312:3;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1532:11312:3;;;;;;;;-1:-1:-1;;;;;1532:11312:3;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;734:10:8;1532:11312:3;;;;;;;;;;-1:-1:-1;;;;;1532:11312:3;;;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:3;;;734:10:8;6021:38:3;734:10:8;;;6021:38:3;:::i;1532:11312::-;-1:-1:-1;;;1532:11312:3;;;;;;;;;;;;;;;;;;;;;;;;;3186:2;1532:11312;;;;;;;;;;;;-1:-1:-1;;1532:11312:3;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;734:10:8;1532:11312:3;;;;;;11264:17;;;11244:37;;11240:243;;1532:11312;;5424:6;;;;;;:::i;11240:243::-;11305:26;;;1532:11312;;;;;;11432:25;1532:11312;;;5424:6;1532:11312;;734:10:8;11432:25:3;;:::i;:::-;11240:243;;;;;;;;1532:11312;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3342:12;1532:11312;;;;;;;;;;;;;;;;;;;;;;;4606:6;1532:11312;;:::i;:::-;;;734:10:8;;4606:6:3;:::i;1532:11312::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1532:11312:3;;;;;-1:-1:-1;;1532:11312:3;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;1532:11312:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1532:11312:3;;;;;;:::o;:::-;;;;;;;;-1:-1:-1;;;;;1532:11312:3;;;;;;:::o;7456:788::-;-1:-1:-1;;;;;1532:11312:3;;;;7552:18;;1532:11312;;;7630:16;;;1532:11312;;7568:1;1532:11312;;;;;;;;;;7801:21;;;;1532:11312;;;;;8163:26;1532:11312;;;;;;;;;;;;;;;;;;;;;;;;;;;;8163:26;7456:788::o;1532:11312::-;;;-1:-1:-1;;;1532:11312:3;;;;;;;;;;;;;;;;;-1:-1:-1;;;1532:11312:3;;;;;;;;;;-1:-1:-1;;;1532:11312:3;;;;;;;;;;;;;;;;;-1:-1:-1;;;1532:11312:3;;;;;;;;;;-1:-1:-1;;;1532:11312:3;;;;;;;;;;;;;;;;;-1:-1:-1;;;1532:11312:3;;;;;;;10457:340;-1:-1:-1;;;;;1532:11312:3;;;;10558:19;;1532:11312;;;10636:21;;;1532:11312;;;10758:32;1532:11312;;10575:1;1532:11312;;;;;10575:1;1532:11312;;10575:1;1532:11312;;;;;10575:1;1532:11312;;;;;;;10758:32;10457:340::o;1532:11312::-;;;-1:-1:-1;;;1532:11312:3;;;;;;;;;;;;;;;;;-1:-1:-1;;;1532:11312:3;;;;;;;;;;-1:-1:-1;;;1532:11312:3;;;;;;;;;;;;;;;;;-1:-1:-1;;;1532:11312:3;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "443400",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"allowance(address,address)": "2788",
								"approve(address,uint256)": "24387",
								"balanceOf(address)": "2563",
								"decimals()": "262",
								"decreaseAllowance(address,uint256)": "26828",
								"increaseAllowance(address,uint256)": "26763",
								"name()": "infinite",
								"symbol()": "infinite",
								"totalSupply()": "2324",
								"transfer(address,uint256)": "50966",
								"transferFrom(address,address,uint256)": "77385"
							},
							"internal": {
								"_afterTokenTransfer(address,address,uint256)": "infinite",
								"_approve(address,address,uint256)": "infinite",
								"_beforeTokenTransfer(address,address,uint256)": "infinite",
								"_burn(address,uint256)": "infinite",
								"_mint(address,uint256)": "infinite",
								"_spendAllowance(address,address,uint256)": "infinite",
								"_transfer(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 3,
									"value": "80"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "CALLVALUE",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "11"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSHSIZE",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "CODESIZE",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SUB",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "5"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 1532,
									"end": 12844,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 3,
									"value": "5"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP3",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP4",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "CODECOPY",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP4",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SUB",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SLT",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "11"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "GT",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "11"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP4",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "10"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP2",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP5",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "2"
								},
								{
									"begin": 1532,
									"end": 12844,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 3,
									"value": "10"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP2",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 3,
									"value": "20"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP4",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP5",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP4",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "GT",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "11"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "13"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP3",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "2"
								},
								{
									"begin": 1532,
									"end": 12844,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 3,
									"value": "13"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "GT",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "27"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 2046,
									"end": 2059,
									"name": "PUSH",
									"source": 3,
									"value": "3"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP2",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SLOAD",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP2",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP6",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP7",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP5",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SHR",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP5",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "AND",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ISZERO",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "16"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "tag",
									"source": -1,
									"value": "17"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "JUMPDEST",
									"source": -1
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP9",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP6",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "LT",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "EQ",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "18"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 3,
									"value": "1F"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP5",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP6",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "GT",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "20"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "tag",
									"source": -1,
									"value": "21"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "JUMPDEST",
									"source": -1
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP9",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP6",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP4",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "GT",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "EQ",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "22"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP3",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "24"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 3,
									"value": "25"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP7",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SHL",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SHR",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "NOT",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "AND",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP7",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SHL",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "OR",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP4",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SSTORE",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 3,
									"value": "26"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP4",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP5",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "GT",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "27"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 2069,
									"end": 2086,
									"name": "PUSH",
									"source": 3,
									"value": "4"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP6",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP7",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SLOAD",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP7",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SHR",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP2",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "AND",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ISZERO",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "29"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 3,
									"value": "30"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "LT",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "EQ",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "31"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP4",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "GT",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "33"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 3,
									"value": "34"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP3",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP6",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "GT",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "EQ",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "35"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP4",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP4",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP5",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP2",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP5",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP3",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP6",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "37"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 3,
									"value": "38"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SHL",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP3",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "NOT",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP2",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SHL",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SHR",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "NOT",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "AND",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "OR",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SSTORE",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 3,
									"value": "39"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH #[$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "CODECOPY",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "RETURN",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 3,
									"value": "37"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP4",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "CODESIZE",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "38"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMP",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 3,
									"value": "35"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP3",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP2",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP5",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 3,
									"value": "1F"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "NOT",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "AND",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP9",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP6",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "KECCAK256",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP6",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP10",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP4",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP4",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "LT",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "41"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "LT",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "43"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 3,
									"value": "44"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SHL",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SSTORE",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "39"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMP",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 3,
									"value": "43"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 3,
									"value": "F8"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP5",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "NOT",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP3",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SHL",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "AND",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SHR",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "NOT",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "AND",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SSTORE",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "CODESIZE",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "44"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMP",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 3,
									"value": "41"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP6",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP8",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP10",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SSTORE",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP8",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP7",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP5",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP6",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP5",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP9",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP4",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMP",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 3,
									"value": "33"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP8",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "KECCAK256",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP5",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP9",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 3,
									"value": "5"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SHR",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP3",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP5",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP10",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "LT",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "45"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 3,
									"value": "46"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 3,
									"value": "5"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SHR",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP8",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 3,
									"value": "47"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "LT",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "48"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "34"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMP",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 3,
									"value": "48"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SSTORE",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP8",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "47"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMP",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 3,
									"value": "45"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP3",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP3",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "46"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMP",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 3,
									"value": "31"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 3,
									"value": "22"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP9",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 3,
									"value": "4E487B71"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 3,
									"value": "E0"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SHL",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 3,
									"value": "24"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "REVERT",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 3,
									"value": "29"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 3,
									"value": "7F"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "AND",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "30"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMP",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 3,
									"value": "27"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 3,
									"value": "4E487B71"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 3,
									"value": "E0"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SHL",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 3,
									"value": "41"
								},
								{
									"begin": 2069,
									"end": 2086,
									"name": "PUSH",
									"source": 3,
									"value": "4"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 3,
									"value": "24"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "REVERT",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 3,
									"value": "24"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "CODESIZE",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "25"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMP",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 3,
									"value": "22"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP9",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP4",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 3,
									"value": "1F"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "NOT",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP4",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "AND",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP2",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP8",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP11",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "KECCAK256",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP3",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 3,
									"value": "50"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP13",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "LT",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "51"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP5",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "GT",
									"source": -1
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "53"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 3,
									"value": "54"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SHL",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP4",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SSTORE",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "26"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMP",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 3,
									"value": "53"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP4",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP9",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SHL",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 3,
									"value": "F8"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "AND",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SHR",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "NOT",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "AND",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SSTORE",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "CODESIZE",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "54"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMP",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 3,
									"value": "51"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP4",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP6",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP7",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SSTORE",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP13",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP8",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP6",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP5",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP4",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP5",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP4",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "50"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMP",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 3,
									"value": "20"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP2",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP6",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP9",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "KECCAK256",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP6",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP6",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 3,
									"value": "5"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SHR",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP3",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP12",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP7",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "LT",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "55"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 3,
									"value": "56"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP2",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP11",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP2",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP7",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP6",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP5",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP4",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 3,
									"value": "5"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SHR",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP2",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 3,
									"value": "57"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "LT",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "58"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "21"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMP",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 3,
									"value": "58"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SSTORE",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP6",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP5",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP11",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP2",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "57"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMP",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 3,
									"value": "55"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP3",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP3",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "56"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMP",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 3,
									"value": "18"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 3,
									"value": "4E487B71"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 3,
									"value": "E0"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SHL",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 3,
									"value": "22"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 3,
									"value": "4"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 3,
									"value": "24"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "REVERT",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 3,
									"value": "16"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP4",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 3,
									"value": "7F"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "AND",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP4",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "17"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMP",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 3,
									"value": "11"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "REVERT",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP2",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 3,
									"value": "1F"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "AND",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "GT",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP4",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "LT",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "OR",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "27"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 3,
									"value": "2"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP2",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 3,
									"value": "1F"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP5",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SLT",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ISZERO",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "11"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "GT",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "27"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 3,
									"value": "20"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "66"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH",
									"source": 3,
									"value": "1F"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "AND",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP4",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 1532,
									"end": 12844,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 3,
									"value": "66"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP3",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP5",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP8",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "GT",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "11"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 3,
									"value": "69"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "LT",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "70"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP4",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP5",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP6",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "tag",
									"source": 3,
									"value": "70"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP6",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP4",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP5",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP5",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "69"
								},
								{
									"begin": 1532,
									"end": 12844,
									"name": "JUMP",
									"source": 3
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212203fc65d7e0460c6e5cc0eaf0cd82ade8705eccb8c10c25e9aebb98c74fa20c38a64736f6c63430008120033",
									".code": [
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "6"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 3,
											"value": "6"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "E0"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SHR",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "6FDDE03"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "8"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "95EA7B3"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "10"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "18160DDD"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "12"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "23B872DD"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "14"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "313CE567"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "16"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "39509351"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "18"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "70A08231"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "95D89B41"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "22"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "A457C2D7"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "A9059CBB"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "26"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "DD62ED3E"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "28"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 3,
											"value": "28"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "32"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "NOT",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SLT",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "32"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "34"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 1532,
											"end": 12844,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 3,
											"value": "34"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "35"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 1532,
											"end": 12844,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 3,
											"value": "35"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "RETURN",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 3,
											"value": "32"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 3,
											"value": "26"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "32"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "NOT",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SLT",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "32"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3894,
											"end": 3900,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "41"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 1532,
											"end": 12844,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 3,
											"value": "41"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": 734,
											"end": 744,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 734,
											"end": 744,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 3894,
											"end": 3900,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 3894,
											"end": 3900,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3894,
											"end": 3900,
											"name": "tag",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3894,
											"end": 3900,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "RETURN",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "44"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "NOT",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SLT",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "44"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "46"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 1532,
											"end": 12844,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 3,
											"value": "46"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": 734,
											"end": 744,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 734,
											"end": 744,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "A0"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SHL",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 6792,
											"end": 6827,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6792,
											"end": 6827,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 6792,
											"end": 6827,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 6792,
											"end": 6827,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "47"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 6928,
											"end": 6962,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 734,
											"end": 744,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 6928,
											"end": 6962,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "5"
										},
										{
											"begin": 6928,
											"end": 6962,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 3,
											"value": "47"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "84"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "461BCD"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "E5"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SHL",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "25"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "44"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "207A65726F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "64"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 3,
											"value": "44"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 3,
											"value": "22"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "32"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "NOT",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SLT",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "32"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SHR",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "54"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 3,
											"value": "55"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "56"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP9",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "58"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 3,
											"value": "61"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "OR",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "62"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "64"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 1532,
											"end": 12844,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 3,
											"value": "64"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "RETURN",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 3,
											"value": "62"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "41"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19B"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 3,
											"value": "65"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "66"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "61"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 3,
											"value": "66"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP9",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "65"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 3,
											"value": "58"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "5"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SHL",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "61"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 3,
											"value": "56"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP10",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "22"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP11",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP10",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 3,
											"value": "54"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "7F"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "55"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "32"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SLT",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "32"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "72"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 1532,
											"end": 12844,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 3,
											"value": "72"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "RETURN",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 3,
											"value": "18"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "44"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "NOT",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SLT",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "44"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "77"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 1532,
											"end": 12844,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 3,
											"value": "77"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 734,
											"end": 744,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "LT",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "78"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 734,
											"end": 744,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 6021,
											"end": 6059,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 734,
											"end": 744,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 734,
											"end": 744,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 734,
											"end": 744,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 6021,
											"end": 6059,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "5"
										},
										{
											"begin": 6021,
											"end": 6059,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 3,
											"value": "78"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "11"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 3,
											"value": "16"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "32"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "NOT",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SLT",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "32"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3186,
											"end": 3188,
											"name": "PUSH",
											"source": 3,
											"value": "12"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "RETURN",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 3,
											"value": "14"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "32"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SLT",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "32"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "89"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 1532,
											"end": 12844,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 3,
											"value": "89"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "90"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 1532,
											"end": 12844,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 3,
											"value": "90"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "44"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP5",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "A0"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SHL",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 734,
											"end": 744,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 11264,
											"end": 11281,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 11264,
											"end": 11281,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 11264,
											"end": 11281,
											"name": "NOT",
											"source": 3
										},
										{
											"begin": 11244,
											"end": 11281,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 11244,
											"end": 11281,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 11240,
											"end": 11483,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "91"
										},
										{
											"begin": 11240,
											"end": 11483,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 3,
											"value": "92"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 5424,
											"end": 5430,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 5424,
											"end": 5430,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5424,
											"end": 5430,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 5424,
											"end": 5430,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 5424,
											"end": 5430,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 5424,
											"end": 5430,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 5424,
											"end": 5430,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 11240,
											"end": 11483,
											"name": "tag",
											"source": 3,
											"value": "91"
										},
										{
											"begin": 11240,
											"end": 11483,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 11305,
											"end": 11331,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 11305,
											"end": 11331,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 11305,
											"end": 11331,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "94"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 11432,
											"end": 11457,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "96"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP7",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP6",
											"source": 3
										},
										{
											"begin": 5424,
											"end": 5430,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP6",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 734,
											"end": 744,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 11432,
											"end": 11457,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 11432,
											"end": 11457,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "5"
										},
										{
											"begin": 11432,
											"end": 11457,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 11432,
											"end": 11457,
											"name": "tag",
											"source": 3,
											"value": "96"
										},
										{
											"begin": 11432,
											"end": 11457,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 11240,
											"end": 11483,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 11240,
											"end": 11483,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 11240,
											"end": 11483,
											"name": "SWAP5",
											"source": 3
										},
										{
											"begin": 11240,
											"end": 11483,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 11240,
											"end": 11483,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 11240,
											"end": 11483,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 11240,
											"end": 11483,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "92"
										},
										{
											"begin": 11240,
											"end": 11483,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 3,
											"value": "94"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "64"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "461BCD"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "E5"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SHL",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "1D"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "44"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 3,
											"value": "12"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "32"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "NOT",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SLT",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "32"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3342,
											"end": 3354,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "RETURN",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 3,
											"value": "10"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "32"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "NOT",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SLT",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "32"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4606,
											"end": 4612,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "106"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 1532,
											"end": 12844,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 3,
											"value": "106"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": 734,
											"end": 744,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 734,
											"end": 744,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 4606,
											"end": 4612,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "5"
										},
										{
											"begin": 4606,
											"end": 4612,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 3,
											"value": "8"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "109"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "NOT",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SLT",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "109"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SHR",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "111"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 3,
											"value": "112"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "56"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP9",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "58"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "117"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "OR",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "62"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "64"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 1532,
											"end": 12844,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 3,
											"value": "117"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "C2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 3,
											"value": "122"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "123"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "61"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 3,
											"value": "123"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP9",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "122"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 3,
											"value": "111"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "7F"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "112"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 3,
											"value": "109"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 3,
											"value": "125"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "126"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "NOT",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 3,
											"value": "126"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "125"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "128"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 3,
											"value": "128"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "128"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 7456,
											"end": 8244,
											"name": "tag",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 7456,
											"end": 8244,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 7552,
											"end": 7570,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 7552,
											"end": 7570,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "132"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 7630,
											"end": 7646,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 7630,
											"end": 7646,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 7630,
											"end": 7646,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "134"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 7568,
											"end": 7569,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 7801,
											"end": 7822,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 7801,
											"end": 7822,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 7801,
											"end": 7822,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 7801,
											"end": 7822,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "136"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 8163,
											"end": 8189,
											"name": "PUSH",
											"source": 3,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP6",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP7",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 8163,
											"end": 8189,
											"name": "LOG3",
											"source": 3
										},
										{
											"begin": 7456,
											"end": 8244,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 3,
											"value": "136"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "26"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "45524332303A207472616E7366657220616D6F756E7420657863656564732062"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "44"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "616C616E6365"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "64"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "84"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 3,
											"value": "134"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "23"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "45524332303A207472616E7366657220746F20746865207A65726F2061646472"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "44"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "64"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "84"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 3,
											"value": "132"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "25"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "45524332303A207472616E736665722066726F6D20746865207A65726F206164"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "44"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "64"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "84"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 10457,
											"end": 10797,
											"name": "tag",
											"source": 3,
											"value": "5"
										},
										{
											"begin": 10457,
											"end": 10797,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 10558,
											"end": 10577,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 10558,
											"end": 10577,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "138"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 10636,
											"end": 10657,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 10636,
											"end": 10657,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 10636,
											"end": 10657,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "140"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 10758,
											"end": 10790,
											"name": "PUSH",
											"source": 3,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 10575,
											"end": 10576,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 10575,
											"end": 10576,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 10575,
											"end": 10576,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 10575,
											"end": 10576,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 10758,
											"end": 10790,
											"name": "LOG3",
											"source": 3
										},
										{
											"begin": 10457,
											"end": 10797,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 3,
											"value": "140"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "22"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "45524332303A20617070726F766520746F20746865207A65726F206164647265"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "44"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "64"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "84"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "tag",
											"source": 3,
											"value": "138"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "45524332303A20617070726F76652066726F6D20746865207A65726F20616464"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "44"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "72657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "64"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "PUSH",
											"source": 3,
											"value": "84"
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1532,
											"end": 12844,
											"name": "REVERT",
											"source": 3
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC5267.sol",
								"@openzeppelin/contracts/security/ReentrancyGuard.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Counters.sol",
								"@openzeppelin/contracts/utils/ShortStrings.sol",
								"@openzeppelin/contracts/utils/StorageSlot.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/cryptography/EIP712.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/TurtleToken.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"increaseAllowance(address,uint256)": "39509351",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}. All two of these values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cac938788bc4be12101e59d45588b4e059579f4e61062e1cda8d6b06c0191b15\",\"dweb:/ipfs/QmV2JKCyjTVH3rkWNrfdJRhAT7tZ3usAN2XcnD4h53Mvih\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd\",\"dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a367861093b74443b137564d3f3c472f70bcf114739e62059c939f25e315706c\",\"dweb:/ipfs/Qmd7JMpcxD9RuQjK3uM3EzJUgSqdN8vzp8eytEiuwxQJ6h\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 218,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 224,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 226,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 228,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 230,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol": {
				"ERC20Permit": {
					"abi": [
						{
							"inputs": [],
							"name": "InvalidShortString",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "str",
									"type": "string"
								}
							],
							"name": "StringTooLong",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [],
							"name": "EIP712DomainChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "eip712Domain",
							"outputs": [
								{
									"internalType": "bytes1",
									"name": "fields",
									"type": "bytes1"
								},
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "version",
									"type": "string"
								},
								{
									"internalType": "uint256",
									"name": "chainId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "verifyingContract",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "salt",
									"type": "bytes32"
								},
								{
									"internalType": "uint256[]",
									"name": "extensions",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. _Available since v3.4._",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"EIP712DomainChanged()": {
								"details": "MAY be emitted to signal that the domain could have changed."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"constructor": {
								"details": "Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`. It's a good idea to use the same `name` that is defined as the ERC20 token name."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"eip712Domain()": {
								"details": "See {EIP-5267}. _Available since v4.9._"
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
							}
						},
						"stateVariables": {
							"_PERMIT_TYPEHASH_DEPRECATED_SLOT": {
								"custom:oz-renamed-from": "_PERMIT_TYPEHASH",
								"details": "In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`. However, to ensure consistency with the upgradeable transpiler, we will continue to reserve a slot."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"eip712Domain()": "84b0196e",
							"increaseAllowance(address,uint256)": "39509351",
							"name()": "06fdde03",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. _Available since v3.4._\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`. It's a good idea to use the same `name` that is defined as the ERC20 token name.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"eip712Domain()\":{\"details\":\"See {EIP-5267}. _Available since v4.9._\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"stateVariables\":{\"_PERMIT_TYPEHASH_DEPRECATED_SLOT\":{\"custom:oz-renamed-from\":\"_PERMIT_TYPEHASH\",\"details\":\"In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`. However, to ensure consistency with the upgradeable transpiler, we will continue to reserve a slot.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":\"ERC20Permit\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"keccak256\":\"0xac6c2efc64baccbde4904ae18ed45139c9aa8cff96d6888344d1e4d2eb8b659f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e416a280c610b6b7a5f158e4a41aacfaec01ef14d5d1de13b46be9e090265fc\",\"dweb:/ipfs/QmYZP2KrdyccBbhLZT42auhvBTMkwiwUS3V6HWb42rbwbG\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cac938788bc4be12101e59d45588b4e059579f4e61062e1cda8d6b06c0191b15\",\"dweb:/ipfs/QmV2JKCyjTVH3rkWNrfdJRhAT7tZ3usAN2XcnD4h53Mvih\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":{\"keccak256\":\"0xbb16110ffe0b625944fe7dd97adcf1158e514185c956a5628bc09be90d606174\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b5b412e554a4dd37a50f89ffcd7b9a6ef2ae5064f37619f89343b23d58ce89ca\",\"dweb:/ipfs/QmPWMdBvdFk8WBVv625wd1Ar7aehnBWtj1XfFRrRL5KpxJ\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd\",\"dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://28879d01fd22c07b44f006612775f8577defbe459cb01685c5e25cd518c91a71\",\"dweb:/ipfs/QmVgfkwv2Fxw6hhTcDUZhE7NkoSKjab3ipM7UaRbt6uXb5\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a367861093b74443b137564d3f3c472f70bcf114739e62059c939f25e315706c\",\"dweb:/ipfs/Qmd7JMpcxD9RuQjK3uM3EzJUgSqdN8vzp8eytEiuwxQJ6h\"]},\"@openzeppelin/contracts/utils/Counters.sol\":{\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://59e1c62884d55b70f3ae5432b44bb3166ad71ae3acd19c57ab6ddc3c87c325ee\",\"dweb:/ipfs/QmezuXg5GK5oeA4F91EZhozBFekhq5TD966bHPH18cCqhu\"]},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"keccak256\":\"0xc0e310c163edf15db45d4ff938113ab357f94fa86e61ea8e790853c4d2e13256\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://04db5bc05dcb05ba1f6ca2dfbead17adc8a2e2f911aa80b05e7a36d9eaf96516\",\"dweb:/ipfs/QmVkfHZbXVBUPsTopueCn3qGJX8aEjahFF3Fn4NcygLNm5\"]},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e26daf81e2252dc1fe1ce0e4b55c2eb7c6d1ee84ae6558d1a9554432ea1d32da\",\"dweb:/ipfs/Qmb1UANWiWq5pCKbmHSu772hd4nt374dVaghGmwSVNuk8Q\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b81d9ff6559ea5c47fc573e17ece6d9ba5d6839e213e6ebc3b4c5c8fe4199d7f\",\"dweb:/ipfs/QmPCW1bFisUzJkyjroY3yipwfism9RRCigCcK1hbXtVM8n\"]},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8b93a1e39a4a19eba1600b92c96f435442db88cac91e315c8291547a2a7bcfe2\",\"dweb:/ipfs/QmTm34KVe6uZBZwq8dZDNWwPcm24qBJdxqL3rPxBJ4LrMv\"]},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"keccak256\":\"0x8432884527a7ad91e6eed1cfc5a0811ae2073e5bca107bd0ca442e9236b03dbd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e3aa0eadab7aafcf91a95684765f778f64386f0368de88522ce873c21385278a\",\"dweb:/ipfs/QmPfaVAqWgH1QsT3dHVuL6jwMZbVKdoP8w1PvpiPT2FPWd\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cc8841b3cd48ad125e2f46323c8bad3aa0e88e399ec62acb9e57efa7e7c8058c\",\"dweb:/ipfs/QmSqE4mXHA2BXW58deDbXE8MTcsL5JSKNDbm23sVQxRLPS\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c50fcc459e49a9858b6d8ad5f911295cb7c9ab57567845a250bf0153f84a95c7\",\"dweb:/ipfs/QmcEW85JRzvDkQggxiBBLVAasXWdkhEysqypj9EaB6H2g6\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 218,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 224,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 226,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 228,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 230,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							},
							{
								"astId": 2158,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_nameFallback",
								"offset": 0,
								"slot": "5",
								"type": "t_string_storage"
							},
							{
								"astId": 2160,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_versionFallback",
								"offset": 0,
								"slot": "6",
								"type": "t_string_storage"
							},
							{
								"astId": 890,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_nonces",
								"offset": 0,
								"slot": "7",
								"type": "t_mapping(t_address,t_struct(Counter)1136_storage)"
							},
							{
								"astId": 898,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
								"offset": 0,
								"slot": "8",
								"type": "t_bytes32"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bytes32": {
								"encoding": "inplace",
								"label": "bytes32",
								"numberOfBytes": "32"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_struct(Counter)1136_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct Counters.Counter)",
								"numberOfBytes": "32",
								"value": "t_struct(Counter)1136_storage"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_struct(Counter)1136_storage": {
								"encoding": "inplace",
								"label": "struct Counters.Counter",
								"members": [
									{
										"astId": 1135,
										"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
										"label": "_value",
										"offset": 0,
										"slot": "0",
										"type": "t_uint256"
									}
								],
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"IERC20Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"decimals()": {
								"details": "Returns the decimals places of the token."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd\",\"dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
				"IERC20Permit": {
					"abi": [
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.",
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://28879d01fd22c07b44f006612775f8577defbe459cb01685c5e25cd518c91a71\",\"dweb:/ipfs/QmVgfkwv2Fxw6hhTcDUZhE7NkoSKjab3ipM7UaRbt6uXb5\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a367861093b74443b137564d3f3c472f70bcf114739e62059c939f25e315706c\",\"dweb:/ipfs/Qmd7JMpcxD9RuQjK3uM3EzJUgSqdN8vzp8eytEiuwxQJ6h\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Counters.sol": {
				"Counters": {
					"abi": [],
					"devdoc": {
						"author": "Matt Condon (@shrugs)",
						"details": "Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`",
						"kind": "dev",
						"methods": {},
						"title": "Counters",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/Counters.sol\":424:1395  library Counters {... */\n  0x80\n  dup1\n  0x40\n  mstore\n  jumpi(tag_1, callvalue)\n  dataSize(sub_0)\n  swap1\n  dup2\n  dataOffset(sub_0)\n  dup3\n  codecopy\n  address\n  dup2\n  assignImmutable(\"0xcd5a02d485074f67d63783a7acdae578618045c23ccf47fa4e3f1a01c11714ad\")\n  return\ntag_1:\n  0x00\n  dup1\n  revert\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Counters.sol\":424:1395  library Counters {... */\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212201ab5e9bac94912824cc03ae7702411d9f1763cc09f043182d066a3951912758964736f6c63430008120033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea26469706673582212201ab5e9bac94912824cc03ae7702411d9f1763cc09f043182d066a3951912758964736f6c63430008120033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BYTE 0xB5 0xE9 0xBA 0xC9 0x49 SLT DUP3 0x4C 0xC0 GASPRICE 0xE7 PUSH17 0x2411D9F1763CC09F043182D066A3951912 PUSH22 0x8964736F6C6343000812003300000000000000000000 ",
							"sourceMap": "424:971:9:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "600080fdfea26469706673582212201ab5e9bac94912824cc03ae7702411d9f1763cc09f043182d066a3951912758964736f6c63430008120033",
							"opcodes": "PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BYTE 0xB5 0xE9 0xBA 0xC9 0x49 SLT DUP3 0x4C 0xC0 GASPRICE 0xE7 PUSH17 0x2411D9F1763CC09F043182D066A3951912 PUSH22 0x8964736F6C6343000812003300000000000000000000 ",
							"sourceMap": "424:971:9:-:0;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "11600",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"internal": {
								"current(struct Counters.Counter storage pointer)": "infinite",
								"decrement(struct Counters.Counter storage pointer)": "infinite",
								"increment(struct Counters.Counter storage pointer)": "infinite",
								"reset(struct Counters.Counter storage pointer)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH",
									"source": 9,
									"value": "80"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "CALLVALUE",
									"source": 9
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH #[$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH [$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "CODECOPY",
									"source": 9
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "ADDRESS",
									"source": 9
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "ASSIGNIMMUTABLE",
									"source": 9,
									"value": "library_deploy_address"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "RETURN",
									"source": 9
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "tag",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "REVERT",
									"source": 9
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212201ab5e9bac94912824cc03ae7702411d9f1763cc09f043182d066a3951912758964736f6c63430008120033",
									".code": [
										{
											"begin": 424,
											"end": 1395,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 424,
											"end": 1395,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 424,
											"end": 1395,
											"name": "REVERT",
											"source": 9
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC5267.sol",
								"@openzeppelin/contracts/security/ReentrancyGuard.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Counters.sol",
								"@openzeppelin/contracts/utils/ShortStrings.sol",
								"@openzeppelin/contracts/utils/StorageSlot.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/cryptography/EIP712.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/TurtleToken.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Matt Condon (@shrugs)\",\"details\":\"Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Counters\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Counters.sol\":\"Counters\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Counters.sol\":{\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://59e1c62884d55b70f3ae5432b44bb3166ad71ae3acd19c57ab6ddc3c87c325ee\",\"dweb:/ipfs/QmezuXg5GK5oeA4F91EZhozBFekhq5TD966bHPH18cCqhu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/ShortStrings.sol": {
				"ShortStrings": {
					"abi": [
						{
							"inputs": [],
							"name": "InvalidShortString",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "str",
									"type": "string"
								}
							],
							"name": "StringTooLong",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "This library provides functions to convert short memory strings into a `ShortString` type that can be used as an immutable variable. Strings of arbitrary length can be optimized using this library if they are short enough (up to 31 bytes) by packing them with their length (1 byte) in a single EVM word (32 bytes). Additionally, a fallback mechanism can be used for every other case. Usage example: ```solidity contract Named {     using ShortStrings for *;     ShortString private immutable _name;     string private _nameFallback;     constructor(string memory contractName) {         _name = contractName.toShortStringWithFallback(_nameFallback);     }     function name() external view returns (string memory) {         return _name.toStringWithFallback(_nameFallback);     } } ```",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1235:4285  library ShortStrings {... */\n  0x80\n  dup1\n  0x40\n  mstore\n  jumpi(tag_1, callvalue)\n  dataSize(sub_0)\n  swap1\n  dup2\n  dataOffset(sub_0)\n  dup3\n  codecopy\n  address\n  dup2\n  assignImmutable(\"0xcd5a02d485074f67d63783a7acdae578618045c23ccf47fa4e3f1a01c11714ad\")\n  return\ntag_1:\n  0x00\n  dup1\n  revert\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1235:4285  library ShortStrings {... */\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212205ca854525a4cb06efa213271de43cf4042dc8d4d3983b6ea7f65aa182ffdf72e64736f6c63430008120033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea26469706673582212205ca854525a4cb06efa213271de43cf4042dc8d4d3983b6ea7f65aa182ffdf72e64736f6c63430008120033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5C 0xA8 SLOAD MSTORE GAS 0x4C 0xB0 PUSH15 0xFA213271DE43CF4042DC8D4D3983B6 0xEA PUSH32 0x65AA182FFDF72E64736F6C634300081200330000000000000000000000000000 ",
							"sourceMap": "1235:3050:10:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "600080fdfea26469706673582212205ca854525a4cb06efa213271de43cf4042dc8d4d3983b6ea7f65aa182ffdf72e64736f6c63430008120033",
							"opcodes": "PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5C 0xA8 SLOAD MSTORE GAS 0x4C 0xB0 PUSH15 0xFA213271DE43CF4042DC8D4D3983B6 0xEA PUSH32 0x65AA182FFDF72E64736F6C634300081200330000000000000000000000000000 ",
							"sourceMap": "1235:3050:10:-:0;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "11600",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"internal": {
								"byteLength(ShortString)": "infinite",
								"byteLengthWithFallback(ShortString,string storage pointer)": "infinite",
								"toShortString(string memory)": "infinite",
								"toShortStringWithFallback(string memory,string storage pointer)": "infinite",
								"toString(ShortString)": "infinite",
								"toStringWithFallback(ShortString,string storage pointer)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1235,
									"end": 4285,
									"name": "PUSH",
									"source": 10,
									"value": "80"
								},
								{
									"begin": 1235,
									"end": 4285,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1235,
									"end": 4285,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 1235,
									"end": 4285,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 1235,
									"end": 4285,
									"name": "CALLVALUE",
									"source": 10
								},
								{
									"begin": 1235,
									"end": 4285,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 1235,
									"end": 4285,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 1235,
									"end": 4285,
									"name": "PUSH #[$]",
									"source": 10,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1235,
									"end": 4285,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 1235,
									"end": 4285,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 1235,
									"end": 4285,
									"name": "PUSH [$]",
									"source": 10,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1235,
									"end": 4285,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1235,
									"end": 4285,
									"name": "CODECOPY",
									"source": 10
								},
								{
									"begin": 1235,
									"end": 4285,
									"name": "ADDRESS",
									"source": 10
								},
								{
									"begin": 1235,
									"end": 4285,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 1235,
									"end": 4285,
									"name": "ASSIGNIMMUTABLE",
									"source": 10,
									"value": "library_deploy_address"
								},
								{
									"begin": 1235,
									"end": 4285,
									"name": "RETURN",
									"source": 10
								},
								{
									"begin": 1235,
									"end": 4285,
									"name": "tag",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 1235,
									"end": 4285,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1235,
									"end": 4285,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1235,
									"end": 4285,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1235,
									"end": 4285,
									"name": "REVERT",
									"source": 10
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212205ca854525a4cb06efa213271de43cf4042dc8d4d3983b6ea7f65aa182ffdf72e64736f6c63430008120033",
									".code": [
										{
											"begin": 1235,
											"end": 4285,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1235,
											"end": 4285,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1235,
											"end": 4285,
											"name": "REVERT",
											"source": 10
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC5267.sol",
								"@openzeppelin/contracts/security/ReentrancyGuard.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Counters.sol",
								"@openzeppelin/contracts/utils/ShortStrings.sol",
								"@openzeppelin/contracts/utils/StorageSlot.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/cryptography/EIP712.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/TurtleToken.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"This library provides functions to convert short memory strings into a `ShortString` type that can be used as an immutable variable. Strings of arbitrary length can be optimized using this library if they are short enough (up to 31 bytes) by packing them with their length (1 byte) in a single EVM word (32 bytes). Additionally, a fallback mechanism can be used for every other case. Usage example: ```solidity contract Named {     using ShortStrings for *;     ShortString private immutable _name;     string private _nameFallback;     constructor(string memory contractName) {         _name = contractName.toShortStringWithFallback(_nameFallback);     }     function name() external view returns (string memory) {         return _name.toStringWithFallback(_nameFallback);     } } ```\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/ShortStrings.sol\":\"ShortStrings\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"keccak256\":\"0xc0e310c163edf15db45d4ff938113ab357f94fa86e61ea8e790853c4d2e13256\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://04db5bc05dcb05ba1f6ca2dfbead17adc8a2e2f911aa80b05e7a36d9eaf96516\",\"dweb:/ipfs/QmVkfHZbXVBUPsTopueCn3qGJX8aEjahFF3Fn4NcygLNm5\"]},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e26daf81e2252dc1fe1ce0e4b55c2eb7c6d1ee84ae6558d1a9554432ea1d32da\",\"dweb:/ipfs/Qmb1UANWiWq5pCKbmHSu772hd4nt374dVaghGmwSVNuk8Q\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/StorageSlot.sol": {
				"StorageSlot": {
					"abi": [],
					"devdoc": {
						"details": "Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._ _Available since v4.9 for `string`, `bytes`._",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/StorageSlot.sol\":1420:4105  library StorageSlot {... */\n  0x80\n  dup1\n  0x40\n  mstore\n  jumpi(tag_1, callvalue)\n  dataSize(sub_0)\n  swap1\n  dup2\n  dataOffset(sub_0)\n  dup3\n  codecopy\n  address\n  dup2\n  assignImmutable(\"0xcd5a02d485074f67d63783a7acdae578618045c23ccf47fa4e3f1a01c11714ad\")\n  return\ntag_1:\n  0x00\n  dup1\n  revert\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/StorageSlot.sol\":1420:4105  library StorageSlot {... */\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220cdf9192ad2c4694662a6dc4e3ac1d024e605739ce4a06302bad15ace091c894b64736f6c63430008120033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220cdf9192ad2c4694662a6dc4e3ac1d024e605739ce4a06302bad15ace091c894b64736f6c63430008120033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCD 0xF9 NOT 0x2A 0xD2 0xC4 PUSH10 0x4662A6DC4E3AC1D024E6 SDIV PUSH20 0x9CE4A06302BAD15ACE091C894B64736F6C634300 ADDMOD SLT STOP CALLER ",
							"sourceMap": "1420:2685:11:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "600080fdfea2646970667358221220cdf9192ad2c4694662a6dc4e3ac1d024e605739ce4a06302bad15ace091c894b64736f6c63430008120033",
							"opcodes": "PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCD 0xF9 NOT 0x2A 0xD2 0xC4 PUSH10 0x4662A6DC4E3AC1D024E6 SDIV PUSH20 0x9CE4A06302BAD15ACE091C894B64736F6C634300 ADDMOD SLT STOP CALLER ",
							"sourceMap": "1420:2685:11:-:0;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "11600",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"internal": {
								"getAddressSlot(bytes32)": "infinite",
								"getBooleanSlot(bytes32)": "infinite",
								"getBytes32Slot(bytes32)": "infinite",
								"getBytesSlot(bytes storage pointer)": "infinite",
								"getBytesSlot(bytes32)": "infinite",
								"getStringSlot(bytes32)": "infinite",
								"getStringSlot(string storage pointer)": "infinite",
								"getUint256Slot(bytes32)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1420,
									"end": 4105,
									"name": "PUSH",
									"source": 11,
									"value": "80"
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "PUSH",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "CALLVALUE",
									"source": 11
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "PUSH #[$]",
									"source": 11,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "PUSH [$]",
									"source": 11,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "CODECOPY",
									"source": 11
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "ADDRESS",
									"source": 11
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "ASSIGNIMMUTABLE",
									"source": 11,
									"value": "library_deploy_address"
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "RETURN",
									"source": 11
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "tag",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 1420,
									"end": 4105,
									"name": "REVERT",
									"source": 11
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220cdf9192ad2c4694662a6dc4e3ac1d024e605739ce4a06302bad15ace091c894b64736f6c63430008120033",
									".code": [
										{
											"begin": 1420,
											"end": 4105,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1420,
											"end": 4105,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1420,
											"end": 4105,
											"name": "REVERT",
											"source": 11
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC5267.sol",
								"@openzeppelin/contracts/security/ReentrancyGuard.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Counters.sol",
								"@openzeppelin/contracts/utils/ShortStrings.sol",
								"@openzeppelin/contracts/utils/StorageSlot.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/cryptography/EIP712.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/TurtleToken.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._ _Available since v4.9 for `string`, `bytes`._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":\"StorageSlot\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e26daf81e2252dc1fe1ce0e4b55c2eb7c6d1ee84ae6558d1a9554432ea1d32da\",\"dweb:/ipfs/Qmb1UANWiWq5pCKbmHSu772hd4nt374dVaghGmwSVNuk8Q\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"Strings": {
					"abi": [],
					"devdoc": {
						"details": "String operations.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/Strings.sol\":220:2779  library Strings {... */\n  0x80\n  dup1\n  0x40\n  mstore\n  jumpi(tag_1, callvalue)\n  dataSize(sub_0)\n  swap1\n  dup2\n  dataOffset(sub_0)\n  dup3\n  codecopy\n  address\n  dup2\n  assignImmutable(\"0xcd5a02d485074f67d63783a7acdae578618045c23ccf47fa4e3f1a01c11714ad\")\n  return\ntag_1:\n  0x00\n  dup1\n  revert\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":220:2779  library Strings {... */\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220e5622d6027cf0f1273bbfe504a1890a9116ccbfc2e71312f1ba921e425e0788564736f6c63430008120033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220e5622d6027cf0f1273bbfe504a1890a9116ccbfc2e71312f1ba921e425e0788564736f6c63430008120033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE5 PUSH3 0x2D6027 0xCF 0xF SLT PUSH20 0xBBFE504A1890A9116CCBFC2E71312F1BA921E425 0xE0 PUSH25 0x8564736F6C6343000812003300000000000000000000000000 ",
							"sourceMap": "220:2559:12:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "600080fdfea2646970667358221220e5622d6027cf0f1273bbfe504a1890a9116ccbfc2e71312f1ba921e425e0788564736f6c63430008120033",
							"opcodes": "PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE5 PUSH3 0x2D6027 0xCF 0xF SLT PUSH20 0xBBFE504A1890A9116CCBFC2E71312F1BA921E425 0xE0 PUSH25 0x8564736F6C6343000812003300000000000000000000000000 ",
							"sourceMap": "220:2559:12:-:0;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "11600",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"internal": {
								"equal(string memory,string memory)": "infinite",
								"toHexString(address)": "infinite",
								"toHexString(uint256)": "infinite",
								"toHexString(uint256,uint256)": "infinite",
								"toString(int256)": "infinite",
								"toString(uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 220,
									"end": 2779,
									"name": "PUSH",
									"source": 12,
									"value": "80"
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "PUSH",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "CALLVALUE",
									"source": 12
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "PUSH #[$]",
									"source": 12,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "PUSH [$]",
									"source": 12,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "CODECOPY",
									"source": 12
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "ADDRESS",
									"source": 12
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "ASSIGNIMMUTABLE",
									"source": 12,
									"value": "library_deploy_address"
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "RETURN",
									"source": 12
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "tag",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "REVERT",
									"source": 12
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220e5622d6027cf0f1273bbfe504a1890a9116ccbfc2e71312f1ba921e425e0788564736f6c63430008120033",
									".code": [
										{
											"begin": 220,
											"end": 2779,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 220,
											"end": 2779,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 220,
											"end": 2779,
											"name": "REVERT",
											"source": 12
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC5267.sol",
								"@openzeppelin/contracts/security/ReentrancyGuard.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Counters.sol",
								"@openzeppelin/contracts/utils/ShortStrings.sol",
								"@openzeppelin/contracts/utils/StorageSlot.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/cryptography/EIP712.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/TurtleToken.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b81d9ff6559ea5c47fc573e17ece6d9ba5d6839e213e6ebc3b4c5c8fe4199d7f\",\"dweb:/ipfs/QmPCW1bFisUzJkyjroY3yipwfism9RRCigCcK1hbXtVM8n\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cc8841b3cd48ad125e2f46323c8bad3aa0e88e399ec62acb9e57efa7e7c8058c\",\"dweb:/ipfs/QmSqE4mXHA2BXW58deDbXE8MTcsL5JSKNDbm23sVQxRLPS\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c50fcc459e49a9858b6d8ad5f911295cb7c9ab57567845a250bf0153f84a95c7\",\"dweb:/ipfs/QmcEW85JRzvDkQggxiBBLVAasXWdkhEysqypj9EaB6H2g6\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
				"ECDSA": {
					"abi": [],
					"devdoc": {
						"details": "Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":369:9130  library ECDSA {... */\n  0x80\n  dup1\n  0x40\n  mstore\n  jumpi(tag_1, callvalue)\n  dataSize(sub_0)\n  swap1\n  dup2\n  dataOffset(sub_0)\n  dup3\n  codecopy\n  address\n  dup2\n  assignImmutable(\"0xcd5a02d485074f67d63783a7acdae578618045c23ccf47fa4e3f1a01c11714ad\")\n  return\ntag_1:\n  0x00\n  dup1\n  revert\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":369:9130  library ECDSA {... */\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122058c3caf29de2cead89f559f501fa4f84f162f43627feb0e8efb7daeb1830c3b864736f6c63430008120033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea264697066735822122058c3caf29de2cead89f559f501fa4f84f162f43627feb0e8efb7daeb1830c3b864736f6c63430008120033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PC 0xC3 0xCA CALLCODE SWAP14 0xE2 0xCE 0xAD DUP10 CREATE2 MSIZE CREATE2 ADD STATICCALL 0x4F DUP5 CALL PUSH3 0xF43627 INVALID 0xB0 0xE8 0xEF 0xB7 0xDA 0xEB XOR ADDRESS 0xC3 0xB8 PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ",
							"sourceMap": "369:8761:13:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "600080fdfea264697066735822122058c3caf29de2cead89f559f501fa4f84f162f43627feb0e8efb7daeb1830c3b864736f6c63430008120033",
							"opcodes": "PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PC 0xC3 0xCA CALLCODE SWAP14 0xE2 0xCE 0xAD DUP10 CREATE2 MSIZE CREATE2 ADD STATICCALL 0x4F DUP5 CALL PUSH3 0xF43627 INVALID 0xB0 0xE8 0xEF 0xB7 0xDA 0xEB XOR ADDRESS 0xC3 0xB8 PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ",
							"sourceMap": "369:8761:13:-:0;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "11600",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"internal": {
								"_throwError(enum ECDSA.RecoverError)": "infinite",
								"recover(bytes32,bytes memory)": "infinite",
								"recover(bytes32,bytes32,bytes32)": "infinite",
								"recover(bytes32,uint8,bytes32,bytes32)": "infinite",
								"toDataWithIntendedValidatorHash(address,bytes memory)": "infinite",
								"toEthSignedMessageHash(bytes memory)": "infinite",
								"toEthSignedMessageHash(bytes32)": "infinite",
								"toTypedDataHash(bytes32,bytes32)": "infinite",
								"tryRecover(bytes32,bytes memory)": "infinite",
								"tryRecover(bytes32,bytes32,bytes32)": "infinite",
								"tryRecover(bytes32,uint8,bytes32,bytes32)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 369,
									"end": 9130,
									"name": "PUSH",
									"source": 13,
									"value": "80"
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "PUSH",
									"source": 13,
									"value": "40"
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "CALLVALUE",
									"source": 13
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "1"
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "PUSH #[$]",
									"source": 13,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "PUSH [$]",
									"source": 13,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "CODECOPY",
									"source": 13
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "ADDRESS",
									"source": 13
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "ASSIGNIMMUTABLE",
									"source": 13,
									"value": "library_deploy_address"
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "RETURN",
									"source": 13
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "tag",
									"source": 13,
									"value": "1"
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 369,
									"end": 9130,
									"name": "REVERT",
									"source": 13
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122058c3caf29de2cead89f559f501fa4f84f162f43627feb0e8efb7daeb1830c3b864736f6c63430008120033",
									".code": [
										{
											"begin": 369,
											"end": 9130,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 369,
											"end": 9130,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 369,
											"end": 9130,
											"name": "REVERT",
											"source": 13
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC5267.sol",
								"@openzeppelin/contracts/security/ReentrancyGuard.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Counters.sol",
								"@openzeppelin/contracts/utils/ShortStrings.sol",
								"@openzeppelin/contracts/utils/StorageSlot.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/cryptography/EIP712.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/TurtleToken.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":\"ECDSA\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b81d9ff6559ea5c47fc573e17ece6d9ba5d6839e213e6ebc3b4c5c8fe4199d7f\",\"dweb:/ipfs/QmPCW1bFisUzJkyjroY3yipwfism9RRCigCcK1hbXtVM8n\"]},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8b93a1e39a4a19eba1600b92c96f435442db88cac91e315c8291547a2a7bcfe2\",\"dweb:/ipfs/QmTm34KVe6uZBZwq8dZDNWwPcm24qBJdxqL3rPxBJ4LrMv\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cc8841b3cd48ad125e2f46323c8bad3aa0e88e399ec62acb9e57efa7e7c8058c\",\"dweb:/ipfs/QmSqE4mXHA2BXW58deDbXE8MTcsL5JSKNDbm23sVQxRLPS\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c50fcc459e49a9858b6d8ad5f911295cb7c9ab57567845a250bf0153f84a95c7\",\"dweb:/ipfs/QmcEW85JRzvDkQggxiBBLVAasXWdkhEysqypj9EaB6H2g6\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/cryptography/EIP712.sol": {
				"EIP712": {
					"abi": [
						{
							"inputs": [],
							"name": "InvalidShortString",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "str",
									"type": "string"
								}
							],
							"name": "StringTooLong",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [],
							"name": "EIP712DomainChanged",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "eip712Domain",
							"outputs": [
								{
									"internalType": "bytes1",
									"name": "fields",
									"type": "bytes1"
								},
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "version",
									"type": "string"
								},
								{
									"internalType": "uint256",
									"name": "chainId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "verifyingContract",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "salt",
									"type": "bytes32"
								},
								{
									"internalType": "uint256[]",
									"name": "extensions",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"custom:oz-upgrades-unsafe-allow": "state-variable-immutable state-variable-assignment",
						"details": "https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data. The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in their contracts using a combination of `abi.encode` and `keccak256`. This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the separator from the immutable values, which is cheaper than accessing a cached version in cold storage. _Available since v3.4._",
						"events": {
							"EIP712DomainChanged()": {
								"details": "MAY be emitted to signal that the domain could have changed."
							}
						},
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the domain separator and parameter caches. The meaning of `name` and `version` is specified in https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]: - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol. - `version`: the current major version of the signing domain. NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart contract upgrade]."
							},
							"eip712Domain()": {
								"details": "See {EIP-5267}. _Available since v4.9._"
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"eip712Domain()": "84b0196e"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable state-variable-assignment\",\"details\":\"https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data. The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in their contracts using a combination of `abi.encode` and `keccak256`. This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the separator from the immutable values, which is cheaper than accessing a cached version in cold storage. _Available since v3.4._\",\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the domain separator and parameter caches. The meaning of `name` and `version` is specified in https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]: - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol. - `version`: the current major version of the signing domain. NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart contract upgrade].\"},\"eip712Domain()\":{\"details\":\"See {EIP-5267}. _Available since v4.9._\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":\"EIP712\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"keccak256\":\"0xac6c2efc64baccbde4904ae18ed45139c9aa8cff96d6888344d1e4d2eb8b659f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e416a280c610b6b7a5f158e4a41aacfaec01ef14d5d1de13b46be9e090265fc\",\"dweb:/ipfs/QmYZP2KrdyccBbhLZT42auhvBTMkwiwUS3V6HWb42rbwbG\"]},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"keccak256\":\"0xc0e310c163edf15db45d4ff938113ab357f94fa86e61ea8e790853c4d2e13256\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://04db5bc05dcb05ba1f6ca2dfbead17adc8a2e2f911aa80b05e7a36d9eaf96516\",\"dweb:/ipfs/QmVkfHZbXVBUPsTopueCn3qGJX8aEjahFF3Fn4NcygLNm5\"]},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e26daf81e2252dc1fe1ce0e4b55c2eb7c6d1ee84ae6558d1a9554432ea1d32da\",\"dweb:/ipfs/Qmb1UANWiWq5pCKbmHSu772hd4nt374dVaghGmwSVNuk8Q\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b81d9ff6559ea5c47fc573e17ece6d9ba5d6839e213e6ebc3b4c5c8fe4199d7f\",\"dweb:/ipfs/QmPCW1bFisUzJkyjroY3yipwfism9RRCigCcK1hbXtVM8n\"]},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8b93a1e39a4a19eba1600b92c96f435442db88cac91e315c8291547a2a7bcfe2\",\"dweb:/ipfs/QmTm34KVe6uZBZwq8dZDNWwPcm24qBJdxqL3rPxBJ4LrMv\"]},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"keccak256\":\"0x8432884527a7ad91e6eed1cfc5a0811ae2073e5bca107bd0ca442e9236b03dbd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e3aa0eadab7aafcf91a95684765f778f64386f0368de88522ce873c21385278a\",\"dweb:/ipfs/QmPfaVAqWgH1QsT3dHVuL6jwMZbVKdoP8w1PvpiPT2FPWd\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cc8841b3cd48ad125e2f46323c8bad3aa0e88e399ec62acb9e57efa7e7c8058c\",\"dweb:/ipfs/QmSqE4mXHA2BXW58deDbXE8MTcsL5JSKNDbm23sVQxRLPS\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c50fcc459e49a9858b6d8ad5f911295cb7c9ab57567845a250bf0153f84a95c7\",\"dweb:/ipfs/QmcEW85JRzvDkQggxiBBLVAasXWdkhEysqypj9EaB6H2g6\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 2158,
								"contract": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
								"label": "_nameFallback",
								"offset": 0,
								"slot": "0",
								"type": "t_string_storage"
							},
							{
								"astId": 2160,
								"contract": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
								"label": "_versionFallback",
								"offset": 0,
								"slot": "1",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/math/Math.sol": {
				"Math": {
					"abi": [],
					"devdoc": {
						"details": "Standard math utilities missing in the Solidity language.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/math/Math.sol\":202:12784  library Math {... */\n  0x80\n  dup1\n  0x40\n  mstore\n  jumpi(tag_1, callvalue)\n  dataSize(sub_0)\n  swap1\n  dup2\n  dataOffset(sub_0)\n  dup3\n  codecopy\n  address\n  dup2\n  assignImmutable(\"0xcd5a02d485074f67d63783a7acdae578618045c23ccf47fa4e3f1a01c11714ad\")\n  return\ntag_1:\n  0x00\n  dup1\n  revert\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":202:12784  library Math {... */\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212209638d3cfa2e77349effe581dbfb73b43688cfd40394770445077709cfaa88eef64736f6c63430008120033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea26469706673582212209638d3cfa2e77349effe581dbfb73b43688cfd40394770445077709cfaa88eef64736f6c63430008120033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP7 CODESIZE 0xD3 0xCF LOG2 0xE7 PUSH20 0x49EFFE581DBFB73B43688CFD4039477044507770 SWAP13 STATICCALL 0xA8 DUP15 0xEF PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ",
							"sourceMap": "202:12582:15:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "600080fdfea26469706673582212209638d3cfa2e77349effe581dbfb73b43688cfd40394770445077709cfaa88eef64736f6c63430008120033",
							"opcodes": "PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP7 CODESIZE 0xD3 0xCF LOG2 0xE7 PUSH20 0x49EFFE581DBFB73B43688CFD4039477044507770 SWAP13 STATICCALL 0xA8 DUP15 0xEF PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ",
							"sourceMap": "202:12582:15:-:0;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "11600",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"internal": {
								"average(uint256,uint256)": "infinite",
								"ceilDiv(uint256,uint256)": "infinite",
								"log10(uint256)": "infinite",
								"log10(uint256,enum Math.Rounding)": "infinite",
								"log2(uint256)": "infinite",
								"log2(uint256,enum Math.Rounding)": "infinite",
								"log256(uint256)": "infinite",
								"log256(uint256,enum Math.Rounding)": "infinite",
								"max(uint256,uint256)": "infinite",
								"min(uint256,uint256)": "infinite",
								"mulDiv(uint256,uint256,uint256)": "infinite",
								"mulDiv(uint256,uint256,uint256,enum Math.Rounding)": "infinite",
								"sqrt(uint256)": "infinite",
								"sqrt(uint256,enum Math.Rounding)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 202,
									"end": 12784,
									"name": "PUSH",
									"source": 15,
									"value": "80"
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "DUP1",
									"source": 15
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "PUSH",
									"source": 15,
									"value": "40"
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "CALLVALUE",
									"source": 15
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "PUSH [tag]",
									"source": 15,
									"value": "1"
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "JUMPI",
									"source": 15
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "PUSH #[$]",
									"source": 15,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "SWAP1",
									"source": 15
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "DUP2",
									"source": 15
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "PUSH [$]",
									"source": 15,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "CODECOPY",
									"source": 15
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "ADDRESS",
									"source": 15
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "DUP2",
									"source": 15
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "ASSIGNIMMUTABLE",
									"source": 15,
									"value": "library_deploy_address"
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "RETURN",
									"source": 15
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "tag",
									"source": 15,
									"value": "1"
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "JUMPDEST",
									"source": 15
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "DUP1",
									"source": 15
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "REVERT",
									"source": 15
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212209638d3cfa2e77349effe581dbfb73b43688cfd40394770445077709cfaa88eef64736f6c63430008120033",
									".code": [
										{
											"begin": 202,
											"end": 12784,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 202,
											"end": 12784,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 202,
											"end": 12784,
											"name": "REVERT",
											"source": 15
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC5267.sol",
								"@openzeppelin/contracts/security/ReentrancyGuard.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Counters.sol",
								"@openzeppelin/contracts/utils/ShortStrings.sol",
								"@openzeppelin/contracts/utils/StorageSlot.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/cryptography/EIP712.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/TurtleToken.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cc8841b3cd48ad125e2f46323c8bad3aa0e88e399ec62acb9e57efa7e7c8058c\",\"dweb:/ipfs/QmSqE4mXHA2BXW58deDbXE8MTcsL5JSKNDbm23sVQxRLPS\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/math/SignedMath.sol": {
				"SignedMath": {
					"abi": [],
					"devdoc": {
						"details": "Standard signed math utilities missing in the Solidity language.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/math/SignedMath.sol\":215:1262  library SignedMath {... */\n  0x80\n  dup1\n  0x40\n  mstore\n  jumpi(tag_1, callvalue)\n  dataSize(sub_0)\n  swap1\n  dup2\n  dataOffset(sub_0)\n  dup3\n  codecopy\n  address\n  dup2\n  assignImmutable(\"0xcd5a02d485074f67d63783a7acdae578618045c23ccf47fa4e3f1a01c11714ad\")\n  return\ntag_1:\n  0x00\n  dup1\n  revert\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/math/SignedMath.sol\":215:1262  library SignedMath {... */\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220dbe5d785a375d7df71b26e0d40ca27941b49ab97e5f852d342e1c3d6730adee664736f6c63430008120033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220dbe5d785a375d7df71b26e0d40ca27941b49ab97e5f852d342e1c3d6730adee664736f6c63430008120033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDB 0xE5 0xD7 DUP6 LOG3 PUSH22 0xD7DF71B26E0D40CA27941B49AB97E5F852D342E1C3D6 PUSH20 0xADEE664736F6C63430008120033000000000000 ",
							"sourceMap": "215:1047:16:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "600080fdfea2646970667358221220dbe5d785a375d7df71b26e0d40ca27941b49ab97e5f852d342e1c3d6730adee664736f6c63430008120033",
							"opcodes": "PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDB 0xE5 0xD7 DUP6 LOG3 PUSH22 0xD7DF71B26E0D40CA27941B49AB97E5F852D342E1C3D6 PUSH20 0xADEE664736F6C63430008120033000000000000 ",
							"sourceMap": "215:1047:16:-:0;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "11600",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"internal": {
								"abs(int256)": "infinite",
								"average(int256,int256)": "infinite",
								"max(int256,int256)": "infinite",
								"min(int256,int256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 215,
									"end": 1262,
									"name": "PUSH",
									"source": 16,
									"value": "80"
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "PUSH",
									"source": 16,
									"value": "40"
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "CALLVALUE",
									"source": 16
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "1"
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "PUSH #[$]",
									"source": 16,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "PUSH [$]",
									"source": 16,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "CODECOPY",
									"source": 16
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "ADDRESS",
									"source": 16
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "ASSIGNIMMUTABLE",
									"source": 16,
									"value": "library_deploy_address"
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "RETURN",
									"source": 16
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "tag",
									"source": 16,
									"value": "1"
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "REVERT",
									"source": 16
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220dbe5d785a375d7df71b26e0d40ca27941b49ab97e5f852d342e1c3d6730adee664736f6c63430008120033",
									".code": [
										{
											"begin": 215,
											"end": 1262,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 215,
											"end": 1262,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 215,
											"end": 1262,
											"name": "REVERT",
											"source": 16
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC5267.sol",
								"@openzeppelin/contracts/security/ReentrancyGuard.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Counters.sol",
								"@openzeppelin/contracts/utils/ShortStrings.sol",
								"@openzeppelin/contracts/utils/StorageSlot.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/cryptography/EIP712.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/TurtleToken.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":\"SignedMath\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c50fcc459e49a9858b6d8ad5f911295cb7c9ab57567845a250bf0153f84a95c7\",\"dweb:/ipfs/QmcEW85JRzvDkQggxiBBLVAasXWdkhEysqypj9EaB6H2g6\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/TurtleToken.sol": {
				"TurtleToken": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "initialSupply",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "_exchangeRate",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [],
							"name": "InvalidShortString",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "str",
									"type": "string"
								}
							],
							"name": "StringTooLong",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "AddedToWhitelist",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [],
							"name": "EIP712DomainChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "RemovedFromWhitelist",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "buyer",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "ethAmount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "tokenAmount",
									"type": "uint256"
								}
							],
							"name": "TokensPurchased",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "seller",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "tokenAmount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "ethAmount",
									"type": "uint256"
								}
							],
							"name": "TokensSold",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "addToWhitelist",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "buyTokens",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "eip712Domain",
							"outputs": [
								{
									"internalType": "bytes1",
									"name": "fields",
									"type": "bytes1"
								},
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "version",
									"type": "string"
								},
								{
									"internalType": "uint256",
									"name": "chainId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "verifyingContract",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "salt",
									"type": "bytes32"
								},
								{
									"internalType": "uint256[]",
									"name": "extensions",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "exchangeRate",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "inWhitelisted",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "mint",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "removeFromWhitelist",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenAmount",
									"type": "uint256"
								}
							],
							"name": "sellTokens",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "newRate",
									"type": "uint256"
								}
							],
							"name": "setExchangeRate",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "withdrawEth",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"EIP712DomainChanged()": {
								"details": "MAY be emitted to signal that the domain could have changed."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"addToWhitelist(address)": {
								"details": "화이트리스트 관련 함수"
							},
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"eip712Domain()": {
								"details": "See {EIP-5267}. _Available since v4.9._"
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n  0x0160\n  jumpi(tag_8, callvalue)\n  sub(shl(0x40, 0x01), 0x01)\n  swap1\n  not(0x1f)\n  bytecodeSize\n  0x1f\n  codesize\n  dup3\n  swap1\n  sub\n  dup2\n  dup2\n  add\n  dup5\n  and\n  dup6\n  add\n  swap1\n  dup7\n  dup3\n  gt\n  dup7\n  dup4\n  lt\n  or\n  tag_6\n  jumpi\n  dup1\n  dup7\n  swap2\n  0x40\n  swap6\n  dup7\n  swap5\n  dup6\n  mstore\n  dup4\n  codecopy\n  dup2\n  add\n  sub\n  slt\n  tag_8\n  jumpi\n  dup4\n  mload\n  swap3\n  0x20\n  dup1\n  swap6\n  add\n  mload\n  dup4\n  mload\n  swap5\n  tag_10\n  dup7\n  tag_1\n  jump\t// in\ntag_10:\n  0x0b\n  dup7\n  mstore\n  dup7\n  dup7\n  add\n  swap7\n  shl(0xa9, 0x2a3ab93a3632aa37b5b2b7)\n  swap9\n  dup10\n  dup10\n  mstore\n  dup7\n  mload\n  swap10\n  tag_11\n  dup12\n  tag_1\n  jump\t// in\ntag_11:\n  0x0b\n  dup12\n  mstore\n  dup3\n  dup12\n  add\n  mstore\n  dup7\n  mload\n  swap10\n  tag_12\n  dup12\n  tag_1\n  jump\t// in\ntag_12:\n  0x04\n  swap6\n  dup7\n  dup13\n  mstore\n  shl(0xe2, 0x15155495)\n  dup5\n  dup14\n  add\n  mstore\n  dup9\n  mload\n  swap12\n  dup13\n  swap3\n  tag_13\n  dup5\n  tag_1\n  jump\t// in\ntag_13:\n  dup6\n  0x01\n  swap5\n  dup6\n  dup2\n  mstore\n  add\n  swap3\n  shl(0xf8, 0x31)\n  dup5\n  mstore\n  dup2\n  mload\n  dup7\n  dup2\n  gt\n  tag_27\n  jumpi\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2046:2059  _name = name_ */\n  0x03\n    /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n  swap3\n  dup4\n  sload\n  dup8\n  dup2\n  dup2\n  shr\n  swap2\n  and\n  dup1\n  iszero\n  tag_16\n  jumpi\ntag_17:\n  dup11\n  dup3\n  lt\n  eq\n  tag_18\n  jumpi\n  dup3\n  swap2\n  dup2\n  dup16\n  dup1\n  swap4\n  gt\n  tag_20\n  jumpi\ntag_21:\n  pop\n  dup11\n  swap2\n  dup4\n  gt\n  0x01\n  eq\n  tag_22\n  jumpi\n  0x00\n  swap3\n  tag_24\n  jumpi\ntag_25:\n  pop\n  pop\n  not(0x00)\n  dup3\n  dup6\n  shl\n  shr\n  not\n  and\n  swap1\n  dup7\n  shl\n  or\n  dup3\n  sstore\ntag_26:\n  dup3\n  mload\n  swap3\n  dup7\n  dup5\n  gt\n  tag_27\n  jumpi\n  dup11\n  sload\n  dup7\n  dup2\n  dup2\n  shr\n  swap2\n  and\n  dup1\n  iszero\n  tag_29\n  jumpi\ntag_30:\n  dup10\n  dup3\n  lt\n  eq\n  tag_31\n  jumpi\n  swap1\n  dup2\n  dup14\n  dup7\n  swap6\n  swap5\n  swap4\n  gt\n  tag_33\n  jumpi\ntag_34:\n  pop\n  dup9\n  swap2\n  dup14\n  dup6\n  gt\n  0x01\n  eq\n  tag_35\n  jumpi\n  pop\n  0x00\n  swap4\n  tag_37\n  jumpi\ntag_38:\n  pop\n  pop\n  dup3\n  dup6\n  shl\n  swap3\n  not(0x00)\n  swap2\n  shl\n  shr\n  not\n  and\n  or\n  dup8\n  sstore\ntag_39:\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3251:3296  name.toShortStringWithFallback(_nameFallback) */\n  tag_40\n  dup11\n  tag_2\n  jump\t// in\ntag_40:\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3243:3296  _name = name.toShortStringWithFallback(_nameFallback) */\n  swap11\n  0x0120\n  swap12\n  dup13\n  mstore\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3317:3368  version.toShortStringWithFallback(_versionFallback) */\n  tag_41\n  dup14\n  tag_3\n  jump\t// in\ntag_41:\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3306:3368  _version = version.toShortStringWithFallback(_versionFallback) */\n  swap11\n  0x0140\n  swap12\n  dup13\n  mstore\n    /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n  mload\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3392:3414  keccak256(bytes(name)) */\n  swap1\n  keccak256\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3378:3414  _hashedName = keccak256(bytes(name)) */\n  swap12\n  dup13\n  0xe0\n  mstore\n    /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n  mload\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3441:3466  keccak256(bytes(version)) */\n  swap1\n  keccak256\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3424:3466  _hashedVersion = keccak256(bytes(version)) */\n  swap1\n  0x0100\n  swap12\n  dup3\n  dup14\n  mstore\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3494:3507  block.chainid */\n  chainid\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3477:3507  _cachedChainId = block.chainid */\n  0xa0\n  mstore\n    /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n  dup10\n  mload\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4054:4135  abi.encode(_TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)) */\n  swap3\n  dup6\n  dup5\n  add\n    /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n  swap2\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":1929:2024  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n  0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f\n    /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n  dup4\n  mstore\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":1929:2024  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n  dup12\n  dup6\n  add\n    /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n  mstore\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":1929:2024  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n  0x60\n  dup5\n  add\n    /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n  mstore\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3494:3507  block.chainid */\n  chainid\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":1929:2024  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n  0x80\n  dup5\n  add\n    /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n  mstore\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4129:4133  this */\n  address\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3477:3507  _cachedChainId = block.chainid */\n  0xa0\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":1929:2024  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n  dup5\n  add\n  mstore\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3477:3507  _cachedChainId = block.chainid */\n  0xa0\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4054:4135  abi.encode(_TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)) */\n  dup4\n  mstore\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":1929:2024  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n  0xc0\n    /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n  dup4\n  add\n  swap4\n  dup4\n  dup6\n  lt\n  swap1\n  dup6\n  gt\n  or\n  tag_42\n  jumpi\n  dup4\n  dup11\n  mstore\n  dup3\n  mload\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4044:4136  keccak256(abi.encode(_TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this))) */\n  swap1\n  keccak256\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":1929:2024  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n  0x80\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3517:3565  _cachedDomainSeparator = _buildDomainSeparator() */\n  mstore\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4129:4133  this */\n  address\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":1929:2024  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n  0xc0\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3575:3602  _cachedThis = address(this) */\n  mstore\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2518:2524  _owner */\n  0x09\n    /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n  dup1\n  sload\n    /* \"@openzeppelin/contracts/utils/Context.sol\":734:744  msg.sender */\n  caller\n  not(sub(shl(0xa0, 0x01), 0x01))\n    /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n  dup3\n  and\n  dup2\n  or\n  swap1\n  swap3\n  sstore\n  sub(shl(0xa0, 0x01), 0x01)\n  and\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2566:2606  OwnershipTransferred(oldOwner, newOwner) */\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  0x00\n  dup1\n  log3\n    /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1821:1843  _status = _NOT_ENTERED */\n  0x0a\n    /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n  sstore\n    /* \"contracts/TurtleToken.sol\":1423:1427  1e18 */\n  0x0de0b6b3a7640000\n    /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n  swap7\n  dup8\n  dup6\n  mul\n  swap5\n  dup1\n  dup7\n  div\n  dup10\n  eq\n  swap1\n  iszero\n  or\n  iszero\n  tag_44\n  jumpi\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4129:4133  this */\n  address\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8603:8624  account != address(0) */\n  iszero\n    /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n  tag_46\n  jumpi\n  pop\n  pop\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8731:8753  _totalSupply += amount */\n  0x02\n    /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n  sload\n  dup3\n  dup2\n  add\n  dup1\n  swap2\n  gt\n  tag_48\n  jumpi\n  0x00\n  swap2\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8952:8989  Transfer(address(0), account, amount) */\n  0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n    /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n  swap2\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8731:8753  _totalSupply += amount */\n  0x02\n    /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n  sstore\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4129:4133  this */\n  address\n    /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n  dup4\n  mstore\n  dup3\n  dup2\n  mstore\n  dup8\n  dup4\n  keccak256\n  dup5\n  dup2\n  sload\n  add\n  swap1\n  sstore\n  dup8\n  mload\n  swap4\n  dup5\n  mstore\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4129:4133  this */\n  address\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8952:8989  Transfer(address(0), account, amount) */\n  swap4\n  log3\n    /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n  dup3\n  dup2\n  mul\n  swap3\n  dup2\n  dup5\n  div\n  eq\n  swap1\n  iszero\n  or\n  iszero\n  tag_50\n  jumpi\n  pop\n  0x0b\n  sstore\n  mload\n  swap2\n  dataSize(sub_0)\n  swap4\n  dup5\n  dataOffset(sub_0)\n  dup6\n  codecopy\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":1929:2024  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n  0x80\n    /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n  mload\n  dup5\n  assignImmutable(\"0x012378de473e8af4c1b5f2b38fe3160a667a811e25292d66657982eb23b09365\")\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3477:3507  _cachedChainId = block.chainid */\n  0xa0\n    /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n  mload\n  dup5\n  assignImmutable(\"0x13b763bf6b59a7fee48470152d81998b3fdcef659072f88f6bff0c642b50f9fe\")\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":1929:2024  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n  0xc0\n    /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n  mload\n  dup5\n  assignImmutable(\"0x9dbc59cf760654cbb54c8c8e8fbeeb152c7086292e67226dcddb69fe39a9af87\")\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3378:3414  _hashedName = keccak256(bytes(name)) */\n  0xe0\n    /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n  mload\n  dup5\n  assignImmutable(\"0x8d2c1cf9e1a710c789a96e9ed6f7d45944710e11a78d6197d48655903a3df0af\")\n  mload\n  dup4\n  assignImmutable(\"0xc9be7da8bed12c69017945c7fabae6d76cd58eb576cc6b3754054c2443fb3440\")\n  mload\n  dup3\n  assignImmutable(\"0x7a38a174eebb1f86834bf225201f689ede6a415ca1c953bc89a575c33de6a4cb\")\n  mload\n  dup2\n  assignImmutable(\"0xdc87b691b0302dee626bda07b9e9b084f7d5765b17a541a71826cc6c7a8bcd5b\")\n  return\ntag_50:\n  0x11\n  swap1\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore\n  revert(0x00, 0x24)\ntag_48:\n  0x11\n  dup6\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore\n  revert(0x00, 0x24)\ntag_46:\n  0x45524332303a206d696e7420746f20746865207a65726f206164647265737300\n  swap2\n  0x0104\n  swap2\n  0x64\n  swap6\n  shl(0xe5, 0x461bcd)\n  dup7\n  mstore\n  0xc4\n  dup4\n  add\n  mstore\n  0xe4\n  dup3\n  add\n  mstore\n  add\n  mstore\n  revert\ntag_44:\n  0x11\n  dup8\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore\n  revert(0x00, 0x24)\ntag_42:\n  0x41\n  dup9\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore\n  revert(0x00, 0x24)\ntag_37:\n  add\n  mload\n  swap2\n  pop\n  codesize\n  dup1\n  jump(tag_38)\ntag_35:\n  dup8\n  swap6\n  swap4\n  swap3\n  swap2\n  swap4\n  and\n  swap3\n  dup13\n  0x00\n  mstore\n  dup10\n  0x00\n  keccak256\n  swap4\n  0x00\ntag_52:\n  dup12\n  dup3\n  dup3\n  lt\n  tag_53\n  jumpi\n  pop\n  pop\n  dup6\n  gt\n  tag_55\n  jumpi\ntag_56:\n  pop\n  pop\n  pop\n  pop\n  dup2\n  shl\n  add\n  dup8\n  sstore\n  jump(tag_39)\ntag_55:\n  add\n  mload\n  swap1\n  0xf8\n  dup5\n  not(0x00)\n  swap3\n  shl\n  and\n  shr\n  not\n  and\n  swap1\n  sstore\n  codesize\n  dup1\n  dup1\n  dup1\n  jump(tag_56)\ntag_53:\n  dup4\n  dup6\n  add\n  mload\n  dup8\n  sstore\n  dup11\n  swap9\n  swap1\n  swap7\n  add\n  swap6\n  swap4\n  dup5\n  add\n  swap4\n  add\n  jump(tag_52)\ntag_33:\n  swap1\n  swap2\n  swap3\n  swap4\n  pop\n  dup12\n  0x00\n  mstore\n  dup9\n  0x00\n  keccak256\n  dup14\n  dup1\n  dup8\n  add\n  0x05\n  shr\n  dup3\n  add\n  swap3\n  dup12\n  dup9\n  lt\n  tag_57\n  jumpi\ntag_58:\n  swap2\n  dup10\n  swap2\n  dup9\n  swap8\n  swap7\n  swap6\n  swap5\n  swap4\n  add\n  0x05\n  shr\n  add\n  swap2\ntag_59:\n  dup3\n  dup2\n  lt\n  tag_60\n  jumpi\n  pop\n  pop\n  jump(tag_34)\ntag_60:\n  0x00\n  dup2\n  sstore\n  dup8\n  swap7\n  pop\n  dup10\n  swap2\n  add\n  jump(tag_59)\ntag_57:\n  swap3\n  pop\n  dup2\n  swap3\n  jump(tag_58)\ntag_31:\n  0x22\n  dup13\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore\n  revert(0x00, 0x24)\ntag_29:\n  swap1\n  0x7f\n  and\n  swap1\n  jump(tag_30)\ntag_27:\n  0x41\n  dup12\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore\n  revert(0x00, 0x24)\ntag_24:\n  add\n  mload\n  swap1\n  pop\n  codesize\n  dup1\n  jump(tag_25)\ntag_22:\n  swap1\n  dup5\n  dup10\n  swap5\n  and\n  swap2\n  dup7\n  0x00\n  mstore\n  dup12\n  0x00\n  keccak256\n  swap3\n  0x00\ntag_62:\n  dup14\n  dup3\n  dup3\n  lt\n  tag_63\n  jumpi\n  pop\n  pop\n  dup5\n  gt\n  tag_65\n  jumpi\ntag_66:\n  pop\n  pop\n  pop\n  dup2\n  shl\n  add\n  dup3\n  sstore\n  jump(tag_26)\ntag_65:\n  add\n  mload\n  not(0x00)\n  dup4\n  dup8\n  shl\n  0xf8\n  and\n  shr\n  not\n  and\n  swap1\n  sstore\n  codesize\n  dup1\n  dup1\n  jump(tag_66)\ntag_63:\n  dup4\n  dup6\n  add\n  mload\n  dup7\n  sstore\n  dup13\n  swap8\n  swap1\n  swap6\n  add\n  swap5\n  swap4\n  dup5\n  add\n  swap4\n  add\n  jump(tag_62)\ntag_20:\n  swap2\n  pop\n  swap2\n  pop\n  dup5\n  0x00\n  mstore\n  dup14\n  dup11\n  0x00\n  keccak256\n  swap1\n  dup1\n  dup6\n  add\n  0x05\n  shr\n  dup3\n  add\n  swap3\n  dup13\n  dup7\n  lt\n  tag_67\n  jumpi\ntag_68:\n  dup6\n  swap5\n  swap3\n  dup3\n  dup13\n  swap3\n  swap6\n  swap4\n  swap6\n  add\n  0x05\n  shr\n  add\n  swap2\ntag_69:\n  dup3\n  dup2\n  lt\n  tag_70\n  jumpi\n  pop\n  pop\n  jump(tag_21)\ntag_70:\n  0x00\n  swap2\n  swap4\n  swap6\n  pop\n  dup1\n  swap3\n  swap5\n  pop\n  sstore\n  add\n  swap2\n  dup15\n  swap2\n  dup10\n  dup6\n  swap5\n  jump(tag_69)\ntag_67:\n  swap3\n  pop\n  dup2\n  swap3\n  jump(tag_68)\ntag_18:\n  0x22\n  dup14\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore\n  revert(0x00, 0x24)\ntag_16:\n  swap1\n  0x7f\n  and\n  swap1\n  jump(tag_17)\ntag_8:\n  0x00\n  dup1\n  revert\ntag_6:\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x41)\n  revert(0x00, 0x24)\ntag_1:\n  0x40\n  dup2\n  add\n  swap1\n  dup2\n  lt\n  sub(shl(0x40, 0x01), 0x01)\n  dup3\n  gt\n  or\n  tag_6\n  jumpi\n  0x40\n  mstore\n  jump\t// out\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2895:3236  function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {... */\ntag_2:\n    /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n  dup1\n  mload\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3040:3042  32 */\n  0x20\n  swap2\n    /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n  swap1\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3018:3042  bytes(value).length < 32 */\n  dup3\n  dup2\n  lt\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3040:3042  32 */\n  iszero\n  tag_74\n  jumpi\n    /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n  pop\n  swap1\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1835:1837  31 */\n  0x1f\n    /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n  dup3\n  mload\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1821:1837  bstr.length > 31 */\n  gt\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1817:1889  if (bstr.length > 31) {... */\n  tag_76\n  jumpi\n    /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n  dup1\n  dup3\n  mload\n  swap3\n  add\n  mload\n  swap1\n  dup1\n  dup4\n  lt\n  tag_78\n  jumpi\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1930:1966  uint256(bytes32(bstr)) | bstr.length */\n  pop\n  or\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3058:3085  return toShortString(value) */\n  swap1\n  jump\t// out\n    /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\ntag_78:\n  dup3\n  not(0x00)\n  swap2\n  sub\n  0x03\n  shl\n  shl\n  and\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1930:1966  uint256(bytes32(bstr)) | bstr.length */\n  or\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3058:3085  return toShortString(value) */\n  swap1\n  jump\t// out\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1817:1889  if (bstr.length > 31) {... */\ntag_76:\n    /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n  swap1\n  mload(0x40)\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1860:1878  StringTooLong(str) */\n  dup1\n  swap3\n  shl(0xe0, 0x305a27a9)\n  dup3\n  mstore\n  dup1\n  0x04\n  dup4\n  add\n    /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n  mstore\n  dup3\n  mload\n  swap1\n  dup2\n  0x24\n  dup5\n  add\n  mstore\n  0x00\n  swap4\ntag_80:\n  dup3\n  dup6\n  lt\n  tag_81\n  jumpi\n  pop\n  pop\n  0x44\n  swap3\n  pop\n  0x00\n  dup4\n  dup3\n  dup5\n  add\n  add\n  mstore\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1835:1837  31 */\n  0x1f\n    /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n  dup1\n  not\n  swap2\n  add\n  and\n  dup2\n  add\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1860:1878  StringTooLong(str) */\n  sub\n  add\n  swap1\n  revert\n    /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\ntag_81:\n  dup5\n  dup2\n  add\n  dup3\n  add\n  mload\n  dup7\n  dup7\n  add\n  0x44\n  add\n  mstore\n  swap4\n  dup2\n  add\n  swap4\n  dup6\n  swap4\n  pop\n  jump(tag_80)\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3014:3230  if (bytes(value).length < 32) {... */\ntag_74:\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n  dup2\n  gt\n  tag_6\n  jumpi\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3282:3295  _nameFallback */\n  0x05\n    /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n  swap3\n  dup4\n  sload\n  swap3\n  0x01\n  swap4\n  dup5\n  dup2\n  dup2\n  shr\n  swap2\n  and\n  dup1\n  iszero\n  tag_85\n  jumpi\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3014:3230  if (bytes(value).length < 32) {... */\ntag_86:\n    /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n  dup4\n  dup3\n  lt\n  eq\n  tag_87\n  jumpi\n  0x1f\n  dup2\n  gt\n  tag_89\n  jumpi\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3014:3230  if (bytes(value).length < 32) {... */\ntag_90:\n    /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n  pop\n  dup2\n  0x1f\n  dup5\n  gt\n  0x01\n  eq\n  tag_91\n  jumpi\n  pop\n  swap3\n  dup3\n  swap4\n  swap2\n  dup4\n  swap3\n  0x00\n  swap5\n  tag_93\n  jumpi\ntag_94:\n  pop\n  pop\n  shl\n  swap2\n  not(0x00)\n  swap1\n  0x03\n  shl\n  shr\n  not\n  and\n  or\n  swap1\n  sstore\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1371:1437  0x00000000000000000000000000000000000000000000000000000000000000FF */\n  0xff\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3176:3219  return ShortString.wrap(_FALLBACK_SENTINEL) */\n  swap1\n  jump\t// out\n    /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\ntag_93:\n  add\n  mload\n  swap3\n  pop\n  codesize\n  dup1\n  jump(tag_94)\ntag_91:\n  swap2\n  swap1\n  dup4\n  not(0x1f)\n  dup2\n  and\n  dup8\n  0x00\n  mstore\n  dup5\n  0x00\n  keccak256\n  swap5\n  0x00\n  swap1\ntag_96:\n  dup9\n  dup4\n  dup4\n  lt\n  tag_97\n  jumpi\n  pop\n  pop\n  pop\n  lt\n  tag_99\n  jumpi\ntag_100:\n  pop\n  pop\n  pop\n  dup2\n  shl\n  add\n  swap1\n  sstore\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1371:1437  0x00000000000000000000000000000000000000000000000000000000000000FF */\n  0xff\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3176:3219  return ShortString.wrap(_FALLBACK_SENTINEL) */\n  swap1\n  jump\t// out\n    /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\ntag_99:\n  add\n  mload\n  not(0x00)\n  0xf8\n  dup5\n  0x03\n  shl\n  and\n  shr\n  not\n  and\n  swap1\n  sstore\n  codesize\n  dup1\n  dup1\n  jump(tag_100)\ntag_97:\n  dup6\n  dup8\n  add\n  mload\n  dup9\n  sstore\n  swap1\n  swap7\n  add\n  swap6\n  swap5\n  dup6\n  add\n  swap5\n  dup8\n  swap4\n  pop\n  swap1\n  dup2\n  add\n  swap1\n  jump(tag_96)\ntag_89:\n  dup6\n  0x00\n  mstore\n  dup5\n  0x1f\n  dup5\n  0x00\n  keccak256\n  swap3\n  add\n  dup8\n  shr\n  dup3\n  add\n  swap2\n  0x1f\n  dup7\n  add\n  dup9\n  shr\n  add\ntag_101:\n  dup3\n  dup2\n  lt\n  tag_102\n  jumpi\n  pop\n  pop\n  jump(tag_90)\ntag_102:\n  0x00\n  dup2\n  sstore\n  add\n  dup6\n  swap1\n  jump(tag_101)\ntag_87:\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x22)\n  revert(0x00, 0x24)\ntag_85:\n  swap1\n  0x7f\n  and\n  swap1\n  jump(tag_86)\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2895:3236  function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {... */\ntag_3:\n    /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n  dup1\n  mload\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3040:3042  32 */\n  0x20\n  swap1\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3018:3042  bytes(value).length < 32 */\n  dup2\n  dup2\n  lt\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3040:3042  32 */\n  iszero\n  tag_104\n  jumpi\n    /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n  pop\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1835:1837  31 */\n  0x1f\n    /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n  dup3\n  mload\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1821:1837  bstr.length > 31 */\n  gt\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1817:1889  if (bstr.length > 31) {... */\n  tag_106\n  jumpi\n    /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n  dup1\n  dup3\n  mload\n  swap3\n  add\n  mload\n  swap1\n  dup1\n  dup4\n  lt\n  tag_78\n  jumpi\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1930:1966  uint256(bytes32(bstr)) | bstr.length */\n  pop\n  or\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3058:3085  return toShortString(value) */\n  swap1\n  jump\t// out\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1817:1889  if (bstr.length > 31) {... */\ntag_106:\n    /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n  swap1\n  mload(0x40)\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1860:1878  StringTooLong(str) */\n  dup1\n  swap3\n  shl(0xe0, 0x305a27a9)\n  dup3\n  mstore\n  dup1\n  0x04\n  dup4\n  add\n    /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n  mstore\n  dup3\n  mload\n  swap1\n  dup2\n  0x24\n  dup5\n  add\n  mstore\n  0x00\n  swap4\ntag_110:\n  dup3\n  dup6\n  lt\n  tag_111\n  jumpi\n  pop\n  pop\n  0x44\n  swap3\n  pop\n  0x00\n  dup4\n  dup3\n  dup5\n  add\n  add\n  mstore\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1835:1837  31 */\n  0x1f\n    /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n  dup1\n  not\n  swap2\n  add\n  and\n  dup2\n  add\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1860:1878  StringTooLong(str) */\n  sub\n  add\n  swap1\n  revert\n    /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\ntag_111:\n  dup5\n  dup2\n  add\n  dup3\n  add\n  mload\n  dup7\n  dup7\n  add\n  0x44\n  add\n  mstore\n  swap4\n  dup2\n  add\n  swap4\n  dup6\n  swap4\n  pop\n  jump(tag_110)\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3014:3230  if (bytes(value).length < 32) {... */\ntag_104:\n    /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n  swap1\n  sub(shl(0x40, 0x01), 0x01)\n  dup3\n  gt\n  tag_6\n  jumpi\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3351:3367  _versionFallback */\n  0x06\n    /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n  sload\n  swap3\n  0x01\n  swap4\n  dup5\n  dup2\n  dup2\n  shr\n  swap2\n  and\n  dup1\n  iszero\n  tag_115\n  jumpi\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3014:3230  if (bytes(value).length < 32) {... */\ntag_116:\n    /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n  dup4\n  dup3\n  lt\n  eq\n  tag_87\n  jumpi\n  0x1f\n  dup2\n  gt\n  tag_119\n  jumpi\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3014:3230  if (bytes(value).length < 32) {... */\ntag_120:\n    /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n  pop\n  dup2\n  0x1f\n  dup5\n  gt\n  0x01\n  eq\n  tag_121\n  jumpi\n  pop\n  swap3\n  dup3\n  swap4\n  swap2\n  dup4\n  swap3\n  0x00\n  swap5\n  tag_123\n  jumpi\ntag_124:\n  pop\n  pop\n  shl\n  swap2\n  not(0x00)\n  swap1\n  0x03\n  shl\n  shr\n  not\n  and\n  or\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3351:3367  _versionFallback */\n  0x06\n    /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n  sstore\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1371:1437  0x00000000000000000000000000000000000000000000000000000000000000FF */\n  0xff\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3176:3219  return ShortString.wrap(_FALLBACK_SENTINEL) */\n  swap1\n  jump\t// out\n    /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\ntag_123:\n  add\n  mload\n  swap3\n  pop\n  codesize\n  dup1\n  jump(tag_124)\ntag_121:\n  swap2\n  swap1\n  dup4\n  not(0x1f)\n  dup2\n  and\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3351:3367  _versionFallback */\n  0x06\n  0x00\n    /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n  mstore\n  dup5\n  0x00\n  keccak256\n  swap5\n  0x00\n  swap1\ntag_126:\n  dup9\n  dup4\n  dup4\n  lt\n  tag_127\n  jumpi\n  pop\n  pop\n  pop\n  lt\n  tag_129\n  jumpi\ntag_130:\n  pop\n  pop\n  pop\n  dup2\n  shl\n  add\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3351:3367  _versionFallback */\n  0x06\n    /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n  sstore\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1371:1437  0x00000000000000000000000000000000000000000000000000000000000000FF */\n  0xff\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3176:3219  return ShortString.wrap(_FALLBACK_SENTINEL) */\n  swap1\n  jump\t// out\n    /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\ntag_129:\n  add\n  mload\n  not(0x00)\n  0xf8\n  dup5\n  0x03\n  shl\n  and\n  shr\n  not\n  and\n  swap1\n  sstore\n  codesize\n  dup1\n  dup1\n  jump(tag_130)\ntag_127:\n  dup6\n  dup8\n  add\n  mload\n  dup9\n  sstore\n  swap1\n  swap7\n  add\n  swap6\n  swap5\n  dup6\n  add\n  swap5\n  dup8\n  swap4\n  pop\n  swap1\n  dup2\n  add\n  swap1\n  jump(tag_126)\ntag_119:\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3351:3367  _versionFallback */\n  0x06\n  0x00\n    /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n  mstore\n  dup5\n  0x1f\n  dup5\n  0x00\n  keccak256\n  swap3\n  add\n  0x05\n  shr\n  dup3\n  add\n  swap2\n  0x1f\n  dup7\n  add\n  0x05\n  shr\n  add\ntag_131:\n  dup3\n  dup2\n  lt\n  tag_132\n  jumpi\n  pop\n  pop\n  jump(tag_120)\ntag_132:\n  0x00\n  dup2\n  sstore\n  add\n  dup6\n  swap1\n  jump(tag_131)\ntag_115:\n  swap1\n  0x7f\n  and\n  swap1\n  jump(tag_116)\nstop\n\nsub_0: assembly {\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      0x80\n      0x40\n      dup2\n      dup2\n      mstore\n      0x04\n      dup1\n      calldatasize\n      lt\n      iszero\n      tag_19\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_19:\n      0x00\n      swap3\n      dup4\n      calldataload\n      0xe0\n      shr\n      swap1\n      dup2\n      0x06fdde03\n      eq\n      tag_21\n      jumpi\n      pop\n      dup1\n      0x095ea7b3\n      eq\n      tag_23\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_25\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_27\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_29\n      jumpi\n      dup1\n      0x3644e515\n      eq\n      tag_31\n      jumpi\n      dup1\n      0x39509351\n      eq\n      tag_33\n      jumpi\n      dup1\n      0x3ba0b9a9\n      eq\n      tag_35\n      jumpi\n      dup1\n      0x40c10f19\n      eq\n      tag_37\n      jumpi\n      dup1\n      0x65855dfd\n      eq\n      tag_39\n      jumpi\n      dup1\n      0x6c11bcd3\n      eq\n      tag_41\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_43\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_45\n      jumpi\n      dup1\n      0x7ecebe00\n      eq\n      tag_47\n      jumpi\n      dup1\n      0x84b0196e\n      eq\n      tag_49\n      jumpi\n      dup1\n      0x8ab1d681\n      eq\n      tag_51\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_53\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_55\n      jumpi\n      dup1\n      0xa0ef91df\n      eq\n      tag_57\n      jumpi\n      dup1\n      0xa457c2d7\n      eq\n      tag_59\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_61\n      jumpi\n      dup1\n      0xd0febe4c\n      eq\n      tag_63\n      jumpi\n      dup1\n      0xd505accf\n      eq\n      tag_65\n      jumpi\n      dup1\n      0xdb068e0e\n      eq\n      tag_67\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_69\n      jumpi\n      dup1\n      0xe43252d7\n      eq\n      tag_71\n      jumpi\n      0xf2fde38b\n      eq\n      tag_73\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_73:\n      jumpi(tag_77, callvalue)\n      jumpi(tag_77, slt(add(not(0x03), calldatasize), 0x20))\n      tag_79\n      tag_2\n      jump\t// in\n    tag_79:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1063:1125  modifier onlyOwner() {... */\n      swap1\n      tag_80\n      tag_4\n      jump\t// in\n    tag_80:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      swap2\n      dup3\n      and\n      swap3\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2162:2184  newOwner != address(0) */\n      dup4\n      iszero\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      tag_81\n      jumpi\n      pop\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2518:2524  _owner */\n      0x09\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      sload\n      dup3\n      shl(0xa0, 0xffffffffffffffffffffffff)\n      dup3\n      and\n      or\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2518:2524  _owner */\n      0x09\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      sstore\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2566:2606  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      dup4\n      dup1\n      log3\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      dup1\n      return\n    tag_81:\n      swap1\n      0x20\n      0x84\n      swap3\n      mload\n      swap2\n      shl(0xe5, 0x461bcd)\n      dup4\n      mstore\n      dup3\n      add\n      mstore\n      0x26\n      0x24\n      dup3\n      add\n      mstore\n      0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061\n      0x44\n      dup3\n      add\n      mstore\n      shl(0xd0, 0x646472657373)\n      0x64\n      dup3\n      add\n      mstore\n      revert\n    tag_77:\n      dup3\n      dup1\n      revert\n    tag_71:\n      pop\n      pop\n      jumpi(tag_85, callvalue)\n      jumpi(tag_85, slt(add(not(0x03), calldatasize), 0x20))\n      tag_87\n      tag_2\n      jump\t// in\n    tag_87:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1063:1125  modifier onlyOwner() {... */\n      tag_88\n      tag_4\n      jump\t// in\n    tag_88:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      and\n      dup1\n      dup4\n      mstore\n        /* \"contracts/TurtleToken.sol\":3911:3932  _whitelistedAddresses */\n      0x0c\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      0x20\n      mstore\n      swap1\n      dup3\n      keccak256\n      dup1\n      sload\n      not(0xff)\n      and\n      0x01\n      or\n      swap1\n      sstore\n        /* \"contracts/TurtleToken.sol\":3964:3989  AddedToWhitelist(account) */\n      0xa850ae9193f515cbae8d35e8925bd2be26627fc91bce650b8652ed254e9cab03\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      dup3\n      dup1\n        /* \"contracts/TurtleToken.sol\":3964:3989  AddedToWhitelist(account) */\n      log2\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      dup1\n      return\n    tag_85:\n      pop\n      dup1\n      revert\n    tag_69:\n      pop\n      pop\n      jumpi(tag_85, callvalue)\n      dup1\n      add(calldatasize, not(0x03))\n      slt\n      tag_85\n      jumpi\n      dup1\n      0x20\n      swap3\n      tag_93\n      tag_2\n      jump\t// in\n    tag_93:\n      tag_94\n      tag_3\n      jump\t// in\n    tag_94:\n      sub(shl(0xa0, 0x01), 0x01)\n      swap2\n      dup3\n      and\n      dup4\n      mstore\n      0x01\n      dup7\n      mstore\n      dup4\n      dup4\n      keccak256\n      swap2\n      and\n      dup3\n      mstore\n      dup5\n      mstore\n      keccak256\n      sload\n      swap1\n      mload\n      swap1\n      dup2\n      mstore\n      return\n    tag_67:\n      dup4\n      dup3\n      jumpi(tag_85, callvalue)\n      jumpi(tag_85, slt(add(not(0x03), calldatasize), 0x20))\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1063:1125  modifier onlyOwner() {... */\n      tag_99\n      tag_4\n      jump\t// in\n    tag_99:\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      calldataload\n        /* \"contracts/TurtleToken.sol\":3419:3441  exchangeRate = newRate */\n      0x0b\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      sstore\n      dup1\n      return\n    tag_65:\n      pop\n      dup3\n      swap1\n      jumpi(tag_85, callvalue)\n      jumpi(tag_85, slt(add(not(0x03), calldatasize), 0xe0))\n      tag_104\n      tag_2\n      jump\t// in\n    tag_104:\n      tag_105\n      tag_3\n      jump\t// in\n    tag_105:\n      swap1\n      calldataload(0x44)\n      swap3\n      calldataload(0x64)\n      calldataload(0x84)\n      0xff\n      dup2\n      and\n      dup2\n      sub\n      tag_106\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2139:2154  block.timestamp */\n      dup2\n      timestamp\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2139:2166  block.timestamp <= deadline */\n      gt\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      tag_108\n      jumpi\n      0x01\n      dup1\n      0xa0\n      shl\n      sub\n      swap1\n      dup2\n      dup6\n      and\n      swap3\n      dup4\n      dup10\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":3200:3207  _nonces */\n      0x07\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      0x20\n      mstore\n      dup10\n      dup10\n      keccak256\n      swap1\n      dup2\n      sload\n      swap2\n      0x01\n      dup4\n      add\n      swap1\n      sstore\n      dup11\n      mload\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2242:2321  abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline) */\n      swap1\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2242:2321  abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline) */\n      dup3\n      add\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      swap3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1125:1220  keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\") */\n      0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      dup5\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1125:1220  keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\") */\n      dup7\n      dup14\n      dup5\n      add\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      mstore\n      dup6\n      dup11\n      and\n      0x60\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1125:1220  keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\") */\n      dup5\n      add\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1125:1220  keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\") */\n      dup11\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      0x80\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1125:1220  keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\") */\n      dup5\n      add\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      mstore\n      0xa0\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1125:1220  keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\") */\n      dup4\n      add\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      mstore\n      0xc0\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1125:1220  keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\") */\n      dup3\n      add\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      mstore\n      0xc0\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2242:2321  abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline) */\n      dup2\n      mstore\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      0xe0\n      dup2\n      add\n      dup2\n      dup2\n      lt\n      0xffffffffffffffff\n      dup3\n      gt\n      or\n      tag_110\n      jumpi\n      dup12\n      mstore\n      mload\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2232:2322  keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline)) */\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6791:6796  error */\n      tag_112\n      swap2\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6744:6769  tryRecover(hash, v, r, s) */\n      tag_113\n      swap2\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4893:4913  _domainSeparatorV4() */\n      tag_114\n      tag_12\n      jump\t// in\n    tag_114:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":8496:8727  assembly {... */\n      swap1\n      dup13\n      mload\n      swap2\n      shl(0xf0, 0x1901)\n      dup4\n      mstore\n      0x02\n      dup4\n      add\n      mstore\n      0x22\n      dup3\n      add\n      mstore\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      calldataload(0xc4)\n      swap2\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":8496:8727  assembly {... */\n      0x42\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      calldataload(0xa4)\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":8496:8727  assembly {... */\n      swap3\n      keccak256\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6744:6769  tryRecover(hash, v, r, s) */\n      tag_11\n      jump\t// in\n    tag_113:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6791:6796  error */\n      swap2\n      swap1\n      swap2\n      tag_10\n      jump\t// in\n    tag_112:\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2450:2465  signer == owner */\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1125:1220  keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\") */\n      tag_115\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2536:2541  value */\n      pop\n      tag_117\n      swap4\n      swap5\n      pop\n      tag_9\n      jump\t// in\n    tag_117:\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      dup1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1125:1220  keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\") */\n    tag_115:\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      0x64\n      swap1\n      0x20\n      dup8\n      mload\n      swap2\n      shl(0xe5, 0x461bcd)\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1125:1220  keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\") */\n      dup4\n      mstore\n      dup3\n      add\n      mstore\n      0x1e\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      0x24\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1125:1220  keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\") */\n      dup3\n      add\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1125:1220  keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\") */\n      0x45524332305065726d69743a20696e76616c6964207369676e61747572650000\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      0x44\n      dup3\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1125:1220  keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\") */\n      mstore\n      revert\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n    tag_110:\n      shl(0xe0, 0x4e487b71)\n      dup12\n      mstore\n      0x41\n      dup8\n      mstore\n      0x24\n      dup12\n      revert\n    tag_108:\n      dup8\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      dup2\n      dup6\n      add\n      mstore\n      0x1d\n      0x24\n      dup3\n      add\n      mstore\n      0x45524332305065726d69743a206578706972656420646561646c696e65000000\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n    tag_106:\n      dup7\n      dup1\n      revert\n    tag_63:\n      pop\n      swap1\n      dup3\n      add(calldatasize, not(0x03))\n      slt\n      tag_77\n      jumpi\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2227:2330  modifier nonReentrant() {... */\n      tag_120\n      tag_15\n      jump\t// in\n    tag_120:\n        /* \"contracts/TurtleToken.sol\":1695:1704  msg.value */\n      callvalue\n        /* \"contracts/TurtleToken.sol\":1695:1708  msg.value > 0 */\n      iszero\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      tag_121\n      jumpi\n        /* \"contracts/TurtleToken.sol\":1854:1866  exchangeRate */\n      0x0b\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      sload\n        /* \"contracts/TurtleToken.sol\":1695:1704  msg.value */\n      dup1\n      callvalue\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      mul\n        /* \"contracts/TurtleToken.sol\":1695:1704  msg.value */\n      swap1\n      callvalue\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      dup3\n      div\n      sub\n      tag_123\n      jumpi\n        /* \"contracts/TurtleToken.sol\":1870:1874  1e18 */\n      0x0de0b6b3a7640000\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      swap1\n      div\n        /* \"contracts/TurtleToken.sol\":1911:1915  this */\n      swap2\n      address\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      dup5\n      mstore\n      dup4\n      0x20\n      mstore\n      dup3\n      dup3\n      dup6\n      keccak256\n      sload\n        /* \"contracts/TurtleToken.sol\":1893:1932  balanceOf(address(this)) >= tokenAmount */\n      lt\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      tag_125\n      jumpi\n        /* \"contracts/TurtleToken.sol\":2041:2051  msg.sender */\n      pop\n        /* \"contracts/TurtleToken.sol\":2112:2163  TokensPurchased(msg.sender, msg.value, tokenAmount) */\n      0x8fafebcaf9d154343dad25669bfa277f4fbacd7ac6b0c4fed522580e040a0f33\n        /* \"contracts/TurtleToken.sol\":2041:2051  msg.sender */\n      swap1\n        /* \"contracts/TurtleToken.sol\":2053:2064  tokenAmount */\n      tag_127\n        /* \"contracts/TurtleToken.sol\":2041:2051  msg.sender */\n      dup4\n      caller\n        /* \"contracts/TurtleToken.sol\":1911:1915  this */\n      address\n        /* \"contracts/TurtleToken.sol\":2053:2064  tokenAmount */\n      tag_16\n      jump\t// in\n    tag_127:\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      dup1\n      mload\n        /* \"contracts/TurtleToken.sol\":1695:1704  msg.value */\n      swap3\n      callvalue\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      dup5\n      mstore\n      0x20\n      dup5\n      add\n      mstore\n        /* \"contracts/TurtleToken.sol\":2041:2051  msg.sender */\n      caller\n        /* \"contracts/TurtleToken.sol\":2112:2163  TokensPurchased(msg.sender, msg.value, tokenAmount) */\n      swap3\n      log2\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1716:1717  1 */\n      0x01\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2809:2831  _status = _NOT_ENTERED */\n      0x0a\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      sstore\n      dup1\n      return\n    tag_125:\n      0x20\n      0x84\n      swap3\n      mload\n      swap2\n      shl(0xe5, 0x461bcd)\n      dup4\n      mstore\n      dup3\n      add\n      mstore\n      0x26\n      0x24\n      dup3\n      add\n      mstore\n      0x496e73756666696369656e7420746f6b656e2062616c616e636520696e20636f\n      0x44\n      dup3\n      add\n      mstore\n      shl(0xd2, 0x1b9d1c9858dd)\n      0x64\n      dup3\n      add\n      mstore\n      revert\n    tag_123:\n      shl(0xe0, 0x4e487b71)\n      dup5\n      mstore\n      0x11\n      dup4\n      mstore\n      0x24\n      dup5\n      revert\n    tag_121:\n      swap1\n      0x20\n      0x64\n      swap3\n      mload\n      swap2\n      shl(0xe5, 0x461bcd)\n      dup4\n      mstore\n      dup3\n      add\n      mstore\n      0x19\n      0x24\n      dup3\n      add\n      mstore\n      0x4d7573742073656e642045544820746f2065786368616e676500000000000000\n      0x44\n      dup3\n      add\n      mstore\n      revert\n    tag_61:\n      pop\n      pop\n      jumpi(tag_85, callvalue)\n      dup1\n      add(calldatasize, not(0x03))\n      slt\n      tag_85\n      jumpi\n      0x20\n      swap1\n      tag_132\n      tag_133\n      tag_2\n      jump\t// in\n    tag_133:\n      calldataload(0x24)\n      swap1\n      tag_17\n      jump\t// in\n    tag_132:\n      swap1\n      mload\n      swap1\n      iszero\n      iszero\n      dup2\n      mstore\n      return\n    tag_59:\n      pop\n      dup3\n      jumpi(tag_136, callvalue)\n      dup3\n      add(calldatasize, not(0x03))\n      slt\n      tag_136\n      jumpi\n      tag_138\n      tag_2\n      jump\t// in\n    tag_138:\n      swap2\n      dup4\n      calldataload(0x24)\n        /* \"@openzeppelin/contracts/utils/Context.sol\":734:744  msg.sender */\n      swap3\n      caller\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      dup2\n      mstore\n      mstore(0x20, 0x01)\n      dup2\n      dup2\n      keccak256\n      0x01\n      dup1\n      0xa0\n      shl\n      sub\n      dup7\n      and\n      dup3\n      mstore\n      0x20\n      mstore\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6792:6827  currentAllowance >= subtractedValue */\n      swap1\n      dup3\n      dup3\n      lt\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      tag_139\n      jumpi\n      0x20\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6928:6962  currentAllowance - subtractedValue */\n      tag_141\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      dup6\n      dup6\n      sub\n      dup8\n        /* \"@openzeppelin/contracts/utils/Context.sol\":734:744  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6928:6962  currentAllowance - subtractedValue */\n      tag_9\n      jump\t// in\n    tag_141:\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      mload\n      0x01\n      dup2\n      mstore\n      return\n    tag_139:\n      0x84\n      swap1\n      0x20\n      dup7\n      mload\n      swap2\n      shl(0xe5, 0x461bcd)\n      dup4\n      mstore\n      dup3\n      add\n      mstore\n      0x25\n      0x24\n      dup3\n      add\n      mstore\n      0x45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77\n      0x44\n      dup3\n      add\n      mstore\n      shl(0xd8, 0x207a65726f)\n      0x64\n      dup3\n      add\n      mstore\n      revert\n    tag_136:\n      dup1\n      revert\n    tag_57:\n      pop\n      jumpi(tag_77, callvalue)\n      dup3\n      add(calldatasize, not(0x03))\n      slt\n      tag_77\n      jumpi\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1063:1125  modifier onlyOwner() {... */\n      tag_146\n      tag_4\n      jump\t// in\n    tag_146:\n        /* \"contracts/TurtleToken.sol\":3582:3603  address(this).balance */\n      selfbalance\n        /* \"contracts/TurtleToken.sol\":3622:3633  balance > 0 */\n      swap1\n      dup2\n      iszero\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      tag_147\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1273:1279  _owner */\n      0x09\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      sload\n      dup4\n      swap2\n      dup3\n      swap2\n      dup3\n      swap2\n      dup3\n      swap2\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup3\n        /* \"contracts/TurtleToken.sol\":3667:3701  payable(owner()).transfer(balance) */\n      call\n      iszero\n      tag_149\n      jumpi\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      pop\n      dup1\n      return\n        /* \"contracts/TurtleToken.sol\":3667:3701  payable(owner()).transfer(balance) */\n    tag_149:\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      mload\n      swap1\n      returndatasize\n      swap1\n      dup3\n      returndatacopy\n      returndatasize\n      swap1\n      revert\n    tag_147:\n      0x64\n      swap1\n      0x20\n      dup5\n      mload\n      swap2\n      shl(0xe5, 0x461bcd)\n      dup4\n      mstore\n      dup3\n      add\n      mstore\n      0x12\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x70, 0x4e6f2045544820746f207769746864726177)\n      0x44\n      dup3\n      add\n      mstore\n      revert\n    tag_55:\n      pop\n      swap1\n      jumpi(tag_77, callvalue)\n      dup3\n      add(calldatasize, not(0x03))\n      slt\n      tag_77\n      jumpi\n      dup1\n      mload\n      swap2\n      dup4\n      dup2\n      sload\n      swap1\n      tag_155\n      dup3\n      tag_5\n      jump\t// in\n    tag_155:\n      dup1\n      dup7\n      mstore\n      swap3\n      0x01\n      swap3\n      dup1\n      dup5\n      and\n      swap1\n      dup2\n      iszero\n      tag_156\n      jumpi\n      pop\n      0x01\n      eq\n      tag_158\n      jumpi\n    tag_159:\n      tag_160\n      dup7\n      dup7\n      tag_161\n      dup3\n      dup12\n      sub\n      dup4\n      tag_7\n      jump\t// in\n    tag_161:\n      mload\n      swap2\n      dup3\n      swap2\n      0x20\n      dup4\n      mstore\n      0x20\n      dup4\n      add\n      swap1\n      tag_1\n      jump\t// in\n    tag_160:\n      sub\n      swap1\n      return\n    tag_158:\n      dup2\n      mstore\n      swap5\n      pop\n      0x8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b\n    tag_162:\n      dup3\n      dup7\n      lt\n      tag_163\n      jumpi\n      pop\n      pop\n      pop\n      tag_161\n      dup3\n      0x20\n      tag_160\n      swap6\n      dup3\n      add\n      add\n      swap5\n      codesize\n      jump(tag_159)\n    tag_163:\n      dup1\n      sload\n      0x20\n      dup8\n      dup8\n      add\n      dup2\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      swap1\n      swap6\n      add\n      swap5\n      dup2\n      add\n      jump(tag_162)\n    tag_156:\n      swap1\n      pop\n      tag_160\n      swap8\n      pop\n      dup7\n      swap4\n      pop\n      0x20\n      swap3\n      pop\n      tag_161\n      swap5\n      swap2\n      pop\n      not(0xff)\n      and\n      dup3\n      dup5\n      add\n      mstore\n      iszero\n      iszero\n      0x05\n      shl\n      dup3\n      add\n      add\n      swap5\n      codesize\n      jump(tag_159)\n    tag_53:\n      pop\n      pop\n      jumpi(tag_85, callvalue)\n      dup2\n      add(calldatasize, not(0x03))\n      slt\n      tag_85\n      jumpi\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1273:1279  _owner */\n      0x09\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      sload\n      swap1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      swap2\n      and\n      dup2\n      mstore\n      0x20\n      swap1\n      return\n    tag_51:\n      pop\n      pop\n      jumpi(tag_85, callvalue)\n      jumpi(tag_85, slt(add(not(0x03), calldatasize), 0x20))\n      tag_173\n      tag_2\n      jump\t// in\n    tag_173:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1063:1125  modifier onlyOwner() {... */\n      tag_174\n      tag_4\n      jump\t// in\n    tag_174:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      and\n      dup1\n      dup4\n      mstore\n        /* \"contracts/TurtleToken.sol\":4145:4166  _whitelistedAddresses */\n      0x0c\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      0x20\n      mstore\n      swap1\n      dup3\n      keccak256\n      dup1\n      sload\n      not(0xff)\n      and\n      swap1\n      sstore\n        /* \"contracts/TurtleToken.sol\":4199:4228  RemovedFromWhitelist(account) */\n      0xcdd2e9b91a56913d370075169cefa1602ba36be5301664f752192bb1709df757\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      dup3\n      dup1\n        /* \"contracts/TurtleToken.sol\":4199:4228  RemovedFromWhitelist(account) */\n      log2\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      dup1\n      return\n    tag_49:\n      pop\n      swap1\n      jumpi(tag_77, callvalue)\n      dup3\n      add(calldatasize, not(0x03))\n      slt\n      tag_77\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5427:5468  _name.toStringWithFallback(_nameFallback) */\n      tag_179\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5427:5432  _name */\n      immutable(\"0x7a38a174eebb1f86834bf225201f689ede6a415ca1c953bc89a575c33de6a4cb\")\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5427:5468  _name.toStringWithFallback(_nameFallback) */\n      tag_13\n      jump\t// in\n    tag_179:\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5482:5490  _version */\n      swap3\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5482:5529  _version.toStringWithFallback(_versionFallback) */\n      tag_180\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5482:5490  _version */\n      immutable(\"0xdc87b691b0302dee626bda07b9e9b084f7d5765b17a541a71826cc6c7a8bcd5b\")\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5482:5529  _version.toStringWithFallback(_versionFallback) */\n      tag_14\n      jump\t// in\n    tag_180:\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      swap1\n      dup3\n      mload\n      swap3\n      0x20\n      swap3\n      dup4\n      dup6\n      add\n      swap6\n      dup6\n      dup8\n      lt\n      0xffffffffffffffff\n      dup9\n      gt\n      or\n      tag_181\n      jumpi\n      pop\n      swap3\n      dup1\n      tag_183\n      dup4\n      dup9\n      swap7\n      tag_184\n      swap10\n      dup12\n      swap10\n      swap7\n      mstore\n      dup7\n      dup7\n      mstore\n      dup2\n      mload\n      swap10\n      dup11\n      swap10\n      shl(0xf8, 0x0f)\n      dup12\n      mstore\n      0xe0\n      dup7\n      dup13\n      add\n      mstore\n      0xe0\n      dup12\n      add\n      swap1\n      tag_1\n      jump\t// in\n    tag_184:\n      swap2\n      dup10\n      dup4\n      sub\n      swap1\n      dup11\n      add\n      mstore\n      tag_1\n      jump\t// in\n    tag_183:\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5543:5556  block.chainid */\n      swap3\n      chainid\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      0x60\n      dup9\n      add\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5578:5582  this */\n      address\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      0x80\n      dup9\n      add\n      mstore\n      dup5\n      0xa0\n      dup9\n      add\n      mstore\n      dup7\n      dup5\n      sub\n      0xc0\n      dup9\n      add\n      mstore\n      mload\n      swap3\n      dup4\n      dup2\n      mstore\n      add\n      swap4\n      swap3\n    tag_185:\n      dup3\n      dup2\n      lt\n      tag_186\n      jumpi\n      pop\n      pop\n      pop\n      pop\n      sub\n      swap1\n      return\n    tag_186:\n      dup4\n      mload\n      dup6\n      mstore\n      dup7\n      swap6\n      pop\n      swap4\n      dup2\n      add\n      swap4\n      swap3\n      dup2\n      add\n      swap3\n      0x01\n      add\n      jump(tag_185)\n    tag_181:\n      shl(0xe0, 0x4e487b71)\n      dup5\n      mstore\n      0x41\n      swap1\n      mstore\n      0x24\n      dup4\n      revert\n    tag_47:\n      pop\n      pop\n      jumpi(tag_85, callvalue)\n      jumpi(tag_85, slt(add(not(0x03), calldatasize), 0x20))\n      0x20\n      swap2\n      dup2\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      tag_192\n      tag_2\n      jump\t// in\n    tag_192:\n      and\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2698:2705  _nonces */\n      0x07\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      dup5\n      mstore\n      keccak256\n      sload\n      swap1\n      mload\n      swap1\n      dup2\n      mstore\n      return\n    tag_45:\n      dup4\n      jumpi(tag_136, callvalue)\n      dup1\n      add(calldatasize, not(0x03))\n      slt\n      tag_136\n      jumpi\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1063:1125  modifier onlyOwner() {... */\n      tag_197\n      tag_4\n      jump\t// in\n    tag_197:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2518:2524  _owner */\n      0x09\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      dup2\n      and\n      swap1\n      swap2\n      sstore\n      dup2\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2566:2606  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      dup3\n      dup1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2566:2606  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      dup1\n      return\n    tag_43:\n      pop\n      pop\n      jumpi(tag_85, callvalue)\n      jumpi(tag_85, slt(add(not(0x03), calldatasize), 0x20))\n      0x20\n      swap2\n      dup2\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      tag_202\n      tag_2\n      jump\t// in\n    tag_202:\n      and\n      dup2\n      mstore\n      dup1\n      dup5\n      mstore\n      keccak256\n      sload\n      swap1\n      mload\n      swap1\n      dup2\n      mstore\n      return\n    tag_41:\n      pop\n      jumpi(tag_77, callvalue)\n      0x20\n      swap2\n      dup3\n      add(calldatasize, not(0x03))\n      slt\n      tag_205\n      jumpi\n      dup2\n      calldataload\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2227:2330  modifier nonReentrant() {... */\n      swap2\n      tag_207\n      tag_15\n      jump\t// in\n    tag_207:\n        /* \"contracts/TurtleToken.sol\":2374:2389  tokenAmount > 0 */\n      dup3\n      iszero\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      tag_208\n      jumpi\n        /* \"contracts/TurtleToken.sol\":2460:2470  msg.sender */\n      caller\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      dup6\n      mstore\n      dup5\n      dup5\n      mstore\n      dup3\n      dup3\n      dup7\n      keccak256\n      sload\n        /* \"contracts/TurtleToken.sol\":2450:2486  balanceOf(msg.sender) >= tokenAmount */\n      lt\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      tag_210\n      jumpi\n        /* \"contracts/TurtleToken.sol\":2632:2636  1e18 */\n      0x0de0b6b3a7640000\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      dup4\n      mul\n      not(0x0de0b6b3a763ffff)\n      dup5\n      dup3\n      div\n      add\n      tag_212\n      jumpi\n        /* \"contracts/TurtleToken.sol\":2640:2652  exchangeRate */\n      0x0b\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      sload\n      swap1\n      dup2\n      iszero\n      tag_214\n      jumpi\n      div\n        /* \"contracts/TurtleToken.sol\":2671:2692  address(this).balance */\n      swap1\n      dup2\n      selfbalance\n        /* \"contracts/TurtleToken.sol\":2671:2705  address(this).balance >= ethAmount */\n      lt\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      tag_216\n      jumpi\n        /* \"contracts/TurtleToken.sol\":2679:2683  this */\n      pop\n        /* \"contracts/TurtleToken.sol\":2824:2835  tokenAmount */\n      tag_218\n        /* \"contracts/TurtleToken.sol\":2679:2683  this */\n      dup4\n      address\n        /* \"contracts/TurtleToken.sol\":2460:2470  msg.sender */\n      caller\n        /* \"contracts/TurtleToken.sol\":2824:2835  tokenAmount */\n      tag_16\n      jump\t// in\n    tag_218:\n        /* \"contracts/TurtleToken.sol\":2872:2911  payable(msg.sender).transfer(ethAmount) */\n      dup5\n      dup1\n      dup3\n      dup1\n      iszero\n      tag_219\n      jumpi\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n    tag_220:\n        /* \"contracts/TurtleToken.sol\":2460:2470  msg.sender */\n      dup3\n      dup1\n      swap3\n      swap2\n      dup2\n      swap3\n      caller\n        /* \"contracts/TurtleToken.sol\":2872:2911  payable(msg.sender).transfer(ethAmount) */\n      swap1\n      call\n      iszero\n      tag_221\n      jumpi\n        /* \"contracts/TurtleToken.sol\":2960:3006  TokensSold(msg.sender, tokenAmount, ethAmount) */\n      0x2dcf9433d75db0d8b1c172641f85e319ffe4ad22e108a95d1847ceb906e5195d\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      swap3\n      swap4\n      dup3\n      mload\n      swap5\n      dup6\n      mstore\n      dup5\n      add\n      mstore\n        /* \"contracts/TurtleToken.sol\":2460:2470  msg.sender */\n      caller\n        /* \"contracts/TurtleToken.sol\":2960:3006  TokensSold(msg.sender, tokenAmount, ethAmount) */\n      swap3\n      log2\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      0x01\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2809:2831  _status = _NOT_ENTERED */\n      0x0a\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      sstore\n      dup1\n      return\n        /* \"contracts/TurtleToken.sol\":2872:2911  payable(msg.sender).transfer(ethAmount) */\n    tag_221:\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      dup2\n      mload\n      returndatasize\n      dup7\n      dup3\n      returndatacopy\n      returndatasize\n      swap1\n      revert\n        /* \"contracts/TurtleToken.sol\":2872:2911  payable(msg.sender).transfer(ethAmount) */\n    tag_219:\n      0x08fc\n      swap2\n      pop\n      jump(tag_220)\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n    tag_216:\n      dup3\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      swap1\n      dup2\n      add\n      dup6\n      swap1\n      mstore\n      0x24\n      dup1\n      dup3\n      add\n      mstore\n      0x496e73756666696369656e74204554482062616c616e636520696e20636f6e74\n      0x44\n      dup3\n      add\n      mstore\n      shl(0xe2, 0x1c9858dd)\n      0x64\n      dup3\n      add\n      mstore\n      0x84\n      swap1\n      revert\n    tag_214:\n      shl(0xe0, 0x4e487b71)\n      dup8\n      mstore\n      0x12\n      dup4\n      mstore\n      0x24\n      dup8\n      revert\n    tag_212:\n      shl(0xe0, 0x4e487b71)\n      dup7\n      mstore\n      0x11\n      dup3\n      mstore\n      0x24\n      dup7\n      revert\n    tag_210:\n      dup4\n      0x64\n      swap3\n      mload\n      swap2\n      shl(0xe5, 0x461bcd)\n      dup4\n      mstore\n      dup3\n      add\n      mstore\n      0x1a\n      0x24\n      dup3\n      add\n      mstore\n      0x496e73756666696369656e7420746f6b656e2062616c616e6365000000000000\n      0x44\n      dup3\n      add\n      mstore\n      revert\n    tag_208:\n      dup4\n      0x84\n      swap3\n      mload\n      swap2\n      shl(0xe5, 0x461bcd)\n      dup4\n      mstore\n      dup3\n      add\n      mstore\n      0x25\n      0x24\n      dup3\n      add\n      mstore\n      0x4d7573742073656c6c206120706f73697469766520616d6f756e74206f662074\n      0x44\n      dup3\n      add\n      mstore\n      shl(0xd8, 0x6f6b656e73)\n      0x64\n      dup3\n      add\n      mstore\n      revert\n    tag_205:\n      dup4\n      dup1\n      revert\n    tag_39:\n      pop\n      pop\n      jumpi(tag_85, callvalue)\n      jumpi(tag_85, slt(add(not(0x03), calldatasize), 0x20))\n      0x20\n      swap2\n      0xff\n      swap1\n      dup3\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      tag_227\n      tag_2\n      jump\t// in\n    tag_227:\n      and\n      dup2\n      mstore\n        /* \"contracts/TurtleToken.sol\":4386:4407  _whitelistedAddresses */\n      0x0c\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      dup6\n      mstore\n      keccak256\n      sload\n      and\n      swap1\n      mload\n      swap1\n      iszero\n      iszero\n      dup2\n      mstore\n      return\n    tag_37:\n      pop\n      swap1\n      jumpi(tag_77, callvalue)\n      dup1\n      add(calldatasize, not(0x03))\n      slt\n      tag_77\n      jumpi\n      tag_232\n      tag_2\n      jump\t// in\n    tag_232:\n      swap1\n      calldataload(0x24)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1063:1125  modifier onlyOwner() {... */\n      swap2\n      tag_233\n      tag_4\n      jump\t// in\n    tag_233:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      and\n      swap3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8603:8624  account != address(0) */\n      dup4\n      iszero\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      tag_234\n      jumpi\n      pop\n      0x20\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8952:8989  Transfer(address(0), account, amount) */\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      swap3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8731:8753  _totalSupply += amount */\n      tag_236\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      dup8\n      swap6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8731:8753  _totalSupply += amount */\n      0x02\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8731:8753  _totalSupply += amount */\n      tag_8\n      jump\t// in\n    tag_236:\n      0x02\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      sstore\n      dup6\n      dup6\n      mstore\n      dup5\n      dup4\n      mstore\n      dup1\n      dup6\n      keccak256\n      dup3\n      dup2\n      sload\n      add\n      swap1\n      sstore\n      mload\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8952:8989  Transfer(address(0), account, amount) */\n      log3\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      dup1\n      return\n    tag_234:\n      0x20\n      0x64\n      swap3\n      mload\n      swap2\n      shl(0xe5, 0x461bcd)\n      dup4\n      mstore\n      dup3\n      add\n      mstore\n      0x1f\n      0x24\n      dup3\n      add\n      mstore\n      0x45524332303a206d696e7420746f20746865207a65726f206164647265737300\n      0x44\n      dup3\n      add\n      mstore\n      revert\n    tag_35:\n      pop\n      pop\n      jumpi(tag_85, callvalue)\n      dup2\n      add(calldatasize, not(0x03))\n      slt\n      tag_85\n      jumpi\n      0x20\n      swap1\n        /* \"contracts/TurtleToken.sol\":451:478  uint256 public exchangeRate */\n      0x0b\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      sload\n      swap1\n      mload\n      swap1\n      dup2\n      mstore\n      return\n    tag_33:\n      pop\n      pop\n      jumpi(tag_85, callvalue)\n      dup1\n      add(calldatasize, not(0x03))\n      slt\n      tag_85\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6021:6059  allowance(owner, spender) + addedValue */\n      tag_141\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      0x20\n      swap3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6021:6059  allowance(owner, spender) + addedValue */\n      tag_246\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      tag_247\n      tag_2\n      jump\t// in\n    tag_247:\n        /* \"@openzeppelin/contracts/utils/Context.sol\":734:744  msg.sender */\n      caller\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      dup4\n      mstore\n      0x01\n      dup7\n      mstore\n      dup5\n      dup4\n      keccak256\n      sub(shl(0xa0, 0x01), 0x01)\n      dup3\n      and\n      dup5\n      mstore\n      dup7\n      mstore\n      swap2\n      dup5\n      swap1\n      keccak256\n      sload\n      calldataload(0x24)\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6021:6059  allowance(owner, spender) + addedValue */\n      tag_8\n      jump\t// in\n    tag_246:\n        /* \"@openzeppelin/contracts/utils/Context.sol\":734:744  msg.sender */\n      swap1\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6021:6059  allowance(owner, spender) + addedValue */\n      tag_9\n      jump\t// in\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n    tag_31:\n      pop\n      pop\n      jumpi(tag_85, callvalue)\n      dup2\n      add(calldatasize, not(0x03))\n      slt\n      tag_85\n      jumpi\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2922:2942  _domainSeparatorV4() */\n      swap1\n      tag_252\n      tag_12\n      jump\t// in\n    tag_252:\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      swap1\n      mload\n      swap1\n      dup2\n      mstore\n      return\n    tag_29:\n      pop\n      pop\n      jumpi(tag_85, callvalue)\n      dup2\n      add(calldatasize, not(0x03))\n      slt\n      tag_85\n      jumpi\n      0x20\n      swap1\n      mload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3186:3188  18 */\n      0x12\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      dup2\n      mstore\n      return\n    tag_27:\n      pop\n      pop\n      jumpi(tag_85, callvalue)\n      jumpi(tag_85, slt(add(not(0x03), calldatasize), 0x60))\n      0x20\n      swap1\n      tag_132\n      tag_262\n      tag_2\n      jump\t// in\n    tag_262:\n      tag_263\n      tag_3\n      jump\t// in\n    tag_263:\n      calldataload(0x44)\n      swap2\n      tag_18\n      jump\t// in\n    tag_25:\n      pop\n      pop\n      jumpi(tag_85, callvalue)\n      dup2\n      add(calldatasize, not(0x03))\n      slt\n      tag_85\n      jumpi\n      0x20\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3342:3354  _totalSupply */\n      0x02\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      sload\n      swap1\n      mload\n      swap1\n      dup2\n      mstore\n      return\n    tag_23:\n      pop\n      pop\n      jumpi(tag_85, callvalue)\n      dup1\n      add(calldatasize, not(0x03))\n      slt\n      tag_85\n      jumpi\n      0x20\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4606:4612  amount */\n      tag_141\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      tag_273\n      tag_2\n      jump\t// in\n    tag_273:\n      calldataload(0x24)\n        /* \"@openzeppelin/contracts/utils/Context.sol\":734:744  msg.sender */\n      swap1\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4606:4612  amount */\n      tag_9\n      jump\t// in\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n    tag_21:\n      dup5\n      swap1\n      dup5\n      jumpi(tag_77, callvalue)\n      dup3\n      add(calldatasize, not(0x03))\n      slt\n      tag_77\n      jumpi\n      dup3\n      sload(0x03)\n      tag_278\n      dup2\n      tag_5\n      jump\t// in\n    tag_278:\n      dup1\n      dup6\n      mstore\n      swap2\n      0x01\n      swap2\n      dup1\n      dup4\n      and\n      swap1\n      dup2\n      iszero\n      tag_279\n      jumpi\n      pop\n      0x01\n      eq\n      tag_281\n      jumpi\n    tag_282:\n      pop\n      pop\n      pop\n      tag_161\n      dup3\n      tag_160\n      swap5\n      sub\n      dup4\n      tag_7\n      jump\t// in\n    tag_281:\n      swap5\n      pop\n      0x03\n      dup6\n      mstore\n      0xc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b\n    tag_285:\n      dup3\n      dup7\n      lt\n      tag_286\n      jumpi\n      pop\n      pop\n      pop\n      tag_161\n      dup3\n      0x20\n      tag_160\n      swap6\n      dup3\n      add\n      add\n      swap5\n      jump(tag_282)\n    tag_286:\n      dup1\n      sload\n      0x20\n      dup8\n      dup8\n      add\n      dup2\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      swap1\n      swap6\n      add\n      swap5\n      dup2\n      add\n      jump(tag_285)\n    tag_279:\n      tag_160\n      swap8\n      pop\n      dup7\n      swap4\n      pop\n      0x20\n      swap3\n      pop\n      tag_161\n      swap5\n      swap2\n      pop\n      not(0xff)\n      and\n      dup3\n      dup5\n      add\n      mstore\n      iszero\n      iszero\n      0x05\n      shl\n      dup3\n      add\n      add\n      swap5\n      jump(tag_282)\n    tag_1:\n      swap2\n      swap1\n      dup3\n      mload\n      swap3\n      dup4\n      dup3\n      mstore\n      0x00\n    tag_288:\n      dup5\n      dup2\n      lt\n      tag_289\n      jumpi\n      pop\n      pop\n      dup3\n      0x00\n      0x20\n      dup1\n      swap5\n      swap6\n      dup5\n      add\n      add\n      mstore\n      0x1f\n      dup1\n      not\n      swap2\n      add\n      and\n      add\n      add\n      swap1\n      jump\t// out\n    tag_289:\n      0x20\n      dup2\n      dup4\n      add\n      dup2\n      add\n      mload\n      dup5\n      dup4\n      add\n      dup3\n      add\n      mstore\n      add\n      jump(tag_288)\n    tag_2:\n      calldataload(0x04)\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      dup3\n      and\n      dup3\n      sub\n      tag_291\n      jumpi\n      jump\t// out\n    tag_291:\n      0x00\n      dup1\n      revert\n    tag_3:\n      calldataload(0x24)\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      dup3\n      and\n      dup3\n      sub\n      tag_291\n      jumpi\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1359:1489  function _checkOwner() internal view virtual {... */\n    tag_4:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1273:1279  _owner */\n      0x09\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"@openzeppelin/contracts/utils/Context.sol\":734:744  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1422:1445  owner() == _msgSender() */\n      sub\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      tag_295\n      jumpi\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1359:1489  function _checkOwner() internal view virtual {... */\n      jump\t// out\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n    tag_295:\n      0x64\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x20\n      0x24\n      dup3\n      add\n      mstore\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n      0x44\n      dup3\n      add\n      mstore\n      revert\n    tag_5:\n      swap1\n      0x01\n      dup3\n      dup2\n      shr\n      swap3\n      and\n      dup1\n      iszero\n      tag_297\n      jumpi\n    tag_298:\n      0x20\n      dup4\n      lt\n      eq\n      tag_299\n      jumpi\n      jump\t// out\n    tag_299:\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x22)\n      revert(0x00, 0x24)\n    tag_297:\n      swap2\n      0x7f\n      and\n      swap2\n      jump(tag_298)\n    tag_6:\n      0x40\n      dup2\n      add\n      swap1\n      dup2\n      lt\n      0xffffffffffffffff\n      dup3\n      gt\n      or\n      tag_301\n      jumpi\n      0x40\n      mstore\n      jump\t// out\n    tag_301:\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x41)\n      revert(0x00, 0x24)\n    tag_7:\n      swap1\n      0x1f\n      dup1\n      not\n      swap2\n      add\n      and\n      dup2\n      add\n      swap1\n      dup2\n      lt\n      0xffffffffffffffff\n      dup3\n      gt\n      or\n      tag_301\n      jumpi\n      0x40\n      mstore\n      jump\t// out\n    tag_8:\n      swap2\n      swap1\n      dup3\n      add\n      dup1\n      swap3\n      gt\n      tag_305\n      jumpi\n      jump\t// out\n    tag_305:\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x11)\n      revert(0x00, 0x24)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10457:10797  function _approve(address owner, address spender, uint256 amount) internal virtual {... */\n    tag_9:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      swap1\n      dup2\n      and\n      swap2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10558:10577  owner != address(0) */\n      dup3\n      iszero\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      tag_307\n      jumpi\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10636:10657  spender != address(0) */\n      swap2\n      dup3\n      iszero\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      tag_309\n      jumpi\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10758:10790  Approval(owner, spender, amount) */\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      swap2\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10575:10576  0 */\n      0x00\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      mstore\n      0x01\n      dup3\n      mstore\n      0x40\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10575:10576  0 */\n      0x00\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      keccak256\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10575:10576  0 */\n      0x00\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      mstore\n      dup3\n      mstore\n      dup1\n      0x40\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10575:10576  0 */\n      0x00\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      keccak256\n      sstore\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10758:10790  Approval(owner, spender, amount) */\n      log3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10457:10797  function _approve(address owner, address spender, uint256 amount) internal virtual {... */\n      jump\t// out\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n    tag_309:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x22\n      0x24\n      dup3\n      add\n      mstore\n      0x45524332303a20617070726f766520746f20746865207a65726f206164647265\n      0x44\n      dup3\n      add\n      mstore\n      shl(0xf0, 0x7373)\n      0x64\n      dup3\n      add\n      mstore\n      0x84\n      swap1\n      revert\n    tag_307:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x24\n      dup1\n      dup3\n      add\n      mstore\n      0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464\n      0x44\n      dup3\n      add\n      mstore\n      shl(0xe0, 0x72657373)\n      0x64\n      dup3\n      add\n      mstore\n      0x84\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":570:1081  function _throwError(RecoverError error) private pure {... */\n    tag_10:\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      0x05\n      dup2\n      lt\n      iszero\n      tag_311\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":638:667  error == RecoverError.NoError */\n      dup1\n      tag_313\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":683:690  return; */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":634:1075  if (error == RecoverError.NoError) {... */\n    tag_313:\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      0x01\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":734:772  error == RecoverError.InvalidSignature */\n      dup2\n      sub\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      tag_315\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":788:822  revert(\"ECDSA: invalid signature\") */\n      dup2\n      mstore\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      0x20\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":788:822  revert(\"ECDSA: invalid signature\") */\n      0x04\n      dup3\n      add\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      mstore\n      0x18\n      0x24\n      dup3\n      add\n      mstore\n      0x45434453413a20696e76616c6964207369676e61747572650000000000000000\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":788:822  revert(\"ECDSA: invalid signature\") */\n      revert\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":730:1075  if (error == RecoverError.InvalidSignature) {... */\n    tag_315:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":852:887  RecoverError.InvalidSignatureLength */\n      0x02\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":843:887  error == RecoverError.InvalidSignatureLength */\n      dup2\n      sub\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":852:887  RecoverError.InvalidSignatureLength */\n      tag_317\n      jumpi\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":903:944  revert(\"ECDSA: invalid signature length\") */\n      dup2\n      mstore\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      0x20\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":903:944  revert(\"ECDSA: invalid signature length\") */\n      0x04\n      dup3\n      add\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      mstore\n      0x1f\n      0x24\n      dup3\n      add\n      mstore\n      0x45434453413a20696e76616c6964207369676e6174757265206c656e67746800\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":903:944  revert(\"ECDSA: invalid signature length\") */\n      revert\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":839:1075  if (error == RecoverError.InvalidSignatureLength) {... */\n    tag_317:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":974:1004  RecoverError.InvalidSignatureS */\n      0x03\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":965:1004  error == RecoverError.InvalidSignatureS */\n      eq\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":961:1075  if (error == RecoverError.InvalidSignatureS) {... */\n      tag_319\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":570:1081  function _throwError(RecoverError error) private pure {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":961:1075  if (error == RecoverError.InvalidSignatureS) {... */\n    tag_319:\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":1020:1064  revert(\"ECDSA: invalid signature 's' value\") */\n      dup2\n      mstore\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      0x20\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":1020:1064  revert(\"ECDSA: invalid signature 's' value\") */\n      0x04\n      dup3\n      add\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      mstore\n      0x22\n      0x24\n      dup3\n      add\n      mstore\n      0x45434453413a20696e76616c6964207369676e6174757265202773272076616c\n      0x44\n      dup3\n      add\n      mstore\n      shl(0xf0, 0x7565)\n      0x64\n      dup3\n      add\n      mstore\n      0x84\n      swap1\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":1020:1064  revert(\"ECDSA: invalid signature 's' value\") */\n      revert\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n    tag_311:\n      shl(0xe0, 0x4e487b71)\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":647:667  RecoverError.NoError */\n      0x00\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      mstore\n      mstore(0x04, 0x21)\n      0x24\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":647:667  RecoverError.NoError */\n      0x00\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      revert\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":5009:6465  function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {... */\n    tag_11:\n      swap3\n      swap2\n      swap1\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6021:6087  0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 */\n      0x7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6008:6087  uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 */\n      dup4\n      gt\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6004:6165  if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {... */\n      tag_321\n      jumpi\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      swap2\n      0x80\n      swap5\n      swap4\n      swap2\n      0xff\n      0x20\n      swap5\n      mload(0x40)\n      swap5\n      dup6\n      mstore\n      and\n      dup5\n      dup5\n      add\n      mstore\n      0x40\n      dup4\n      add\n      mstore\n      0x60\n      dup3\n      add\n      mstore\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6276:6300  ecrecover(hash, v, r, s) */\n      swap4\n      dup5\n      swap2\n      dup3\n      dup1\n      mstore\n      0x01\n      gas\n      staticcall\n      iszero\n      tag_323\n      jumpi\n      dup2\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      dup2\n      and\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6314:6334  signer == address(0) */\n      iszero\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6310:6411  if (signer == address(0)) {... */\n      tag_325\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6421:6458  return (signer, RecoverError.NoError) */\n      swap2\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":5009:6465  function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6310:6411  if (signer == address(0)) {... */\n    tag_325:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6350:6400  return (address(0), RecoverError.InvalidSignature) */\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6276:6300  ecrecover(hash, v, r, s) */\n      0x01\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6350:6400  return (address(0), RecoverError.InvalidSignature) */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6276:6300  ecrecover(hash, v, r, s) */\n    tag_323:\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      pop\n      mload(0x40)\n      swap1\n      returndatasize\n      swap1\n      dup3\n      returndatacopy\n      returndatasize\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6004:6165  if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {... */\n    tag_321:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6103:6154  return (address(0), RecoverError.InvalidSignatureS) */\n      pop\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6119:6120  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6103:6154  return (address(0), RecoverError.InvalidSignatureS) */\n      swap1\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6123:6153  RecoverError.InvalidSignatureS */\n      0x03\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6103:6154  return (address(0), RecoverError.InvalidSignatureS) */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3695:3957  function _domainSeparatorV4() internal view returns (bytes32) {... */\n    tag_12:\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3779:3783  this */\n      address\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3788:3799  _cachedThis */\n      immutable(\"0x9dbc59cf760654cbb54c8c8e8fbeeb152c7086292e67226dcddb69fe39a9af87\")\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      and\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3771:3799  address(this) == _cachedThis */\n      eq\n      dup1\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3771:3834  address(this) == _cachedThis && block.chainid == _cachedChainId */\n      tag_327\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3695:3957  function _domainSeparatorV4() internal view returns (bytes32) {... */\n    tag_328:\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3767:3951  if (address(this) == _cachedThis && block.chainid == _cachedChainId) {... */\n      iszero\n      tag_329\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3857:3879  _cachedDomainSeparator */\n      immutable(\"0x012378de473e8af4c1b5f2b38fe3160a667a811e25292d66657982eb23b09365\")\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3850:3879  return _cachedDomainSeparator */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3767:3951  if (address(this) == _cachedThis && block.chainid == _cachedChainId) {... */\n    tag_329:\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      mload(0x40)\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4054:4135  abi.encode(_TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)) */\n      0x20\n      dup2\n      add\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      swap1\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":1929:2024  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n      0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      dup3\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4077:4088  _hashedName */\n      immutable(\"0x8d2c1cf9e1a710c789a96e9ed6f7d45944710e11a78d6197d48655903a3df0af\")\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      0x40\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":1929:2024  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n      dup3\n      add\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4090:4104  _hashedVersion */\n      immutable(\"0xc9be7da8bed12c69017945c7fabae6d76cd58eb576cc6b3754054c2443fb3440\")\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":1929:2024  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n      0x60\n      dup3\n      add\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4106:4119  block.chainid */\n      chainid\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":1929:2024  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n      0x80\n      dup3\n      add\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3779:3783  this */\n      address\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      0xa0\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":1929:2024  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n      dup3\n      add\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      mstore\n      0xa0\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4054:4135  abi.encode(_TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)) */\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":1929:2024  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n      0xc0\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      dup2\n      add\n      dup2\n      dup2\n      lt\n      0xffffffffffffffff\n      dup3\n      gt\n      or\n      tag_301\n      jumpi\n      0x40\n      mstore\n      mload\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4044:4136  keccak256(abi.encode(_TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this))) */\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3910:3940  return _buildDomainSeparator() */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3771:3834  address(this) == _cachedThis && block.chainid == _cachedChainId */\n    tag_327:\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3820:3834  _cachedChainId */\n      pop\n      immutable(\"0x13b763bf6b59a7fee48470152d81998b3fdcef659072f88f6bff0c642b50f9fe\")\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3803:3816  block.chainid */\n      chainid\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3803:3834  block.chainid == _cachedChainId */\n      eq\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3771:3834  address(this) == _cachedThis && block.chainid == _cachedChainId */\n      jump(tag_328)\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3367:3635  function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {... */\n    tag_13:\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1371:1437  0x00000000000000000000000000000000000000000000000000000000000000FF */\n      0xff\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3490:3537  ShortString.unwrap(value) != _FALLBACK_SENTINEL */\n      dup2\n      eq\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1371:1437  0x00000000000000000000000000000000000000000000000000000000000000FF */\n      tag_333\n      jumpi\n      0xff\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2633:2673  uint256(ShortString.unwrap(sstr)) & 0xFF */\n      dup2\n      and\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2687:2698  result > 31 */\n      swap1\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2696:2698  31 */\n      0x1f\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2687:2698  result > 31 */\n      dup3\n      gt\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2683:2752  if (result > 31) {... */\n      tag_335\n      jumpi\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      mload(0x40)\n      swap2\n      tag_337\n      dup4\n      tag_6\n      jump\t// in\n    tag_337:\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2348:2438  assembly {... */\n      dup3\n      mstore\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2292:2294  32 */\n      0x20\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      dup3\n      add\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2348:2438  assembly {... */\n      mstore\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3553:3575  return toString(value) */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2683:2752  if (result > 31) {... */\n    tag_335:\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      mload(0x40)\n      shl(0xe2, 0x2cd44ac3)\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2721:2741  InvalidShortString() */\n      dup2\n      mstore\n      0x04\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3486:3629  if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {... */\n    tag_333:\n      pop\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      mload(0x40)\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5454:5467  _nameFallback */\n      0x05\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      sload\n      dup2\n      0x00\n      tag_338\n      dup4\n      tag_5\n      jump\t// in\n    tag_338:\n      dup1\n      dup4\n      mstore\n      swap3\n      0x01\n      swap1\n      dup2\n      dup2\n      and\n      swap1\n      dup2\n      iszero\n      tag_339\n      jumpi\n      pop\n      0x01\n      eq\n      tag_341\n      jumpi\n    tag_342:\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1371:1437  0x00000000000000000000000000000000000000000000000000000000000000FF */\n      pop\n      tag_343\n      swap3\n      pop\n      sub\n      dup3\n      tag_7\n      jump\t// in\n    tag_343:\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3606:3618  return store */\n      swap1\n      jump\t// out\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n    tag_341:\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5454:5467  _nameFallback */\n      0x05\n      0x00\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      swap1\n      dup2\n      mstore\n      swap2\n      pop\n      0x036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0\n    tag_344:\n      dup5\n      dup4\n      lt\n      tag_345\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1371:1437  0x00000000000000000000000000000000000000000000000000000000000000FF */\n      tag_343\n      swap4\n      pop\n      pop\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      dup2\n      add\n      0x20\n      add\n      codesize\n      jump(tag_342)\n    tag_345:\n      dup2\n      swap4\n      pop\n      swap1\n      dup2\n      0x20\n      swap3\n      sload\n      dup4\n      dup6\n      dup10\n      add\n      add\n      mstore\n      add\n      swap2\n      add\n      swap1\n      swap2\n      dup5\n      swap3\n      jump(tag_344)\n    tag_339:\n      swap1\n      pop\n      0x20\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1371:1437  0x00000000000000000000000000000000000000000000000000000000000000FF */\n      tag_343\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      swap5\n      swap2\n      pop\n      not(0xff)\n      and\n      dup3\n      dup5\n      add\n      mstore\n      iszero\n      iszero\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5454:5467  _nameFallback */\n      0x05\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      shl\n      dup3\n      add\n      add\n      codesize\n      jump(tag_342)\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3367:3635  function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {... */\n    tag_14:\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1371:1437  0x00000000000000000000000000000000000000000000000000000000000000FF */\n      0xff\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3490:3537  ShortString.unwrap(value) != _FALLBACK_SENTINEL */\n      dup2\n      eq\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1371:1437  0x00000000000000000000000000000000000000000000000000000000000000FF */\n      tag_347\n      jumpi\n      0xff\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2633:2673  uint256(ShortString.unwrap(sstr)) & 0xFF */\n      dup2\n      and\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2687:2698  result > 31 */\n      swap1\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2696:2698  31 */\n      0x1f\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2687:2698  result > 31 */\n      dup3\n      gt\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2683:2752  if (result > 31) {... */\n      tag_335\n      jumpi\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      mload(0x40)\n      swap2\n      tag_337\n      dup4\n      tag_6\n      jump\t// in\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3486:3629  if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {... */\n    tag_347:\n      pop\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      mload(0x40)\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5512:5528  _versionFallback */\n      0x06\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      sload\n      dup2\n      0x00\n      tag_352\n      dup4\n      tag_5\n      jump\t// in\n    tag_352:\n      dup1\n      dup4\n      mstore\n      swap3\n      0x01\n      swap1\n      dup2\n      dup2\n      and\n      swap1\n      dup2\n      iszero\n      tag_339\n      jumpi\n      pop\n      0x01\n      eq\n      tag_355\n      jumpi\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1371:1437  0x00000000000000000000000000000000000000000000000000000000000000FF */\n      pop\n      tag_343\n      swap3\n      pop\n      sub\n      dup3\n      tag_7\n      jump\t// in\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n    tag_355:\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5512:5528  _versionFallback */\n      0x06\n      0x00\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      swap1\n      dup2\n      mstore\n      swap2\n      pop\n      0xf652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f\n    tag_358:\n      dup5\n      dup4\n      lt\n      tag_359\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1371:1437  0x00000000000000000000000000000000000000000000000000000000000000FF */\n      tag_343\n      swap4\n      pop\n      pop\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      dup2\n      add\n      0x20\n      add\n      codesize\n      jump(tag_342)\n    tag_359:\n      dup2\n      swap4\n      pop\n      swap1\n      dup2\n      0x20\n      swap3\n      sload\n      dup4\n      dup6\n      dup10\n      add\n      add\n      mstore\n      add\n      swap2\n      add\n      swap1\n      swap2\n      dup5\n      swap3\n      jump(tag_358)\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2336:2623  function _nonReentrantBefore() private {... */\n    tag_15:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2468:2475  _status */\n      0x0a\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      sload\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2468:2487  _status != _ENTERED */\n      eq\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      tag_361\n      jumpi\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2468:2475  _status */\n      0x0a\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      sstore\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2336:2623  function _nonReentrantBefore() private {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n    tag_361:\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x1f\n      0x24\n      dup3\n      add\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      mstore\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      0x44\n      dup3\n      add\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      mstore\n      0x64\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7456:8244  function _transfer(address from, address to, uint256 amount) internal virtual {... */\n    tag_16:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      swap1\n      dup2\n      and\n      swap2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7552:7570  from != address(0) */\n      dup3\n      iszero\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      tag_363\n      jumpi\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7630:7646  to != address(0) */\n      swap2\n      dup3\n      iszero\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      tag_365\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7568:7569  0 */\n      0x00\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      dup3\n      dup2\n      mstore\n      dup1\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7801:7822  fromBalance >= amount */\n      swap2\n      dup1\n      dup4\n      lt\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      tag_367\n      jumpi\n      0x40\n      dup3\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8163:8189  Transfer(from, to, amount) */\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      swap6\n      dup8\n      0x20\n      swap7\n      mstore\n      dup3\n      dup7\n      mstore\n      sub\n      dup3\n      dup3\n      keccak256\n      sstore\n      dup7\n      dup2\n      mstore\n      keccak256\n      dup2\n      dup2\n      sload\n      add\n      swap1\n      sstore\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8163:8189  Transfer(from, to, amount) */\n      log3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7456:8244  function _transfer(address from, address to, uint256 amount) internal virtual {... */\n      jump\t// out\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n    tag_367:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x26\n      0x24\n      dup3\n      add\n      mstore\n      0x45524332303a207472616e7366657220616d6f756e7420657863656564732062\n      0x44\n      dup3\n      add\n      mstore\n      shl(0xd0, 0x616c616e6365)\n      0x64\n      dup3\n      add\n      mstore\n      0x84\n      swap1\n      revert\n    tag_365:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x23\n      0x24\n      dup3\n      add\n      mstore\n      0x45524332303a207472616e7366657220746f20746865207a65726f2061646472\n      0x44\n      dup3\n      add\n      mstore\n      shl(0xe8, 0x657373)\n      0x64\n      dup3\n      add\n      mstore\n      0x84\n      swap1\n      revert\n    tag_363:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x25\n      0x24\n      dup3\n      add\n      mstore\n      0x45524332303a207472616e736665722066726f6d20746865207a65726f206164\n      0x44\n      dup3\n      add\n      mstore\n      shl(0xd8, 0x6472657373)\n      0x64\n      dup3\n      add\n      mstore\n      0x84\n      swap1\n      revert\n        /* \"contracts/TurtleToken.sol\":4478:4773  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {... */\n    tag_17:\n      swap1\n        /* \"contracts/TurtleToken.sol\":4607:4617  msg.sender */\n      caller\n      0x00\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      mstore\n        /* \"contracts/TurtleToken.sol\":4585:4606  _whitelistedAddresses */\n      0x0c\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      0x20\n      mstore\n      and(sload(keccak256(0x00, 0x40)), 0xff)\n        /* \"contracts/TurtleToken.sol\":4581:4715  if (_whitelistedAddresses[msg.sender]) {... */\n      tag_369\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3894:3900  amount */\n      tag_371\n        /* \"contracts/TurtleToken.sol\":4607:4617  msg.sender */\n      swap2\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3894:3900  amount */\n      tag_16\n      jump\t// in\n    tag_371:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3918:3922  true */\n      0x01\n        /* \"contracts/TurtleToken.sol\":4478:4773  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/TurtleToken.sol\":4581:4715  if (_whitelistedAddresses[msg.sender]) {... */\n    tag_369:\n        /* \"contracts/TurtleToken.sol\":4670:4676  amount */\n      tag_371\n        /* \"contracts/TurtleToken.sol\":4607:4617  msg.sender */\n      swap2\n      caller\n        /* \"contracts/TurtleToken.sol\":4670:4676  amount */\n      tag_16\n      jump\t// in\n        /* \"contracts/TurtleToken.sol\":4831:5152  function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {... */\n    tag_18:\n      swap2\n      swap1\n      0x00\n        /* \"contracts/TurtleToken.sol\":4980:4990  msg.sender */\n      caller\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      dup2\n      mstore\n        /* \"contracts/TurtleToken.sol\":4958:4979  _whitelistedAddresses */\n      0x0c\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      0x20\n      mstore\n      0xff\n      0x40\n      dup3\n      keccak256\n      sload\n      and\n        /* \"contracts/TurtleToken.sol\":4954:5082  if (_whitelistedAddresses[msg.sender]) {... */\n      tag_373\n      jumpi\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      dup5\n      and\n      dup2\n      mstore\n      0x01\n      0x20\n      dup2\n      dup2\n      mstore\n      0x40\n      dup1\n      dup5\n      keccak256\n        /* \"contracts/TurtleToken.sol\":4980:4990  msg.sender */\n      caller\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      dup6\n      mstore\n      swap1\n      swap2\n      mstore\n      swap1\n      swap2\n      keccak256\n      sload\n      swap4\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11244:11281  currentAllowance != type(uint256).max */\n      dup5\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11240:11483  if (currentAllowance != type(uint256).max) {... */\n      tag_375\n      jumpi\n        /* \"contracts/TurtleToken.sol\":4831:5152  function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {... */\n    tag_376:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5424:5430  amount */\n      tag_371\n      swap4\n      pop\n      tag_16\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11240:11483  if (currentAllowance != type(uint256).max) {... */\n    tag_375:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11305:11331  currentAllowance >= amount */\n      dup3\n      dup5\n      lt\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      tag_378\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11432:11457  currentAllowance - amount */\n      tag_380\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5424:5430  amount */\n      tag_371\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      swap6\n      sub\n        /* \"contracts/TurtleToken.sol\":4980:4990  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11432:11457  currentAllowance - amount */\n      dup4\n      tag_9\n      jump\t// in\n    tag_380:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11240:11483  if (currentAllowance != type(uint256).max) {... */\n      jump(tag_376)\n        /* \"contracts/TurtleToken.sol\":319:5155  contract TurtleToken is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n    tag_378:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x1d\n      0x24\n      dup3\n      add\n      mstore\n      0x45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n        /* \"contracts/TurtleToken.sol\":4954:5082  if (_whitelistedAddresses[msg.sender]) {... */\n    tag_373:\n        /* \"contracts/TurtleToken.sol\":5037:5043  amount */\n      pop\n      tag_371\n      swap3\n      tag_16\n      jump\t// in\n\n    auxdata: 0xa2646970667358221220768f6535cb42068c7c3c5a81f73dfdf55a42f8dbf9d9cf8dc6e49da58cf6d35164736f6c63430008120033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"finalize_allocation": {
									"entryPoint": 1500,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"fun_toShortStringWithFallback": {
									"entryPoint": 1528,
									"id": 1361,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"fun_toShortStringWithFallback_8227": {
									"entryPoint": 2002,
									"id": 1361,
									"parameterSlots": 1,
									"returnSlots": 1
								}
							},
							"generatedSources": [],
							"linkReferences": {},
							"object": "61016034620005c1576001600160401b0390601f19620022f0601f38829003818101841685019086821186831017620005c65780869160409586948552833981010312620005c1578351926020809501518351946200005e86620005dc565b600b8652868601966a2a3ab93a3632aa37b5b2b760a91b98898952865199620000878b620005dc565b600b8b52828b01528651996200009d8b620005dc565b600495868c52631515549560e21b848d015288519b8c92620000bf84620005dc565b856001948581520192603160f81b84528151868111620004bb5760039283548781811c91168015620005b6575b8a821014620005a1578291818f8093116200053f575b508a918311600114620004dc57600092620004d0575b505060001982851b1c191690861b1782555b825192868411620004bb578a548681811c91168015620004b0575b898210146200049b5790818d869594931162000441575b5088918d8511600114620003d95750600093620003cd575b505082851b92600019911b1c19161787555b620001918a620005f8565b9a6101209b8c52620001a38d620007d2565b9a6101409b8c525190209b8c60e052519020906101009b828d524660a052895192858401917f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f83528b85015260608401524660808401523060a084015260a0835260c083019383851090851117620003b857838a52825190206080523060c05260098054336001600160a01b0319821681179092556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3600a55670de0b6b3a76400009687850294808604891490151715620003a357301562000363575050506002548281018091116200034e576000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9160025530835282815287832084815401905587519384523093a3828102928184041490151715620003395750600b55519161196593846200098b8539608051846113db015260a051846114a7015260c051846113a5015260e0518461142a01525183611450015251826108d0015251816108fa0152f35b601190634e487b7160e01b6000525260246000fd5b601185634e487b7160e01b6000525260246000fd5b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300916101049160649562461bcd60e51b865260c483015260e48201520152fd5b601187634e487b7160e01b6000525260246000fd5b604188634e487b7160e01b6000525260246000fd5b01519150388062000174565b87959392919316928c600052896000209360005b8b8282106200042a57505085116200040f575b50505050811b01875562000186565b01519060f884600019921b161c191690553880808062000400565b8385015187558a98909601959384019301620003ed565b90919293508b600052886000208d80870160051c8201928b881062000491575b9189918897969594930160051c01915b828110620004815750506200015c565b6000815587965089910162000471565b9250819262000461565b60228c634e487b7160e01b6000525260246000fd5b90607f169062000145565b60418b634e487b7160e01b6000525260246000fd5b01519050388062000118565b908489941691866000528b6000209260005b8d8282106200052857505084116200050f575b505050811b0182556200012a565b015160001983871b60f8161c1916905538808062000501565b8385015186558c97909501949384019301620004ee565b91509150846000528d8a6000209080850160051c8201928c861062000597575b859492828c929593950160051c01915b8281106200057f57505062000102565b600091939550809294505501918e918985946200056f565b925081926200055f565b60228d634e487b7160e01b6000525260246000fd5b90607f1690620000ec565b600080fd5b634e487b7160e01b600052604160045260246000fd5b604081019081106001600160401b03821117620005c657604052565b8051602091908281101562000697575090601f8251116200063657808251920151908083106200062757501790565b82600019910360031b1b161790565b90604051809263305a27a960e01b82528060048301528251908160248401526000935b8285106200067d575050604492506000838284010152601f80199101168101030190fd5b848101820151868601604401529381019385935062000659565b6001600160401b038111620005c6576005928354926001938481811c91168015620007c7575b83821014620007b157601f81116200077a575b5081601f841160011462000710575092829391839260009462000704575b50501b916000199060031b1c191617905560ff90565b015192503880620006ee565b919083601f1981168760005284600020946000905b888383106200075f575050501062000745575b505050811b01905560ff90565b015160001960f88460031b161c1916905538808062000738565b85870151885590960195948501948793509081019062000725565b8560005284601f846000209201871c820191601f8601881c015b828110620007a4575050620006d0565b6000815501859062000794565b634e487b7160e01b600052602260045260246000fd5b90607f1690620006bd565b805160209081811015620008605750601f825111620007ff57808251920151908083106200062757501790565b90604051809263305a27a960e01b82528060048301528251908160248401526000935b82851062000846575050604492506000838284010152601f80199101168101030190fd5b848101820151868601604401529381019385935062000822565b906001600160401b038211620005c657600654926001938481811c911680156200097f575b83821014620007b157601f811162000945575b5081601f8411600114620008d95750928293918392600094620008cd575b50501b916000199060031b1c19161760065560ff90565b015192503880620008b6565b919083601f198116600660005284600020946000905b888383106200092a575050501062000910575b505050811b0160065560ff90565b015160001960f88460031b161c1916905538808062000902565b858701518855909601959485019487935090810190620008ef565b600660005284601f84600020920160051c820191601f860160051c015b8281106200097257505062000898565b6000815501859062000962565b90607f16906200088556fe6080604081815260048036101561001557600080fd5b600092833560e01c90816306fdde0314610eac57508063095ea7b314610e8257806318160ddd14610e6357806323b872dd14610e31578063313ce56714610e155780633644e51514610df15780633950935114610da15780633ba0b9a914610d8257806340c10f1914610cbc57806365855dfd14610c7e5780636c11bcd314610aa257806370a0823114610a6b578063715018a614610a0e5780637ecebe00146109d657806384b0196e146108b95780638ab1d681146108535780638da5cb5b1461082a57806395d89b4114610740578063a0ef91df146106bd578063a457c2d71461060f578063a9059cbb146105dd578063d0febe4c146104ab578063d505accf146102f2578063db068e0e146102d0578063dd62ed3e14610287578063e43252d71461021a5763f2fde38b1461014c57600080fd5b3461021657602036600319011261021657610165610fbd565b9061016e610fee565b6001600160a01b039182169283156101c4575050600954826bffffffffffffffffffffffff60a01b821617600955167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8280fd5b50503461028357602036600319011261028357610235610fbd565b61023d610fee565b6001600160a01b0316808352600c602052908220805460ff191660011790557fa850ae9193f515cbae8d35e8925bd2be26627fc91bce650b8652ed254e9cab038280a280f35b5080fd5b505034610283578060031936011261028357806020926102a5610fbd565b6102ad610fd8565b6001600160a01b0391821683526001865283832091168252845220549051908152f35b838234610283576020366003190112610283576102eb610fee565b35600b5580f35b508290346102835760e03660031901126102835761030e610fbd565b610316610fd8565b906044359260643560843560ff811681036104a7578142116104645760018060a01b0390818516928389526007602052898920908154916001830190558a519060208201927f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98452868d840152858a1660608401528a608084015260a083015260c082015260c0815260e0810181811067ffffffffffffffff821117610451578b525190206103f9916103f1916103cb6113a2565b908c519161190160f01b83526002830152602282015260c43591604260a4359220611313565b9190916111f9565b160361040e575061040b9394506110f7565b80f35b606490602087519162461bcd60e51b8352820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e617475726500006044820152fd5b634e487b7160e01b8b526041875260248bfd5b875162461bcd60e51b8152602081850152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e650000006044820152606490fd5b8680fd5b509082600319360112610216576104c0611683565b341561059a57600b54803402903482040361058757670de0b6b3a76400009004913084528360205282828520541061053657507f8fafebcaf9d154343dad25669bfa277f4fbacd7ac6b0c4fed522580e040a0f33906105208333306116d9565b80519234845260208401523392a26001600a5580f35b6020608492519162461bcd60e51b8352820152602660248201527f496e73756666696369656e7420746f6b656e2062616c616e636520696e20636f6044820152651b9d1c9858dd60d21b6064820152fd5b634e487b7160e01b845260118352602484fd5b906020606492519162461bcd60e51b8352820152601960248201527f4d7573742073656e642045544820746f2065786368616e6765000000000000006044820152fd5b5050346102835780600319360112610283576020906106066105fd610fbd565b60243590611847565b90519015158152f35b5082346106ba57826003193601126106ba57610629610fbd565b918360243592338152600160205281812060018060a01b03861682526020522054908282106106695760208561066285850387336110f7565b5160018152f35b608490602086519162461bcd60e51b8352820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152fd5b80fd5b50346102165782600319360112610216576106d6610fee565b47908115610708575060095483918291829182916001600160a01b031682f1156106fe575080f35b51903d90823e3d90fd5b606490602084519162461bcd60e51b835282015260126024820152714e6f2045544820746f20776974686472617760701b6044820152fd5b5090346102165782600319360112610216578051918381549061076282611046565b808652926001928084169081156107ff57506001146107a3575b61079f868661078d828b03836110b2565b51918291602083526020830190610f7d565b0390f35b815294507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8286106107e75750505061078d82602061079f95820101943861077c565b805460208787018101919091529095019481016107c9565b905061079f97508693506020925061078d94915060ff191682840152151560051b820101943861077c565b50503461028357816003193601126102835760095490516001600160a01b039091168152602090f35b5050346102835760203660031901126102835761086e610fbd565b610876610fee565b6001600160a01b0316808352600c602052908220805460ff191690557fcdd2e9b91a56913d370075169cefa1602ba36be5301664f752192bb1709df7578280a280f35b5090346102165782600319360112610216576108f47f00000000000000000000000000000000000000000000000000000000000000006114cd565b9261091e7f00000000000000000000000000000000000000000000000000000000000000006115c9565b908251926020928385019585871067ffffffffffffffff8811176109c35750928061097983889661096c998b9996528686528151998a99600f60f81b8b5260e0868c015260e08b0190610f7d565b91898303908a0152610f7d565b924660608801523060808801528460a088015286840360c088015251928381520193925b8281106109ac57505050500390f35b83518552869550938101939281019260010161099d565b634e487b7160e01b845260419052602483fd5b5050346102835760203660031901126102835760209181906001600160a01b036109fe610fbd565b1681526007845220549051908152f35b83346106ba57806003193601126106ba57610a27610fee565b600980546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b5050346102835760203660031901126102835760209181906001600160a01b03610a93610fbd565b16815280845220549051908152f35b50346102165760209182600319360112610c7a57813591610ac1611683565b8215610c2b57338552848452828286205410610bea57670de0b6b3a76400008302670de0b6b3a763ffff1984820401610bd757600b54908115610bc4570490814710610b755750610b138330336116d9565b8480828015610b6b575b8280929181923390f115610b61577f2dcf9433d75db0d8b1c172641f85e319ffe4ad22e108a95d1847ceb906e5195d929382519485528401523392a26001600a5580f35b81513d86823e3d90fd5b6108fc9150610b1d565b825162461bcd60e51b81529081018590526024808201527f496e73756666696369656e74204554482062616c616e636520696e20636f6e746044820152631c9858dd60e21b6064820152608490fd5b634e487b7160e01b875260128352602487fd5b634e487b7160e01b865260118252602486fd5b83606492519162461bcd60e51b8352820152601a60248201527f496e73756666696369656e7420746f6b656e2062616c616e63650000000000006044820152fd5b83608492519162461bcd60e51b8352820152602560248201527f4d7573742073656c6c206120706f73697469766520616d6f756e74206f6620746044820152646f6b656e7360d81b6064820152fd5b8380fd5b5050346102835760203660031901126102835760209160ff9082906001600160a01b03610ca9610fbd565b168152600c855220541690519015158152f35b509034610216578060031936011261021657610cd6610fbd565b9060243591610ce3610fee565b6001600160a01b0316928315610d4057506020827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92610d2687956002546110d4565b60025585855284835280852082815401905551908152a380f35b6020606492519162461bcd60e51b8352820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152fd5b505034610283578160031936011261028357602090600b549051908152f35b505034610283578060031936011261028357610662602092610dea610dc4610fbd565b338352600186528483206001600160a01b038216845286529184902054602435906110d4565b90336110f7565b505034610283578160031936011261028357602090610e0e6113a2565b9051908152f35b5050346102835781600319360112610283576020905160128152f35b50503461028357606036600319011261028357602090610606610e52610fbd565b610e5a610fd8565b60443591611877565b5050346102835781600319360112610283576020906002549051908152f35b505034610283578060031936011261028357602090610662610ea2610fbd565b60243590336110f7565b8490843461021657826003193601126102165782600354610ecc81611046565b80855291600191808316908115610f555750600114610ef8575b50505061078d8261079f9403836110b2565b9450600385527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b828610610f3d5750505061078d82602061079f9582010194610ee6565b80546020878701810191909152909501948101610f20565b61079f97508693506020925061078d94915060ff191682840152151560051b82010194610ee6565b919082519283825260005b848110610fa9575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610f88565b600435906001600160a01b0382168203610fd357565b600080fd5b602435906001600160a01b0382168203610fd357565b6009546001600160a01b0316330361100257565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b90600182811c92168015611076575b602083101461106057565b634e487b7160e01b600052602260045260246000fd5b91607f1691611055565b6040810190811067ffffffffffffffff82111761109c57604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761109c57604052565b919082018092116110e157565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b039081169182156111a857169182156111585760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260018252604060002085600052825280604060002055604051908152a3565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b60058110156112fd578061120a5750565b600181036112575760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606490fd5b600281036112a45760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606490fd5b6003146112ad57565b60405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608490fd5b634e487b7160e01b600052602160045260246000fd5b9291907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083116113965791608094939160ff602094604051948552168484015260408301526060820152600093849182805260015afa156113895781516001600160a01b03811615611383579190565b50600190565b50604051903d90823e3d90fd5b50505050600090600390565b307f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614806114a4575b156113fd577f000000000000000000000000000000000000000000000000000000000000000090565b60405160208101907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f82527f000000000000000000000000000000000000000000000000000000000000000060408201527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260a0815260c0810181811067ffffffffffffffff82111761109c5760405251902090565b507f000000000000000000000000000000000000000000000000000000000000000046146113d4565b60ff811461150b5760ff811690601f82116114f957604051916114ef83611080565b8252602082015290565b604051632cd44ac360e21b8152600490fd5b5060405160055481600061151e83611046565b808352926001908181169081156115a75750600114611548575b50611545925003826110b2565b90565b6005600090815291507f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db05b84831061158c5750611545935050810160200138611538565b81935090816020925483858901015201910190918492611573565b90506020925061154594915060ff191682840152151560051b82010138611538565b60ff81146115eb5760ff811690601f82116114f957604051916114ef83611080565b506040516006548160006115fe83611046565b808352926001908181169081156115a757506001146116245750611545925003826110b2565b6006600090815291507ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f5b8483106116685750611545935050810160200138611538565b8193509081602092548385890101520191019091849261164f565b6002600a5414611694576002600a55565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b6001600160a01b039081169182156117f457169182156117a35760008281528060205260408120549180831061174f57604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220818154019055604051908152a3565b60405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b9033600052600c60205260ff6040600020541661186d5761186891336116d9565b600190565b61186891336116d9565b91906000338152600c60205260ff604082205416611925576001600160a01b038416815260016020818152604080842033855290915290912054939084016118c4575b61186893506116d9565b8284106118e0576118db83611868950333836110f7565b6118ba565b60405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606490fd5b50611868926116d956fea2646970667358221220768f6535cb42068c7c3c5a81f73dfdf55a42f8dbf9d9cf8dc6e49da58cf6d35164736f6c63430008120033",
							"opcodes": "PUSH2 0x160 CALLVALUE PUSH3 0x5C1 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 PUSH1 0x1F NOT PUSH3 0x22F0 PUSH1 0x1F CODESIZE DUP3 SWAP1 SUB DUP2 DUP2 ADD DUP5 AND DUP6 ADD SWAP1 DUP7 DUP3 GT DUP7 DUP4 LT OR PUSH3 0x5C6 JUMPI DUP1 DUP7 SWAP2 PUSH1 0x40 SWAP6 DUP7 SWAP5 DUP6 MSTORE DUP4 CODECOPY DUP2 ADD SUB SLT PUSH3 0x5C1 JUMPI DUP4 MLOAD SWAP3 PUSH1 0x20 DUP1 SWAP6 ADD MLOAD DUP4 MLOAD SWAP5 PUSH3 0x5E DUP7 PUSH3 0x5DC JUMP JUMPDEST PUSH1 0xB DUP7 MSTORE DUP7 DUP7 ADD SWAP7 PUSH11 0x2A3AB93A3632AA37B5B2B7 PUSH1 0xA9 SHL SWAP9 DUP10 DUP10 MSTORE DUP7 MLOAD SWAP10 PUSH3 0x87 DUP12 PUSH3 0x5DC JUMP JUMPDEST PUSH1 0xB DUP12 MSTORE DUP3 DUP12 ADD MSTORE DUP7 MLOAD SWAP10 PUSH3 0x9D DUP12 PUSH3 0x5DC JUMP JUMPDEST PUSH1 0x4 SWAP6 DUP7 DUP13 MSTORE PUSH4 0x15155495 PUSH1 0xE2 SHL DUP5 DUP14 ADD MSTORE DUP9 MLOAD SWAP12 DUP13 SWAP3 PUSH3 0xBF DUP5 PUSH3 0x5DC JUMP JUMPDEST DUP6 PUSH1 0x1 SWAP5 DUP6 DUP2 MSTORE ADD SWAP3 PUSH1 0x31 PUSH1 0xF8 SHL DUP5 MSTORE DUP2 MLOAD DUP7 DUP2 GT PUSH3 0x4BB JUMPI PUSH1 0x3 SWAP3 DUP4 SLOAD DUP8 DUP2 DUP2 SHR SWAP2 AND DUP1 ISZERO PUSH3 0x5B6 JUMPI JUMPDEST DUP11 DUP3 LT EQ PUSH3 0x5A1 JUMPI DUP3 SWAP2 DUP2 DUP16 DUP1 SWAP4 GT PUSH3 0x53F JUMPI JUMPDEST POP DUP11 SWAP2 DUP4 GT PUSH1 0x1 EQ PUSH3 0x4DC JUMPI PUSH1 0x0 SWAP3 PUSH3 0x4D0 JUMPI JUMPDEST POP POP PUSH1 0x0 NOT DUP3 DUP6 SHL SHR NOT AND SWAP1 DUP7 SHL OR DUP3 SSTORE JUMPDEST DUP3 MLOAD SWAP3 DUP7 DUP5 GT PUSH3 0x4BB JUMPI DUP11 SLOAD DUP7 DUP2 DUP2 SHR SWAP2 AND DUP1 ISZERO PUSH3 0x4B0 JUMPI JUMPDEST DUP10 DUP3 LT EQ PUSH3 0x49B JUMPI SWAP1 DUP2 DUP14 DUP7 SWAP6 SWAP5 SWAP4 GT PUSH3 0x441 JUMPI JUMPDEST POP DUP9 SWAP2 DUP14 DUP6 GT PUSH1 0x1 EQ PUSH3 0x3D9 JUMPI POP PUSH1 0x0 SWAP4 PUSH3 0x3CD JUMPI JUMPDEST POP POP DUP3 DUP6 SHL SWAP3 PUSH1 0x0 NOT SWAP2 SHL SHR NOT AND OR DUP8 SSTORE JUMPDEST PUSH3 0x191 DUP11 PUSH3 0x5F8 JUMP JUMPDEST SWAP11 PUSH2 0x120 SWAP12 DUP13 MSTORE PUSH3 0x1A3 DUP14 PUSH3 0x7D2 JUMP JUMPDEST SWAP11 PUSH2 0x140 SWAP12 DUP13 MSTORE MLOAD SWAP1 KECCAK256 SWAP12 DUP13 PUSH1 0xE0 MSTORE MLOAD SWAP1 KECCAK256 SWAP1 PUSH2 0x100 SWAP12 DUP3 DUP14 MSTORE CHAINID PUSH1 0xA0 MSTORE DUP10 MLOAD SWAP3 DUP6 DUP5 ADD SWAP2 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F DUP4 MSTORE DUP12 DUP6 ADD MSTORE PUSH1 0x60 DUP5 ADD MSTORE CHAINID PUSH1 0x80 DUP5 ADD MSTORE ADDRESS PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0xA0 DUP4 MSTORE PUSH1 0xC0 DUP4 ADD SWAP4 DUP4 DUP6 LT SWAP1 DUP6 GT OR PUSH3 0x3B8 JUMPI DUP4 DUP11 MSTORE DUP3 MLOAD SWAP1 KECCAK256 PUSH1 0x80 MSTORE ADDRESS PUSH1 0xC0 MSTORE PUSH1 0x9 DUP1 SLOAD CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP3 AND DUP2 OR SWAP1 SWAP3 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x0 DUP1 LOG3 PUSH1 0xA SSTORE PUSH8 0xDE0B6B3A7640000 SWAP7 DUP8 DUP6 MUL SWAP5 DUP1 DUP7 DIV DUP10 EQ SWAP1 ISZERO OR ISZERO PUSH3 0x3A3 JUMPI ADDRESS ISZERO PUSH3 0x363 JUMPI POP POP POP PUSH1 0x2 SLOAD DUP3 DUP2 ADD DUP1 SWAP2 GT PUSH3 0x34E JUMPI PUSH1 0x0 SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 PUSH1 0x2 SSTORE ADDRESS DUP4 MSTORE DUP3 DUP2 MSTORE DUP8 DUP4 KECCAK256 DUP5 DUP2 SLOAD ADD SWAP1 SSTORE DUP8 MLOAD SWAP4 DUP5 MSTORE ADDRESS SWAP4 LOG3 DUP3 DUP2 MUL SWAP3 DUP2 DUP5 DIV EQ SWAP1 ISZERO OR ISZERO PUSH3 0x339 JUMPI POP PUSH1 0xB SSTORE MLOAD SWAP2 PUSH2 0x1965 SWAP4 DUP5 PUSH3 0x98B DUP6 CODECOPY PUSH1 0x80 MLOAD DUP5 PUSH2 0x13DB ADD MSTORE PUSH1 0xA0 MLOAD DUP5 PUSH2 0x14A7 ADD MSTORE PUSH1 0xC0 MLOAD DUP5 PUSH2 0x13A5 ADD MSTORE PUSH1 0xE0 MLOAD DUP5 PUSH2 0x142A ADD MSTORE MLOAD DUP4 PUSH2 0x1450 ADD MSTORE MLOAD DUP3 PUSH2 0x8D0 ADD MSTORE MLOAD DUP2 PUSH2 0x8FA ADD MSTORE RETURN JUMPDEST PUSH1 0x11 SWAP1 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x11 DUP6 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 SWAP2 PUSH2 0x104 SWAP2 PUSH1 0x64 SWAP6 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP7 MSTORE PUSH1 0xC4 DUP4 ADD MSTORE PUSH1 0xE4 DUP3 ADD MSTORE ADD MSTORE REVERT JUMPDEST PUSH1 0x11 DUP8 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x41 DUP9 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADD MLOAD SWAP2 POP CODESIZE DUP1 PUSH3 0x174 JUMP JUMPDEST DUP8 SWAP6 SWAP4 SWAP3 SWAP2 SWAP4 AND SWAP3 DUP13 PUSH1 0x0 MSTORE DUP10 PUSH1 0x0 KECCAK256 SWAP4 PUSH1 0x0 JUMPDEST DUP12 DUP3 DUP3 LT PUSH3 0x42A JUMPI POP POP DUP6 GT PUSH3 0x40F JUMPI JUMPDEST POP POP POP POP DUP2 SHL ADD DUP8 SSTORE PUSH3 0x186 JUMP JUMPDEST ADD MLOAD SWAP1 PUSH1 0xF8 DUP5 PUSH1 0x0 NOT SWAP3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 DUP1 PUSH3 0x400 JUMP JUMPDEST DUP4 DUP6 ADD MLOAD DUP8 SSTORE DUP11 SWAP9 SWAP1 SWAP7 ADD SWAP6 SWAP4 DUP5 ADD SWAP4 ADD PUSH3 0x3ED JUMP JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 POP DUP12 PUSH1 0x0 MSTORE DUP9 PUSH1 0x0 KECCAK256 DUP14 DUP1 DUP8 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP12 DUP9 LT PUSH3 0x491 JUMPI JUMPDEST SWAP2 DUP10 SWAP2 DUP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 ADD PUSH1 0x5 SHR ADD SWAP2 JUMPDEST DUP3 DUP2 LT PUSH3 0x481 JUMPI POP POP PUSH3 0x15C JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE DUP8 SWAP7 POP DUP10 SWAP2 ADD PUSH3 0x471 JUMP JUMPDEST SWAP3 POP DUP2 SWAP3 PUSH3 0x461 JUMP JUMPDEST PUSH1 0x22 DUP13 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x7F AND SWAP1 PUSH3 0x145 JUMP JUMPDEST PUSH1 0x41 DUP12 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH3 0x118 JUMP JUMPDEST SWAP1 DUP5 DUP10 SWAP5 AND SWAP2 DUP7 PUSH1 0x0 MSTORE DUP12 PUSH1 0x0 KECCAK256 SWAP3 PUSH1 0x0 JUMPDEST DUP14 DUP3 DUP3 LT PUSH3 0x528 JUMPI POP POP DUP5 GT PUSH3 0x50F JUMPI JUMPDEST POP POP POP DUP2 SHL ADD DUP3 SSTORE PUSH3 0x12A JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT DUP4 DUP8 SHL PUSH1 0xF8 AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH3 0x501 JUMP JUMPDEST DUP4 DUP6 ADD MLOAD DUP7 SSTORE DUP13 SWAP8 SWAP1 SWAP6 ADD SWAP5 SWAP4 DUP5 ADD SWAP4 ADD PUSH3 0x4EE JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP5 PUSH1 0x0 MSTORE DUP14 DUP11 PUSH1 0x0 KECCAK256 SWAP1 DUP1 DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP13 DUP7 LT PUSH3 0x597 JUMPI JUMPDEST DUP6 SWAP5 SWAP3 DUP3 DUP13 SWAP3 SWAP6 SWAP4 SWAP6 ADD PUSH1 0x5 SHR ADD SWAP2 JUMPDEST DUP3 DUP2 LT PUSH3 0x57F JUMPI POP POP PUSH3 0x102 JUMP JUMPDEST PUSH1 0x0 SWAP2 SWAP4 SWAP6 POP DUP1 SWAP3 SWAP5 POP SSTORE ADD SWAP2 DUP15 SWAP2 DUP10 DUP6 SWAP5 PUSH3 0x56F JUMP JUMPDEST SWAP3 POP DUP2 SWAP3 PUSH3 0x55F JUMP JUMPDEST PUSH1 0x22 DUP14 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x7F AND SWAP1 PUSH3 0xEC JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH3 0x5C6 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 SWAP2 SWAP1 DUP3 DUP2 LT ISZERO PUSH3 0x697 JUMPI POP SWAP1 PUSH1 0x1F DUP3 MLOAD GT PUSH3 0x636 JUMPI DUP1 DUP3 MLOAD SWAP3 ADD MLOAD SWAP1 DUP1 DUP4 LT PUSH3 0x627 JUMPI POP OR SWAP1 JUMP JUMPDEST DUP3 PUSH1 0x0 NOT SWAP2 SUB PUSH1 0x3 SHL SHL AND OR SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD DUP1 SWAP3 PUSH4 0x305A27A9 PUSH1 0xE0 SHL DUP3 MSTORE DUP1 PUSH1 0x4 DUP4 ADD MSTORE DUP3 MLOAD SWAP1 DUP2 PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x0 SWAP4 JUMPDEST DUP3 DUP6 LT PUSH3 0x67D JUMPI POP POP PUSH1 0x44 SWAP3 POP PUSH1 0x0 DUP4 DUP3 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SUB ADD SWAP1 REVERT JUMPDEST DUP5 DUP2 ADD DUP3 ADD MLOAD DUP7 DUP7 ADD PUSH1 0x44 ADD MSTORE SWAP4 DUP2 ADD SWAP4 DUP6 SWAP4 POP PUSH3 0x659 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH3 0x5C6 JUMPI PUSH1 0x5 SWAP3 DUP4 SLOAD SWAP3 PUSH1 0x1 SWAP4 DUP5 DUP2 DUP2 SHR SWAP2 AND DUP1 ISZERO PUSH3 0x7C7 JUMPI JUMPDEST DUP4 DUP3 LT EQ PUSH3 0x7B1 JUMPI PUSH1 0x1F DUP2 GT PUSH3 0x77A JUMPI JUMPDEST POP DUP2 PUSH1 0x1F DUP5 GT PUSH1 0x1 EQ PUSH3 0x710 JUMPI POP SWAP3 DUP3 SWAP4 SWAP2 DUP4 SWAP3 PUSH1 0x0 SWAP5 PUSH3 0x704 JUMPI JUMPDEST POP POP SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR SWAP1 SSTORE PUSH1 0xFF SWAP1 JUMP JUMPDEST ADD MLOAD SWAP3 POP CODESIZE DUP1 PUSH3 0x6EE JUMP JUMPDEST SWAP2 SWAP1 DUP4 PUSH1 0x1F NOT DUP2 AND DUP8 PUSH1 0x0 MSTORE DUP5 PUSH1 0x0 KECCAK256 SWAP5 PUSH1 0x0 SWAP1 JUMPDEST DUP9 DUP4 DUP4 LT PUSH3 0x75F JUMPI POP POP POP LT PUSH3 0x745 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH1 0xFF SWAP1 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH3 0x738 JUMP JUMPDEST DUP6 DUP8 ADD MLOAD DUP9 SSTORE SWAP1 SWAP7 ADD SWAP6 SWAP5 DUP6 ADD SWAP5 DUP8 SWAP4 POP SWAP1 DUP2 ADD SWAP1 PUSH3 0x725 JUMP JUMPDEST DUP6 PUSH1 0x0 MSTORE DUP5 PUSH1 0x1F DUP5 PUSH1 0x0 KECCAK256 SWAP3 ADD DUP8 SHR DUP3 ADD SWAP2 PUSH1 0x1F DUP7 ADD DUP9 SHR ADD JUMPDEST DUP3 DUP2 LT PUSH3 0x7A4 JUMPI POP POP PUSH3 0x6D0 JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE ADD DUP6 SWAP1 PUSH3 0x794 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x7F AND SWAP1 PUSH3 0x6BD JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 SWAP1 DUP2 DUP2 LT ISZERO PUSH3 0x860 JUMPI POP PUSH1 0x1F DUP3 MLOAD GT PUSH3 0x7FF JUMPI DUP1 DUP3 MLOAD SWAP3 ADD MLOAD SWAP1 DUP1 DUP4 LT PUSH3 0x627 JUMPI POP OR SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD DUP1 SWAP3 PUSH4 0x305A27A9 PUSH1 0xE0 SHL DUP3 MSTORE DUP1 PUSH1 0x4 DUP4 ADD MSTORE DUP3 MLOAD SWAP1 DUP2 PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x0 SWAP4 JUMPDEST DUP3 DUP6 LT PUSH3 0x846 JUMPI POP POP PUSH1 0x44 SWAP3 POP PUSH1 0x0 DUP4 DUP3 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SUB ADD SWAP1 REVERT JUMPDEST DUP5 DUP2 ADD DUP3 ADD MLOAD DUP7 DUP7 ADD PUSH1 0x44 ADD MSTORE SWAP4 DUP2 ADD SWAP4 DUP6 SWAP4 POP PUSH3 0x822 JUMP JUMPDEST SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH3 0x5C6 JUMPI PUSH1 0x6 SLOAD SWAP3 PUSH1 0x1 SWAP4 DUP5 DUP2 DUP2 SHR SWAP2 AND DUP1 ISZERO PUSH3 0x97F JUMPI JUMPDEST DUP4 DUP3 LT EQ PUSH3 0x7B1 JUMPI PUSH1 0x1F DUP2 GT PUSH3 0x945 JUMPI JUMPDEST POP DUP2 PUSH1 0x1F DUP5 GT PUSH1 0x1 EQ PUSH3 0x8D9 JUMPI POP SWAP3 DUP3 SWAP4 SWAP2 DUP4 SWAP3 PUSH1 0x0 SWAP5 PUSH3 0x8CD JUMPI JUMPDEST POP POP SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x6 SSTORE PUSH1 0xFF SWAP1 JUMP JUMPDEST ADD MLOAD SWAP3 POP CODESIZE DUP1 PUSH3 0x8B6 JUMP JUMPDEST SWAP2 SWAP1 DUP4 PUSH1 0x1F NOT DUP2 AND PUSH1 0x6 PUSH1 0x0 MSTORE DUP5 PUSH1 0x0 KECCAK256 SWAP5 PUSH1 0x0 SWAP1 JUMPDEST DUP9 DUP4 DUP4 LT PUSH3 0x92A JUMPI POP POP POP LT PUSH3 0x910 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x6 SSTORE PUSH1 0xFF SWAP1 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH3 0x902 JUMP JUMPDEST DUP6 DUP8 ADD MLOAD DUP9 SSTORE SWAP1 SWAP7 ADD SWAP6 SWAP5 DUP6 ADD SWAP5 DUP8 SWAP4 POP SWAP1 DUP2 ADD SWAP1 PUSH3 0x8EF JUMP JUMPDEST PUSH1 0x6 PUSH1 0x0 MSTORE DUP5 PUSH1 0x1F DUP5 PUSH1 0x0 KECCAK256 SWAP3 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 PUSH1 0x1F DUP7 ADD PUSH1 0x5 SHR ADD JUMPDEST DUP3 DUP2 LT PUSH3 0x972 JUMPI POP POP PUSH3 0x898 JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE ADD DUP6 SWAP1 PUSH3 0x962 JUMP JUMPDEST SWAP1 PUSH1 0x7F AND SWAP1 PUSH3 0x885 JUMP INVALID PUSH1 0x80 PUSH1 0x40 DUP2 DUP2 MSTORE PUSH1 0x4 DUP1 CALLDATASIZE LT ISZERO PUSH2 0x15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP3 DUP4 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x6FDDE03 EQ PUSH2 0xEAC JUMPI POP DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xE82 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xE63 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0xE31 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0xE15 JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0xDF1 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0xDA1 JUMPI DUP1 PUSH4 0x3BA0B9A9 EQ PUSH2 0xD82 JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0xCBC JUMPI DUP1 PUSH4 0x65855DFD EQ PUSH2 0xC7E JUMPI DUP1 PUSH4 0x6C11BCD3 EQ PUSH2 0xAA2 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0xA6B JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xA0E JUMPI DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x9D6 JUMPI DUP1 PUSH4 0x84B0196E EQ PUSH2 0x8B9 JUMPI DUP1 PUSH4 0x8AB1D681 EQ PUSH2 0x853 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x82A JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x740 JUMPI DUP1 PUSH4 0xA0EF91DF EQ PUSH2 0x6BD JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x60F JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x5DD JUMPI DUP1 PUSH4 0xD0FEBE4C EQ PUSH2 0x4AB JUMPI DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x2F2 JUMPI DUP1 PUSH4 0xDB068E0E EQ PUSH2 0x2D0 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x287 JUMPI DUP1 PUSH4 0xE43252D7 EQ PUSH2 0x21A JUMPI PUSH4 0xF2FDE38B EQ PUSH2 0x14C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x216 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x216 JUMPI PUSH2 0x165 PUSH2 0xFBD JUMP JUMPDEST SWAP1 PUSH2 0x16E PUSH2 0xFEE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP3 DUP4 ISZERO PUSH2 0x1C4 JUMPI POP POP PUSH1 0x9 SLOAD DUP3 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA0 SHL DUP3 AND OR PUSH1 0x9 SSTORE AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP4 DUP1 LOG3 DUP1 RETURN JUMPDEST SWAP1 PUSH1 0x20 PUSH1 0x84 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x283 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x283 JUMPI PUSH2 0x235 PUSH2 0xFBD JUMP JUMPDEST PUSH2 0x23D PUSH2 0xFEE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 DUP4 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE SWAP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH32 0xA850AE9193F515CBAE8D35E8925BD2BE26627FC91BCE650B8652ED254E9CAB03 DUP3 DUP1 LOG2 DUP1 RETURN JUMPDEST POP DUP1 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x283 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x283 JUMPI DUP1 PUSH1 0x20 SWAP3 PUSH2 0x2A5 PUSH2 0xFBD JUMP JUMPDEST PUSH2 0x2AD PUSH2 0xFD8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND DUP4 MSTORE PUSH1 0x1 DUP7 MSTORE DUP4 DUP4 KECCAK256 SWAP2 AND DUP3 MSTORE DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP4 DUP3 CALLVALUE PUSH2 0x283 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x283 JUMPI PUSH2 0x2EB PUSH2 0xFEE JUMP JUMPDEST CALLDATALOAD PUSH1 0xB SSTORE DUP1 RETURN JUMPDEST POP DUP3 SWAP1 CALLVALUE PUSH2 0x283 JUMPI PUSH1 0xE0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x283 JUMPI PUSH2 0x30E PUSH2 0xFBD JUMP JUMPDEST PUSH2 0x316 PUSH2 0xFD8 JUMP JUMPDEST SWAP1 PUSH1 0x44 CALLDATALOAD SWAP3 PUSH1 0x64 CALLDATALOAD PUSH1 0x84 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 SUB PUSH2 0x4A7 JUMPI DUP2 TIMESTAMP GT PUSH2 0x464 JUMPI PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 DUP6 AND SWAP3 DUP4 DUP10 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE DUP10 DUP10 KECCAK256 SWAP1 DUP2 SLOAD SWAP2 PUSH1 0x1 DUP4 ADD SWAP1 SSTORE DUP11 MLOAD SWAP1 PUSH1 0x20 DUP3 ADD SWAP3 PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 DUP5 MSTORE DUP7 DUP14 DUP5 ADD MSTORE DUP6 DUP11 AND PUSH1 0x60 DUP5 ADD MSTORE DUP11 PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xC0 DUP2 MSTORE PUSH1 0xE0 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x451 JUMPI DUP12 MSTORE MLOAD SWAP1 KECCAK256 PUSH2 0x3F9 SWAP2 PUSH2 0x3F1 SWAP2 PUSH2 0x3CB PUSH2 0x13A2 JUMP JUMPDEST SWAP1 DUP13 MLOAD SWAP2 PUSH2 0x1901 PUSH1 0xF0 SHL DUP4 MSTORE PUSH1 0x2 DUP4 ADD MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0xC4 CALLDATALOAD SWAP2 PUSH1 0x42 PUSH1 0xA4 CALLDATALOAD SWAP3 KECCAK256 PUSH2 0x1313 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x11F9 JUMP JUMPDEST AND SUB PUSH2 0x40E JUMPI POP PUSH2 0x40B SWAP4 SWAP5 POP PUSH2 0x10F7 JUMP JUMPDEST DUP1 RETURN JUMPDEST PUSH1 0x64 SWAP1 PUSH1 0x20 DUP8 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332305065726D69743A20696E76616C6964207369676E61747572650000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP12 MSTORE PUSH1 0x41 DUP8 MSTORE PUSH1 0x24 DUP12 REVERT JUMPDEST DUP8 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 DUP2 DUP6 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332305065726D69743A206578706972656420646561646C696E65000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP7 DUP1 REVERT JUMPDEST POP SWAP1 DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x216 JUMPI PUSH2 0x4C0 PUSH2 0x1683 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x59A JUMPI PUSH1 0xB SLOAD DUP1 CALLVALUE MUL SWAP1 CALLVALUE DUP3 DIV SUB PUSH2 0x587 JUMPI PUSH8 0xDE0B6B3A7640000 SWAP1 DIV SWAP2 ADDRESS DUP5 MSTORE DUP4 PUSH1 0x20 MSTORE DUP3 DUP3 DUP6 KECCAK256 SLOAD LT PUSH2 0x536 JUMPI POP PUSH32 0x8FAFEBCAF9D154343DAD25669BFA277F4FBACD7AC6B0C4FED522580E040A0F33 SWAP1 PUSH2 0x520 DUP4 CALLER ADDRESS PUSH2 0x16D9 JUMP JUMPDEST DUP1 MLOAD SWAP3 CALLVALUE DUP5 MSTORE PUSH1 0x20 DUP5 ADD MSTORE CALLER SWAP3 LOG2 PUSH1 0x1 PUSH1 0xA SSTORE DUP1 RETURN JUMPDEST PUSH1 0x20 PUSH1 0x84 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E7420746F6B656E2062616C616E636520696E20636F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1B9D1C9858DD PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x11 DUP4 MSTORE PUSH1 0x24 DUP5 REVERT JUMPDEST SWAP1 PUSH1 0x20 PUSH1 0x64 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D7573742073656E642045544820746F2065786368616E676500000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x283 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x283 JUMPI PUSH1 0x20 SWAP1 PUSH2 0x606 PUSH2 0x5FD PUSH2 0xFBD JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0x1847 JUMP JUMPDEST SWAP1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST POP DUP3 CALLVALUE PUSH2 0x6BA JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x6BA JUMPI PUSH2 0x629 PUSH2 0xFBD JUMP JUMPDEST SWAP2 DUP4 PUSH1 0x24 CALLDATALOAD SWAP3 CALLER DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP2 DUP2 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP7 AND DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 SLOAD SWAP1 DUP3 DUP3 LT PUSH2 0x669 JUMPI PUSH1 0x20 DUP6 PUSH2 0x662 DUP6 DUP6 SUB DUP8 CALLER PUSH2 0x10F7 JUMP JUMPDEST MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x20 DUP7 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x216 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x216 JUMPI PUSH2 0x6D6 PUSH2 0xFEE JUMP JUMPDEST SELFBALANCE SWAP1 DUP2 ISZERO PUSH2 0x708 JUMPI POP PUSH1 0x9 SLOAD DUP4 SWAP2 DUP3 SWAP2 DUP3 SWAP2 DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 CALL ISZERO PUSH2 0x6FE JUMPI POP DUP1 RETURN JUMPDEST MLOAD SWAP1 RETURNDATASIZE SWAP1 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH1 0x64 SWAP1 PUSH1 0x20 DUP5 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x4E6F2045544820746F207769746864726177 PUSH1 0x70 SHL PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x216 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x216 JUMPI DUP1 MLOAD SWAP2 DUP4 DUP2 SLOAD SWAP1 PUSH2 0x762 DUP3 PUSH2 0x1046 JUMP JUMPDEST DUP1 DUP7 MSTORE SWAP3 PUSH1 0x1 SWAP3 DUP1 DUP5 AND SWAP1 DUP2 ISZERO PUSH2 0x7FF JUMPI POP PUSH1 0x1 EQ PUSH2 0x7A3 JUMPI JUMPDEST PUSH2 0x79F DUP7 DUP7 PUSH2 0x78D DUP3 DUP12 SUB DUP4 PUSH2 0x10B2 JUMP JUMPDEST MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x20 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0xF7D JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST DUP2 MSTORE SWAP5 POP PUSH32 0x8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19B JUMPDEST DUP3 DUP7 LT PUSH2 0x7E7 JUMPI POP POP POP PUSH2 0x78D DUP3 PUSH1 0x20 PUSH2 0x79F SWAP6 DUP3 ADD ADD SWAP5 CODESIZE PUSH2 0x77C JUMP JUMPDEST DUP1 SLOAD PUSH1 0x20 DUP8 DUP8 ADD DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 SWAP6 ADD SWAP5 DUP2 ADD PUSH2 0x7C9 JUMP JUMPDEST SWAP1 POP PUSH2 0x79F SWAP8 POP DUP7 SWAP4 POP PUSH1 0x20 SWAP3 POP PUSH2 0x78D SWAP5 SWAP2 POP PUSH1 0xFF NOT AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD SWAP5 CODESIZE PUSH2 0x77C JUMP JUMPDEST POP POP CALLVALUE PUSH2 0x283 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x283 JUMPI PUSH1 0x9 SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x283 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x283 JUMPI PUSH2 0x86E PUSH2 0xFBD JUMP JUMPDEST PUSH2 0x876 PUSH2 0xFEE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 DUP4 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE SWAP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH32 0xCDD2E9B91A56913D370075169CEFA1602BA36BE5301664F752192BB1709DF757 DUP3 DUP1 LOG2 DUP1 RETURN JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x216 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x216 JUMPI PUSH2 0x8F4 PUSH32 0x0 PUSH2 0x14CD JUMP JUMPDEST SWAP3 PUSH2 0x91E PUSH32 0x0 PUSH2 0x15C9 JUMP JUMPDEST SWAP1 DUP3 MLOAD SWAP3 PUSH1 0x20 SWAP3 DUP4 DUP6 ADD SWAP6 DUP6 DUP8 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP9 GT OR PUSH2 0x9C3 JUMPI POP SWAP3 DUP1 PUSH2 0x979 DUP4 DUP9 SWAP7 PUSH2 0x96C SWAP10 DUP12 SWAP10 SWAP7 MSTORE DUP7 DUP7 MSTORE DUP2 MLOAD SWAP10 DUP11 SWAP10 PUSH1 0xF PUSH1 0xF8 SHL DUP12 MSTORE PUSH1 0xE0 DUP7 DUP13 ADD MSTORE PUSH1 0xE0 DUP12 ADD SWAP1 PUSH2 0xF7D JUMP JUMPDEST SWAP2 DUP10 DUP4 SUB SWAP1 DUP11 ADD MSTORE PUSH2 0xF7D JUMP JUMPDEST SWAP3 CHAINID PUSH1 0x60 DUP9 ADD MSTORE ADDRESS PUSH1 0x80 DUP9 ADD MSTORE DUP5 PUSH1 0xA0 DUP9 ADD MSTORE DUP7 DUP5 SUB PUSH1 0xC0 DUP9 ADD MSTORE MLOAD SWAP3 DUP4 DUP2 MSTORE ADD SWAP4 SWAP3 JUMPDEST DUP3 DUP2 LT PUSH2 0x9AC JUMPI POP POP POP POP SUB SWAP1 RETURN JUMPDEST DUP4 MLOAD DUP6 MSTORE DUP7 SWAP6 POP SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x99D JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x41 SWAP1 MSTORE PUSH1 0x24 DUP4 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x283 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x283 JUMPI PUSH1 0x20 SWAP2 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x9FE PUSH2 0xFBD JUMP JUMPDEST AND DUP2 MSTORE PUSH1 0x7 DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP4 CALLVALUE PUSH2 0x6BA JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x6BA JUMPI PUSH2 0xA27 PUSH2 0xFEE JUMP JUMPDEST PUSH1 0x9 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP3 DUP1 LOG3 DUP1 RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x283 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x283 JUMPI PUSH1 0x20 SWAP2 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xA93 PUSH2 0xFBD JUMP JUMPDEST AND DUP2 MSTORE DUP1 DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x216 JUMPI PUSH1 0x20 SWAP2 DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xC7A JUMPI DUP2 CALLDATALOAD SWAP2 PUSH2 0xAC1 PUSH2 0x1683 JUMP JUMPDEST DUP3 ISZERO PUSH2 0xC2B JUMPI CALLER DUP6 MSTORE DUP5 DUP5 MSTORE DUP3 DUP3 DUP7 KECCAK256 SLOAD LT PUSH2 0xBEA JUMPI PUSH8 0xDE0B6B3A7640000 DUP4 MUL PUSH8 0xDE0B6B3A763FFFF NOT DUP5 DUP3 DIV ADD PUSH2 0xBD7 JUMPI PUSH1 0xB SLOAD SWAP1 DUP2 ISZERO PUSH2 0xBC4 JUMPI DIV SWAP1 DUP2 SELFBALANCE LT PUSH2 0xB75 JUMPI POP PUSH2 0xB13 DUP4 ADDRESS CALLER PUSH2 0x16D9 JUMP JUMPDEST DUP5 DUP1 DUP3 DUP1 ISZERO PUSH2 0xB6B JUMPI JUMPDEST DUP3 DUP1 SWAP3 SWAP2 DUP2 SWAP3 CALLER SWAP1 CALL ISZERO PUSH2 0xB61 JUMPI PUSH32 0x2DCF9433D75DB0D8B1C172641F85E319FFE4AD22E108A95D1847CEB906E5195D SWAP3 SWAP4 DUP3 MLOAD SWAP5 DUP6 MSTORE DUP5 ADD MSTORE CALLER SWAP3 LOG2 PUSH1 0x1 PUSH1 0xA SSTORE DUP1 RETURN JUMPDEST DUP2 MLOAD RETURNDATASIZE DUP7 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x8FC SWAP2 POP PUSH2 0xB1D JUMP JUMPDEST DUP3 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE SWAP1 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E74204554482062616C616E636520696E20636F6E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x1C9858DD PUSH1 0xE2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP8 MSTORE PUSH1 0x12 DUP4 MSTORE PUSH1 0x24 DUP8 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x11 DUP3 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST DUP4 PUSH1 0x64 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E7420746F6B656E2062616C616E6365000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST DUP4 PUSH1 0x84 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D7573742073656C6C206120706F73697469766520616D6F756E74206F662074 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6F6B656E73 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST DUP4 DUP1 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x283 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x283 JUMPI PUSH1 0x20 SWAP2 PUSH1 0xFF SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xCA9 PUSH2 0xFBD JUMP JUMPDEST AND DUP2 MSTORE PUSH1 0xC DUP6 MSTORE KECCAK256 SLOAD AND SWAP1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x216 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x216 JUMPI PUSH2 0xCD6 PUSH2 0xFBD JUMP JUMPDEST SWAP1 PUSH1 0x24 CALLDATALOAD SWAP2 PUSH2 0xCE3 PUSH2 0xFEE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP3 DUP4 ISZERO PUSH2 0xD40 JUMPI POP PUSH1 0x20 DUP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 PUSH2 0xD26 DUP8 SWAP6 PUSH1 0x2 SLOAD PUSH2 0x10D4 JUMP JUMPDEST PUSH1 0x2 SSTORE DUP6 DUP6 MSTORE DUP5 DUP4 MSTORE DUP1 DUP6 KECCAK256 DUP3 DUP2 SLOAD ADD SWAP1 SSTORE MLOAD SWAP1 DUP2 MSTORE LOG3 DUP1 RETURN JUMPDEST PUSH1 0x20 PUSH1 0x64 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x283 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x283 JUMPI PUSH1 0x20 SWAP1 PUSH1 0xB SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x283 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x283 JUMPI PUSH2 0x662 PUSH1 0x20 SWAP3 PUSH2 0xDEA PUSH2 0xDC4 PUSH2 0xFBD JUMP JUMPDEST CALLER DUP4 MSTORE PUSH1 0x1 DUP7 MSTORE DUP5 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP5 MSTORE DUP7 MSTORE SWAP2 DUP5 SWAP1 KECCAK256 SLOAD PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0x10D4 JUMP JUMPDEST SWAP1 CALLER PUSH2 0x10F7 JUMP JUMPDEST POP POP CALLVALUE PUSH2 0x283 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x283 JUMPI PUSH1 0x20 SWAP1 PUSH2 0xE0E PUSH2 0x13A2 JUMP JUMPDEST SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x283 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x283 JUMPI PUSH1 0x20 SWAP1 MLOAD PUSH1 0x12 DUP2 MSTORE RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x283 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x283 JUMPI PUSH1 0x20 SWAP1 PUSH2 0x606 PUSH2 0xE52 PUSH2 0xFBD JUMP JUMPDEST PUSH2 0xE5A PUSH2 0xFD8 JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD SWAP2 PUSH2 0x1877 JUMP JUMPDEST POP POP CALLVALUE PUSH2 0x283 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x283 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x2 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x283 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x283 JUMPI PUSH1 0x20 SWAP1 PUSH2 0x662 PUSH2 0xEA2 PUSH2 0xFBD JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER PUSH2 0x10F7 JUMP JUMPDEST DUP5 SWAP1 DUP5 CALLVALUE PUSH2 0x216 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x216 JUMPI DUP3 PUSH1 0x3 SLOAD PUSH2 0xECC DUP2 PUSH2 0x1046 JUMP JUMPDEST DUP1 DUP6 MSTORE SWAP2 PUSH1 0x1 SWAP2 DUP1 DUP4 AND SWAP1 DUP2 ISZERO PUSH2 0xF55 JUMPI POP PUSH1 0x1 EQ PUSH2 0xEF8 JUMPI JUMPDEST POP POP POP PUSH2 0x78D DUP3 PUSH2 0x79F SWAP5 SUB DUP4 PUSH2 0x10B2 JUMP JUMPDEST SWAP5 POP PUSH1 0x3 DUP6 MSTORE PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B JUMPDEST DUP3 DUP7 LT PUSH2 0xF3D JUMPI POP POP POP PUSH2 0x78D DUP3 PUSH1 0x20 PUSH2 0x79F SWAP6 DUP3 ADD ADD SWAP5 PUSH2 0xEE6 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x20 DUP8 DUP8 ADD DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 SWAP6 ADD SWAP5 DUP2 ADD PUSH2 0xF20 JUMP JUMPDEST PUSH2 0x79F SWAP8 POP DUP7 SWAP4 POP PUSH1 0x20 SWAP3 POP PUSH2 0x78D SWAP5 SWAP2 POP PUSH1 0xFF NOT AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD SWAP5 PUSH2 0xEE6 JUMP JUMPDEST SWAP2 SWAP1 DUP3 MLOAD SWAP3 DUP4 DUP3 MSTORE PUSH1 0x0 JUMPDEST DUP5 DUP2 LT PUSH2 0xFA9 JUMPI POP POP DUP3 PUSH1 0x0 PUSH1 0x20 DUP1 SWAP5 SWAP6 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 DUP4 ADD DUP2 ADD MLOAD DUP5 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0xF88 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xFD3 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xFD3 JUMPI JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x1002 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0x1076 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x1060 JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x1055 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x109C JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x109C JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x10E1 JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 DUP3 ISZERO PUSH2 0x11A8 JUMPI AND SWAP2 DUP3 ISZERO PUSH2 0x1158 JUMPI PUSH1 0x20 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 DUP4 PUSH1 0x0 MSTORE PUSH1 0x1 DUP3 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP6 PUSH1 0x0 MSTORE DUP3 MSTORE DUP1 PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x12FD JUMPI DUP1 PUSH2 0x120A JUMPI POP JUMP JUMPDEST PUSH1 0x1 DUP2 SUB PUSH2 0x1257 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP2 SUB PUSH2 0x12A4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x3 EQ PUSH2 0x12AD JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7565 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP3 SWAP2 SWAP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 GT PUSH2 0x1396 JUMPI SWAP2 PUSH1 0x80 SWAP5 SWAP4 SWAP2 PUSH1 0xFF PUSH1 0x20 SWAP5 PUSH1 0x40 MLOAD SWAP5 DUP6 MSTORE AND DUP5 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x0 SWAP4 DUP5 SWAP2 DUP3 DUP1 MSTORE PUSH1 0x1 GAS STATICCALL ISZERO PUSH2 0x1389 JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x1383 JUMPI SWAP2 SWAP1 JUMP JUMPDEST POP PUSH1 0x1 SWAP1 JUMP JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 RETURNDATASIZE SWAP1 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 SWAP1 PUSH1 0x3 SWAP1 JUMP JUMPDEST ADDRESS PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x14A4 JUMPI JUMPDEST ISZERO PUSH2 0x13FD JUMPI PUSH32 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F DUP3 MSTORE PUSH32 0x0 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x0 PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xA0 DUP2 MSTORE PUSH1 0xC0 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x109C JUMPI PUSH1 0x40 MSTORE MLOAD SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST POP PUSH32 0x0 CHAINID EQ PUSH2 0x13D4 JUMP JUMPDEST PUSH1 0xFF DUP2 EQ PUSH2 0x150B JUMPI PUSH1 0xFF DUP2 AND SWAP1 PUSH1 0x1F DUP3 GT PUSH2 0x14F9 JUMPI PUSH1 0x40 MLOAD SWAP2 PUSH2 0x14EF DUP4 PUSH2 0x1080 JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2CD44AC3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x5 SLOAD DUP2 PUSH1 0x0 PUSH2 0x151E DUP4 PUSH2 0x1046 JUMP JUMPDEST DUP1 DUP4 MSTORE SWAP3 PUSH1 0x1 SWAP1 DUP2 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x15A7 JUMPI POP PUSH1 0x1 EQ PUSH2 0x1548 JUMPI JUMPDEST POP PUSH2 0x1545 SWAP3 POP SUB DUP3 PUSH2 0x10B2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x5 PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP2 POP PUSH32 0x36B6384B5ECA791C62761152D0C79BB0604C104A5FB6F4EB0703F3154BB3DB0 JUMPDEST DUP5 DUP4 LT PUSH2 0x158C JUMPI POP PUSH2 0x1545 SWAP4 POP POP DUP2 ADD PUSH1 0x20 ADD CODESIZE PUSH2 0x1538 JUMP JUMPDEST DUP2 SWAP4 POP SWAP1 DUP2 PUSH1 0x20 SWAP3 SLOAD DUP4 DUP6 DUP10 ADD ADD MSTORE ADD SWAP2 ADD SWAP1 SWAP2 DUP5 SWAP3 PUSH2 0x1573 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 SWAP3 POP PUSH2 0x1545 SWAP5 SWAP2 POP PUSH1 0xFF NOT AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD CODESIZE PUSH2 0x1538 JUMP JUMPDEST PUSH1 0xFF DUP2 EQ PUSH2 0x15EB JUMPI PUSH1 0xFF DUP2 AND SWAP1 PUSH1 0x1F DUP3 GT PUSH2 0x14F9 JUMPI PUSH1 0x40 MLOAD SWAP2 PUSH2 0x14EF DUP4 PUSH2 0x1080 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x6 SLOAD DUP2 PUSH1 0x0 PUSH2 0x15FE DUP4 PUSH2 0x1046 JUMP JUMPDEST DUP1 DUP4 MSTORE SWAP3 PUSH1 0x1 SWAP1 DUP2 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x15A7 JUMPI POP PUSH1 0x1 EQ PUSH2 0x1624 JUMPI POP PUSH2 0x1545 SWAP3 POP SUB DUP3 PUSH2 0x10B2 JUMP JUMPDEST PUSH1 0x6 PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP2 POP PUSH32 0xF652222313E28459528D920B65115C16C04F3EFC82AAEDC97BE59F3F377C0D3F JUMPDEST DUP5 DUP4 LT PUSH2 0x1668 JUMPI POP PUSH2 0x1545 SWAP4 POP POP DUP2 ADD PUSH1 0x20 ADD CODESIZE PUSH2 0x1538 JUMP JUMPDEST DUP2 SWAP4 POP SWAP1 DUP2 PUSH1 0x20 SWAP3 SLOAD DUP4 DUP6 DUP10 ADD ADD MSTORE ADD SWAP2 ADD SWAP1 SWAP2 DUP5 SWAP3 PUSH2 0x164F JUMP JUMPDEST PUSH1 0x2 PUSH1 0xA SLOAD EQ PUSH2 0x1694 JUMPI PUSH1 0x2 PUSH1 0xA SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 DUP3 ISZERO PUSH2 0x17F4 JUMPI AND SWAP2 DUP3 ISZERO PUSH2 0x17A3 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE DUP1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 DUP1 DUP4 LT PUSH2 0x174F JUMPI PUSH1 0x40 DUP3 DUP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP6 DUP8 PUSH1 0x20 SWAP7 MSTORE DUP3 DUP7 MSTORE SUB DUP3 DUP3 KECCAK256 SSTORE DUP7 DUP2 MSTORE KECCAK256 DUP2 DUP2 SLOAD ADD SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP1 CALLER PUSH1 0x0 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH2 0x186D JUMPI PUSH2 0x1868 SWAP2 CALLER PUSH2 0x16D9 JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH2 0x1868 SWAP2 CALLER PUSH2 0x16D9 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x0 CALLER DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 DUP3 KECCAK256 SLOAD AND PUSH2 0x1925 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 CALLER DUP6 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD SWAP4 SWAP1 DUP5 ADD PUSH2 0x18C4 JUMPI JUMPDEST PUSH2 0x1868 SWAP4 POP PUSH2 0x16D9 JUMP JUMPDEST DUP3 DUP5 LT PUSH2 0x18E0 JUMPI PUSH2 0x18DB DUP4 PUSH2 0x1868 SWAP6 SUB CALLER DUP4 PUSH2 0x10F7 JUMP JUMPDEST PUSH2 0x18BA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP PUSH2 0x1868 SWAP3 PUSH2 0x16D9 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH23 0x8F6535CB42068C7C3C5A81F73DFDF55A42F8DBF9D9CF8D 0xC6 0xE4 SWAP14 0xA5 DUP13 0xF6 0xD3 MLOAD PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ",
							"sourceMap": "319:4836:17:-:0;;;;-1:-1:-1;;;;;319:4836:17;-1:-1:-1;;319:4836:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;319:4836:17;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;;319:4836:17;;;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;319:4836:17;;;;;;;;;2046:13:3;319:4836:17;;;;;;;;;;;;;-1:-1:-1;319:4836:17;;;;;;;;;;;;;;;-1:-1:-1;319:4836:17;;;;;;;;;-1:-1:-1;319:4836:17;;;;-1:-1:-1;;;;319:4836:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;319:4836:17;;;;;;;;;;;;;;;;;;;;;3251:45:14;;;:::i;:::-;3243:53;;;;;3317:51;;;:::i;:::-;3306:62;;;;;319:4836:17;3392:22:14;;3378:36;;;;319:4836:17;3441:25:14;;3424:42;;;;;;3494:13;3477:30;;319:4836:17;;4054:81:14;;;;319:4836:17;1929:95:14;319:4836:17;;1929:95:14;;;319:4836:17;1929:95:14;;;319:4836:17;3494:13:14;1929:95;;;319:4836:17;4129:4:14;3477:30;1929:95;;;3477:30;4054:81;;1929:95;319:4836:17;;;;;;;;;;;;;;;;;4044:92:14;;1929:95;3517:48;4129:4;1929:95;3575:27;2518:6:0;319:4836:17;;734:10:8;-1:-1:-1;;;;;;319:4836:17;;;;;;;-1:-1:-1;;;;;319:4836:17;2566:40:0;-1:-1:-1;;2566:40:0;1821:22:2;319:4836:17;1423:4;319:4836;;;;;;;;;;;;;;;;4129:4:14;8603:21:3;319:4836:17;;;;;8731:22:3;319:4836:17;;;;;;;;;-1:-1:-1;319:4836:17;8952:37:3;319:4836:17;8731:22:3;319:4836:17;4129:4:14;319:4836:17;;;;;;;;;;;;;;;;;;;4129:4:14;8952:37:3;;319:4836:17;;;;;;;;;;;;;;;;;;;;;;;;;1929:95:14;319:4836:17;;;;;3477:30:14;319:4836:17;;;;;1929:95:14;319:4836:17;;;;;3378:36:14;319:4836:17;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;319:4836:17;;;-1:-1:-1;319:4836:17;;;;;;;-1:-1:-1;319:4836:17;;;-1:-1:-1;319:4836:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;319:4836:17;;;-1:-1:-1;319:4836:17;;;;;;;-1:-1:-1;319:4836:17;;;-1:-1:-1;319:4836:17;;;;;-1:-1:-1;319:4836:17;;;;;;;;;;;;;;-1:-1:-1;319:4836:17;;-1:-1:-1;319:4836:17;;-1:-1:-1;319:4836:17;;;;;;;;;;-1:-1:-1;319:4836:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;319:4836:17;;-1:-1:-1;319:4836:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;319:4836:17;;;;-1:-1:-1;319:4836:17;;;;;;;;;;;;;;;;;;-1:-1:-1;319:4836:17;;;-1:-1:-1;319:4836:17;;;;;;;;;;;;;;-1:-1:-1;319:4836:17;;;-1:-1:-1;319:4836:17;;;;;-1:-1:-1;319:4836:17;;;;;;;;;;;;-1:-1:-1;319:4836:17;;-1:-1:-1;319:4836:17;;-1:-1:-1;319:4836:17;;;;;;;;;;-1:-1:-1;319:4836:17;;;;;;;;;;;;;;;;-1:-1:-1;;319:4836:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;319:4836:17;;;-1:-1:-1;319:4836:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;319:4836:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;319:4836:17;;;-1:-1:-1;319:4836:17;;;;;;;;;-1:-1:-1;319:4836:17;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;319:4836:17;;;;;;;:::o;2895:341:10:-;319:4836:17;;3040:2:10;;319:4836:17;3018:24:10;;;3040:2;;;319:4836:17;;1835:2:10;319:4836:17;;1821:16:10;1817:72;;319:4836:17;;;;;;;;;;;;1930:36:10;;3058:27;:::o;319:4836:17:-;;;;;;;;;;1930:36:10;3058:27;:::o;1817:72::-;319:4836:17;;;1860:18:10;;;;;;;;;;;319:4836:17;;;;;;;;;-1:-1:-1;319:4836:17;;;;;;;;;;;;-1:-1:-1;319:4836:17;;;;;;1835:2:10;319:4836:17;;;;;;;1860:18:10;;;;319:4836:17;;;;;;;;;;;;;;;;;;;-1:-1:-1;319:4836:17;;3014:216:10;-1:-1:-1;;;;;319:4836:17;;;;3282:13:14;319:4836:17;;;;;;;;;;;;;;;;3014:216:10;319:4836:17;;;;;;;;;;;3014:216:10;319:4836:17;;;;;;;;;;;;;;;;-1:-1:-1;319:4836:17;;;;;;;;;;;;;;;;;;;1371:66:10;3176:43;:::o;319:4836:17:-;;;;-1:-1:-1;319:4836:17;;;;;;;;;;;;;-1:-1:-1;319:4836:17;;-1:-1:-1;319:4836:17;;-1:-1:-1;319:4836:17;;;;;;;;;;;;;;;;;;;;;;;1371:66:10;3176:43;:::o;319:4836:17:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;319:4836:17;;;;;;;;-1:-1:-1;319:4836:17;;;;-1:-1:-1;319:4836:17;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;319:4836:17;;;;;;;;;;;-1:-1:-1;319:4836:17;;;;;-1:-1:-1;319:4836:17;;;;;;;;2895:341:10;319:4836:17;;3040:2:10;;3018:24;;;3040:2;;;319:4836:17;1835:2:10;319:4836:17;;1821:16:10;1817:72;;319:4836:17;;;;;;;;;;;;1930:36:10;;3058:27;:::o;1817:72::-;319:4836:17;;;1860:18:10;;;;;;;;;;;319:4836:17;;;;;;;;;-1:-1:-1;319:4836:17;;;;;;;;;;;;-1:-1:-1;319:4836:17;;;;;;1835:2:10;319:4836:17;;;;;;;1860:18:10;;;;319:4836:17;;;;;;;;;;;;;;;;;;;-1:-1:-1;319:4836:17;;3014:216:10;319:4836:17;-1:-1:-1;;;;;319:4836:17;;;;3351:16:14;319:4836:17;;;;;;;;;;;;;;3014:216:10;319:4836:17;;;;;;;;;;;3014:216:10;319:4836:17;;;;;;;;;;;;;;;;-1:-1:-1;319:4836:17;;;;;;;;;;;;;;;;;3351:16:14;319:4836:17;1371:66:10;3176:43;:::o;319:4836:17:-;;;;-1:-1:-1;319:4836:17;;;;;;;;;;;;3351:16:14;-1:-1:-1;319:4836:17;;-1:-1:-1;319:4836:17;;-1:-1:-1;319:4836:17;;;;;;;;;;;;;;;;;;;;;3351:16:14;319:4836:17;1371:66:10;3176:43;:::o;319:4836:17:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;319:4836:17;;;;;;;3351:16:14;-1:-1:-1;319:4836:17;;;;-1:-1:-1;319:4836:17;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;319:4836:17;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"abi_decode_address": {
									"entryPoint": 4056,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"abi_decode_address_14808": {
									"entryPoint": 4029,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"abi_encode_string": {
									"entryPoint": 3965,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_uint256": {
									"entryPoint": 4308,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"extract_byte_array_length": {
									"entryPoint": 4166,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"finalize_allocation": {
									"entryPoint": 4274,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"finalize_allocation_19081": {
									"entryPoint": 4224,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"fun_approve": {
									"entryPoint": 4343,
									"id": 723,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"fun_checkOwner": {
									"entryPoint": 4078,
									"id": 54,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"fun_domainSeparatorV4": {
									"entryPoint": 5026,
									"id": 2244,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"fun_nonReentrantBefore": {
									"entryPoint": 5763,
									"id": 182,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"fun_throwError": {
									"entryPoint": 4601,
									"id": 1813,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"fun_toStringWithFallback": {
									"entryPoint": 5325,
									"id": 1388,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"fun_toStringWithFallback_14818": {
									"entryPoint": 5577,
									"id": 1388,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"fun_transfer": {
									"entryPoint": 5849,
									"id": 549,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"fun_transferFrom": {
									"entryPoint": 6263,
									"id": 3674,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"fun_transfer_3640": {
									"entryPoint": 6215,
									"id": 3640,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"fun_tryRecover": {
									"entryPoint": 4883,
									"id": 2027,
									"parameterSlots": 4,
									"returnSlots": 2
								}
							},
							"generatedSources": [],
							"immutableReferences": {
								"2142": [
									{
										"length": 32,
										"start": 5083
									}
								],
								"2144": [
									{
										"length": 32,
										"start": 5287
									}
								],
								"2146": [
									{
										"length": 32,
										"start": 5029
									}
								],
								"2148": [
									{
										"length": 32,
										"start": 5162
									}
								],
								"2150": [
									{
										"length": 32,
										"start": 5200
									}
								],
								"2153": [
									{
										"length": 32,
										"start": 2256
									}
								],
								"2156": [
									{
										"length": 32,
										"start": 2298
									}
								]
							},
							"linkReferences": {},
							"object": "6080604081815260048036101561001557600080fd5b600092833560e01c90816306fdde0314610eac57508063095ea7b314610e8257806318160ddd14610e6357806323b872dd14610e31578063313ce56714610e155780633644e51514610df15780633950935114610da15780633ba0b9a914610d8257806340c10f1914610cbc57806365855dfd14610c7e5780636c11bcd314610aa257806370a0823114610a6b578063715018a614610a0e5780637ecebe00146109d657806384b0196e146108b95780638ab1d681146108535780638da5cb5b1461082a57806395d89b4114610740578063a0ef91df146106bd578063a457c2d71461060f578063a9059cbb146105dd578063d0febe4c146104ab578063d505accf146102f2578063db068e0e146102d0578063dd62ed3e14610287578063e43252d71461021a5763f2fde38b1461014c57600080fd5b3461021657602036600319011261021657610165610fbd565b9061016e610fee565b6001600160a01b039182169283156101c4575050600954826bffffffffffffffffffffffff60a01b821617600955167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8280fd5b50503461028357602036600319011261028357610235610fbd565b61023d610fee565b6001600160a01b0316808352600c602052908220805460ff191660011790557fa850ae9193f515cbae8d35e8925bd2be26627fc91bce650b8652ed254e9cab038280a280f35b5080fd5b505034610283578060031936011261028357806020926102a5610fbd565b6102ad610fd8565b6001600160a01b0391821683526001865283832091168252845220549051908152f35b838234610283576020366003190112610283576102eb610fee565b35600b5580f35b508290346102835760e03660031901126102835761030e610fbd565b610316610fd8565b906044359260643560843560ff811681036104a7578142116104645760018060a01b0390818516928389526007602052898920908154916001830190558a519060208201927f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98452868d840152858a1660608401528a608084015260a083015260c082015260c0815260e0810181811067ffffffffffffffff821117610451578b525190206103f9916103f1916103cb6113a2565b908c519161190160f01b83526002830152602282015260c43591604260a4359220611313565b9190916111f9565b160361040e575061040b9394506110f7565b80f35b606490602087519162461bcd60e51b8352820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e617475726500006044820152fd5b634e487b7160e01b8b526041875260248bfd5b875162461bcd60e51b8152602081850152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e650000006044820152606490fd5b8680fd5b509082600319360112610216576104c0611683565b341561059a57600b54803402903482040361058757670de0b6b3a76400009004913084528360205282828520541061053657507f8fafebcaf9d154343dad25669bfa277f4fbacd7ac6b0c4fed522580e040a0f33906105208333306116d9565b80519234845260208401523392a26001600a5580f35b6020608492519162461bcd60e51b8352820152602660248201527f496e73756666696369656e7420746f6b656e2062616c616e636520696e20636f6044820152651b9d1c9858dd60d21b6064820152fd5b634e487b7160e01b845260118352602484fd5b906020606492519162461bcd60e51b8352820152601960248201527f4d7573742073656e642045544820746f2065786368616e6765000000000000006044820152fd5b5050346102835780600319360112610283576020906106066105fd610fbd565b60243590611847565b90519015158152f35b5082346106ba57826003193601126106ba57610629610fbd565b918360243592338152600160205281812060018060a01b03861682526020522054908282106106695760208561066285850387336110f7565b5160018152f35b608490602086519162461bcd60e51b8352820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152fd5b80fd5b50346102165782600319360112610216576106d6610fee565b47908115610708575060095483918291829182916001600160a01b031682f1156106fe575080f35b51903d90823e3d90fd5b606490602084519162461bcd60e51b835282015260126024820152714e6f2045544820746f20776974686472617760701b6044820152fd5b5090346102165782600319360112610216578051918381549061076282611046565b808652926001928084169081156107ff57506001146107a3575b61079f868661078d828b03836110b2565b51918291602083526020830190610f7d565b0390f35b815294507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8286106107e75750505061078d82602061079f95820101943861077c565b805460208787018101919091529095019481016107c9565b905061079f97508693506020925061078d94915060ff191682840152151560051b820101943861077c565b50503461028357816003193601126102835760095490516001600160a01b039091168152602090f35b5050346102835760203660031901126102835761086e610fbd565b610876610fee565b6001600160a01b0316808352600c602052908220805460ff191690557fcdd2e9b91a56913d370075169cefa1602ba36be5301664f752192bb1709df7578280a280f35b5090346102165782600319360112610216576108f47f00000000000000000000000000000000000000000000000000000000000000006114cd565b9261091e7f00000000000000000000000000000000000000000000000000000000000000006115c9565b908251926020928385019585871067ffffffffffffffff8811176109c35750928061097983889661096c998b9996528686528151998a99600f60f81b8b5260e0868c015260e08b0190610f7d565b91898303908a0152610f7d565b924660608801523060808801528460a088015286840360c088015251928381520193925b8281106109ac57505050500390f35b83518552869550938101939281019260010161099d565b634e487b7160e01b845260419052602483fd5b5050346102835760203660031901126102835760209181906001600160a01b036109fe610fbd565b1681526007845220549051908152f35b83346106ba57806003193601126106ba57610a27610fee565b600980546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b5050346102835760203660031901126102835760209181906001600160a01b03610a93610fbd565b16815280845220549051908152f35b50346102165760209182600319360112610c7a57813591610ac1611683565b8215610c2b57338552848452828286205410610bea57670de0b6b3a76400008302670de0b6b3a763ffff1984820401610bd757600b54908115610bc4570490814710610b755750610b138330336116d9565b8480828015610b6b575b8280929181923390f115610b61577f2dcf9433d75db0d8b1c172641f85e319ffe4ad22e108a95d1847ceb906e5195d929382519485528401523392a26001600a5580f35b81513d86823e3d90fd5b6108fc9150610b1d565b825162461bcd60e51b81529081018590526024808201527f496e73756666696369656e74204554482062616c616e636520696e20636f6e746044820152631c9858dd60e21b6064820152608490fd5b634e487b7160e01b875260128352602487fd5b634e487b7160e01b865260118252602486fd5b83606492519162461bcd60e51b8352820152601a60248201527f496e73756666696369656e7420746f6b656e2062616c616e63650000000000006044820152fd5b83608492519162461bcd60e51b8352820152602560248201527f4d7573742073656c6c206120706f73697469766520616d6f756e74206f6620746044820152646f6b656e7360d81b6064820152fd5b8380fd5b5050346102835760203660031901126102835760209160ff9082906001600160a01b03610ca9610fbd565b168152600c855220541690519015158152f35b509034610216578060031936011261021657610cd6610fbd565b9060243591610ce3610fee565b6001600160a01b0316928315610d4057506020827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92610d2687956002546110d4565b60025585855284835280852082815401905551908152a380f35b6020606492519162461bcd60e51b8352820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152fd5b505034610283578160031936011261028357602090600b549051908152f35b505034610283578060031936011261028357610662602092610dea610dc4610fbd565b338352600186528483206001600160a01b038216845286529184902054602435906110d4565b90336110f7565b505034610283578160031936011261028357602090610e0e6113a2565b9051908152f35b5050346102835781600319360112610283576020905160128152f35b50503461028357606036600319011261028357602090610606610e52610fbd565b610e5a610fd8565b60443591611877565b5050346102835781600319360112610283576020906002549051908152f35b505034610283578060031936011261028357602090610662610ea2610fbd565b60243590336110f7565b8490843461021657826003193601126102165782600354610ecc81611046565b80855291600191808316908115610f555750600114610ef8575b50505061078d8261079f9403836110b2565b9450600385527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b828610610f3d5750505061078d82602061079f9582010194610ee6565b80546020878701810191909152909501948101610f20565b61079f97508693506020925061078d94915060ff191682840152151560051b82010194610ee6565b919082519283825260005b848110610fa9575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610f88565b600435906001600160a01b0382168203610fd357565b600080fd5b602435906001600160a01b0382168203610fd357565b6009546001600160a01b0316330361100257565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b90600182811c92168015611076575b602083101461106057565b634e487b7160e01b600052602260045260246000fd5b91607f1691611055565b6040810190811067ffffffffffffffff82111761109c57604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761109c57604052565b919082018092116110e157565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b039081169182156111a857169182156111585760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260018252604060002085600052825280604060002055604051908152a3565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b60058110156112fd578061120a5750565b600181036112575760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606490fd5b600281036112a45760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606490fd5b6003146112ad57565b60405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608490fd5b634e487b7160e01b600052602160045260246000fd5b9291907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083116113965791608094939160ff602094604051948552168484015260408301526060820152600093849182805260015afa156113895781516001600160a01b03811615611383579190565b50600190565b50604051903d90823e3d90fd5b50505050600090600390565b307f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614806114a4575b156113fd577f000000000000000000000000000000000000000000000000000000000000000090565b60405160208101907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f82527f000000000000000000000000000000000000000000000000000000000000000060408201527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260a0815260c0810181811067ffffffffffffffff82111761109c5760405251902090565b507f000000000000000000000000000000000000000000000000000000000000000046146113d4565b60ff811461150b5760ff811690601f82116114f957604051916114ef83611080565b8252602082015290565b604051632cd44ac360e21b8152600490fd5b5060405160055481600061151e83611046565b808352926001908181169081156115a75750600114611548575b50611545925003826110b2565b90565b6005600090815291507f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db05b84831061158c5750611545935050810160200138611538565b81935090816020925483858901015201910190918492611573565b90506020925061154594915060ff191682840152151560051b82010138611538565b60ff81146115eb5760ff811690601f82116114f957604051916114ef83611080565b506040516006548160006115fe83611046565b808352926001908181169081156115a757506001146116245750611545925003826110b2565b6006600090815291507ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f5b8483106116685750611545935050810160200138611538565b8193509081602092548385890101520191019091849261164f565b6002600a5414611694576002600a55565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b6001600160a01b039081169182156117f457169182156117a35760008281528060205260408120549180831061174f57604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220818154019055604051908152a3565b60405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b9033600052600c60205260ff6040600020541661186d5761186891336116d9565b600190565b61186891336116d9565b91906000338152600c60205260ff604082205416611925576001600160a01b038416815260016020818152604080842033855290915290912054939084016118c4575b61186893506116d9565b8284106118e0576118db83611868950333836110f7565b6118ba565b60405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606490fd5b50611868926116d956fea2646970667358221220768f6535cb42068c7c3c5a81f73dfdf55a42f8dbf9d9cf8dc6e49da58cf6d35164736f6c63430008120033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 DUP2 DUP2 MSTORE PUSH1 0x4 DUP1 CALLDATASIZE LT ISZERO PUSH2 0x15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP3 DUP4 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x6FDDE03 EQ PUSH2 0xEAC JUMPI POP DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xE82 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xE63 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0xE31 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0xE15 JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0xDF1 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0xDA1 JUMPI DUP1 PUSH4 0x3BA0B9A9 EQ PUSH2 0xD82 JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0xCBC JUMPI DUP1 PUSH4 0x65855DFD EQ PUSH2 0xC7E JUMPI DUP1 PUSH4 0x6C11BCD3 EQ PUSH2 0xAA2 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0xA6B JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xA0E JUMPI DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x9D6 JUMPI DUP1 PUSH4 0x84B0196E EQ PUSH2 0x8B9 JUMPI DUP1 PUSH4 0x8AB1D681 EQ PUSH2 0x853 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x82A JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x740 JUMPI DUP1 PUSH4 0xA0EF91DF EQ PUSH2 0x6BD JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x60F JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x5DD JUMPI DUP1 PUSH4 0xD0FEBE4C EQ PUSH2 0x4AB JUMPI DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x2F2 JUMPI DUP1 PUSH4 0xDB068E0E EQ PUSH2 0x2D0 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x287 JUMPI DUP1 PUSH4 0xE43252D7 EQ PUSH2 0x21A JUMPI PUSH4 0xF2FDE38B EQ PUSH2 0x14C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x216 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x216 JUMPI PUSH2 0x165 PUSH2 0xFBD JUMP JUMPDEST SWAP1 PUSH2 0x16E PUSH2 0xFEE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP3 DUP4 ISZERO PUSH2 0x1C4 JUMPI POP POP PUSH1 0x9 SLOAD DUP3 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA0 SHL DUP3 AND OR PUSH1 0x9 SSTORE AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP4 DUP1 LOG3 DUP1 RETURN JUMPDEST SWAP1 PUSH1 0x20 PUSH1 0x84 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x283 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x283 JUMPI PUSH2 0x235 PUSH2 0xFBD JUMP JUMPDEST PUSH2 0x23D PUSH2 0xFEE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 DUP4 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE SWAP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH32 0xA850AE9193F515CBAE8D35E8925BD2BE26627FC91BCE650B8652ED254E9CAB03 DUP3 DUP1 LOG2 DUP1 RETURN JUMPDEST POP DUP1 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x283 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x283 JUMPI DUP1 PUSH1 0x20 SWAP3 PUSH2 0x2A5 PUSH2 0xFBD JUMP JUMPDEST PUSH2 0x2AD PUSH2 0xFD8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND DUP4 MSTORE PUSH1 0x1 DUP7 MSTORE DUP4 DUP4 KECCAK256 SWAP2 AND DUP3 MSTORE DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP4 DUP3 CALLVALUE PUSH2 0x283 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x283 JUMPI PUSH2 0x2EB PUSH2 0xFEE JUMP JUMPDEST CALLDATALOAD PUSH1 0xB SSTORE DUP1 RETURN JUMPDEST POP DUP3 SWAP1 CALLVALUE PUSH2 0x283 JUMPI PUSH1 0xE0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x283 JUMPI PUSH2 0x30E PUSH2 0xFBD JUMP JUMPDEST PUSH2 0x316 PUSH2 0xFD8 JUMP JUMPDEST SWAP1 PUSH1 0x44 CALLDATALOAD SWAP3 PUSH1 0x64 CALLDATALOAD PUSH1 0x84 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 SUB PUSH2 0x4A7 JUMPI DUP2 TIMESTAMP GT PUSH2 0x464 JUMPI PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 DUP6 AND SWAP3 DUP4 DUP10 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE DUP10 DUP10 KECCAK256 SWAP1 DUP2 SLOAD SWAP2 PUSH1 0x1 DUP4 ADD SWAP1 SSTORE DUP11 MLOAD SWAP1 PUSH1 0x20 DUP3 ADD SWAP3 PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 DUP5 MSTORE DUP7 DUP14 DUP5 ADD MSTORE DUP6 DUP11 AND PUSH1 0x60 DUP5 ADD MSTORE DUP11 PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xC0 DUP2 MSTORE PUSH1 0xE0 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x451 JUMPI DUP12 MSTORE MLOAD SWAP1 KECCAK256 PUSH2 0x3F9 SWAP2 PUSH2 0x3F1 SWAP2 PUSH2 0x3CB PUSH2 0x13A2 JUMP JUMPDEST SWAP1 DUP13 MLOAD SWAP2 PUSH2 0x1901 PUSH1 0xF0 SHL DUP4 MSTORE PUSH1 0x2 DUP4 ADD MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0xC4 CALLDATALOAD SWAP2 PUSH1 0x42 PUSH1 0xA4 CALLDATALOAD SWAP3 KECCAK256 PUSH2 0x1313 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x11F9 JUMP JUMPDEST AND SUB PUSH2 0x40E JUMPI POP PUSH2 0x40B SWAP4 SWAP5 POP PUSH2 0x10F7 JUMP JUMPDEST DUP1 RETURN JUMPDEST PUSH1 0x64 SWAP1 PUSH1 0x20 DUP8 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332305065726D69743A20696E76616C6964207369676E61747572650000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP12 MSTORE PUSH1 0x41 DUP8 MSTORE PUSH1 0x24 DUP12 REVERT JUMPDEST DUP8 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 DUP2 DUP6 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332305065726D69743A206578706972656420646561646C696E65000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP7 DUP1 REVERT JUMPDEST POP SWAP1 DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x216 JUMPI PUSH2 0x4C0 PUSH2 0x1683 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x59A JUMPI PUSH1 0xB SLOAD DUP1 CALLVALUE MUL SWAP1 CALLVALUE DUP3 DIV SUB PUSH2 0x587 JUMPI PUSH8 0xDE0B6B3A7640000 SWAP1 DIV SWAP2 ADDRESS DUP5 MSTORE DUP4 PUSH1 0x20 MSTORE DUP3 DUP3 DUP6 KECCAK256 SLOAD LT PUSH2 0x536 JUMPI POP PUSH32 0x8FAFEBCAF9D154343DAD25669BFA277F4FBACD7AC6B0C4FED522580E040A0F33 SWAP1 PUSH2 0x520 DUP4 CALLER ADDRESS PUSH2 0x16D9 JUMP JUMPDEST DUP1 MLOAD SWAP3 CALLVALUE DUP5 MSTORE PUSH1 0x20 DUP5 ADD MSTORE CALLER SWAP3 LOG2 PUSH1 0x1 PUSH1 0xA SSTORE DUP1 RETURN JUMPDEST PUSH1 0x20 PUSH1 0x84 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E7420746F6B656E2062616C616E636520696E20636F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1B9D1C9858DD PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x11 DUP4 MSTORE PUSH1 0x24 DUP5 REVERT JUMPDEST SWAP1 PUSH1 0x20 PUSH1 0x64 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D7573742073656E642045544820746F2065786368616E676500000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x283 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x283 JUMPI PUSH1 0x20 SWAP1 PUSH2 0x606 PUSH2 0x5FD PUSH2 0xFBD JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0x1847 JUMP JUMPDEST SWAP1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST POP DUP3 CALLVALUE PUSH2 0x6BA JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x6BA JUMPI PUSH2 0x629 PUSH2 0xFBD JUMP JUMPDEST SWAP2 DUP4 PUSH1 0x24 CALLDATALOAD SWAP3 CALLER DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP2 DUP2 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP7 AND DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 SLOAD SWAP1 DUP3 DUP3 LT PUSH2 0x669 JUMPI PUSH1 0x20 DUP6 PUSH2 0x662 DUP6 DUP6 SUB DUP8 CALLER PUSH2 0x10F7 JUMP JUMPDEST MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x20 DUP7 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x216 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x216 JUMPI PUSH2 0x6D6 PUSH2 0xFEE JUMP JUMPDEST SELFBALANCE SWAP1 DUP2 ISZERO PUSH2 0x708 JUMPI POP PUSH1 0x9 SLOAD DUP4 SWAP2 DUP3 SWAP2 DUP3 SWAP2 DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 CALL ISZERO PUSH2 0x6FE JUMPI POP DUP1 RETURN JUMPDEST MLOAD SWAP1 RETURNDATASIZE SWAP1 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH1 0x64 SWAP1 PUSH1 0x20 DUP5 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x4E6F2045544820746F207769746864726177 PUSH1 0x70 SHL PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x216 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x216 JUMPI DUP1 MLOAD SWAP2 DUP4 DUP2 SLOAD SWAP1 PUSH2 0x762 DUP3 PUSH2 0x1046 JUMP JUMPDEST DUP1 DUP7 MSTORE SWAP3 PUSH1 0x1 SWAP3 DUP1 DUP5 AND SWAP1 DUP2 ISZERO PUSH2 0x7FF JUMPI POP PUSH1 0x1 EQ PUSH2 0x7A3 JUMPI JUMPDEST PUSH2 0x79F DUP7 DUP7 PUSH2 0x78D DUP3 DUP12 SUB DUP4 PUSH2 0x10B2 JUMP JUMPDEST MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x20 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0xF7D JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST DUP2 MSTORE SWAP5 POP PUSH32 0x8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19B JUMPDEST DUP3 DUP7 LT PUSH2 0x7E7 JUMPI POP POP POP PUSH2 0x78D DUP3 PUSH1 0x20 PUSH2 0x79F SWAP6 DUP3 ADD ADD SWAP5 CODESIZE PUSH2 0x77C JUMP JUMPDEST DUP1 SLOAD PUSH1 0x20 DUP8 DUP8 ADD DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 SWAP6 ADD SWAP5 DUP2 ADD PUSH2 0x7C9 JUMP JUMPDEST SWAP1 POP PUSH2 0x79F SWAP8 POP DUP7 SWAP4 POP PUSH1 0x20 SWAP3 POP PUSH2 0x78D SWAP5 SWAP2 POP PUSH1 0xFF NOT AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD SWAP5 CODESIZE PUSH2 0x77C JUMP JUMPDEST POP POP CALLVALUE PUSH2 0x283 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x283 JUMPI PUSH1 0x9 SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x283 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x283 JUMPI PUSH2 0x86E PUSH2 0xFBD JUMP JUMPDEST PUSH2 0x876 PUSH2 0xFEE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 DUP4 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE SWAP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH32 0xCDD2E9B91A56913D370075169CEFA1602BA36BE5301664F752192BB1709DF757 DUP3 DUP1 LOG2 DUP1 RETURN JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x216 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x216 JUMPI PUSH2 0x8F4 PUSH32 0x0 PUSH2 0x14CD JUMP JUMPDEST SWAP3 PUSH2 0x91E PUSH32 0x0 PUSH2 0x15C9 JUMP JUMPDEST SWAP1 DUP3 MLOAD SWAP3 PUSH1 0x20 SWAP3 DUP4 DUP6 ADD SWAP6 DUP6 DUP8 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP9 GT OR PUSH2 0x9C3 JUMPI POP SWAP3 DUP1 PUSH2 0x979 DUP4 DUP9 SWAP7 PUSH2 0x96C SWAP10 DUP12 SWAP10 SWAP7 MSTORE DUP7 DUP7 MSTORE DUP2 MLOAD SWAP10 DUP11 SWAP10 PUSH1 0xF PUSH1 0xF8 SHL DUP12 MSTORE PUSH1 0xE0 DUP7 DUP13 ADD MSTORE PUSH1 0xE0 DUP12 ADD SWAP1 PUSH2 0xF7D JUMP JUMPDEST SWAP2 DUP10 DUP4 SUB SWAP1 DUP11 ADD MSTORE PUSH2 0xF7D JUMP JUMPDEST SWAP3 CHAINID PUSH1 0x60 DUP9 ADD MSTORE ADDRESS PUSH1 0x80 DUP9 ADD MSTORE DUP5 PUSH1 0xA0 DUP9 ADD MSTORE DUP7 DUP5 SUB PUSH1 0xC0 DUP9 ADD MSTORE MLOAD SWAP3 DUP4 DUP2 MSTORE ADD SWAP4 SWAP3 JUMPDEST DUP3 DUP2 LT PUSH2 0x9AC JUMPI POP POP POP POP SUB SWAP1 RETURN JUMPDEST DUP4 MLOAD DUP6 MSTORE DUP7 SWAP6 POP SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x99D JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x41 SWAP1 MSTORE PUSH1 0x24 DUP4 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x283 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x283 JUMPI PUSH1 0x20 SWAP2 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x9FE PUSH2 0xFBD JUMP JUMPDEST AND DUP2 MSTORE PUSH1 0x7 DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP4 CALLVALUE PUSH2 0x6BA JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x6BA JUMPI PUSH2 0xA27 PUSH2 0xFEE JUMP JUMPDEST PUSH1 0x9 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP3 DUP1 LOG3 DUP1 RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x283 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x283 JUMPI PUSH1 0x20 SWAP2 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xA93 PUSH2 0xFBD JUMP JUMPDEST AND DUP2 MSTORE DUP1 DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x216 JUMPI PUSH1 0x20 SWAP2 DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xC7A JUMPI DUP2 CALLDATALOAD SWAP2 PUSH2 0xAC1 PUSH2 0x1683 JUMP JUMPDEST DUP3 ISZERO PUSH2 0xC2B JUMPI CALLER DUP6 MSTORE DUP5 DUP5 MSTORE DUP3 DUP3 DUP7 KECCAK256 SLOAD LT PUSH2 0xBEA JUMPI PUSH8 0xDE0B6B3A7640000 DUP4 MUL PUSH8 0xDE0B6B3A763FFFF NOT DUP5 DUP3 DIV ADD PUSH2 0xBD7 JUMPI PUSH1 0xB SLOAD SWAP1 DUP2 ISZERO PUSH2 0xBC4 JUMPI DIV SWAP1 DUP2 SELFBALANCE LT PUSH2 0xB75 JUMPI POP PUSH2 0xB13 DUP4 ADDRESS CALLER PUSH2 0x16D9 JUMP JUMPDEST DUP5 DUP1 DUP3 DUP1 ISZERO PUSH2 0xB6B JUMPI JUMPDEST DUP3 DUP1 SWAP3 SWAP2 DUP2 SWAP3 CALLER SWAP1 CALL ISZERO PUSH2 0xB61 JUMPI PUSH32 0x2DCF9433D75DB0D8B1C172641F85E319FFE4AD22E108A95D1847CEB906E5195D SWAP3 SWAP4 DUP3 MLOAD SWAP5 DUP6 MSTORE DUP5 ADD MSTORE CALLER SWAP3 LOG2 PUSH1 0x1 PUSH1 0xA SSTORE DUP1 RETURN JUMPDEST DUP2 MLOAD RETURNDATASIZE DUP7 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x8FC SWAP2 POP PUSH2 0xB1D JUMP JUMPDEST DUP3 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE SWAP1 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E74204554482062616C616E636520696E20636F6E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x1C9858DD PUSH1 0xE2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP8 MSTORE PUSH1 0x12 DUP4 MSTORE PUSH1 0x24 DUP8 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x11 DUP3 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST DUP4 PUSH1 0x64 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E7420746F6B656E2062616C616E6365000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST DUP4 PUSH1 0x84 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D7573742073656C6C206120706F73697469766520616D6F756E74206F662074 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6F6B656E73 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST DUP4 DUP1 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x283 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x283 JUMPI PUSH1 0x20 SWAP2 PUSH1 0xFF SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xCA9 PUSH2 0xFBD JUMP JUMPDEST AND DUP2 MSTORE PUSH1 0xC DUP6 MSTORE KECCAK256 SLOAD AND SWAP1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x216 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x216 JUMPI PUSH2 0xCD6 PUSH2 0xFBD JUMP JUMPDEST SWAP1 PUSH1 0x24 CALLDATALOAD SWAP2 PUSH2 0xCE3 PUSH2 0xFEE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP3 DUP4 ISZERO PUSH2 0xD40 JUMPI POP PUSH1 0x20 DUP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 PUSH2 0xD26 DUP8 SWAP6 PUSH1 0x2 SLOAD PUSH2 0x10D4 JUMP JUMPDEST PUSH1 0x2 SSTORE DUP6 DUP6 MSTORE DUP5 DUP4 MSTORE DUP1 DUP6 KECCAK256 DUP3 DUP2 SLOAD ADD SWAP1 SSTORE MLOAD SWAP1 DUP2 MSTORE LOG3 DUP1 RETURN JUMPDEST PUSH1 0x20 PUSH1 0x64 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x283 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x283 JUMPI PUSH1 0x20 SWAP1 PUSH1 0xB SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x283 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x283 JUMPI PUSH2 0x662 PUSH1 0x20 SWAP3 PUSH2 0xDEA PUSH2 0xDC4 PUSH2 0xFBD JUMP JUMPDEST CALLER DUP4 MSTORE PUSH1 0x1 DUP7 MSTORE DUP5 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP5 MSTORE DUP7 MSTORE SWAP2 DUP5 SWAP1 KECCAK256 SLOAD PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0x10D4 JUMP JUMPDEST SWAP1 CALLER PUSH2 0x10F7 JUMP JUMPDEST POP POP CALLVALUE PUSH2 0x283 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x283 JUMPI PUSH1 0x20 SWAP1 PUSH2 0xE0E PUSH2 0x13A2 JUMP JUMPDEST SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x283 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x283 JUMPI PUSH1 0x20 SWAP1 MLOAD PUSH1 0x12 DUP2 MSTORE RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x283 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x283 JUMPI PUSH1 0x20 SWAP1 PUSH2 0x606 PUSH2 0xE52 PUSH2 0xFBD JUMP JUMPDEST PUSH2 0xE5A PUSH2 0xFD8 JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD SWAP2 PUSH2 0x1877 JUMP JUMPDEST POP POP CALLVALUE PUSH2 0x283 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x283 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x2 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x283 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x283 JUMPI PUSH1 0x20 SWAP1 PUSH2 0x662 PUSH2 0xEA2 PUSH2 0xFBD JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER PUSH2 0x10F7 JUMP JUMPDEST DUP5 SWAP1 DUP5 CALLVALUE PUSH2 0x216 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x216 JUMPI DUP3 PUSH1 0x3 SLOAD PUSH2 0xECC DUP2 PUSH2 0x1046 JUMP JUMPDEST DUP1 DUP6 MSTORE SWAP2 PUSH1 0x1 SWAP2 DUP1 DUP4 AND SWAP1 DUP2 ISZERO PUSH2 0xF55 JUMPI POP PUSH1 0x1 EQ PUSH2 0xEF8 JUMPI JUMPDEST POP POP POP PUSH2 0x78D DUP3 PUSH2 0x79F SWAP5 SUB DUP4 PUSH2 0x10B2 JUMP JUMPDEST SWAP5 POP PUSH1 0x3 DUP6 MSTORE PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B JUMPDEST DUP3 DUP7 LT PUSH2 0xF3D JUMPI POP POP POP PUSH2 0x78D DUP3 PUSH1 0x20 PUSH2 0x79F SWAP6 DUP3 ADD ADD SWAP5 PUSH2 0xEE6 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x20 DUP8 DUP8 ADD DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 SWAP6 ADD SWAP5 DUP2 ADD PUSH2 0xF20 JUMP JUMPDEST PUSH2 0x79F SWAP8 POP DUP7 SWAP4 POP PUSH1 0x20 SWAP3 POP PUSH2 0x78D SWAP5 SWAP2 POP PUSH1 0xFF NOT AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD SWAP5 PUSH2 0xEE6 JUMP JUMPDEST SWAP2 SWAP1 DUP3 MLOAD SWAP3 DUP4 DUP3 MSTORE PUSH1 0x0 JUMPDEST DUP5 DUP2 LT PUSH2 0xFA9 JUMPI POP POP DUP3 PUSH1 0x0 PUSH1 0x20 DUP1 SWAP5 SWAP6 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 DUP4 ADD DUP2 ADD MLOAD DUP5 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0xF88 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xFD3 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xFD3 JUMPI JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x1002 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0x1076 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x1060 JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x1055 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x109C JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x109C JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x10E1 JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 DUP3 ISZERO PUSH2 0x11A8 JUMPI AND SWAP2 DUP3 ISZERO PUSH2 0x1158 JUMPI PUSH1 0x20 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 DUP4 PUSH1 0x0 MSTORE PUSH1 0x1 DUP3 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP6 PUSH1 0x0 MSTORE DUP3 MSTORE DUP1 PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x12FD JUMPI DUP1 PUSH2 0x120A JUMPI POP JUMP JUMPDEST PUSH1 0x1 DUP2 SUB PUSH2 0x1257 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP2 SUB PUSH2 0x12A4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x3 EQ PUSH2 0x12AD JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7565 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP3 SWAP2 SWAP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 GT PUSH2 0x1396 JUMPI SWAP2 PUSH1 0x80 SWAP5 SWAP4 SWAP2 PUSH1 0xFF PUSH1 0x20 SWAP5 PUSH1 0x40 MLOAD SWAP5 DUP6 MSTORE AND DUP5 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x0 SWAP4 DUP5 SWAP2 DUP3 DUP1 MSTORE PUSH1 0x1 GAS STATICCALL ISZERO PUSH2 0x1389 JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x1383 JUMPI SWAP2 SWAP1 JUMP JUMPDEST POP PUSH1 0x1 SWAP1 JUMP JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 RETURNDATASIZE SWAP1 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 SWAP1 PUSH1 0x3 SWAP1 JUMP JUMPDEST ADDRESS PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x14A4 JUMPI JUMPDEST ISZERO PUSH2 0x13FD JUMPI PUSH32 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F DUP3 MSTORE PUSH32 0x0 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x0 PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xA0 DUP2 MSTORE PUSH1 0xC0 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x109C JUMPI PUSH1 0x40 MSTORE MLOAD SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST POP PUSH32 0x0 CHAINID EQ PUSH2 0x13D4 JUMP JUMPDEST PUSH1 0xFF DUP2 EQ PUSH2 0x150B JUMPI PUSH1 0xFF DUP2 AND SWAP1 PUSH1 0x1F DUP3 GT PUSH2 0x14F9 JUMPI PUSH1 0x40 MLOAD SWAP2 PUSH2 0x14EF DUP4 PUSH2 0x1080 JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2CD44AC3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x5 SLOAD DUP2 PUSH1 0x0 PUSH2 0x151E DUP4 PUSH2 0x1046 JUMP JUMPDEST DUP1 DUP4 MSTORE SWAP3 PUSH1 0x1 SWAP1 DUP2 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x15A7 JUMPI POP PUSH1 0x1 EQ PUSH2 0x1548 JUMPI JUMPDEST POP PUSH2 0x1545 SWAP3 POP SUB DUP3 PUSH2 0x10B2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x5 PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP2 POP PUSH32 0x36B6384B5ECA791C62761152D0C79BB0604C104A5FB6F4EB0703F3154BB3DB0 JUMPDEST DUP5 DUP4 LT PUSH2 0x158C JUMPI POP PUSH2 0x1545 SWAP4 POP POP DUP2 ADD PUSH1 0x20 ADD CODESIZE PUSH2 0x1538 JUMP JUMPDEST DUP2 SWAP4 POP SWAP1 DUP2 PUSH1 0x20 SWAP3 SLOAD DUP4 DUP6 DUP10 ADD ADD MSTORE ADD SWAP2 ADD SWAP1 SWAP2 DUP5 SWAP3 PUSH2 0x1573 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 SWAP3 POP PUSH2 0x1545 SWAP5 SWAP2 POP PUSH1 0xFF NOT AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD CODESIZE PUSH2 0x1538 JUMP JUMPDEST PUSH1 0xFF DUP2 EQ PUSH2 0x15EB JUMPI PUSH1 0xFF DUP2 AND SWAP1 PUSH1 0x1F DUP3 GT PUSH2 0x14F9 JUMPI PUSH1 0x40 MLOAD SWAP2 PUSH2 0x14EF DUP4 PUSH2 0x1080 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x6 SLOAD DUP2 PUSH1 0x0 PUSH2 0x15FE DUP4 PUSH2 0x1046 JUMP JUMPDEST DUP1 DUP4 MSTORE SWAP3 PUSH1 0x1 SWAP1 DUP2 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x15A7 JUMPI POP PUSH1 0x1 EQ PUSH2 0x1624 JUMPI POP PUSH2 0x1545 SWAP3 POP SUB DUP3 PUSH2 0x10B2 JUMP JUMPDEST PUSH1 0x6 PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP2 POP PUSH32 0xF652222313E28459528D920B65115C16C04F3EFC82AAEDC97BE59F3F377C0D3F JUMPDEST DUP5 DUP4 LT PUSH2 0x1668 JUMPI POP PUSH2 0x1545 SWAP4 POP POP DUP2 ADD PUSH1 0x20 ADD CODESIZE PUSH2 0x1538 JUMP JUMPDEST DUP2 SWAP4 POP SWAP1 DUP2 PUSH1 0x20 SWAP3 SLOAD DUP4 DUP6 DUP10 ADD ADD MSTORE ADD SWAP2 ADD SWAP1 SWAP2 DUP5 SWAP3 PUSH2 0x164F JUMP JUMPDEST PUSH1 0x2 PUSH1 0xA SLOAD EQ PUSH2 0x1694 JUMPI PUSH1 0x2 PUSH1 0xA SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 DUP3 ISZERO PUSH2 0x17F4 JUMPI AND SWAP2 DUP3 ISZERO PUSH2 0x17A3 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE DUP1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 DUP1 DUP4 LT PUSH2 0x174F JUMPI PUSH1 0x40 DUP3 DUP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP6 DUP8 PUSH1 0x20 SWAP7 MSTORE DUP3 DUP7 MSTORE SUB DUP3 DUP3 KECCAK256 SSTORE DUP7 DUP2 MSTORE KECCAK256 DUP2 DUP2 SLOAD ADD SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP1 CALLER PUSH1 0x0 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH2 0x186D JUMPI PUSH2 0x1868 SWAP2 CALLER PUSH2 0x16D9 JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH2 0x1868 SWAP2 CALLER PUSH2 0x16D9 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x0 CALLER DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 DUP3 KECCAK256 SLOAD AND PUSH2 0x1925 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 CALLER DUP6 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD SWAP4 SWAP1 DUP5 ADD PUSH2 0x18C4 JUMPI JUMPDEST PUSH2 0x1868 SWAP4 POP PUSH2 0x16D9 JUMP JUMPDEST DUP3 DUP5 LT PUSH2 0x18E0 JUMPI PUSH2 0x18DB DUP4 PUSH2 0x1868 SWAP6 SUB CALLER DUP4 PUSH2 0x10F7 JUMP JUMPDEST PUSH2 0x18BA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP PUSH2 0x1868 SWAP3 PUSH2 0x16D9 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH23 0x8F6535CB42068C7C3C5A81F73DFDF55A42F8DBF9D9CF8D 0xC6 0xE4 SWAP14 0xA5 DUP13 0xF6 0xD3 MLOAD PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ",
							"sourceMap": "319:4836:17:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;319:4836:17;;;;;;:::i;:::-;1063:62:0;;;:::i;:::-;-1:-1:-1;;;;;319:4836:17;;;;2162:22:0;;319:4836:17;;;;2518:6:0;319:4836:17;;;;;;;;2518:6:0;319:4836:17;;2566:40:0;;;;319:4836:17;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;319:4836:17;;;;;;;;;;;;;;;;;-1:-1:-1;;319:4836:17;;;;;;:::i;:::-;1063:62:0;;:::i;:::-;-1:-1:-1;;;;;319:4836:17;;;;3911:21;319:4836;;;;;;;-1:-1:-1;;319:4836:17;;;;;3964:25;319:4836;;3964:25;319:4836;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;-1:-1:-1;;;;;319:4836:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;319:4836:17;;;;1063:62:0;;:::i;:::-;319:4836:17;3419:22;319:4836;;;;;;;;;;;;-1:-1:-1;;319:4836:17;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;2139:15:5;;:27;319:4836:17;;;;;;;;;;;;;;;3200:7:5;319:4836:17;;;;;;;;;;;;;;;;2242:79:5;319:4836:17;2242:79:5;;319:4836:17;1125:95:5;319:4836:17;;1125:95:5;;;;319:4836:17;;;;;1125:95:5;;319:4836:17;1125:95:5;319:4836:17;1125:95:5;;319:4836:17;;1125:95:5;;319:4836:17;;1125:95:5;;319:4836:17;;2242:79:5;;319:4836:17;;;;;;;;;;;;;;;2232:90:5;;6791:5:13;;6744:25;;4893:20:14;;:::i;:::-;8496:231:13;;;;-1:-1:-1;;;8496:231:13;;;;;;;;;;319:4836:17;;;8496:231:13;319:4836:17;;8496:231:13;;6744:25;:::i;:::-;6791:5;;;;:::i;:::-;319:4836:17;2450:15:5;1125:95;;2536:5;;;;;;:::i;:::-;319:4836:17;;1125:95:5;319:4836:17;;;;;;;;;1125:95:5;;;;;;319:4836:17;1125:95:5;;319:4836:17;1125:95:5;319:4836:17;;;1125:95:5;;319:4836:17;-1:-1:-1;;;319:4836:17;;;;;;;;;;;-1:-1:-1;;;319:4836:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2227:103:2;;:::i;:::-;1695:9:17;:13;319:4836;;1854:12;319:4836;1695:9;;319:4836;1695:9;;319:4836;;;;;1870:4;319:4836;;1911:4;;319:4836;;;;;;;;;;1893:39;319:4836;;2041:10;2112:51;2041:10;2053:11;2041:10;;1911:4;2053:11;:::i;:::-;319:4836;;1695:9;;319:4836;;;;;;2041:10;2112:51;;1716:1:2;2809:22;319:4836:17;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;319:4836:17;;;;;;-1:-1:-1;;;319:4836:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;734:10:8;;319:4836:17;;;;;;;;;;;;;;;;;;;;;6792:35:3;;;;319:4836:17;;;;6928:34:3;319:4836:17;;;;734:10:8;6928:34:3;:::i;:::-;319:4836:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;319:4836:17;;;;;;;;;;;;;;;;;;;;;1063:62:0;;:::i;:::-;3582:21:17;3622:11;;;319:4836;;-1:-1:-1;1273:6:0;319:4836:17;;;;;;;;;-1:-1:-1;;;;;319:4836:17;;3667:34;;;;319:4836;;;3667:34;319:4836;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;319:4836:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;319:4836:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1273:6:0;319:4836:17;;;-1:-1:-1;;;;;319:4836:17;;;;;;;;;;;;;;;;-1:-1:-1;;319:4836:17;;;;;;:::i;:::-;1063:62:0;;:::i;:::-;-1:-1:-1;;;;;319:4836:17;;;;4145:21;319:4836;;;;;;;-1:-1:-1;;319:4836:17;;;4199:29;319:4836;;4199:29;319:4836;;;;;;;;;;;;;;;;5427:41:14;:5;:41;:::i;:::-;5482:8;:47;:8;:47;:::i;:::-;319:4836:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;5543:13:14;;319:4836:17;;;;5578:4:14;319:4836:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;319:4836:17;;;;;;;;;;;;;-1:-1:-1;;;319:4836:17;;;;;;;;;;;;;;;;-1:-1:-1;;319:4836:17;;;;;;;;-1:-1:-1;;;;;319:4836:17;;:::i;:::-;;;;2698:7:5;319:4836:17;;;;;;;;;;;;;;;;;;;;;;;1063:62:0;;:::i;:::-;2518:6;319:4836:17;;-1:-1:-1;;;;;;319:4836:17;;;;;;;-1:-1:-1;;;;;319:4836:17;2566:40:0;319:4836:17;;2566:40:0;319:4836:17;;;;;;;;;;-1:-1:-1;;319:4836:17;;;;;;;;-1:-1:-1;;;;;319:4836:17;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2227:103:2;;;:::i;:::-;2374:15:17;;319:4836;;2460:10;319:4836;;;;;;;;;;2450:36;319:4836;;2632:4;319:4836;;-1:-1:-1;;319:4836:17;;;;;;2640:12;319:4836;;;;;;;2671:21;;;:34;319:4836;;2679:4;2824:11;2679:4;;2460:10;2824:11;:::i;:::-;2872:39;;;;;;;319:4836;2460:10;;;;;;;2872:39;;;;;2960:46;319:4836;;;;;;;;;;2460:10;2960:46;;319:4836;2809:22:2;319:4836:17;;;2872:39;319:4836;;;;;;;;;2872:39;;;-1:-1:-1;2872:39:17;;319:4836;;;-1:-1:-1;;;319:4836:17;;;;;;;;;;;;;;;;;;-1:-1:-1;;;319:4836:17;;;;;;;;-1:-1:-1;;;319:4836:17;;;;;;;;;-1:-1:-1;;;319:4836:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;319:4836:17;;;;;;;;;;;;;;;;;-1:-1:-1;;319:4836:17;;;;;;;;;;-1:-1:-1;;;;;319:4836:17;;:::i;:::-;;;;4386:21;319:4836;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;1063:62:0;;;:::i;:::-;-1:-1:-1;;;;;319:4836:17;;8603:21:3;;319:4836:17;;;;;8952:37:3;319:4836:17;8731:22:3;319:4836:17;;8731:22:3;319:4836:17;8731:22:3;:::i;:::-;;319:4836:17;;;;;;;;;;;;;;;;;;;;8952:37:3;319:4836:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;451:27;319:4836;;;;;;;;;;;;;;;;;;;;;6021:38:3;319:4836:17;;6021:38:3;319:4836:17;;:::i;:::-;734:10:8;319:4836:17;;;;;;;;-1:-1:-1;;;;;319:4836:17;;;;;;;;;;;;;;6021:38:3;:::i;:::-;734:10:8;;6021:38:3;:::i;319:4836:17:-;;;;;;;;;;;;;;;2922:20:5;;;:::i;:::-;319:4836:17;;;;;;;;;;;;;;;;;;;;;;;3186:2:3;319:4836:17;;;;;;;;;;;-1:-1:-1;;319:4836:17;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;;;;;3342:12:3;319:4836:17;;;;;;;;;;;;;;;;;;;;;;;4606:6:3;319:4836:17;;:::i;:::-;;;734:10:8;;4606:6:3;:::i;319:4836:17:-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;319:4836:17;;;;;;;;;-1:-1:-1;319:4836:17;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;319:4836:17;;;;;;:::o;:::-;;;;;;;;-1:-1:-1;;;;;319:4836:17;;;;;;:::o;1359:130:0:-;1273:6;319:4836:17;-1:-1:-1;;;;;319:4836:17;734:10:8;1422:23:0;319:4836:17;;1359:130:0:o;319:4836:17:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;;;;10457:340:3;-1:-1:-1;;;;;319:4836:17;;;;10558:19:3;;319:4836:17;;;10636:21:3;;;319:4836:17;;;10758:32:3;319:4836:17;;10575:1:3;319:4836:17;;;;;10575:1:3;319:4836:17;;10575:1:3;319:4836:17;;;;;10575:1:3;319:4836:17;;;;;;;10758:32:3;10457:340::o;319:4836:17:-;;;-1:-1:-1;;;319:4836:17;;;;;;;;;;;;;;;;;-1:-1:-1;;;319:4836:17;;;;;;;;;;-1:-1:-1;;;319:4836:17;;;;;;;;;;;;;;;;;-1:-1:-1;;;319:4836:17;;;;;;;570:511:13;319:4836:17;;;;;;638:29:13;;;683:7;:::o;634:441::-;319:4836:17;734:38:13;;319:4836:17;;;;-1:-1:-1;;;788:34:13;;319:4836:17;788:34:13;;;319:4836:17;;;;;;;;;;;;;788:34:13;730:345;852:35;843:44;;852:35;;319:4836:17;;-1:-1:-1;;;903:41:13;;319:4836:17;903:41:13;;;319:4836:17;;;;;;;;;;;;;903:41:13;839:236;974:30;965:39;961:114;;570:511::o;961:114::-;319:4836:17;;-1:-1:-1;;;1020:44:13;;319:4836:17;1020:44:13;;;319:4836:17;;;;;;;;;;;-1:-1:-1;;;319:4836:17;;;;;;1020:44:13;319:4836:17;;;;647:20:13;319:4836:17;;;;;647:20:13;319:4836:17;5009:1456:13;;;;6021:66;6008:79;;6004:161;;319:4836:17;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6276:24:13;;;;;;;;;;;;;;-1:-1:-1;;;;;319:4836:17;;6314:20:13;6310:101;;6421:37;5009:1456;:::o;6310:101::-;6350:50;6276:24;6350:50;:::o;6276:24::-;319:4836:17;;;;;;;;;;;6004:161:13;6103:51;;;;6119:1;6103:51;6123:30;6103:51;:::o;3695:262:14:-;3779:4;3788:11;-1:-1:-1;;;;;319:4836:17;3771:28:14;;:63;;3695:262;3767:184;;;3857:22;3850:29;:::o;3767:184::-;319:4836:17;;4054:81:14;;;319:4836:17;1929:95:14;319:4836:17;;4077:11:14;319:4836:17;1929:95:14;;319:4836:17;4090:14:14;1929:95;;;319:4836:17;4106:13:14;1929:95;;;319:4836:17;3779:4:14;319:4836:17;1929:95:14;;319:4836:17;;4054:81:14;;1929:95;319:4836:17;;;;;;;;;;;;;;4044:92:14;;3910:30;:::o;3771:63::-;3820:14;;3803:13;:31;3771:63;;3367:268:10;1371:66;3490:47;;1371:66;;;2633:40;;2687:11;2696:2;2687:11;;2683:69;;319:4836:17;;;;;;:::i;:::-;2348:90:10;;2292:2;319:4836:17;;2348:90:10;3553:22;:::o;2683:69::-;319:4836:17;;-1:-1:-1;;;2721:20:10;;;;;3486:143;-1:-1:-1;319:4836:17;;5454:13:14;319:4836:17;;-1:-1:-1;319:4836:17;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;1371:66:10;;;;;;;:::i;:::-;3606:12;:::o;319:4836:17:-;5454:13:14;-1:-1:-1;319:4836:17;;;-1:-1:-1;;319:4836:17;;;;;;;-1:-1:-1;1371:66:10;;-1:-1:-1;;319:4836:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1371:66:10;319:4836:17;;;;;;;;;;;;5454:13:14;319:4836:17;;;;;;;3367:268:10;1371:66;3490:47;;1371:66;;;2633:40;;2687:11;2696:2;2687:11;;2683:69;;319:4836:17;;;;;;:::i;3486:143:10:-;-1:-1:-1;319:4836:17;;5512:16:14;319:4836:17;;-1:-1:-1;319:4836:17;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;1371:66:10;;;;;;;:::i;319:4836:17:-;5512:16:14;-1:-1:-1;319:4836:17;;;-1:-1:-1;;319:4836:17;;;;;;;-1:-1:-1;1371:66:10;;-1:-1:-1;;319:4836:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2336:287:2;1759:1;2468:7;319:4836:17;2468:19:2;1759:1;;;2468:7;319:4836:17;2336:287:2:o;1759:1::-;319:4836:17;;-1:-1:-1;;;1759:1:2;;;;;;;;;;;319:4836:17;1759:1:2;319:4836:17;;;1759:1:2;;;;7456:788:3;-1:-1:-1;;;;;319:4836:17;;;;7552:18:3;;319:4836:17;;;7630:16:3;;;319:4836:17;;7568:1:3;319:4836:17;;;;;;;;;;7801:21:3;;;;319:4836:17;;;;;8163:26:3;319:4836:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;8163:26:3;7456:788::o;319:4836:17:-;;;-1:-1:-1;;;319:4836:17;;;;;;;;;;;;;;;;;-1:-1:-1;;;319:4836:17;;;;;;;;;;-1:-1:-1;;;319:4836:17;;;;;;;;;;;;;;;;;-1:-1:-1;;;319:4836:17;;;;;;;;;;-1:-1:-1;;;319:4836:17;;;;;;;;;;;;;;;;;-1:-1:-1;;;319:4836:17;;;;;;;4478:295;;4607:10;-1:-1:-1;319:4836:17;4585:21;319:4836;;;;-1:-1:-1;319:4836:17;;;4581:134;;3894:6:3;4607:10:17;;3894:6:3;:::i;:::-;3918:4;4478:295:17;:::o;4581:134::-;4670:6;4607:10;;4670:6;:::i;4831:321::-;;;-1:-1:-1;4980:10:17;319:4836;;4958:21;319:4836;;;;;;;;4954:128;;-1:-1:-1;;;;;319:4836:17;;;;;;;;;;;;;4980:10;319:4836;;;;;;;;;;;11244:37:3;;11240:243;;4831:321:17;5424:6:3;;;;:::i;11240:243::-;11305:26;;;319:4836:17;;11432:25:3;319:4836:17;5424:6:3;319:4836:17;;4980:10;11432:25:3;;:::i;:::-;11240:243;;319:4836:17;;;-1:-1:-1;;;319:4836:17;;;;;;;;;;;;;;;;;;;;4954:128;5037:6;;;;:::i"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1300200",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"DOMAIN_SEPARATOR()": "infinite",
								"addToWhitelist(address)": "28375",
								"allowance(address,address)": "3098",
								"approve(address,uint256)": "24384",
								"balanceOf(address)": "2670",
								"buyTokens()": "103519",
								"decimals()": "259",
								"decreaseAllowance(address,uint256)": "27064",
								"eip712Domain()": "infinite",
								"exchangeRate()": "2431",
								"inWhitelisted(address)": "2641",
								"increaseAllowance(address,uint256)": "26804",
								"mint(address,uint256)": "52951",
								"name()": "infinite",
								"nonces(address)": "2714",
								"owner()": "2650",
								"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "infinite",
								"removeFromWhitelist(address)": "28149",
								"renounceOwnership()": "28345",
								"sellTokens(uint256)": "infinite",
								"setExchangeRate(uint256)": "24927",
								"symbol()": "infinite",
								"totalSupply()": "2321",
								"transfer(address,uint256)": "53435",
								"transferFrom(address,address,uint256)": "79581",
								"transferOwnership(address)": "28743",
								"withdrawEth()": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "160"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "CALLVALUE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "8"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSHSIZE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "1F"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "CODESIZE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SUB",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP5",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "AND",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP6",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP7",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "GT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP7",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP4",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "LT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "OR",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "6"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP7",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "40"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP6",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP7",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP5",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP6",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP4",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "CODECOPY",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SUB",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SLT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "8"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP4",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "20"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP6",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP4",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP5",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "10"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP7",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "1"
								},
								{
									"begin": 319,
									"end": 5155,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "10"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "B"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP7",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP7",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP7",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP7",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "2A3AB93A3632AA37B5B2B7"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A9"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP9",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP10",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP10",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP7",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP10",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "11"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP12",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "1"
								},
								{
									"begin": 319,
									"end": 5155,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "11"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "B"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP12",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP12",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP7",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP10",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "12"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP12",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "1"
								},
								{
									"begin": 319,
									"end": 5155,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "12"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "4"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP6",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP7",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP13",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "15155495"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E2"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP5",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP14",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP9",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP12",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP13",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "13"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP5",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "1"
								},
								{
									"begin": 319,
									"end": 5155,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "13"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP6",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "1"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP5",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP6",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP3",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "31"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "F8"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP5",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP7",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "GT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "27"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 2046,
									"end": 2059,
									"name": "PUSH",
									"source": 3,
									"value": "3"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP4",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SLOAD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP8",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SHR",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "AND",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ISZERO",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "16"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "tag",
									"source": -1,
									"value": "17"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "JUMPDEST",
									"source": -1
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP11",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "LT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "EQ",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "18"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP16",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP4",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "GT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "20"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "tag",
									"source": -1,
									"value": "21"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "JUMPDEST",
									"source": -1
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP11",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP4",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "GT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "1"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "EQ",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "22"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "24"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "25"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP6",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SHL",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SHR",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "NOT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "AND",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP7",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SHL",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "OR",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "26"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP7",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP5",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "GT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "27"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP11",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SLOAD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP7",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SHR",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "AND",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ISZERO",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "29"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "30"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP10",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "LT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "EQ",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "31"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP14",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP7",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP6",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP5",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP4",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "GT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "33"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "34"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP9",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP14",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP6",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "GT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "1"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "EQ",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "35"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP4",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "37"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "38"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP6",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SHL",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "NOT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SHL",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SHR",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "NOT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "AND",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "OR",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP8",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "39"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 3251,
									"end": 3296,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "40"
								},
								{
									"begin": 3251,
									"end": 3296,
									"name": "DUP11",
									"source": 14
								},
								{
									"begin": 3251,
									"end": 3296,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "2"
								},
								{
									"begin": 3251,
									"end": 3296,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 14
								},
								{
									"begin": 3251,
									"end": 3296,
									"name": "tag",
									"source": 14,
									"value": "40"
								},
								{
									"begin": 3251,
									"end": 3296,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 3243,
									"end": 3296,
									"name": "SWAP11",
									"source": 14
								},
								{
									"begin": 3243,
									"end": 3296,
									"name": "PUSH",
									"source": 14,
									"value": "120"
								},
								{
									"begin": 3243,
									"end": 3296,
									"name": "SWAP12",
									"source": 14
								},
								{
									"begin": 3243,
									"end": 3296,
									"name": "DUP13",
									"source": 14
								},
								{
									"begin": 3243,
									"end": 3296,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 3317,
									"end": 3368,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "41"
								},
								{
									"begin": 3317,
									"end": 3368,
									"name": "DUP14",
									"source": 14
								},
								{
									"begin": 3317,
									"end": 3368,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "3"
								},
								{
									"begin": 3317,
									"end": 3368,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 14
								},
								{
									"begin": 3317,
									"end": 3368,
									"name": "tag",
									"source": 14,
									"value": "41"
								},
								{
									"begin": 3317,
									"end": 3368,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 3306,
									"end": 3368,
									"name": "SWAP11",
									"source": 14
								},
								{
									"begin": 3306,
									"end": 3368,
									"name": "PUSH",
									"source": 14,
									"value": "140"
								},
								{
									"begin": 3306,
									"end": 3368,
									"name": "SWAP12",
									"source": 14
								},
								{
									"begin": 3306,
									"end": 3368,
									"name": "DUP13",
									"source": 14
								},
								{
									"begin": 3306,
									"end": 3368,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 3392,
									"end": 3414,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 3392,
									"end": 3414,
									"name": "KECCAK256",
									"source": 14
								},
								{
									"begin": 3378,
									"end": 3414,
									"name": "SWAP12",
									"source": 14
								},
								{
									"begin": 3378,
									"end": 3414,
									"name": "DUP13",
									"source": 14
								},
								{
									"begin": 3378,
									"end": 3414,
									"name": "PUSH",
									"source": 14,
									"value": "E0"
								},
								{
									"begin": 3378,
									"end": 3414,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 3441,
									"end": 3466,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 3441,
									"end": 3466,
									"name": "KECCAK256",
									"source": 14
								},
								{
									"begin": 3424,
									"end": 3466,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 3424,
									"end": 3466,
									"name": "PUSH",
									"source": 14,
									"value": "100"
								},
								{
									"begin": 3424,
									"end": 3466,
									"name": "SWAP12",
									"source": 14
								},
								{
									"begin": 3424,
									"end": 3466,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 3424,
									"end": 3466,
									"name": "DUP14",
									"source": 14
								},
								{
									"begin": 3424,
									"end": 3466,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 3494,
									"end": 3507,
									"name": "CHAINID",
									"source": 14
								},
								{
									"begin": 3477,
									"end": 3507,
									"name": "PUSH",
									"source": 14,
									"value": "A0"
								},
								{
									"begin": 3477,
									"end": 3507,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP10",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 4054,
									"end": 4135,
									"name": "SWAP3",
									"source": 14
								},
								{
									"begin": 4054,
									"end": 4135,
									"name": "DUP6",
									"source": 14
								},
								{
									"begin": 4054,
									"end": 4135,
									"name": "DUP5",
									"source": 14
								},
								{
									"begin": 4054,
									"end": 4135,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP2",
									"source": 17
								},
								{
									"begin": 1929,
									"end": 2024,
									"name": "PUSH",
									"source": 14,
									"value": "8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP4",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 1929,
									"end": 2024,
									"name": "DUP12",
									"source": 14
								},
								{
									"begin": 1929,
									"end": 2024,
									"name": "DUP6",
									"source": 14
								},
								{
									"begin": 1929,
									"end": 2024,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 1929,
									"end": 2024,
									"name": "PUSH",
									"source": 14,
									"value": "60"
								},
								{
									"begin": 1929,
									"end": 2024,
									"name": "DUP5",
									"source": 14
								},
								{
									"begin": 1929,
									"end": 2024,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 3494,
									"end": 3507,
									"name": "CHAINID",
									"source": 14
								},
								{
									"begin": 1929,
									"end": 2024,
									"name": "PUSH",
									"source": 14,
									"value": "80"
								},
								{
									"begin": 1929,
									"end": 2024,
									"name": "DUP5",
									"source": 14
								},
								{
									"begin": 1929,
									"end": 2024,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 4129,
									"end": 4133,
									"name": "ADDRESS",
									"source": 14
								},
								{
									"begin": 3477,
									"end": 3507,
									"name": "PUSH",
									"source": 14,
									"value": "A0"
								},
								{
									"begin": 1929,
									"end": 2024,
									"name": "DUP5",
									"source": 14
								},
								{
									"begin": 1929,
									"end": 2024,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 1929,
									"end": 2024,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 3477,
									"end": 3507,
									"name": "PUSH",
									"source": 14,
									"value": "A0"
								},
								{
									"begin": 4054,
									"end": 4135,
									"name": "DUP4",
									"source": 14
								},
								{
									"begin": 4054,
									"end": 4135,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 1929,
									"end": 2024,
									"name": "PUSH",
									"source": 14,
									"value": "C0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP4",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP4",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP4",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP6",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "LT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP6",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "GT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "OR",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "42"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP4",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP11",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 4044,
									"end": 4136,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 4044,
									"end": 4136,
									"name": "KECCAK256",
									"source": 14
								},
								{
									"begin": 1929,
									"end": 2024,
									"name": "PUSH",
									"source": 14,
									"value": "80"
								},
								{
									"begin": 3517,
									"end": 3565,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 4129,
									"end": 4133,
									"name": "ADDRESS",
									"source": 14
								},
								{
									"begin": 1929,
									"end": 2024,
									"name": "PUSH",
									"source": 14,
									"value": "C0"
								},
								{
									"begin": 3575,
									"end": 3602,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 2518,
									"end": 2524,
									"name": "PUSH",
									"source": 0,
									"value": "9"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SLOAD",
									"source": 17
								},
								{
									"begin": 734,
									"end": 744,
									"name": "CALLER",
									"source": 8
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "AND",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "OR",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SSTORE",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "AND",
									"source": 17
								},
								{
									"begin": 2566,
									"end": 2606,
									"name": "PUSH",
									"source": 0,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "DUP1",
									"source": -1
								},
								{
									"begin": 2566,
									"end": 2606,
									"name": "LOG3",
									"source": 0
								},
								{
									"begin": 1821,
									"end": 1843,
									"name": "PUSH",
									"source": 2,
									"value": "A"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SSTORE",
									"source": 17
								},
								{
									"begin": 1423,
									"end": 1427,
									"name": "PUSH",
									"source": 17,
									"value": "DE0B6B3A7640000"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP7",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP8",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP6",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MUL",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP5",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP7",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DIV",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP10",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "EQ",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ISZERO",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "OR",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ISZERO",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "44"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 4129,
									"end": 4133,
									"name": "ADDRESS",
									"source": 14
								},
								{
									"begin": 8603,
									"end": 8624,
									"name": "ISZERO",
									"source": 3
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "46"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 8731,
									"end": 8753,
									"name": "PUSH",
									"source": 3,
									"value": "2"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SLOAD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "GT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "48"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP2",
									"source": 17
								},
								{
									"begin": 8952,
									"end": 8989,
									"name": "PUSH",
									"source": 3,
									"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP2",
									"source": 17
								},
								{
									"begin": 8731,
									"end": 8753,
									"name": "PUSH",
									"source": 3,
									"value": "2"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SSTORE",
									"source": 17
								},
								{
									"begin": 4129,
									"end": 4133,
									"name": "ADDRESS",
									"source": 14
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP4",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP8",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP4",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "KECCAK256",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP5",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SLOAD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP8",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP4",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP5",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 4129,
									"end": 4133,
									"name": "ADDRESS",
									"source": 14
								},
								{
									"begin": 8952,
									"end": 8989,
									"name": "SWAP4",
									"source": 3
								},
								{
									"begin": 8952,
									"end": 8989,
									"name": "LOG3",
									"source": 3
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MUL",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP5",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DIV",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "EQ",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ISZERO",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "OR",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ISZERO",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "50"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "B"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH #[$]",
									"source": 17,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP4",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP5",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [$]",
									"source": 17,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP6",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "CODECOPY",
									"source": 17
								},
								{
									"begin": 1929,
									"end": 2024,
									"name": "PUSH",
									"source": 14,
									"value": "80"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP5",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ASSIGNIMMUTABLE",
									"source": 17,
									"value": "2142"
								},
								{
									"begin": 3477,
									"end": 3507,
									"name": "PUSH",
									"source": 14,
									"value": "A0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP5",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ASSIGNIMMUTABLE",
									"source": 17,
									"value": "2144"
								},
								{
									"begin": 1929,
									"end": 2024,
									"name": "PUSH",
									"source": 14,
									"value": "C0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP5",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ASSIGNIMMUTABLE",
									"source": 17,
									"value": "2146"
								},
								{
									"begin": 3378,
									"end": 3414,
									"name": "PUSH",
									"source": 14,
									"value": "E0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP5",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ASSIGNIMMUTABLE",
									"source": 17,
									"value": "2148"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP4",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ASSIGNIMMUTABLE",
									"source": 17,
									"value": "2150"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ASSIGNIMMUTABLE",
									"source": 17,
									"value": "2153"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ASSIGNIMMUTABLE",
									"source": 17,
									"value": "2156"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "RETURN",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "50"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "11"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "4E487B71"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "E0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SHL",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "24"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "REVERT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "48"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "11"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP6",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "4E487B71"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "E0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SHL",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "24"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "REVERT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "46"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "45524332303A206D696E7420746F20746865207A65726F206164647265737300"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "104"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "64"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP6",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "461BCD"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "E5"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SHL",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP7",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "C4"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP4",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "E4"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "REVERT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "44"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "11"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP8",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "4E487B71"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "E0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SHL",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "24"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "REVERT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "42"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "41"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP9",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "4E487B71"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "E0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SHL",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "24"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "REVERT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "37"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP2",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "CODESIZE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "38"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "35"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP8",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP6",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP4",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP4",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "AND",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP13",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP10",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "KECCAK256",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP4",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "52"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP12",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "LT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "53"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP6",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "GT",
									"source": -1
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "55"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "56"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SHL",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP8",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "39"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "55"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "F8"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP5",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "NOT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SHL",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "AND",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SHR",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "NOT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "AND",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "CODESIZE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "56"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "53"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP4",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP6",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP8",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP11",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP9",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP7",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP6",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP4",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP5",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP4",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "52"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "33"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP4",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP12",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP9",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "KECCAK256",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP14",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP8",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "5"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SHR",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP12",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP9",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "LT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "57"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "58"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP10",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP9",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP8",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP7",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP6",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP5",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP4",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "5"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SHR",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "59"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "LT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "60"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "34"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "60"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP8",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP7",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP10",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "59"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "57"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "58"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "31"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "22"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP13",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "4E487B71"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "E0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SHL",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "24"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "REVERT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "29"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "7F"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "AND",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "30"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "27"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "41"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP12",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "4E487B71"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "E0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SHL",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "24"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "REVERT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "24"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "CODESIZE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "25"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "22"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP5",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP10",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP5",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "AND",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP7",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP12",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "KECCAK256",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP3",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "62"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP14",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "LT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "63"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP5",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "GT",
									"source": -1
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "65"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "66"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SHL",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "26"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "65"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP4",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP8",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SHL",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "F8"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "AND",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SHR",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "NOT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "AND",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "CODESIZE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "66"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "63"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP4",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP6",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP7",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP13",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP8",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP6",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP5",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP4",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP5",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP4",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "62"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "20"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP5",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP14",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP11",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "KECCAK256",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP6",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "5"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SHR",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP13",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP7",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "LT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "67"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "68"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP6",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP5",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP13",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP6",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP4",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP6",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "5"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SHR",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "69"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "LT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "70"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "21"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "70"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP4",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP6",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP5",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP15",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP10",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP6",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP5",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "69"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "67"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "68"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "18"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "22"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP14",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "4E487B71"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "E0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SHL",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "24"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "REVERT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "16"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "7F"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "AND",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "17"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "8"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "REVERT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "6"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "4E487B71"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "E0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SHL",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "41"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "4"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "24"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "REVERT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "1"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "40"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "LT",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "GT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "OR",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "6"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "40"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 17
								},
								{
									"begin": 2895,
									"end": 3236,
									"name": "tag",
									"source": 10,
									"value": "2"
								},
								{
									"begin": 2895,
									"end": 3236,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 3040,
									"end": 3042,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 3040,
									"end": 3042,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 3018,
									"end": 3042,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 3018,
									"end": 3042,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 3018,
									"end": 3042,
									"name": "LT",
									"source": 10
								},
								{
									"begin": 3040,
									"end": 3042,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 3040,
									"end": 3042,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "74"
								},
								{
									"begin": 3040,
									"end": 3042,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 1835,
									"end": 1837,
									"name": "PUSH",
									"source": 10,
									"value": "1F"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 1821,
									"end": 1837,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 1817,
									"end": 1889,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "76"
								},
								{
									"begin": 1817,
									"end": 1889,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP4",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "LT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "78"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 1930,
									"end": 1966,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1930,
									"end": 1966,
									"name": "OR",
									"source": 10
								},
								{
									"begin": 3058,
									"end": 3085,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 3058,
									"end": 3085,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "78"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "NOT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SUB",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "3"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SHL",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SHL",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "AND",
									"source": 17
								},
								{
									"begin": 1930,
									"end": 1966,
									"name": "OR",
									"source": 10
								},
								{
									"begin": 3058,
									"end": 3085,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 3058,
									"end": 3085,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 1817,
									"end": 1889,
									"name": "tag",
									"source": 10,
									"value": "76"
								},
								{
									"begin": 1817,
									"end": 1889,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "40"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 1860,
									"end": 1878,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1860,
									"end": 1878,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 1860,
									"end": 1878,
									"name": "PUSH",
									"source": 10,
									"value": "305A27A9"
								},
								{
									"begin": 1860,
									"end": 1878,
									"name": "PUSH",
									"source": 10,
									"value": "E0"
								},
								{
									"begin": 1860,
									"end": 1878,
									"name": "SHL",
									"source": 10
								},
								{
									"begin": 1860,
									"end": 1878,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1860,
									"end": 1878,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 1860,
									"end": 1878,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1860,
									"end": 1878,
									"name": "PUSH",
									"source": 10,
									"value": "4"
								},
								{
									"begin": 1860,
									"end": 1878,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 1860,
									"end": 1878,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "24"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP5",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP4",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "80"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP6",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "LT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "81"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "44"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP4",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP5",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 1835,
									"end": 1837,
									"name": "PUSH",
									"source": 10,
									"value": "1F"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "NOT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "AND",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 1860,
									"end": 1878,
									"name": "SUB",
									"source": 10
								},
								{
									"begin": 1860,
									"end": 1878,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 1860,
									"end": 1878,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 1860,
									"end": 1878,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "81"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP5",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP7",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP7",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "44"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP4",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP4",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP6",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP4",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "80"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMP",
									"source": 17
								},
								{
									"begin": 3014,
									"end": 3230,
									"name": "tag",
									"source": 10,
									"value": "74"
								},
								{
									"begin": 3014,
									"end": 3230,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "GT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "6"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 3282,
									"end": 3295,
									"name": "PUSH",
									"source": 14,
									"value": "5"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP4",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SLOAD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "1"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP4",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP5",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SHR",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "AND",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ISZERO",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "85"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 3014,
									"end": 3230,
									"name": "tag",
									"source": 10,
									"value": "86"
								},
								{
									"begin": 3014,
									"end": 3230,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP4",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "LT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "EQ",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "87"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "1F"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "GT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "89"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 3014,
									"end": 3230,
									"name": "tag",
									"source": 10,
									"value": "90"
								},
								{
									"begin": 3014,
									"end": 3230,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "1F"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP5",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "GT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "1"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "EQ",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "91"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP4",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP4",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP3",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP5",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "93"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "94"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SHL",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "NOT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "3"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SHL",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SHR",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "NOT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "AND",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "OR",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SSTORE",
									"source": 17
								},
								{
									"begin": 1371,
									"end": 1437,
									"name": "PUSH",
									"source": 10,
									"value": "FF"
								},
								{
									"begin": 3176,
									"end": 3219,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 3176,
									"end": 3219,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "93"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP3",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "CODESIZE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "94"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "91"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP4",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "1F"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "NOT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "AND",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP8",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP5",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "KECCAK256",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP5",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "96"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP9",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP4",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP4",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "LT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "97"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "LT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "99"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "100"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SHL",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SSTORE",
									"source": 17
								},
								{
									"begin": 1371,
									"end": 1437,
									"name": "PUSH",
									"source": 10,
									"value": "FF"
								},
								{
									"begin": 3176,
									"end": 3219,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 3176,
									"end": 3219,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "99"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "NOT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "F8"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP5",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "3"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SHL",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "AND",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SHR",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "NOT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "AND",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "CODESIZE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "100"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "97"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP6",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP8",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP9",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP7",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP6",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP5",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP6",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP5",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP8",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP4",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "96"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "89"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP6",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP5",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "1F"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP5",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "KECCAK256",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP8",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SHR",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "1F"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP7",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP9",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SHR",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "101"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "LT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "102"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "90"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "102"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP6",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "101"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "87"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "4E487B71"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "E0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SHL",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "22"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "4"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "24"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "REVERT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "85"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "7F"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "AND",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "86"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMP",
									"source": 17
								},
								{
									"begin": 2895,
									"end": 3236,
									"name": "tag",
									"source": 10,
									"value": "3"
								},
								{
									"begin": 2895,
									"end": 3236,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 3040,
									"end": 3042,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 3040,
									"end": 3042,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 3018,
									"end": 3042,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 3018,
									"end": 3042,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 3018,
									"end": 3042,
									"name": "LT",
									"source": 10
								},
								{
									"begin": 3040,
									"end": 3042,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 3040,
									"end": 3042,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "104"
								},
								{
									"begin": 3040,
									"end": 3042,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 1835,
									"end": 1837,
									"name": "PUSH",
									"source": 10,
									"value": "1F"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 1821,
									"end": 1837,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 1817,
									"end": 1889,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "106"
								},
								{
									"begin": 1817,
									"end": 1889,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP4",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "LT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "78"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 1930,
									"end": 1966,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1930,
									"end": 1966,
									"name": "OR",
									"source": 10
								},
								{
									"begin": 3058,
									"end": 3085,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 3058,
									"end": 3085,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 1817,
									"end": 1889,
									"name": "tag",
									"source": 10,
									"value": "106"
								},
								{
									"begin": 1817,
									"end": 1889,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "40"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 1860,
									"end": 1878,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1860,
									"end": 1878,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 1860,
									"end": 1878,
									"name": "PUSH",
									"source": 10,
									"value": "305A27A9"
								},
								{
									"begin": 1860,
									"end": 1878,
									"name": "PUSH",
									"source": 10,
									"value": "E0"
								},
								{
									"begin": 1860,
									"end": 1878,
									"name": "SHL",
									"source": 10
								},
								{
									"begin": 1860,
									"end": 1878,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1860,
									"end": 1878,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 1860,
									"end": 1878,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1860,
									"end": 1878,
									"name": "PUSH",
									"source": 10,
									"value": "4"
								},
								{
									"begin": 1860,
									"end": 1878,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 1860,
									"end": 1878,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "24"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP5",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP4",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "110"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP6",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "LT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "111"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "44"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP4",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP5",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 1835,
									"end": 1837,
									"name": "PUSH",
									"source": 10,
									"value": "1F"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "NOT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "AND",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 1860,
									"end": 1878,
									"name": "SUB",
									"source": 10
								},
								{
									"begin": 1860,
									"end": 1878,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 1860,
									"end": 1878,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 1860,
									"end": 1878,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "111"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP5",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP7",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP7",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "44"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP4",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP4",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP6",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP4",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "110"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMP",
									"source": 17
								},
								{
									"begin": 3014,
									"end": 3230,
									"name": "tag",
									"source": 10,
									"value": "104"
								},
								{
									"begin": 3014,
									"end": 3230,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "GT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "6"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 3351,
									"end": 3367,
									"name": "PUSH",
									"source": 14,
									"value": "6"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SLOAD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "1"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP4",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP5",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SHR",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "AND",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ISZERO",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "115"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 3014,
									"end": 3230,
									"name": "tag",
									"source": 10,
									"value": "116"
								},
								{
									"begin": 3014,
									"end": 3230,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP4",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "LT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "EQ",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "87"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "1F"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "GT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "119"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 3014,
									"end": 3230,
									"name": "tag",
									"source": 10,
									"value": "120"
								},
								{
									"begin": 3014,
									"end": 3230,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "1F"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP5",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "GT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "1"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "EQ",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "121"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP4",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP4",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP3",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP5",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "123"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "124"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SHL",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "NOT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "3"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SHL",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SHR",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "NOT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "AND",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "OR",
									"source": 17
								},
								{
									"begin": 3351,
									"end": 3367,
									"name": "PUSH",
									"source": 14,
									"value": "6"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SSTORE",
									"source": 17
								},
								{
									"begin": 1371,
									"end": 1437,
									"name": "PUSH",
									"source": 10,
									"value": "FF"
								},
								{
									"begin": 3176,
									"end": 3219,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 3176,
									"end": 3219,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "123"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP3",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "CODESIZE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "124"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "121"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP4",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "1F"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "NOT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "AND",
									"source": 17
								},
								{
									"begin": 3351,
									"end": 3367,
									"name": "PUSH",
									"source": 14,
									"value": "6"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP5",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "KECCAK256",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP5",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "126"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP9",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP4",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP4",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "LT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "127"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "LT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "129"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "130"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SHL",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 3351,
									"end": 3367,
									"name": "PUSH",
									"source": 14,
									"value": "6"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SSTORE",
									"source": 17
								},
								{
									"begin": 1371,
									"end": 1437,
									"name": "PUSH",
									"source": 10,
									"value": "FF"
								},
								{
									"begin": 3176,
									"end": 3219,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 3176,
									"end": 3219,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "129"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "NOT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "F8"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP5",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "3"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SHL",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "AND",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SHR",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "NOT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "AND",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "CODESIZE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "130"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "127"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP6",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP8",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP9",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP7",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP6",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP5",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP6",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP5",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP8",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP4",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "126"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "119"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 3351,
									"end": 3367,
									"name": "PUSH",
									"source": 14,
									"value": "6"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP5",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "1F"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP5",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "KECCAK256",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "5"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SHR",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "1F"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP7",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "5"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SHR",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "131"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "LT",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "132"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "120"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "132"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SSTORE",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "DUP6",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "131"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMP",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "tag",
									"source": 17,
									"value": "115"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH",
									"source": 17,
									"value": "7F"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "AND",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "116"
								},
								{
									"begin": 319,
									"end": 5155,
									"name": "JUMP",
									"source": 17
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220768f6535cb42068c7c3c5a81f73dfdf55a42f8dbf9d9cf8dc6e49da58cf6d35164736f6c63430008120033",
									".code": [
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "80"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLDATASIZE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "LT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "19"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "19"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLDATALOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "E0"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SHR",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "6FDDE03"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "21"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "95EA7B3"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "23"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "18160DDD"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "25"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "23B872DD"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "27"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "313CE567"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "29"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "3644E515"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "31"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "39509351"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "33"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "3BA0B9A9"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "35"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "40C10F19"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "37"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "65855DFD"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "39"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "6C11BCD3"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "41"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "70A08231"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "43"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "715018A6"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "45"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "7ECEBE00"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "47"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "84B0196E"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "49"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "8AB1D681"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "51"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "8DA5CB5B"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "53"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "95D89B41"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "55"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "A0EF91DF"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "57"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "A457C2D7"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "59"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "A9059CBB"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "61"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "D0FEBE4C"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "63"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "D505ACCF"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "65"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "DB068E0E"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "67"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "DD62ED3E"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "69"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "E43252D7"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "71"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "F2FDE38B"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "73"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "73"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLVALUE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "77"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLDATASIZE",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "77"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "79"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "2"
										},
										{
											"begin": 319,
											"end": 5155,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "79"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1063,
											"end": 1125,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "tag",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 2162,
											"end": 2184,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2162,
											"end": 2184,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "81"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2518,
											"end": 2524,
											"name": "PUSH",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "A0"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SHL",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "OR",
											"source": 17
										},
										{
											"begin": 2518,
											"end": 2524,
											"name": "PUSH",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 2566,
											"end": 2606,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2566,
											"end": 2606,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2566,
											"end": 2606,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2566,
											"end": 2606,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "RETURN",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "81"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "84"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "461BCD"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "E5"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SHL",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "26"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "24"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "44"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "646472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "64"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "77"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "71"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLVALUE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "85"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLDATASIZE",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "85"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "87"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "2"
										},
										{
											"begin": 319,
											"end": 5155,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "87"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "88"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1063,
											"end": 1125,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "tag",
											"source": 0,
											"value": "88"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 3911,
											"end": 3932,
											"name": "PUSH",
											"source": 17,
											"value": "C"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "KECCAK256",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLOAD",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "1"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "OR",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SSTORE",
											"source": 17
										},
										{
											"begin": 3964,
											"end": 3989,
											"name": "PUSH",
											"source": 17,
											"value": "A850AE9193F515CBAE8D35E8925BD2BE26627FC91BCE650B8652ED254E9CAB03"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 3964,
											"end": 3989,
											"name": "LOG2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "RETURN",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "85"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "69"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLVALUE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "85"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "3"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "NOT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLDATASIZE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "85"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "93"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "2"
										},
										{
											"begin": 319,
											"end": 5155,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "93"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "94"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "3"
										},
										{
											"begin": 319,
											"end": 5155,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "94"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "1"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP7",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "KECCAK256",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "KECCAK256",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "RETURN",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "67"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLVALUE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "85"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLDATASIZE",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "85"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "99"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1063,
											"end": 1125,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "tag",
											"source": 0,
											"value": "99"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLDATALOAD",
											"source": 17
										},
										{
											"begin": 3419,
											"end": 3441,
											"name": "PUSH",
											"source": 17,
											"value": "B"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "RETURN",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "65"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLVALUE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "85"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "E0"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLDATASIZE",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "85"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "104"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "2"
										},
										{
											"begin": 319,
											"end": 5155,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "104"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "105"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "3"
										},
										{
											"begin": 319,
											"end": 5155,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "105"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "44"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLDATALOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "64"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLDATALOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "84"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLDATALOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "FF"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "106"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 2139,
											"end": 2154,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2139,
											"end": 2154,
											"name": "TIMESTAMP",
											"source": 5
										},
										{
											"begin": 2139,
											"end": 2166,
											"name": "GT",
											"source": 5
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "108"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "1"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "A0"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SHL",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP10",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 3200,
											"end": 3207,
											"name": "PUSH",
											"source": 5,
											"value": "7"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP10",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP10",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "KECCAK256",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "1"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP11",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 2242,
											"end": 2321,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 2242,
											"end": 2321,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2242,
											"end": 2321,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 1125,
											"end": 1220,
											"name": "PUSH",
											"source": 5,
											"value": "6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 1125,
											"end": 1220,
											"name": "DUP7",
											"source": 5
										},
										{
											"begin": 1125,
											"end": 1220,
											"name": "DUP14",
											"source": 5
										},
										{
											"begin": 1125,
											"end": 1220,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 1125,
											"end": 1220,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP11",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "60"
										},
										{
											"begin": 1125,
											"end": 1220,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 1125,
											"end": 1220,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 1125,
											"end": 1220,
											"name": "DUP11",
											"source": 5
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "80"
										},
										{
											"begin": 1125,
											"end": 1220,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 1125,
											"end": 1220,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "A0"
										},
										{
											"begin": 1125,
											"end": 1220,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 1125,
											"end": 1220,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "C0"
										},
										{
											"begin": 1125,
											"end": 1220,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1125,
											"end": 1220,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "C0"
										},
										{
											"begin": 2242,
											"end": 2321,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2242,
											"end": 2321,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "E0"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "LT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "GT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "OR",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "110"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP12",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 2232,
											"end": 2322,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2232,
											"end": 2322,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 6791,
											"end": 6796,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "112"
										},
										{
											"begin": 6791,
											"end": 6796,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 6744,
											"end": 6769,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "113"
										},
										{
											"begin": 6744,
											"end": 6769,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 4893,
											"end": 4913,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "114"
										},
										{
											"begin": 4893,
											"end": 4913,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "12"
										},
										{
											"begin": 4893,
											"end": 4913,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 4893,
											"end": 4913,
											"name": "tag",
											"source": 14,
											"value": "114"
										},
										{
											"begin": 4893,
											"end": 4913,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 8496,
											"end": 8727,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 8496,
											"end": 8727,
											"name": "DUP13",
											"source": 13
										},
										{
											"begin": 8496,
											"end": 8727,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 8496,
											"end": 8727,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1901"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8496,
											"end": 8727,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 8496,
											"end": 8727,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 8496,
											"end": 8727,
											"name": "PUSH",
											"source": 13,
											"value": "2"
										},
										{
											"begin": 8496,
											"end": 8727,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 8496,
											"end": 8727,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 8496,
											"end": 8727,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 8496,
											"end": 8727,
											"name": "PUSH",
											"source": 13,
											"value": "22"
										},
										{
											"begin": 8496,
											"end": 8727,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 8496,
											"end": 8727,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 8496,
											"end": 8727,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "C4"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLDATALOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 8496,
											"end": 8727,
											"name": "PUSH",
											"source": 13,
											"value": "42"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "A4"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLDATALOAD",
											"source": 17
										},
										{
											"begin": 8496,
											"end": 8727,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 8496,
											"end": 8727,
											"name": "KECCAK256",
											"source": 13
										},
										{
											"begin": 6744,
											"end": 6769,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "11"
										},
										{
											"begin": 6744,
											"end": 6769,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 6744,
											"end": 6769,
											"name": "tag",
											"source": 13,
											"value": "113"
										},
										{
											"begin": 6744,
											"end": 6769,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6791,
											"end": 6796,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 6791,
											"end": 6796,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 6791,
											"end": 6796,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 6791,
											"end": 6796,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "10"
										},
										{
											"begin": 6791,
											"end": 6796,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 6791,
											"end": 6796,
											"name": "tag",
											"source": 13,
											"value": "112"
										},
										{
											"begin": 6791,
											"end": 6796,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 2450,
											"end": 2465,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 1125,
											"end": 1220,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "115"
										},
										{
											"begin": 1125,
											"end": 1220,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 2536,
											"end": 2541,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2536,
											"end": 2541,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "117"
										},
										{
											"begin": 2536,
											"end": 2541,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 2536,
											"end": 2541,
											"name": "SWAP5",
											"source": 5
										},
										{
											"begin": 2536,
											"end": 2541,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2536,
											"end": 2541,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "9"
										},
										{
											"begin": 2536,
											"end": 2541,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2536,
											"end": 2541,
											"name": "tag",
											"source": 5,
											"value": "117"
										},
										{
											"begin": 2536,
											"end": 2541,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "RETURN",
											"source": 17
										},
										{
											"begin": 1125,
											"end": 1220,
											"name": "tag",
											"source": 5,
											"value": "115"
										},
										{
											"begin": 1125,
											"end": 1220,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "64"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP8",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "461BCD"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "E5"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SHL",
											"source": 17
										},
										{
											"begin": 1125,
											"end": 1220,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 1125,
											"end": 1220,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1125,
											"end": 1220,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1125,
											"end": 1220,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1125,
											"end": 1220,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1125,
											"end": 1220,
											"name": "PUSH",
											"source": 5,
											"value": "1E"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "24"
										},
										{
											"begin": 1125,
											"end": 1220,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1125,
											"end": 1220,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 1125,
											"end": 1220,
											"name": "PUSH",
											"source": 5,
											"value": "45524332305065726D69743A20696E76616C6964207369676E61747572650000"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "44"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 1125,
											"end": 1220,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1125,
											"end": 1220,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "110"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP12",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "41"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP8",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "24"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP12",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "108"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP8",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "1D"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "24"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "45524332305065726D69743A206578706972656420646561646C696E65000000"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "44"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "64"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "106"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP7",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "63"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "3"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "NOT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLDATASIZE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "77"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "120"
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 2227,
											"end": 2330,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "tag",
											"source": 2,
											"value": "120"
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1695,
											"end": 1704,
											"name": "CALLVALUE",
											"source": 17
										},
										{
											"begin": 1695,
											"end": 1708,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "121"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 1854,
											"end": 1866,
											"name": "PUSH",
											"source": 17,
											"value": "B"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLOAD",
											"source": 17
										},
										{
											"begin": 1695,
											"end": 1704,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 1695,
											"end": 1704,
											"name": "CALLVALUE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MUL",
											"source": 17
										},
										{
											"begin": 1695,
											"end": 1704,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1695,
											"end": 1704,
											"name": "CALLVALUE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DIV",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "123"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 1870,
											"end": 1874,
											"name": "PUSH",
											"source": 17,
											"value": "DE0B6B3A7640000"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DIV",
											"source": 17
										},
										{
											"begin": 1911,
											"end": 1915,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 1911,
											"end": 1915,
											"name": "ADDRESS",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "KECCAK256",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLOAD",
											"source": 17
										},
										{
											"begin": 1893,
											"end": 1932,
											"name": "LT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "125"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 2041,
											"end": 2051,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2112,
											"end": 2163,
											"name": "PUSH",
											"source": 17,
											"value": "8FAFEBCAF9D154343DAD25669BFA277F4FBACD7AC6B0C4FED522580E040A0F33"
										},
										{
											"begin": 2041,
											"end": 2051,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 2053,
											"end": 2064,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "127"
										},
										{
											"begin": 2041,
											"end": 2051,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 2041,
											"end": 2051,
											"name": "CALLER",
											"source": 17
										},
										{
											"begin": 1911,
											"end": 1915,
											"name": "ADDRESS",
											"source": 17
										},
										{
											"begin": 2053,
											"end": 2064,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "16"
										},
										{
											"begin": 2053,
											"end": 2064,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 2053,
											"end": 2064,
											"name": "tag",
											"source": 17,
											"value": "127"
										},
										{
											"begin": 2053,
											"end": 2064,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 1695,
											"end": 1704,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 1695,
											"end": 1704,
											"name": "CALLVALUE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 2041,
											"end": 2051,
											"name": "CALLER",
											"source": 17
										},
										{
											"begin": 2112,
											"end": 2163,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 2112,
											"end": 2163,
											"name": "LOG2",
											"source": 17
										},
										{
											"begin": 1716,
											"end": 1717,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2809,
											"end": 2831,
											"name": "PUSH",
											"source": 2,
											"value": "A"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "RETURN",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "125"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "84"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "461BCD"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "E5"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SHL",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "26"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "24"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "496E73756666696369656E7420746F6B656E2062616C616E636520696E20636F"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "44"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1B9D1C9858DD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "64"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "123"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "11"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "24"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "121"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "64"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "461BCD"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "E5"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SHL",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "19"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "24"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "4D7573742073656E642045544820746F2065786368616E676500000000000000"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "44"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "61"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLVALUE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "85"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "3"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "NOT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLDATASIZE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "85"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "132"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "133"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "2"
										},
										{
											"begin": 319,
											"end": 5155,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "133"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "24"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLDATALOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "17"
										},
										{
											"begin": 319,
											"end": 5155,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "132"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "RETURN",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "59"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLVALUE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "136"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "3"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "NOT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLDATASIZE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "136"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "138"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "2"
										},
										{
											"begin": 319,
											"end": 5155,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "138"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "24"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLDATALOAD",
											"source": 17
										},
										{
											"begin": 734,
											"end": 744,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 734,
											"end": 744,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "1"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "KECCAK256",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "1"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "A0"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SHL",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP7",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "KECCAK256",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLOAD",
											"source": 17
										},
										{
											"begin": 6792,
											"end": 6827,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6792,
											"end": 6827,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 6792,
											"end": 6827,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 6792,
											"end": 6827,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "139"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 6928,
											"end": 6962,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "141"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP8",
											"source": 17
										},
										{
											"begin": 734,
											"end": 744,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 6928,
											"end": 6962,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "9"
										},
										{
											"begin": 6928,
											"end": 6962,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 6928,
											"end": 6962,
											"name": "tag",
											"source": 3,
											"value": "141"
										},
										{
											"begin": 6928,
											"end": 6962,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "1"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "RETURN",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "139"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "84"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP7",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "461BCD"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "E5"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SHL",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "25"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "24"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "44"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "207A65726F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "64"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "136"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "57"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLVALUE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "77"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "3"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "NOT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLDATASIZE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "77"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "146"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1063,
											"end": 1125,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "tag",
											"source": 0,
											"value": "146"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3582,
											"end": 3603,
											"name": "SELFBALANCE",
											"source": 17
										},
										{
											"begin": 3622,
											"end": 3633,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 3622,
											"end": 3633,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 3622,
											"end": 3633,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "147"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "PUSH",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 3667,
											"end": 3701,
											"name": "CALL",
											"source": 17
										},
										{
											"begin": 3667,
											"end": 3701,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 3667,
											"end": 3701,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "149"
										},
										{
											"begin": 3667,
											"end": 3701,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "RETURN",
											"source": 17
										},
										{
											"begin": 3667,
											"end": 3701,
											"name": "tag",
											"source": 17,
											"value": "149"
										},
										{
											"begin": 3667,
											"end": 3701,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "RETURNDATASIZE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "RETURNDATACOPY",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "RETURNDATASIZE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "147"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "64"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "461BCD"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "E5"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SHL",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "12"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "24"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E6F2045544820746F207769746864726177"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "70"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "44"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "55"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLVALUE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "77"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "3"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "NOT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLDATASIZE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "77"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "155"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "5"
										},
										{
											"begin": 319,
											"end": 5155,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "155"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP7",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "1"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "156"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "1"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "158"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "159"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "160"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP7",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP7",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "161"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP12",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "7"
										},
										{
											"begin": 319,
											"end": 5155,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "161"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "1"
										},
										{
											"begin": 319,
											"end": 5155,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "160"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "RETURN",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "158"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP5",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19B"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "162"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP7",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "LT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "163"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "161"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "160"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP6",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP5",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CODESIZE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "159"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "163"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP8",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP8",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP6",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP5",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "162"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "156"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "160"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP8",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP7",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "161"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP5",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "FF"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "NOT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "5"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SHL",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP5",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CODESIZE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "159"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "53"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLVALUE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "85"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "3"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "NOT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLDATASIZE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "85"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "PUSH",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "RETURN",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "51"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLVALUE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "85"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLDATASIZE",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "85"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "173"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "2"
										},
										{
											"begin": 319,
											"end": 5155,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "173"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "174"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1063,
											"end": 1125,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "tag",
											"source": 0,
											"value": "174"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 4145,
											"end": 4166,
											"name": "PUSH",
											"source": 17,
											"value": "C"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "KECCAK256",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLOAD",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SSTORE",
											"source": 17
										},
										{
											"begin": 4199,
											"end": 4228,
											"name": "PUSH",
											"source": 17,
											"value": "CDD2E9B91A56913D370075169CEFA1602BA36BE5301664F752192BB1709DF757"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 4199,
											"end": 4228,
											"name": "LOG2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "RETURN",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "49"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLVALUE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "77"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "3"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "NOT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLDATASIZE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "77"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 5427,
											"end": 5468,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "179"
										},
										{
											"begin": 5427,
											"end": 5432,
											"name": "PUSHIMMUTABLE",
											"source": 14,
											"value": "2153"
										},
										{
											"begin": 5427,
											"end": 5468,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "13"
										},
										{
											"begin": 5427,
											"end": 5468,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 5427,
											"end": 5468,
											"name": "tag",
											"source": 14,
											"value": "179"
										},
										{
											"begin": 5427,
											"end": 5468,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5482,
											"end": 5490,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 5482,
											"end": 5529,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "180"
										},
										{
											"begin": 5482,
											"end": 5490,
											"name": "PUSHIMMUTABLE",
											"source": 14,
											"value": "2156"
										},
										{
											"begin": 5482,
											"end": 5529,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "14"
										},
										{
											"begin": 5482,
											"end": 5529,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 5482,
											"end": 5529,
											"name": "tag",
											"source": 14,
											"value": "180"
										},
										{
											"begin": 5482,
											"end": 5529,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP6",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP8",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "LT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP9",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "GT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "OR",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "181"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "183"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP9",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP7",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "184"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP10",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP12",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP10",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP7",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP7",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP7",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP10",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP11",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP10",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "F"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "F8"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SHL",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP12",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "E0"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP7",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP13",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "E0"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP12",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "1"
										},
										{
											"begin": 319,
											"end": 5155,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "184"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP10",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP11",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "1"
										},
										{
											"begin": 319,
											"end": 5155,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "183"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 5543,
											"end": 5556,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 5543,
											"end": 5556,
											"name": "CHAINID",
											"source": 14
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "60"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP9",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 5578,
											"end": 5582,
											"name": "ADDRESS",
											"source": 14
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "80"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP9",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "A0"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP9",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP7",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "C0"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP9",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "185"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "LT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "186"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "RETURN",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "186"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP7",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP6",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "1"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "185"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "181"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "41"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "24"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "47"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLVALUE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "85"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLDATASIZE",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "85"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "192"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "2"
										},
										{
											"begin": 319,
											"end": 5155,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "192"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 2698,
											"end": 2705,
											"name": "PUSH",
											"source": 5,
											"value": "7"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "KECCAK256",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "RETURN",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "45"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLVALUE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "136"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "3"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "NOT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLDATASIZE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "136"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "197"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1063,
											"end": 1125,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "tag",
											"source": 0,
											"value": "197"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2518,
											"end": 2524,
											"name": "PUSH",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLOAD",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 2566,
											"end": 2606,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 2566,
											"end": 2606,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "RETURN",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "43"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLVALUE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "85"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLDATASIZE",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "85"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "202"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "2"
										},
										{
											"begin": 319,
											"end": 5155,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "202"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "KECCAK256",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "RETURN",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "41"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLVALUE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "77"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "3"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "NOT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLDATASIZE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "205"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLDATALOAD",
											"source": 17
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "207"
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 2227,
											"end": 2330,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "tag",
											"source": 2,
											"value": "207"
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2374,
											"end": 2389,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 2374,
											"end": 2389,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "208"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 2460,
											"end": 2470,
											"name": "CALLER",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP7",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "KECCAK256",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLOAD",
											"source": 17
										},
										{
											"begin": 2450,
											"end": 2486,
											"name": "LT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "210"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 2632,
											"end": 2636,
											"name": "PUSH",
											"source": 17,
											"value": "DE0B6B3A7640000"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MUL",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "DE0B6B3A763FFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DIV",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "212"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 2640,
											"end": 2652,
											"name": "PUSH",
											"source": 17,
											"value": "B"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "214"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DIV",
											"source": 17
										},
										{
											"begin": 2671,
											"end": 2692,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 2671,
											"end": 2692,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 2671,
											"end": 2692,
											"name": "SELFBALANCE",
											"source": 17
										},
										{
											"begin": 2671,
											"end": 2705,
											"name": "LT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "216"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 2679,
											"end": 2683,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2824,
											"end": 2835,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "218"
										},
										{
											"begin": 2679,
											"end": 2683,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 2679,
											"end": 2683,
											"name": "ADDRESS",
											"source": 17
										},
										{
											"begin": 2460,
											"end": 2470,
											"name": "CALLER",
											"source": 17
										},
										{
											"begin": 2824,
											"end": 2835,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "16"
										},
										{
											"begin": 2824,
											"end": 2835,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 2824,
											"end": 2835,
											"name": "tag",
											"source": 17,
											"value": "218"
										},
										{
											"begin": 2824,
											"end": 2835,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2872,
											"end": 2911,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 2872,
											"end": 2911,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 2872,
											"end": 2911,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 2872,
											"end": 2911,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 2872,
											"end": 2911,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 2872,
											"end": 2911,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "219"
										},
										{
											"begin": 2872,
											"end": 2911,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "220"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2460,
											"end": 2470,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 2460,
											"end": 2470,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 2460,
											"end": 2470,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 2460,
											"end": 2470,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 2460,
											"end": 2470,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 2460,
											"end": 2470,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 2460,
											"end": 2470,
											"name": "CALLER",
											"source": 17
										},
										{
											"begin": 2872,
											"end": 2911,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 2872,
											"end": 2911,
											"name": "CALL",
											"source": 17
										},
										{
											"begin": 2872,
											"end": 2911,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 2872,
											"end": 2911,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "221"
										},
										{
											"begin": 2872,
											"end": 2911,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 2960,
											"end": 3006,
											"name": "PUSH",
											"source": 17,
											"value": "2DCF9433D75DB0D8B1C172641F85E319FFE4AD22E108A95D1847CEB906E5195D"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP5",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 2460,
											"end": 2470,
											"name": "CALLER",
											"source": 17
										},
										{
											"begin": 2960,
											"end": 3006,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 2960,
											"end": 3006,
											"name": "LOG2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "1"
										},
										{
											"begin": 2809,
											"end": 2831,
											"name": "PUSH",
											"source": 2,
											"value": "A"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "RETURN",
											"source": 17
										},
										{
											"begin": 2872,
											"end": 2911,
											"name": "tag",
											"source": 17,
											"value": "221"
										},
										{
											"begin": 2872,
											"end": 2911,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "RETURNDATASIZE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP7",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "RETURNDATACOPY",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "RETURNDATASIZE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 2872,
											"end": 2911,
											"name": "tag",
											"source": 17,
											"value": "219"
										},
										{
											"begin": 2872,
											"end": 2911,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2872,
											"end": 2911,
											"name": "PUSH",
											"source": 17,
											"value": "8FC"
										},
										{
											"begin": 2872,
											"end": 2911,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2872,
											"end": 2911,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "220"
										},
										{
											"begin": 2872,
											"end": 2911,
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "216"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "24"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "496E73756666696369656E74204554482062616C616E636520696E20636F6E74"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "44"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1C9858DD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "64"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "84"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "214"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP8",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "12"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "24"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP8",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "212"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP7",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "11"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "24"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP7",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "210"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "64"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "461BCD"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "E5"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SHL",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "1A"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "24"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "496E73756666696369656E7420746F6B656E2062616C616E6365000000000000"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "44"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "208"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "84"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "461BCD"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "E5"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SHL",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "25"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "24"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "4D7573742073656C6C206120706F73697469766520616D6F756E74206F662074"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "44"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6F6B656E73"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "64"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "205"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "39"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLVALUE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "85"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLDATASIZE",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "85"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "FF"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "227"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "2"
										},
										{
											"begin": 319,
											"end": 5155,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "227"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 4386,
											"end": 4407,
											"name": "PUSH",
											"source": 17,
											"value": "C"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "KECCAK256",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "RETURN",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "37"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLVALUE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "77"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "3"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "NOT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLDATASIZE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "77"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "232"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "2"
										},
										{
											"begin": 319,
											"end": 5155,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "232"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "24"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLDATALOAD",
											"source": 17
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "233"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1063,
											"end": 1125,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "tag",
											"source": 0,
											"value": "233"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 8603,
											"end": 8624,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 8603,
											"end": 8624,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "234"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 8952,
											"end": 8989,
											"name": "PUSH",
											"source": 3,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 8731,
											"end": 8753,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "236"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP8",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP6",
											"source": 17
										},
										{
											"begin": 8731,
											"end": 8753,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLOAD",
											"source": 17
										},
										{
											"begin": 8731,
											"end": 8753,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "8"
										},
										{
											"begin": 8731,
											"end": 8753,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 8731,
											"end": 8753,
											"name": "tag",
											"source": 3,
											"value": "236"
										},
										{
											"begin": 8731,
											"end": 8753,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 8731,
											"end": 8753,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "KECCAK256",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 8952,
											"end": 8989,
											"name": "LOG3",
											"source": 3
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "RETURN",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "234"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "64"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "461BCD"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "E5"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SHL",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "1F"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "24"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "45524332303A206D696E7420746F20746865207A65726F206164647265737300"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "44"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "35"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLVALUE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "85"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "3"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "NOT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLDATASIZE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "85"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 451,
											"end": 478,
											"name": "PUSH",
											"source": 17,
											"value": "B"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "RETURN",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "33"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLVALUE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "85"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "3"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "NOT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLDATASIZE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "85"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 6021,
											"end": 6059,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "141"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 6021,
											"end": 6059,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "246"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "247"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "2"
										},
										{
											"begin": 319,
											"end": 5155,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "247"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 734,
											"end": 744,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "1"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP7",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "KECCAK256",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP7",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "KECCAK256",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "24"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLDATALOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 6021,
											"end": 6059,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "8"
										},
										{
											"begin": 6021,
											"end": 6059,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 6021,
											"end": 6059,
											"name": "tag",
											"source": 3,
											"value": "246"
										},
										{
											"begin": 6021,
											"end": 6059,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 734,
											"end": 744,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 734,
											"end": 744,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 6021,
											"end": 6059,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "9"
										},
										{
											"begin": 6021,
											"end": 6059,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "31"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLVALUE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "85"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "3"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "NOT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLDATASIZE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "85"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 2922,
											"end": 2942,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2922,
											"end": 2942,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "252"
										},
										{
											"begin": 2922,
											"end": 2942,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "12"
										},
										{
											"begin": 2922,
											"end": 2942,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2922,
											"end": 2942,
											"name": "tag",
											"source": 5,
											"value": "252"
										},
										{
											"begin": 2922,
											"end": 2942,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "RETURN",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "29"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLVALUE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "85"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "3"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "NOT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLDATASIZE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "85"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 3186,
											"end": 3188,
											"name": "PUSH",
											"source": 3,
											"value": "12"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "RETURN",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "27"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLVALUE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "85"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "60"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLDATASIZE",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "85"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "132"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "262"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "2"
										},
										{
											"begin": 319,
											"end": 5155,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "262"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "263"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "3"
										},
										{
											"begin": 319,
											"end": 5155,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "263"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "44"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLDATALOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "18"
										},
										{
											"begin": 319,
											"end": 5155,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "25"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLVALUE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "85"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "3"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "NOT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLDATASIZE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "85"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 3342,
											"end": 3354,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "RETURN",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "23"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLVALUE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "85"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "3"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "NOT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLDATASIZE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "85"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 4606,
											"end": 4612,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "141"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "273"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "2"
										},
										{
											"begin": 319,
											"end": 5155,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "273"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "24"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLDATALOAD",
											"source": 17
										},
										{
											"begin": 734,
											"end": 744,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 734,
											"end": 744,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 4606,
											"end": 4612,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "9"
										},
										{
											"begin": 4606,
											"end": 4612,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "21"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLVALUE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "77"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "3"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "NOT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLDATASIZE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "77"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "3"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "278"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "5"
										},
										{
											"begin": 319,
											"end": 5155,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "278"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "1"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "279"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "1"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "281"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "282"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "161"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "160"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP5",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "7"
										},
										{
											"begin": 319,
											"end": 5155,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "281"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP5",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "3"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "C2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "285"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP7",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "LT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "286"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "161"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "160"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP6",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP5",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "282"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "286"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP8",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP8",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP6",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP5",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "285"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "279"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "160"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP8",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP7",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "161"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP5",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "FF"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "NOT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "5"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SHL",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP5",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "282"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "1"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "288"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "LT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "289"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP5",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP6",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "1F"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "NOT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "289"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "288"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "2"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLDATALOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "291"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "291"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "3"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "24"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CALLDATALOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "291"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 1359,
											"end": 1489,
											"name": "tag",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1359,
											"end": 1489,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "PUSH",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLOAD",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 734,
											"end": 744,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 1422,
											"end": 1445,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "295"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 1359,
											"end": 1489,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "295"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "64"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "461BCD"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "E5"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SHL",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "24"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "44"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "5"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "1"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SHR",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "297"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "298"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "LT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "299"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "299"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "4E487B71"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "E0"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SHL",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "22"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "24"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "297"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "7F"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "298"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "6"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "LT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "GT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "OR",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "301"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "301"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "4E487B71"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "E0"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SHL",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "41"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "24"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "7"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "1F"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "NOT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "LT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "GT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "OR",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "301"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "8"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "GT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "305"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "305"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "4E487B71"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "E0"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SHL",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "11"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "24"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 10457,
											"end": 10797,
											"name": "tag",
											"source": 3,
											"value": "9"
										},
										{
											"begin": 10457,
											"end": 10797,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 10558,
											"end": 10577,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 10558,
											"end": 10577,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "307"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 10636,
											"end": 10657,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 10636,
											"end": 10657,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 10636,
											"end": 10657,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "309"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 10758,
											"end": 10790,
											"name": "PUSH",
											"source": 3,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 10575,
											"end": 10576,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "1"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 10575,
											"end": 10576,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "KECCAK256",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 10575,
											"end": 10576,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 10575,
											"end": 10576,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "KECCAK256",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 10758,
											"end": 10790,
											"name": "LOG3",
											"source": 3
										},
										{
											"begin": 10457,
											"end": 10797,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "309"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "22"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "24"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "45524332303A20617070726F766520746F20746865207A65726F206164647265"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "44"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "64"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "84"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "307"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "24"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "45524332303A20617070726F76652066726F6D20746865207A65726F20616464"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "44"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "72657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "64"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "84"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 570,
											"end": 1081,
											"name": "tag",
											"source": 13,
											"value": "10"
										},
										{
											"begin": 570,
											"end": 1081,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "5"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "LT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "311"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 638,
											"end": 667,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 638,
											"end": 667,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "313"
										},
										{
											"begin": 638,
											"end": 667,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 683,
											"end": 690,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 683,
											"end": 690,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 634,
											"end": 1075,
											"name": "tag",
											"source": 13,
											"value": "313"
										},
										{
											"begin": 634,
											"end": 1075,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "1"
										},
										{
											"begin": 734,
											"end": 772,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 734,
											"end": 772,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "315"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 788,
											"end": 822,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 788,
											"end": 822,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 788,
											"end": 822,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 788,
											"end": 822,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 788,
											"end": 822,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "18"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "24"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "45434453413A20696E76616C6964207369676E61747572650000000000000000"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "44"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "64"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 788,
											"end": 822,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 730,
											"end": 1075,
											"name": "tag",
											"source": 13,
											"value": "315"
										},
										{
											"begin": 730,
											"end": 1075,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 852,
											"end": 887,
											"name": "PUSH",
											"source": 13,
											"value": "2"
										},
										{
											"begin": 843,
											"end": 887,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 843,
											"end": 887,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 852,
											"end": 887,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "317"
										},
										{
											"begin": 852,
											"end": 887,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 903,
											"end": 944,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 903,
											"end": 944,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 903,
											"end": 944,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 903,
											"end": 944,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 903,
											"end": 944,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "1F"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "24"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "45434453413A20696E76616C6964207369676E6174757265206C656E67746800"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "44"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "64"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 903,
											"end": 944,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 839,
											"end": 1075,
											"name": "tag",
											"source": 13,
											"value": "317"
										},
										{
											"begin": 839,
											"end": 1075,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 974,
											"end": 1004,
											"name": "PUSH",
											"source": 13,
											"value": "3"
										},
										{
											"begin": 965,
											"end": 1004,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 961,
											"end": 1075,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "319"
										},
										{
											"begin": 961,
											"end": 1075,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 570,
											"end": 1081,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 961,
											"end": 1075,
											"name": "tag",
											"source": 13,
											"value": "319"
										},
										{
											"begin": 961,
											"end": 1075,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1020,
											"end": 1064,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1020,
											"end": 1064,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 1020,
											"end": 1064,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 1020,
											"end": 1064,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 1020,
											"end": 1064,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "22"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "24"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "45434453413A20696E76616C6964207369676E6174757265202773272076616C"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "44"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7565"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "64"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "84"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1020,
											"end": 1064,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "311"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "4E487B71"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "E0"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SHL",
											"source": 17
										},
										{
											"begin": 647,
											"end": 667,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "21"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "24"
										},
										{
											"begin": 647,
											"end": 667,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 5009,
											"end": 6465,
											"name": "tag",
											"source": 13,
											"value": "11"
										},
										{
											"begin": 5009,
											"end": 6465,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5009,
											"end": 6465,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 5009,
											"end": 6465,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 5009,
											"end": 6465,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 6021,
											"end": 6087,
											"name": "PUSH",
											"source": 13,
											"value": "7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"
										},
										{
											"begin": 6008,
											"end": 6087,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 6008,
											"end": 6087,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 6004,
											"end": 6165,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "321"
										},
										{
											"begin": 6004,
											"end": 6165,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "80"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP5",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "FF"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP5",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP5",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "60"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "GAS",
											"source": 13
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "STATICCALL",
											"source": 13
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "323"
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 6314,
											"end": 6334,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 6310,
											"end": 6411,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "325"
										},
										{
											"begin": 6310,
											"end": 6411,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 6421,
											"end": 6458,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 5009,
											"end": 6465,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 5009,
											"end": 6465,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 6310,
											"end": 6411,
											"name": "tag",
											"source": 13,
											"value": "325"
										},
										{
											"begin": 6310,
											"end": 6411,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6350,
											"end": 6400,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 6350,
											"end": 6400,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 6350,
											"end": 6400,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "tag",
											"source": 13,
											"value": "323"
										},
										{
											"begin": 6276,
											"end": 6300,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "RETURNDATASIZE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "RETURNDATACOPY",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "RETURNDATASIZE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 6004,
											"end": 6165,
											"name": "tag",
											"source": 13,
											"value": "321"
										},
										{
											"begin": 6004,
											"end": 6165,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6103,
											"end": 6154,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6103,
											"end": 6154,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6103,
											"end": 6154,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6103,
											"end": 6154,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6119,
											"end": 6120,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 6103,
											"end": 6154,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 6123,
											"end": 6153,
											"name": "PUSH",
											"source": 13,
											"value": "3"
										},
										{
											"begin": 6103,
											"end": 6154,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 6103,
											"end": 6154,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3695,
											"end": 3957,
											"name": "tag",
											"source": 14,
											"value": "12"
										},
										{
											"begin": 3695,
											"end": 3957,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3779,
											"end": 3783,
											"name": "ADDRESS",
											"source": 14
										},
										{
											"begin": 3788,
											"end": 3799,
											"name": "PUSHIMMUTABLE",
											"source": 14,
											"value": "2146"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 3771,
											"end": 3799,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 3771,
											"end": 3799,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 3771,
											"end": 3834,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "327"
										},
										{
											"begin": 3771,
											"end": 3834,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 3695,
											"end": 3957,
											"name": "tag",
											"source": 14,
											"value": "328"
										},
										{
											"begin": 3695,
											"end": 3957,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3767,
											"end": 3951,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 3767,
											"end": 3951,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "329"
										},
										{
											"begin": 3767,
											"end": 3951,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 3857,
											"end": 3879,
											"name": "PUSHIMMUTABLE",
											"source": 14,
											"value": "2142"
										},
										{
											"begin": 3850,
											"end": 3879,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 3850,
											"end": 3879,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 3767,
											"end": 3951,
											"name": "tag",
											"source": 14,
											"value": "329"
										},
										{
											"begin": 3767,
											"end": 3951,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 4054,
											"end": 4135,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 4054,
											"end": 4135,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4054,
											"end": 4135,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1929,
											"end": 2024,
											"name": "PUSH",
											"source": 14,
											"value": "8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 4077,
											"end": 4088,
											"name": "PUSHIMMUTABLE",
											"source": 14,
											"value": "2148"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 1929,
											"end": 2024,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 1929,
											"end": 2024,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 4090,
											"end": 4104,
											"name": "PUSHIMMUTABLE",
											"source": 14,
											"value": "2150"
										},
										{
											"begin": 1929,
											"end": 2024,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 1929,
											"end": 2024,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 1929,
											"end": 2024,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 4106,
											"end": 4119,
											"name": "CHAINID",
											"source": 14
										},
										{
											"begin": 1929,
											"end": 2024,
											"name": "PUSH",
											"source": 14,
											"value": "80"
										},
										{
											"begin": 1929,
											"end": 2024,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 1929,
											"end": 2024,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 3779,
											"end": 3783,
											"name": "ADDRESS",
											"source": 14
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "A0"
										},
										{
											"begin": 1929,
											"end": 2024,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 1929,
											"end": 2024,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "A0"
										},
										{
											"begin": 4054,
											"end": 4135,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4054,
											"end": 4135,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 1929,
											"end": 2024,
											"name": "PUSH",
											"source": 14,
											"value": "C0"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "LT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "GT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "OR",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "301"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 4044,
											"end": 4136,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4044,
											"end": 4136,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 3910,
											"end": 3940,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 3910,
											"end": 3940,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 3771,
											"end": 3834,
											"name": "tag",
											"source": 14,
											"value": "327"
										},
										{
											"begin": 3771,
											"end": 3834,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3820,
											"end": 3834,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3820,
											"end": 3834,
											"name": "PUSHIMMUTABLE",
											"source": 14,
											"value": "2144"
										},
										{
											"begin": 3803,
											"end": 3816,
											"name": "CHAINID",
											"source": 14
										},
										{
											"begin": 3803,
											"end": 3834,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 3771,
											"end": 3834,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "328"
										},
										{
											"begin": 3771,
											"end": 3834,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 3367,
											"end": 3635,
											"name": "tag",
											"source": 10,
											"value": "13"
										},
										{
											"begin": 3367,
											"end": 3635,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1371,
											"end": 1437,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 3490,
											"end": 3537,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3490,
											"end": 3537,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 1371,
											"end": 1437,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "333"
										},
										{
											"begin": 1371,
											"end": 1437,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1371,
											"end": 1437,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 2633,
											"end": 2673,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2633,
											"end": 2673,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 2687,
											"end": 2698,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2696,
											"end": 2698,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 2687,
											"end": 2698,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2687,
											"end": 2698,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 2683,
											"end": 2752,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "335"
										},
										{
											"begin": 2683,
											"end": 2752,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "337"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "6"
										},
										{
											"begin": 319,
											"end": 5155,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "337"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2348,
											"end": 2438,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2348,
											"end": 2438,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2292,
											"end": 2294,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 2348,
											"end": 2438,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3553,
											"end": 3575,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3553,
											"end": 3575,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2683,
											"end": 2752,
											"name": "tag",
											"source": 10,
											"value": "335"
										},
										{
											"begin": 2683,
											"end": 2752,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2CD44AC3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2721,
											"end": 2741,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2721,
											"end": 2741,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2721,
											"end": 2741,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 2721,
											"end": 2741,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2721,
											"end": 2741,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 3486,
											"end": 3629,
											"name": "tag",
											"source": 10,
											"value": "333"
										},
										{
											"begin": 3486,
											"end": 3629,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 5454,
											"end": 5467,
											"name": "PUSH",
											"source": 14,
											"value": "5"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "338"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "5"
										},
										{
											"begin": 319,
											"end": 5155,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "338"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "1"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "339"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "1"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "341"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "342"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1371,
											"end": 1437,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1371,
											"end": 1437,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "343"
										},
										{
											"begin": 1371,
											"end": 1437,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1371,
											"end": 1437,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1371,
											"end": 1437,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 1371,
											"end": 1437,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1371,
											"end": 1437,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "7"
										},
										{
											"begin": 1371,
											"end": 1437,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1371,
											"end": 1437,
											"name": "tag",
											"source": 10,
											"value": "343"
										},
										{
											"begin": 1371,
											"end": 1437,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3606,
											"end": 3618,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3606,
											"end": 3618,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "341"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 5454,
											"end": 5467,
											"name": "PUSH",
											"source": 14,
											"value": "5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "36B6384B5ECA791C62761152D0C79BB0604C104A5FB6F4EB0703F3154BB3DB0"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "344"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "LT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "345"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1371,
											"end": 1437,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "343"
										},
										{
											"begin": 1371,
											"end": 1437,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CODESIZE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "342"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "345"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP10",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "344"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "339"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 1371,
											"end": 1437,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "343"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP5",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "FF"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "NOT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 5454,
											"end": 5467,
											"name": "PUSH",
											"source": 14,
											"value": "5"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SHL",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CODESIZE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "342"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 3367,
											"end": 3635,
											"name": "tag",
											"source": 10,
											"value": "14"
										},
										{
											"begin": 3367,
											"end": 3635,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1371,
											"end": 1437,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 3490,
											"end": 3537,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3490,
											"end": 3537,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 1371,
											"end": 1437,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "347"
										},
										{
											"begin": 1371,
											"end": 1437,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1371,
											"end": 1437,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 2633,
											"end": 2673,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2633,
											"end": 2673,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 2687,
											"end": 2698,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2696,
											"end": 2698,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 2687,
											"end": 2698,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2687,
											"end": 2698,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 2683,
											"end": 2752,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "335"
										},
										{
											"begin": 2683,
											"end": 2752,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "337"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "6"
										},
										{
											"begin": 319,
											"end": 5155,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 3486,
											"end": 3629,
											"name": "tag",
											"source": 10,
											"value": "347"
										},
										{
											"begin": 3486,
											"end": 3629,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 5512,
											"end": 5528,
											"name": "PUSH",
											"source": 14,
											"value": "6"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "352"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "5"
										},
										{
											"begin": 319,
											"end": 5155,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "352"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "1"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "339"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "1"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "355"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 1371,
											"end": 1437,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1371,
											"end": 1437,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "343"
										},
										{
											"begin": 1371,
											"end": 1437,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1371,
											"end": 1437,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1371,
											"end": 1437,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 1371,
											"end": 1437,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1371,
											"end": 1437,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "7"
										},
										{
											"begin": 1371,
											"end": 1437,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "355"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 5512,
											"end": 5528,
											"name": "PUSH",
											"source": 14,
											"value": "6"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "F652222313E28459528D920B65115C16C04F3EFC82AAEDC97BE59F3F377C0D3F"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "358"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "LT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "359"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1371,
											"end": 1437,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "343"
										},
										{
											"begin": 1371,
											"end": 1437,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "CODESIZE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "342"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "359"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP10",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "358"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 2336,
											"end": 2623,
											"name": "tag",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 2336,
											"end": 2623,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 2468,
											"end": 2475,
											"name": "PUSH",
											"source": 2,
											"value": "A"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLOAD",
											"source": 17
										},
										{
											"begin": 2468,
											"end": 2487,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "361"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 2468,
											"end": 2475,
											"name": "PUSH",
											"source": 2,
											"value": "A"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SSTORE",
											"source": 17
										},
										{
											"begin": 2336,
											"end": 2623,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "tag",
											"source": 2,
											"value": "361"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 2,
											"value": "5265656E7472616E637947756172643A207265656E7472616E742063616C6C00"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "44"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 7456,
											"end": 8244,
											"name": "tag",
											"source": 3,
											"value": "16"
										},
										{
											"begin": 7456,
											"end": 8244,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 7552,
											"end": 7570,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 7552,
											"end": 7570,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "363"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 7630,
											"end": 7646,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 7630,
											"end": 7646,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 7630,
											"end": 7646,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "365"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 7568,
											"end": 7569,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "KECCAK256",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLOAD",
											"source": 17
										},
										{
											"begin": 7801,
											"end": 7822,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 7801,
											"end": 7822,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 7801,
											"end": 7822,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 7801,
											"end": 7822,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "367"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 8163,
											"end": 8189,
											"name": "PUSH",
											"source": 3,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP6",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP8",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP7",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP7",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "KECCAK256",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP7",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "KECCAK256",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 8163,
											"end": 8189,
											"name": "LOG3",
											"source": 3
										},
										{
											"begin": 7456,
											"end": 8244,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "367"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "26"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "24"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "45524332303A207472616E7366657220616D6F756E7420657863656564732062"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "44"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "616C616E6365"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "64"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "84"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "365"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "23"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "24"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "45524332303A207472616E7366657220746F20746865207A65726F2061646472"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "44"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "64"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "84"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "363"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "25"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "24"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "45524332303A207472616E736665722066726F6D20746865207A65726F206164"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "44"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "64"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "84"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 4478,
											"end": 4773,
											"name": "tag",
											"source": 17,
											"value": "17"
										},
										{
											"begin": 4478,
											"end": 4773,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 4478,
											"end": 4773,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 4607,
											"end": 4617,
											"name": "CALLER",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 4585,
											"end": 4606,
											"name": "PUSH",
											"source": 17,
											"value": "C"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "FF"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "KECCAK256",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 4581,
											"end": 4715,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "369"
										},
										{
											"begin": 4581,
											"end": 4715,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 3894,
											"end": 3900,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "371"
										},
										{
											"begin": 4607,
											"end": 4617,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 4607,
											"end": 4617,
											"name": "CALLER",
											"source": 17
										},
										{
											"begin": 3894,
											"end": 3900,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "16"
										},
										{
											"begin": 3894,
											"end": 3900,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3894,
											"end": 3900,
											"name": "tag",
											"source": 3,
											"value": "371"
										},
										{
											"begin": 3894,
											"end": 3900,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3918,
											"end": 3922,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 4478,
											"end": 4773,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 4478,
											"end": 4773,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 4581,
											"end": 4715,
											"name": "tag",
											"source": 17,
											"value": "369"
										},
										{
											"begin": 4581,
											"end": 4715,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 4670,
											"end": 4676,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "371"
										},
										{
											"begin": 4607,
											"end": 4617,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 4607,
											"end": 4617,
											"name": "CALLER",
											"source": 17
										},
										{
											"begin": 4670,
											"end": 4676,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "16"
										},
										{
											"begin": 4670,
											"end": 4676,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 4831,
											"end": 5152,
											"name": "tag",
											"source": 17,
											"value": "18"
										},
										{
											"begin": 4831,
											"end": 5152,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 4831,
											"end": 5152,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 4831,
											"end": 5152,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 4980,
											"end": 4990,
											"name": "CALLER",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 4958,
											"end": 4979,
											"name": "PUSH",
											"source": 17,
											"value": "C"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "FF"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "KECCAK256",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 4954,
											"end": 5082,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "373"
										},
										{
											"begin": 4954,
											"end": 5082,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "1"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "KECCAK256",
											"source": 17
										},
										{
											"begin": 4980,
											"end": 4990,
											"name": "CALLER",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "KECCAK256",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SLOAD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP4",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 11244,
											"end": 11281,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 11244,
											"end": 11281,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 11240,
											"end": 11483,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "375"
										},
										{
											"begin": 11240,
											"end": 11483,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 4831,
											"end": 5152,
											"name": "tag",
											"source": 17,
											"value": "376"
										},
										{
											"begin": 4831,
											"end": 5152,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 5424,
											"end": 5430,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "371"
										},
										{
											"begin": 5424,
											"end": 5430,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 5424,
											"end": 5430,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5424,
											"end": 5430,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "16"
										},
										{
											"begin": 5424,
											"end": 5430,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 11240,
											"end": 11483,
											"name": "tag",
											"source": 3,
											"value": "375"
										},
										{
											"begin": 11240,
											"end": 11483,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 11305,
											"end": 11331,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 11305,
											"end": 11331,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 11305,
											"end": 11331,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "378"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 11432,
											"end": 11457,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "380"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 5424,
											"end": 5430,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "371"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP6",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 4980,
											"end": 4990,
											"name": "CALLER",
											"source": 17
										},
										{
											"begin": 11432,
											"end": 11457,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 11432,
											"end": 11457,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "9"
										},
										{
											"begin": 11432,
											"end": 11457,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 11432,
											"end": 11457,
											"name": "tag",
											"source": 3,
											"value": "380"
										},
										{
											"begin": 11432,
											"end": 11457,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 11240,
											"end": 11483,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "376"
										},
										{
											"begin": 11240,
											"end": 11483,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "tag",
											"source": 17,
											"value": "378"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "1D"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "24"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "44"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "PUSH",
											"source": 17,
											"value": "64"
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 319,
											"end": 5155,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 4954,
											"end": 5082,
											"name": "tag",
											"source": 17,
											"value": "373"
										},
										{
											"begin": 4954,
											"end": 5082,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 5037,
											"end": 5043,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 5037,
											"end": 5043,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "371"
										},
										{
											"begin": 5037,
											"end": 5043,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 5037,
											"end": 5043,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "16"
										},
										{
											"begin": 5037,
											"end": 5043,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC5267.sol",
								"@openzeppelin/contracts/security/ReentrancyGuard.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Counters.sol",
								"@openzeppelin/contracts/utils/ShortStrings.sol",
								"@openzeppelin/contracts/utils/StorageSlot.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/cryptography/EIP712.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/TurtleToken.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"addToWhitelist(address)": "e43252d7",
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"buyTokens()": "d0febe4c",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"eip712Domain()": "84b0196e",
							"exchangeRate()": "3ba0b9a9",
							"inWhitelisted(address)": "65855dfd",
							"increaseAllowance(address,uint256)": "39509351",
							"mint(address,uint256)": "40c10f19",
							"name()": "06fdde03",
							"nonces(address)": "7ecebe00",
							"owner()": "8da5cb5b",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf",
							"removeFromWhitelist(address)": "8ab1d681",
							"renounceOwnership()": "715018a6",
							"sellTokens(uint256)": "6c11bcd3",
							"setExchangeRate(uint256)": "db068e0e",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd",
							"transferOwnership(address)": "f2fde38b",
							"withdrawEth()": "a0ef91df"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_exchangeRate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddedToWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemovedFromWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"TokensSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"inWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"sellTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"setExchangeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"addToWhitelist(address)\":{\"details\":\"\\ud654\\uc774\\ud2b8\\ub9ac\\uc2a4\\ud2b8 \\uad00\\ub828 \\ud568\\uc218\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"eip712Domain()\":{\"details\":\"See {EIP-5267}. _Available since v4.9._\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TurtleToken.sol\":\"TurtleToken\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fc980984badf3984b6303b377711220e067722bbd6a135b24669ff5069ef9f32\",\"dweb:/ipfs/QmPHXMSXj99XjSVM21YsY6aNtLLjLVXDbyN76J5HQYvvrz\"]},\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"keccak256\":\"0xac6c2efc64baccbde4904ae18ed45139c9aa8cff96d6888344d1e4d2eb8b659f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e416a280c610b6b7a5f158e4a41aacfaec01ef14d5d1de13b46be9e090265fc\",\"dweb:/ipfs/QmYZP2KrdyccBbhLZT42auhvBTMkwiwUS3V6HWb42rbwbG\"]},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://41319e7f621f2dc3733511332c4fd032f8e32ad2aa7fd6f665c19741d9941a34\",\"dweb:/ipfs/QmcYR3bd862GD1Bc7jwrU9bGxrhUu5na1oP964bDCu2id1\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cac938788bc4be12101e59d45588b4e059579f4e61062e1cda8d6b06c0191b15\",\"dweb:/ipfs/QmV2JKCyjTVH3rkWNrfdJRhAT7tZ3usAN2XcnD4h53Mvih\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":{\"keccak256\":\"0xbb16110ffe0b625944fe7dd97adcf1158e514185c956a5628bc09be90d606174\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b5b412e554a4dd37a50f89ffcd7b9a6ef2ae5064f37619f89343b23d58ce89ca\",\"dweb:/ipfs/QmPWMdBvdFk8WBVv625wd1Ar7aehnBWtj1XfFRrRL5KpxJ\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd\",\"dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://28879d01fd22c07b44f006612775f8577defbe459cb01685c5e25cd518c91a71\",\"dweb:/ipfs/QmVgfkwv2Fxw6hhTcDUZhE7NkoSKjab3ipM7UaRbt6uXb5\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a367861093b74443b137564d3f3c472f70bcf114739e62059c939f25e315706c\",\"dweb:/ipfs/Qmd7JMpcxD9RuQjK3uM3EzJUgSqdN8vzp8eytEiuwxQJ6h\"]},\"@openzeppelin/contracts/utils/Counters.sol\":{\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://59e1c62884d55b70f3ae5432b44bb3166ad71ae3acd19c57ab6ddc3c87c325ee\",\"dweb:/ipfs/QmezuXg5GK5oeA4F91EZhozBFekhq5TD966bHPH18cCqhu\"]},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"keccak256\":\"0xc0e310c163edf15db45d4ff938113ab357f94fa86e61ea8e790853c4d2e13256\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://04db5bc05dcb05ba1f6ca2dfbead17adc8a2e2f911aa80b05e7a36d9eaf96516\",\"dweb:/ipfs/QmVkfHZbXVBUPsTopueCn3qGJX8aEjahFF3Fn4NcygLNm5\"]},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e26daf81e2252dc1fe1ce0e4b55c2eb7c6d1ee84ae6558d1a9554432ea1d32da\",\"dweb:/ipfs/Qmb1UANWiWq5pCKbmHSu772hd4nt374dVaghGmwSVNuk8Q\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b81d9ff6559ea5c47fc573e17ece6d9ba5d6839e213e6ebc3b4c5c8fe4199d7f\",\"dweb:/ipfs/QmPCW1bFisUzJkyjroY3yipwfism9RRCigCcK1hbXtVM8n\"]},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8b93a1e39a4a19eba1600b92c96f435442db88cac91e315c8291547a2a7bcfe2\",\"dweb:/ipfs/QmTm34KVe6uZBZwq8dZDNWwPcm24qBJdxqL3rPxBJ4LrMv\"]},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"keccak256\":\"0x8432884527a7ad91e6eed1cfc5a0811ae2073e5bca107bd0ca442e9236b03dbd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e3aa0eadab7aafcf91a95684765f778f64386f0368de88522ce873c21385278a\",\"dweb:/ipfs/QmPfaVAqWgH1QsT3dHVuL6jwMZbVKdoP8w1PvpiPT2FPWd\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cc8841b3cd48ad125e2f46323c8bad3aa0e88e399ec62acb9e57efa7e7c8058c\",\"dweb:/ipfs/QmSqE4mXHA2BXW58deDbXE8MTcsL5JSKNDbm23sVQxRLPS\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c50fcc459e49a9858b6d8ad5f911295cb7c9ab57567845a250bf0153f84a95c7\",\"dweb:/ipfs/QmcEW85JRzvDkQggxiBBLVAasXWdkhEysqypj9EaB6H2g6\"]},\"contracts/TurtleToken.sol\":{\"keccak256\":\"0x7c8616f622cb4acbc8abd031db9eacd35b1fe29c58a48fe182e1617246a351e0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7c75d048c6b9f2c5e0ed6abc26a9446294ab6f163899474112c4ea066cea23a4\",\"dweb:/ipfs/QmbdoP51yKs17dLGJ7aKgTbdywNEzpPeBRtwXfkNbwBD9B\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 218,
								"contract": "contracts/TurtleToken.sol:TurtleToken",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 224,
								"contract": "contracts/TurtleToken.sol:TurtleToken",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 226,
								"contract": "contracts/TurtleToken.sol:TurtleToken",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 228,
								"contract": "contracts/TurtleToken.sol:TurtleToken",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 230,
								"contract": "contracts/TurtleToken.sol:TurtleToken",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							},
							{
								"astId": 2158,
								"contract": "contracts/TurtleToken.sol:TurtleToken",
								"label": "_nameFallback",
								"offset": 0,
								"slot": "5",
								"type": "t_string_storage"
							},
							{
								"astId": 2160,
								"contract": "contracts/TurtleToken.sol:TurtleToken",
								"label": "_versionFallback",
								"offset": 0,
								"slot": "6",
								"type": "t_string_storage"
							},
							{
								"astId": 890,
								"contract": "contracts/TurtleToken.sol:TurtleToken",
								"label": "_nonces",
								"offset": 0,
								"slot": "7",
								"type": "t_mapping(t_address,t_struct(Counter)1136_storage)"
							},
							{
								"astId": 898,
								"contract": "contracts/TurtleToken.sol:TurtleToken",
								"label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
								"offset": 0,
								"slot": "8",
								"type": "t_bytes32"
							},
							{
								"astId": 7,
								"contract": "contracts/TurtleToken.sol:TurtleToken",
								"label": "_owner",
								"offset": 0,
								"slot": "9",
								"type": "t_address"
							},
							{
								"astId": 148,
								"contract": "contracts/TurtleToken.sol:TurtleToken",
								"label": "_status",
								"offset": 0,
								"slot": "10",
								"type": "t_uint256"
							},
							{
								"astId": 3316,
								"contract": "contracts/TurtleToken.sol:TurtleToken",
								"label": "exchangeRate",
								"offset": 0,
								"slot": "11",
								"type": "t_uint256"
							},
							{
								"astId": 3320,
								"contract": "contracts/TurtleToken.sol:TurtleToken",
								"label": "_whitelistedAddresses",
								"offset": 0,
								"slot": "12",
								"type": "t_mapping(t_address,t_bool)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_bytes32": {
								"encoding": "inplace",
								"label": "bytes32",
								"numberOfBytes": "32"
							},
							"t_mapping(t_address,t_bool)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_struct(Counter)1136_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct Counters.Counter)",
								"numberOfBytes": "32",
								"value": "t_struct(Counter)1136_storage"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_struct(Counter)1136_storage": {
								"encoding": "inplace",
								"label": "struct Counters.Counter",
								"members": [
									{
										"astId": 1135,
										"contract": "contracts/TurtleToken.sol:TurtleToken",
										"label": "_value",
										"offset": 0,
										"slot": "0",
										"type": "t_uint256"
									}
								],
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							1130
						],
						"Ownable": [
							112
						]
					},
					"id": 113,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "102:23:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 113,
							"sourceUnit": 1131,
							"src": "127:30:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 4,
										"name": "Context",
										"nameLocations": [
											"683:7:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1130,
										"src": "683:7:0"
									},
									"id": 5,
									"nodeType": "InheritanceSpecifier",
									"src": "683:7:0"
								}
							],
							"canonicalName": "Ownable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 3,
								"nodeType": "StructuredDocumentation",
								"src": "159:494:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 112,
							"linearizedBaseContracts": [
								112,
								1130
							],
							"name": "Ownable",
							"nameLocation": "672:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 7,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "713:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 112,
									"src": "697:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 6,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "697:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"eventSelector": "8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
									"id": 13,
									"name": "OwnershipTransferred",
									"nameLocation": "732:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 9,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "769:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "753:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 8,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "753:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 11,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "800:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "784:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 10,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "784:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "752:57:0"
									},
									"src": "726:84:0"
								},
								{
									"body": {
										"id": 22,
										"nodeType": "Block",
										"src": "926:49:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 18,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1112,
																"src": "955:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 19,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "955:12:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 17,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "936:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 20,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "936:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 21,
												"nodeType": "ExpressionStatement",
												"src": "936:32:0"
											}
										]
									},
									"documentation": {
										"id": 14,
										"nodeType": "StructuredDocumentation",
										"src": "816:91:0",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 23,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "923:2:0"
									},
									"returnParameters": {
										"id": 16,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "926:0:0"
									},
									"scope": 112,
									"src": "912:63:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 30,
										"nodeType": "Block",
										"src": "1084:41:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 26,
														"name": "_checkOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 54,
														"src": "1094:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 27,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1094:13:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 28,
												"nodeType": "ExpressionStatement",
												"src": "1094:13:0"
											},
											{
												"id": 29,
												"nodeType": "PlaceholderStatement",
												"src": "1117:1:0"
											}
										]
									},
									"documentation": {
										"id": 24,
										"nodeType": "StructuredDocumentation",
										"src": "981:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 31,
									"name": "onlyOwner",
									"nameLocation": "1072:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1081:2:0"
									},
									"src": "1063:62:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 39,
										"nodeType": "Block",
										"src": "1256:30:0",
										"statements": [
											{
												"expression": {
													"id": 37,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "1273:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 36,
												"id": 38,
												"nodeType": "Return",
												"src": "1266:13:0"
											}
										]
									},
									"documentation": {
										"id": 32,
										"nodeType": "StructuredDocumentation",
										"src": "1131:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 40,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1210:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1215:2:0"
									},
									"returnParameters": {
										"id": 36,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 35,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 40,
												"src": "1247:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 34,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1247:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1246:9:0"
									},
									"scope": 112,
									"src": "1201:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 53,
										"nodeType": "Block",
										"src": "1404:85:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 49,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 45,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 40,
																	"src": "1422:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 46,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1422:7:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 47,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1112,
																	"src": "1433:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 48,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1433:12:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1422:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 50,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1447:34:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 44,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1414:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 51,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1414:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 52,
												"nodeType": "ExpressionStatement",
												"src": "1414:68:0"
											}
										]
									},
									"documentation": {
										"id": 41,
										"nodeType": "StructuredDocumentation",
										"src": "1292:62:0",
										"text": " @dev Throws if the sender is not the owner."
									},
									"id": 54,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOwner",
									"nameLocation": "1368:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 42,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1379:2:0"
									},
									"returnParameters": {
										"id": 43,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1404:0:0"
									},
									"scope": 112,
									"src": "1359:130:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 67,
										"nodeType": "Block",
										"src": "1878:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 63,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1915:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 62,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1907:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 61,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1907:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 64,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1907:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 60,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "1888:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 65,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1888:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 66,
												"nodeType": "ExpressionStatement",
												"src": "1888:30:0"
											}
										]
									},
									"documentation": {
										"id": 55,
										"nodeType": "StructuredDocumentation",
										"src": "1495:324:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 68,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 58,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 57,
												"name": "onlyOwner",
												"nameLocations": [
													"1868:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "1868:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1868:9:0"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "1833:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 56,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1850:2:0"
									},
									"returnParameters": {
										"id": 59,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1878:0:0"
									},
									"scope": 112,
									"src": "1824:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 90,
										"nodeType": "Block",
										"src": "2144:128:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 82,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 77,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 71,
																"src": "2162:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 80,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2182:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 79,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2174:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 78,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2174:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 81,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2174:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2162:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 83,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2186:40:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 76,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2154:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 84,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2154:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 85,
												"nodeType": "ExpressionStatement",
												"src": "2154:73:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 87,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 71,
															"src": "2256:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 86,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "2237:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 88,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2237:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 89,
												"nodeType": "ExpressionStatement",
												"src": "2237:28:0"
											}
										]
									},
									"documentation": {
										"id": 69,
										"nodeType": "StructuredDocumentation",
										"src": "1931:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 91,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 74,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 73,
												"name": "onlyOwner",
												"nameLocations": [
													"2134:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "2134:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2134:9:0"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "2083:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 72,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 71,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2109:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 91,
												"src": "2101:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 70,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2101:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2100:18:0"
									},
									"returnParameters": {
										"id": 75,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2144:0:0"
									},
									"scope": 112,
									"src": "2074:198:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 110,
										"nodeType": "Block",
										"src": "2489:124:0",
										"statements": [
											{
												"assignments": [
													98
												],
												"declarations": [
													{
														"constant": false,
														"id": 98,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2507:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 110,
														"src": "2499:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 97,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2499:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 100,
												"initialValue": {
													"id": 99,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "2518:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2499:25:0"
											},
											{
												"expression": {
													"id": 103,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 101,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 7,
														"src": "2534:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 102,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 94,
														"src": "2543:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2534:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 104,
												"nodeType": "ExpressionStatement",
												"src": "2534:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 106,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 98,
															"src": "2587:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 107,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 94,
															"src": "2597:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 105,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 13,
														"src": "2566:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 108,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2566:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 109,
												"nodeType": "EmitStatement",
												"src": "2561:45:0"
											}
										]
									},
									"documentation": {
										"id": 92,
										"nodeType": "StructuredDocumentation",
										"src": "2278:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 111,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2435:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 95,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 94,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2462:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 111,
												"src": "2454:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 93,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2454:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2453:18:0"
									},
									"returnParameters": {
										"id": 96,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2489:0:0"
									},
									"scope": 112,
									"src": "2426:187:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 113,
							"src": "654:1961:0",
							"usedErrors": []
						}
					],
					"src": "102:2514:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/interfaces/IERC5267.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/interfaces/IERC5267.sol",
					"exportedSymbols": {
						"IERC5267": [
							137
						]
					},
					"id": 138,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 114,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "107:23:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC5267",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 137,
							"linearizedBaseContracts": [
								137
							],
							"name": "IERC5267",
							"nameLocation": "142:8:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 115,
										"nodeType": "StructuredDocumentation",
										"src": "157:84:1",
										"text": " @dev MAY be emitted to signal that the domain could have changed."
									},
									"eventSelector": "0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31",
									"id": 117,
									"name": "EIP712DomainChanged",
									"nameLocation": "252:19:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 116,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "271:2:1"
									},
									"src": "246:28:1"
								},
								{
									"documentation": {
										"id": 118,
										"nodeType": "StructuredDocumentation",
										"src": "280:140:1",
										"text": " @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n signature."
									},
									"functionSelector": "84b0196e",
									"id": 136,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "eip712Domain",
									"nameLocation": "434:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 119,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "446:2:1"
									},
									"returnParameters": {
										"id": 135,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 121,
												"mutability": "mutable",
												"name": "fields",
												"nameLocation": "516:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 136,
												"src": "509:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes1",
													"typeString": "bytes1"
												},
												"typeName": {
													"id": 120,
													"name": "bytes1",
													"nodeType": "ElementaryTypeName",
													"src": "509:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 123,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "550:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 136,
												"src": "536:18:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 122,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "536:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 125,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "582:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 136,
												"src": "568:21:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 124,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "568:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 127,
												"mutability": "mutable",
												"name": "chainId",
												"nameLocation": "611:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 136,
												"src": "603:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 126,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "603:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 129,
												"mutability": "mutable",
												"name": "verifyingContract",
												"nameLocation": "640:17:1",
												"nodeType": "VariableDeclaration",
												"scope": 136,
												"src": "632:25:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 128,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "632:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 131,
												"mutability": "mutable",
												"name": "salt",
												"nameLocation": "679:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 136,
												"src": "671:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 130,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "671:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 134,
												"mutability": "mutable",
												"name": "extensions",
												"nameLocation": "714:10:1",
												"nodeType": "VariableDeclaration",
												"scope": 136,
												"src": "697:27:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 132,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "697:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 133,
													"nodeType": "ArrayTypeName",
													"src": "697:9:1",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "495:239:1"
									},
									"scope": 137,
									"src": "425:310:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 138,
							"src": "132:605:1",
							"usedErrors": []
						}
					],
					"src": "107:631:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
					"exportedSymbols": {
						"ReentrancyGuard": [
							202
						]
					},
					"id": 203,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 139,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "112:23:2"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "ReentrancyGuard",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 140,
								"nodeType": "StructuredDocumentation",
								"src": "137:750:2",
								"text": " @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."
							},
							"fullyImplemented": true,
							"id": 202,
							"linearizedBaseContracts": [
								202
							],
							"name": "ReentrancyGuard",
							"nameLocation": "906:15:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 143,
									"mutability": "constant",
									"name": "_NOT_ENTERED",
									"nameLocation": "1701:12:2",
									"nodeType": "VariableDeclaration",
									"scope": 202,
									"src": "1676:41:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 141,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1676:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "31",
										"id": 142,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1716:1:2",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"value": "1"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 146,
									"mutability": "constant",
									"name": "_ENTERED",
									"nameLocation": "1748:8:2",
									"nodeType": "VariableDeclaration",
									"scope": 202,
									"src": "1723:37:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 144,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1723:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "32",
										"id": 145,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1759:1:2",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										},
										"value": "2"
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 148,
									"mutability": "mutable",
									"name": "_status",
									"nameLocation": "1783:7:2",
									"nodeType": "VariableDeclaration",
									"scope": 202,
									"src": "1767:23:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 147,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1767:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 155,
										"nodeType": "Block",
										"src": "1811:39:2",
										"statements": [
											{
												"expression": {
													"id": 153,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 151,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 148,
														"src": "1821:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 152,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 143,
														"src": "1831:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1821:22:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 154,
												"nodeType": "ExpressionStatement",
												"src": "1821:22:2"
											}
										]
									},
									"id": 156,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 149,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1808:2:2"
									},
									"returnParameters": {
										"id": 150,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1811:0:2"
									},
									"scope": 202,
									"src": "1797:53:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 166,
										"nodeType": "Block",
										"src": "2251:79:2",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 159,
														"name": "_nonReentrantBefore",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 182,
														"src": "2261:19:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 160,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2261:21:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 161,
												"nodeType": "ExpressionStatement",
												"src": "2261:21:2"
											},
											{
												"id": 162,
												"nodeType": "PlaceholderStatement",
												"src": "2292:1:2"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 163,
														"name": "_nonReentrantAfter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 190,
														"src": "2303:18:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 164,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2303:20:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 165,
												"nodeType": "ExpressionStatement",
												"src": "2303:20:2"
											}
										]
									},
									"documentation": {
										"id": 157,
										"nodeType": "StructuredDocumentation",
										"src": "1856:366:2",
										"text": " @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."
									},
									"id": 167,
									"name": "nonReentrant",
									"nameLocation": "2236:12:2",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 158,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2248:2:2"
									},
									"src": "2227:103:2",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 181,
										"nodeType": "Block",
										"src": "2375:248:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 173,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 171,
																"name": "_status",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 148,
																"src": "2468:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 172,
																"name": "_ENTERED",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 146,
																"src": "2479:8:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2468:19:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
															"id": 174,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2489:33:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															},
															"value": "ReentrancyGuard: reentrant call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															}
														],
														"id": 170,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2460:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 175,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2460:63:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 176,
												"nodeType": "ExpressionStatement",
												"src": "2460:63:2"
											},
											{
												"expression": {
													"id": 179,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 177,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 148,
														"src": "2598:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 178,
														"name": "_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 146,
														"src": "2608:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2598:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 180,
												"nodeType": "ExpressionStatement",
												"src": "2598:18:2"
											}
										]
									},
									"id": 182,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_nonReentrantBefore",
									"nameLocation": "2345:19:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 168,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2364:2:2"
									},
									"returnParameters": {
										"id": 169,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2375:0:2"
									},
									"scope": 202,
									"src": "2336:287:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 189,
										"nodeType": "Block",
										"src": "2667:171:2",
										"statements": [
											{
												"expression": {
													"id": 187,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 185,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 148,
														"src": "2809:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 186,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 143,
														"src": "2819:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2809:22:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 188,
												"nodeType": "ExpressionStatement",
												"src": "2809:22:2"
											}
										]
									},
									"id": 190,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_nonReentrantAfter",
									"nameLocation": "2638:18:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 183,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2656:2:2"
									},
									"returnParameters": {
										"id": 184,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2667:0:2"
									},
									"scope": 202,
									"src": "2629:209:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 200,
										"nodeType": "Block",
										"src": "3081:43:2",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 198,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 196,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 148,
														"src": "3098:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 197,
														"name": "_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 146,
														"src": "3109:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3098:19:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 195,
												"id": 199,
												"nodeType": "Return",
												"src": "3091:26:2"
											}
										]
									},
									"documentation": {
										"id": 191,
										"nodeType": "StructuredDocumentation",
										"src": "2844:168:2",
										"text": " @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n `nonReentrant` function in the call stack."
									},
									"id": 201,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_reentrancyGuardEntered",
									"nameLocation": "3026:23:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 192,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3049:2:2"
									},
									"returnParameters": {
										"id": 195,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 194,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 201,
												"src": "3075:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 193,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3075:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3074:6:2"
									},
									"scope": 202,
									"src": "3017:107:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 203,
							"src": "888:2238:2",
							"usedErrors": []
						}
					],
					"src": "112:3015:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
					"exportedSymbols": {
						"Context": [
							1130
						],
						"ERC20": [
							789
						],
						"IERC20": [
							867
						],
						"IERC20Metadata": [
							1064
						]
					},
					"id": 790,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 204,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "105:23:3"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "./IERC20.sol",
							"id": 205,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 790,
							"sourceUnit": 868,
							"src": "130:22:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
							"file": "./extensions/IERC20Metadata.sol",
							"id": 206,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 790,
							"sourceUnit": 1065,
							"src": "153:41:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../../utils/Context.sol",
							"id": 207,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 790,
							"sourceUnit": 1131,
							"src": "195:33:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 209,
										"name": "Context",
										"nameLocations": [
											"1550:7:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1130,
										"src": "1550:7:3"
									},
									"id": 210,
									"nodeType": "InheritanceSpecifier",
									"src": "1550:7:3"
								},
								{
									"baseName": {
										"id": 211,
										"name": "IERC20",
										"nameLocations": [
											"1559:6:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 867,
										"src": "1559:6:3"
									},
									"id": 212,
									"nodeType": "InheritanceSpecifier",
									"src": "1559:6:3"
								},
								{
									"baseName": {
										"id": 213,
										"name": "IERC20Metadata",
										"nameLocations": [
											"1567:14:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1064,
										"src": "1567:14:3"
									},
									"id": 214,
									"nodeType": "InheritanceSpecifier",
									"src": "1567:14:3"
								}
							],
							"canonicalName": "ERC20",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 208,
								"nodeType": "StructuredDocumentation",
								"src": "230:1301:3",
								"text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n For a generic mechanism see {ERC20PresetMinterPauser}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n The default value of {decimals} is 18. To change this, you should override\n this function so it returns a different value.\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification.\n Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n functions have been added to mitigate the well-known issues around setting\n allowances. See {IERC20-approve}."
							},
							"fullyImplemented": true,
							"id": 789,
							"linearizedBaseContracts": [
								789,
								1064,
								867,
								1130
							],
							"name": "ERC20",
							"nameLocation": "1541:5:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 218,
									"mutability": "mutable",
									"name": "_balances",
									"nameLocation": "1624:9:3",
									"nodeType": "VariableDeclaration",
									"scope": 789,
									"src": "1588:45:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 217,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 215,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1596:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1588:27:3",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 216,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1607:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 224,
									"mutability": "mutable",
									"name": "_allowances",
									"nameLocation": "1696:11:3",
									"nodeType": "VariableDeclaration",
									"scope": 789,
									"src": "1640:67:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(address => uint256))"
									},
									"typeName": {
										"id": 223,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 219,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1648:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1640:47:3",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(address => uint256))"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 222,
											"keyName": "",
											"keyNameLocation": "-1:-1:-1",
											"keyType": {
												"id": 220,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1667:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "1659:27:3",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"valueName": "",
											"valueNameLocation": "-1:-1:-1",
											"valueType": {
												"id": 221,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1678:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 226,
									"mutability": "mutable",
									"name": "_totalSupply",
									"nameLocation": "1730:12:3",
									"nodeType": "VariableDeclaration",
									"scope": 789,
									"src": "1714:28:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 225,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1714:7:3",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 228,
									"mutability": "mutable",
									"name": "_name",
									"nameLocation": "1764:5:3",
									"nodeType": "VariableDeclaration",
									"scope": 789,
									"src": "1749:20:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 227,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1749:6:3",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 230,
									"mutability": "mutable",
									"name": "_symbol",
									"nameLocation": "1790:7:3",
									"nodeType": "VariableDeclaration",
									"scope": 789,
									"src": "1775:22:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 229,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1775:6:3",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 246,
										"nodeType": "Block",
										"src": "2036:57:3",
										"statements": [
											{
												"expression": {
													"id": 240,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 238,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 228,
														"src": "2046:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 239,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 233,
														"src": "2054:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2046:13:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 241,
												"nodeType": "ExpressionStatement",
												"src": "2046:13:3"
											},
											{
												"expression": {
													"id": 244,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 242,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 230,
														"src": "2069:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 243,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 235,
														"src": "2079:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2069:17:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 245,
												"nodeType": "ExpressionStatement",
												"src": "2069:17:3"
											}
										]
									},
									"documentation": {
										"id": 231,
										"nodeType": "StructuredDocumentation",
										"src": "1804:171:3",
										"text": " @dev Sets the values for {name} and {symbol}.\n All two of these values are immutable: they can only be set once during\n construction."
									},
									"id": 247,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 236,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 233,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "2006:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 247,
												"src": "1992:19:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 232,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1992:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 235,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "2027:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 247,
												"src": "2013:21:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 234,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2013:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1991:44:3"
									},
									"returnParameters": {
										"id": 237,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2036:0:3"
									},
									"scope": 789,
									"src": "1980:113:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1051
									],
									"body": {
										"id": 256,
										"nodeType": "Block",
										"src": "2227:29:3",
										"statements": [
											{
												"expression": {
													"id": 254,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 228,
													"src": "2244:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 253,
												"id": 255,
												"nodeType": "Return",
												"src": "2237:12:3"
											}
										]
									},
									"documentation": {
										"id": 248,
										"nodeType": "StructuredDocumentation",
										"src": "2099:54:3",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 257,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "2167:4:3",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 250,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2194:8:3"
									},
									"parameters": {
										"id": 249,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2171:2:3"
									},
									"returnParameters": {
										"id": 253,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 252,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 257,
												"src": "2212:13:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 251,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2212:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2211:15:3"
									},
									"scope": 789,
									"src": "2158:98:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1057
									],
									"body": {
										"id": 266,
										"nodeType": "Block",
										"src": "2440:31:3",
										"statements": [
											{
												"expression": {
													"id": 264,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 230,
													"src": "2457:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 263,
												"id": 265,
												"nodeType": "Return",
												"src": "2450:14:3"
											}
										]
									},
									"documentation": {
										"id": 258,
										"nodeType": "StructuredDocumentation",
										"src": "2262:102:3",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 267,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "2378:6:3",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 260,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2407:8:3"
									},
									"parameters": {
										"id": 259,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2384:2:3"
									},
									"returnParameters": {
										"id": 263,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 262,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 267,
												"src": "2425:13:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 261,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2425:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2424:15:3"
									},
									"scope": 789,
									"src": "2369:102:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1063
									],
									"body": {
										"id": 276,
										"nodeType": "Block",
										"src": "3169:26:3",
										"statements": [
											{
												"expression": {
													"hexValue": "3138",
													"id": 274,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3186:2:3",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_18_by_1",
														"typeString": "int_const 18"
													},
													"value": "18"
												},
												"functionReturnParameters": 273,
												"id": 275,
												"nodeType": "Return",
												"src": "3179:9:3"
											}
										]
									},
									"documentation": {
										"id": 268,
										"nodeType": "StructuredDocumentation",
										"src": "2477:622:3",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the default value returned by this function, unless\n it's overridden.\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 277,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "3113:8:3",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 270,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3144:8:3"
									},
									"parameters": {
										"id": 269,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3121:2:3"
									},
									"returnParameters": {
										"id": 273,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 272,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 277,
												"src": "3162:5:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 271,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3162:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3161:7:3"
									},
									"scope": 789,
									"src": "3104:91:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										816
									],
									"body": {
										"id": 286,
										"nodeType": "Block",
										"src": "3325:36:3",
										"statements": [
											{
												"expression": {
													"id": 284,
													"name": "_totalSupply",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 226,
													"src": "3342:12:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 283,
												"id": 285,
												"nodeType": "Return",
												"src": "3335:19:3"
											}
										]
									},
									"documentation": {
										"id": 278,
										"nodeType": "StructuredDocumentation",
										"src": "3201:49:3",
										"text": " @dev See {IERC20-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 287,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "3264:11:3",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 280,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3298:8:3"
									},
									"parameters": {
										"id": 279,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3275:2:3"
									},
									"returnParameters": {
										"id": 283,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 282,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 287,
												"src": "3316:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 281,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3316:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3315:9:3"
									},
									"scope": 789,
									"src": "3255:106:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										824
									],
									"body": {
										"id": 300,
										"nodeType": "Block",
										"src": "3502:42:3",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 296,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 218,
														"src": "3519:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 298,
													"indexExpression": {
														"id": 297,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 290,
														"src": "3529:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3519:18:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 295,
												"id": 299,
												"nodeType": "Return",
												"src": "3512:25:3"
											}
										]
									},
									"documentation": {
										"id": 288,
										"nodeType": "StructuredDocumentation",
										"src": "3367:47:3",
										"text": " @dev See {IERC20-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 301,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "3428:9:3",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 292,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3475:8:3"
									},
									"parameters": {
										"id": 291,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 290,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3446:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 301,
												"src": "3438:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 289,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3438:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3437:17:3"
									},
									"returnParameters": {
										"id": 295,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 294,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 301,
												"src": "3493:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 293,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3493:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3492:9:3"
									},
									"scope": 789,
									"src": "3419:125:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										834
									],
									"body": {
										"id": 325,
										"nodeType": "Block",
										"src": "3825:104:3",
										"statements": [
											{
												"assignments": [
													313
												],
												"declarations": [
													{
														"constant": false,
														"id": 313,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "3843:5:3",
														"nodeType": "VariableDeclaration",
														"scope": 325,
														"src": "3835:13:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 312,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3835:7:3",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 316,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 314,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1112,
														"src": "3851:10:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 315,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3851:12:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3835:28:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 318,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 313,
															"src": "3883:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 319,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 304,
															"src": "3890:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 320,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 306,
															"src": "3894:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 317,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 549,
														"src": "3873:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 321,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3873:28:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 322,
												"nodeType": "ExpressionStatement",
												"src": "3873:28:3"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 323,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3918:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 311,
												"id": 324,
												"nodeType": "Return",
												"src": "3911:11:3"
											}
										]
									},
									"documentation": {
										"id": 302,
										"nodeType": "StructuredDocumentation",
										"src": "3550:185:3",
										"text": " @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `amount`."
									},
									"functionSelector": "a9059cbb",
									"id": 326,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "3749:8:3",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 308,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3801:8:3"
									},
									"parameters": {
										"id": 307,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 304,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3766:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 326,
												"src": "3758:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 303,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3758:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 306,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "3778:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 326,
												"src": "3770:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 305,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3770:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3757:28:3"
									},
									"returnParameters": {
										"id": 311,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 310,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 326,
												"src": "3819:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 309,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3819:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3818:6:3"
									},
									"scope": 789,
									"src": "3740:189:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										844
									],
									"body": {
										"id": 343,
										"nodeType": "Block",
										"src": "4085:51:3",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 337,
															"name": "_allowances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 224,
															"src": "4102:11:3",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 339,
														"indexExpression": {
															"id": 338,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 329,
															"src": "4114:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4102:18:3",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 341,
													"indexExpression": {
														"id": 340,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 331,
														"src": "4121:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4102:27:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 336,
												"id": 342,
												"nodeType": "Return",
												"src": "4095:34:3"
											}
										]
									},
									"documentation": {
										"id": 327,
										"nodeType": "StructuredDocumentation",
										"src": "3935:47:3",
										"text": " @dev See {IERC20-allowance}."
									},
									"functionSelector": "dd62ed3e",
									"id": 344,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "3996:9:3",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 333,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4058:8:3"
									},
									"parameters": {
										"id": 332,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 329,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4014:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 344,
												"src": "4006:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 328,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4006:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 331,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4029:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 344,
												"src": "4021:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 330,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4021:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4005:32:3"
									},
									"returnParameters": {
										"id": 336,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 335,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 344,
												"src": "4076:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 334,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4076:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4075:9:3"
									},
									"scope": 789,
									"src": "3987:149:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										854
									],
									"body": {
										"id": 368,
										"nodeType": "Block",
										"src": "4533:108:3",
										"statements": [
											{
												"assignments": [
													356
												],
												"declarations": [
													{
														"constant": false,
														"id": 356,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "4551:5:3",
														"nodeType": "VariableDeclaration",
														"scope": 368,
														"src": "4543:13:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 355,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4543:7:3",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 359,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 357,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1112,
														"src": "4559:10:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 358,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4559:12:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4543:28:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 361,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 356,
															"src": "4590:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 362,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 347,
															"src": "4597:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 363,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 349,
															"src": "4606:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 360,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 723,
														"src": "4581:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 364,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4581:32:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 365,
												"nodeType": "ExpressionStatement",
												"src": "4581:32:3"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 366,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4630:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 354,
												"id": 367,
												"nodeType": "Return",
												"src": "4623:11:3"
											}
										]
									},
									"documentation": {
										"id": 345,
										"nodeType": "StructuredDocumentation",
										"src": "4142:297:3",
										"text": " @dev See {IERC20-approve}.\n NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "095ea7b3",
									"id": 369,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4453:7:3",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 351,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4509:8:3"
									},
									"parameters": {
										"id": 350,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 347,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4469:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 369,
												"src": "4461:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 346,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4461:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 349,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "4486:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 369,
												"src": "4478:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 348,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4478:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4460:33:3"
									},
									"returnParameters": {
										"id": 354,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 353,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 369,
												"src": "4527:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 352,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4527:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4526:6:3"
									},
									"scope": 789,
									"src": "4444:197:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										866
									],
									"body": {
										"id": 401,
										"nodeType": "Block",
										"src": "5306:153:3",
										"statements": [
											{
												"assignments": [
													383
												],
												"declarations": [
													{
														"constant": false,
														"id": 383,
														"mutability": "mutable",
														"name": "spender",
														"nameLocation": "5324:7:3",
														"nodeType": "VariableDeclaration",
														"scope": 401,
														"src": "5316:15:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 382,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5316:7:3",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 386,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 384,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1112,
														"src": "5334:10:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 385,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5334:12:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5316:30:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 388,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 372,
															"src": "5372:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 389,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 383,
															"src": "5378:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 390,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 376,
															"src": "5387:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 387,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 766,
														"src": "5356:15:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 391,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5356:38:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 392,
												"nodeType": "ExpressionStatement",
												"src": "5356:38:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 394,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 372,
															"src": "5414:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 395,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 374,
															"src": "5420:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 396,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 376,
															"src": "5424:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 393,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 549,
														"src": "5404:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 397,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5404:27:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 398,
												"nodeType": "ExpressionStatement",
												"src": "5404:27:3"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 399,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5448:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 381,
												"id": 400,
												"nodeType": "Return",
												"src": "5441:11:3"
											}
										]
									},
									"documentation": {
										"id": 370,
										"nodeType": "StructuredDocumentation",
										"src": "4647:551:3",
										"text": " @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`.\n - the caller must have allowance for ``from``'s tokens of at least\n `amount`."
									},
									"functionSelector": "23b872dd",
									"id": 402,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "5212:12:3",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 378,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "5282:8:3"
									},
									"parameters": {
										"id": 377,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 372,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5233:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 402,
												"src": "5225:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 371,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5225:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 374,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5247:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 402,
												"src": "5239:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 373,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5239:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 376,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "5259:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 402,
												"src": "5251:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 375,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5251:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5224:42:3"
									},
									"returnParameters": {
										"id": 381,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 380,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 402,
												"src": "5300:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 379,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5300:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5299:6:3"
									},
									"scope": 789,
									"src": "5203:256:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 430,
										"nodeType": "Block",
										"src": "5948:140:3",
										"statements": [
											{
												"assignments": [
													413
												],
												"declarations": [
													{
														"constant": false,
														"id": 413,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "5966:5:3",
														"nodeType": "VariableDeclaration",
														"scope": 430,
														"src": "5958:13:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 412,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5958:7:3",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 416,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 414,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1112,
														"src": "5974:10:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 415,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5974:12:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5958:28:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 418,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 413,
															"src": "6005:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 419,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 405,
															"src": "6012:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 425,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 421,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 413,
																		"src": "6031:5:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 422,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 405,
																		"src": "6038:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 420,
																	"name": "allowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 344,
																	"src": "6021:9:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
																		"typeString": "function (address,address) view returns (uint256)"
																	}
																},
																"id": 423,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6021:25:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 424,
																"name": "addedValue",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 407,
																"src": "6049:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6021:38:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 417,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 723,
														"src": "5996:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 426,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5996:64:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 427,
												"nodeType": "ExpressionStatement",
												"src": "5996:64:3"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 428,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "6077:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 411,
												"id": 429,
												"nodeType": "Return",
												"src": "6070:11:3"
											}
										]
									},
									"documentation": {
										"id": 403,
										"nodeType": "StructuredDocumentation",
										"src": "5465:384:3",
										"text": " @dev Atomically increases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "39509351",
									"id": 431,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "increaseAllowance",
									"nameLocation": "5863:17:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 408,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 405,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "5889:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 431,
												"src": "5881:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 404,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5881:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 407,
												"mutability": "mutable",
												"name": "addedValue",
												"nameLocation": "5906:10:3",
												"nodeType": "VariableDeclaration",
												"scope": 431,
												"src": "5898:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 406,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5898:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5880:37:3"
									},
									"returnParameters": {
										"id": 411,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 410,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 431,
												"src": "5942:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 409,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5942:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5941:6:3"
									},
									"scope": 789,
									"src": "5854:234:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 471,
										"nodeType": "Block",
										"src": "6674:328:3",
										"statements": [
											{
												"assignments": [
													442
												],
												"declarations": [
													{
														"constant": false,
														"id": 442,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "6692:5:3",
														"nodeType": "VariableDeclaration",
														"scope": 471,
														"src": "6684:13:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 441,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6684:7:3",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 445,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 443,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1112,
														"src": "6700:10:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 444,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6700:12:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6684:28:3"
											},
											{
												"assignments": [
													447
												],
												"declarations": [
													{
														"constant": false,
														"id": 447,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "6730:16:3",
														"nodeType": "VariableDeclaration",
														"scope": 471,
														"src": "6722:24:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 446,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "6722:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 452,
												"initialValue": {
													"arguments": [
														{
															"id": 449,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 442,
															"src": "6759:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 450,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 434,
															"src": "6766:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 448,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 344,
														"src": "6749:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 451,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6749:25:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6722:52:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 456,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 454,
																"name": "currentAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 447,
																"src": "6792:16:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 455,
																"name": "subtractedValue",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 436,
																"src": "6812:15:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6792:35:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
															"id": 457,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6829:39:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																"typeString": "literal_string \"ERC20: decreased allowance below zero\""
															},
															"value": "ERC20: decreased allowance below zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																"typeString": "literal_string \"ERC20: decreased allowance below zero\""
															}
														],
														"id": 453,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6784:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 458,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6784:85:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 459,
												"nodeType": "ExpressionStatement",
												"src": "6784:85:3"
											},
											{
												"id": 468,
												"nodeType": "UncheckedBlock",
												"src": "6879:95:3",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"id": 461,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 442,
																	"src": "6912:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 462,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 434,
																	"src": "6919:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 465,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 463,
																		"name": "currentAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 447,
																		"src": "6928:16:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 464,
																		"name": "subtractedValue",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 436,
																		"src": "6947:15:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "6928:34:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 460,
																"name": "_approve",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 723,
																"src": "6903:8:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																	"typeString": "function (address,address,uint256)"
																}
															},
															"id": 466,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6903:60:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 467,
														"nodeType": "ExpressionStatement",
														"src": "6903:60:3"
													}
												]
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 469,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "6991:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 440,
												"id": 470,
												"nodeType": "Return",
												"src": "6984:11:3"
											}
										]
									},
									"documentation": {
										"id": 432,
										"nodeType": "StructuredDocumentation",
										"src": "6094:476:3",
										"text": " @dev Atomically decreases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address.\n - `spender` must have allowance for the caller of at least\n `subtractedValue`."
									},
									"functionSelector": "a457c2d7",
									"id": 472,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decreaseAllowance",
									"nameLocation": "6584:17:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 437,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 434,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "6610:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 472,
												"src": "6602:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 433,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6602:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 436,
												"mutability": "mutable",
												"name": "subtractedValue",
												"nameLocation": "6627:15:3",
												"nodeType": "VariableDeclaration",
												"scope": 472,
												"src": "6619:23:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 435,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6619:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6601:42:3"
									},
									"returnParameters": {
										"id": 440,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 439,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 472,
												"src": "6668:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 438,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6668:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6667:6:3"
									},
									"scope": 789,
									"src": "6575:427:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 548,
										"nodeType": "Block",
										"src": "7534:710:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 488,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 483,
																"name": "from",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 475,
																"src": "7552:4:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 486,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7568:1:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 485,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7560:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 484,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7560:7:3",
																		"typeDescriptions": {}
																	}
																},
																"id": 487,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7560:10:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "7552:18:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373",
															"id": 489,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7572:39:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															},
															"value": "ERC20: transfer from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															}
														],
														"id": 482,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7544:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 490,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7544:68:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 491,
												"nodeType": "ExpressionStatement",
												"src": "7544:68:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 498,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 493,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 477,
																"src": "7630:2:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 496,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7644:1:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 495,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7636:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 494,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7636:7:3",
																		"typeDescriptions": {}
																	}
																},
																"id": 497,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7636:10:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "7630:16:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472657373",
															"id": 499,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7648:37:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															},
															"value": "ERC20: transfer to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															}
														],
														"id": 492,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7622:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 500,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7622:64:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 501,
												"nodeType": "ExpressionStatement",
												"src": "7622:64:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 503,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 475,
															"src": "7718:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 504,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 477,
															"src": "7724:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 505,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 479,
															"src": "7728:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 502,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 777,
														"src": "7697:20:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 506,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7697:38:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 507,
												"nodeType": "ExpressionStatement",
												"src": "7697:38:3"
											},
											{
												"assignments": [
													509
												],
												"declarations": [
													{
														"constant": false,
														"id": 509,
														"mutability": "mutable",
														"name": "fromBalance",
														"nameLocation": "7754:11:3",
														"nodeType": "VariableDeclaration",
														"scope": 548,
														"src": "7746:19:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 508,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7746:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 513,
												"initialValue": {
													"baseExpression": {
														"id": 510,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 218,
														"src": "7768:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 512,
													"indexExpression": {
														"id": 511,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 475,
														"src": "7778:4:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "7768:15:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7746:37:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 517,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 515,
																"name": "fromBalance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 509,
																"src": "7801:11:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 516,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 479,
																"src": "7816:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7801:21:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365",
															"id": 518,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7824:40:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
															},
															"value": "ERC20: transfer amount exceeds balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
															}
														],
														"id": 514,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7793:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 519,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7793:72:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 520,
												"nodeType": "ExpressionStatement",
												"src": "7793:72:3"
											},
											{
												"id": 535,
												"nodeType": "UncheckedBlock",
												"src": "7875:273:3",
												"statements": [
													{
														"expression": {
															"id": 527,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 521,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 218,
																	"src": "7899:9:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 523,
																"indexExpression": {
																	"id": 522,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 475,
																	"src": "7909:4:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "7899:15:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 526,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 524,
																	"name": "fromBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 509,
																	"src": "7917:11:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 525,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 479,
																	"src": "7931:6:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7917:20:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7899:38:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 528,
														"nodeType": "ExpressionStatement",
														"src": "7899:38:3"
													},
													{
														"expression": {
															"id": 533,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 529,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 218,
																	"src": "8114:9:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 531,
																"indexExpression": {
																	"id": 530,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 477,
																	"src": "8124:2:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "8114:13:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"id": 532,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 479,
																"src": "8131:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8114:23:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 534,
														"nodeType": "ExpressionStatement",
														"src": "8114:23:3"
													}
												]
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 537,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 475,
															"src": "8172:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 538,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 477,
															"src": "8178:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 539,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 479,
															"src": "8182:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 536,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 801,
														"src": "8163:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 540,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8163:26:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 541,
												"nodeType": "EmitStatement",
												"src": "8158:31:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 543,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 475,
															"src": "8220:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 544,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 477,
															"src": "8226:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 545,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 479,
															"src": "8230:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 542,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 788,
														"src": "8200:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 546,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8200:37:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 547,
												"nodeType": "ExpressionStatement",
												"src": "8200:37:3"
											}
										]
									},
									"documentation": {
										"id": 473,
										"nodeType": "StructuredDocumentation",
										"src": "7008:443:3",
										"text": " @dev Moves `amount` of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`."
									},
									"id": 549,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "7465:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 480,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 475,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "7483:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 549,
												"src": "7475:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 474,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7475:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 477,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "7497:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 549,
												"src": "7489:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 476,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7489:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 479,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "7509:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 549,
												"src": "7501:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 478,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7501:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7474:42:3"
									},
									"returnParameters": {
										"id": 481,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7534:0:3"
									},
									"scope": 789,
									"src": "7456:788:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 605,
										"nodeType": "Block",
										"src": "8585:470:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 563,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 558,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 552,
																"src": "8603:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 561,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "8622:1:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 560,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "8614:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 559,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "8614:7:3",
																		"typeDescriptions": {}
																	}
																},
																"id": 562,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8614:10:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "8603:21:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206d696e7420746f20746865207a65726f2061646472657373",
															"id": 564,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8626:33:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															},
															"value": "ERC20: mint to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															}
														],
														"id": 557,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8595:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 565,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8595:65:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 566,
												"nodeType": "ExpressionStatement",
												"src": "8595:65:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 570,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8700:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 569,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8692:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 568,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8692:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 571,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8692:10:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 572,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 552,
															"src": "8704:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 573,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 554,
															"src": "8713:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 567,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 777,
														"src": "8671:20:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 574,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8671:49:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 575,
												"nodeType": "ExpressionStatement",
												"src": "8671:49:3"
											},
											{
												"expression": {
													"id": 578,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 576,
														"name": "_totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 226,
														"src": "8731:12:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 577,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 554,
														"src": "8747:6:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8731:22:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 579,
												"nodeType": "ExpressionStatement",
												"src": "8731:22:3"
											},
											{
												"id": 586,
												"nodeType": "UncheckedBlock",
												"src": "8763:175:3",
												"statements": [
													{
														"expression": {
															"id": 584,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 580,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 218,
																	"src": "8899:9:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 582,
																"indexExpression": {
																	"id": 581,
																	"name": "account",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 552,
																	"src": "8909:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "8899:18:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"id": 583,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 554,
																"src": "8921:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8899:28:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 585,
														"nodeType": "ExpressionStatement",
														"src": "8899:28:3"
													}
												]
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 590,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8969:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 589,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8961:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 588,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8961:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 591,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8961:10:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 592,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 552,
															"src": "8973:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 593,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 554,
															"src": "8982:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 587,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 801,
														"src": "8952:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 594,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8952:37:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 595,
												"nodeType": "EmitStatement",
												"src": "8947:42:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 599,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9028:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 598,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9020:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 597,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9020:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 600,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9020:10:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 601,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 552,
															"src": "9032:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 602,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 554,
															"src": "9041:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 596,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 788,
														"src": "9000:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 603,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9000:48:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 604,
												"nodeType": "ExpressionStatement",
												"src": "9000:48:3"
											}
										]
									},
									"documentation": {
										"id": 550,
										"nodeType": "StructuredDocumentation",
										"src": "8250:265:3",
										"text": "@dev Creates `amount` tokens and assigns them to `account`, increasing\n the total supply.\n Emits a {Transfer} event with `from` set to the zero address.\n Requirements:\n - `account` cannot be the zero address."
									},
									"id": 606,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "8529:5:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 555,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 552,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "8543:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 606,
												"src": "8535:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 551,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8535:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 554,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "8560:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 606,
												"src": "8552:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 553,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8552:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8534:33:3"
									},
									"returnParameters": {
										"id": 556,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8585:0:3"
									},
									"scope": 789,
									"src": "8520:535:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 677,
										"nodeType": "Block",
										"src": "9440:594:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 620,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 615,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 609,
																"src": "9458:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 618,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9477:1:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 617,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "9469:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 616,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "9469:7:3",
																		"typeDescriptions": {}
																	}
																},
																"id": 619,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9469:10:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "9458:21:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206275726e2066726f6d20746865207a65726f2061646472657373",
															"id": 621,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9481:35:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															},
															"value": "ERC20: burn from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															}
														],
														"id": 614,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9450:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 622,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9450:67:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 623,
												"nodeType": "ExpressionStatement",
												"src": "9450:67:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 625,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 609,
															"src": "9549:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 628,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9566:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 627,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9558:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 626,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9558:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 629,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9558:10:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 630,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 611,
															"src": "9570:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 624,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 777,
														"src": "9528:20:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 631,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9528:49:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 632,
												"nodeType": "ExpressionStatement",
												"src": "9528:49:3"
											},
											{
												"assignments": [
													634
												],
												"declarations": [
													{
														"constant": false,
														"id": 634,
														"mutability": "mutable",
														"name": "accountBalance",
														"nameLocation": "9596:14:3",
														"nodeType": "VariableDeclaration",
														"scope": 677,
														"src": "9588:22:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 633,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9588:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 638,
												"initialValue": {
													"baseExpression": {
														"id": 635,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 218,
														"src": "9613:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 637,
													"indexExpression": {
														"id": 636,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 609,
														"src": "9623:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "9613:18:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9588:43:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 642,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 640,
																"name": "accountBalance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 634,
																"src": "9649:14:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 641,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 611,
																"src": "9667:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9649:24:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365",
															"id": 643,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9675:36:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
															},
															"value": "ERC20: burn amount exceeds balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
															}
														],
														"id": 639,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9641:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 644,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9641:71:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 645,
												"nodeType": "ExpressionStatement",
												"src": "9641:71:3"
											},
											{
												"id": 658,
												"nodeType": "UncheckedBlock",
												"src": "9722:194:3",
												"statements": [
													{
														"expression": {
															"id": 652,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 646,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 218,
																	"src": "9746:9:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 648,
																"indexExpression": {
																	"id": 647,
																	"name": "account",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 609,
																	"src": "9756:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "9746:18:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 651,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 649,
																	"name": "accountBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 634,
																	"src": "9767:14:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 650,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 611,
																	"src": "9784:6:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "9767:23:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9746:44:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 653,
														"nodeType": "ExpressionStatement",
														"src": "9746:44:3"
													},
													{
														"expression": {
															"id": 656,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 654,
																"name": "_totalSupply",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 226,
																"src": "9883:12:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "-=",
															"rightHandSide": {
																"id": 655,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 611,
																"src": "9899:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9883:22:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 657,
														"nodeType": "ExpressionStatement",
														"src": "9883:22:3"
													}
												]
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 660,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 609,
															"src": "9940:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 663,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9957:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 662,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9949:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 661,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9949:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 664,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9949:10:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 665,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 611,
															"src": "9961:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 659,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 801,
														"src": "9931:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 666,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9931:37:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 667,
												"nodeType": "EmitStatement",
												"src": "9926:42:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 669,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 609,
															"src": "9999:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 672,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10016:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 671,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "10008:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 670,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "10008:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 673,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10008:10:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 674,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 611,
															"src": "10020:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 668,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 788,
														"src": "9979:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 675,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9979:48:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 676,
												"nodeType": "ExpressionStatement",
												"src": "9979:48:3"
											}
										]
									},
									"documentation": {
										"id": 607,
										"nodeType": "StructuredDocumentation",
										"src": "9061:309:3",
										"text": " @dev Destroys `amount` tokens from `account`, reducing the\n total supply.\n Emits a {Transfer} event with `to` set to the zero address.\n Requirements:\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens."
									},
									"id": 678,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "9384:5:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 612,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 609,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "9398:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 678,
												"src": "9390:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 608,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9390:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 611,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "9415:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 678,
												"src": "9407:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 610,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9407:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9389:33:3"
									},
									"returnParameters": {
										"id": 613,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9440:0:3"
									},
									"scope": 789,
									"src": "9375:659:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 722,
										"nodeType": "Block",
										"src": "10540:257:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 694,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 689,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 681,
																"src": "10558:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 692,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10575:1:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 691,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10567:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 690,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "10567:7:3",
																		"typeDescriptions": {}
																	}
																},
																"id": 693,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10567:10:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "10558:19:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373",
															"id": 695,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10579:38:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															},
															"value": "ERC20: approve from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															}
														],
														"id": 688,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10550:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 696,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10550:68:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 697,
												"nodeType": "ExpressionStatement",
												"src": "10550:68:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 704,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 699,
																"name": "spender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 683,
																"src": "10636:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 702,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10655:1:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 701,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10647:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 700,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "10647:7:3",
																		"typeDescriptions": {}
																	}
																},
																"id": 703,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10647:10:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "10636:21:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f766520746f20746865207a65726f2061646472657373",
															"id": 705,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10659:36:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															},
															"value": "ERC20: approve to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															}
														],
														"id": 698,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10628:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 706,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10628:68:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 707,
												"nodeType": "ExpressionStatement",
												"src": "10628:68:3"
											},
											{
												"expression": {
													"id": 714,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 708,
																"name": "_allowances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 224,
																"src": "10707:11:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 711,
															"indexExpression": {
																"id": 709,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 681,
																"src": "10719:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "10707:18:3",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 712,
														"indexExpression": {
															"id": 710,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 683,
															"src": "10726:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "10707:27:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 713,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 685,
														"src": "10737:6:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10707:36:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 715,
												"nodeType": "ExpressionStatement",
												"src": "10707:36:3"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 717,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 681,
															"src": "10767:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 718,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 683,
															"src": "10774:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 719,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 685,
															"src": "10783:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 716,
														"name": "Approval",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 810,
														"src": "10758:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 720,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10758:32:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 721,
												"nodeType": "EmitStatement",
												"src": "10753:37:3"
											}
										]
									},
									"documentation": {
										"id": 679,
										"nodeType": "StructuredDocumentation",
										"src": "10040:412:3",
										"text": " @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address."
									},
									"id": 723,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "10466:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 686,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 681,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10483:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 723,
												"src": "10475:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 680,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10475:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 683,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "10498:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 723,
												"src": "10490:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 682,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10490:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 685,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "10515:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 723,
												"src": "10507:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 684,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10507:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10474:48:3"
									},
									"returnParameters": {
										"id": 687,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10540:0:3"
									},
									"scope": 789,
									"src": "10457:340:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 765,
										"nodeType": "Block",
										"src": "11168:321:3",
										"statements": [
											{
												"assignments": [
													734
												],
												"declarations": [
													{
														"constant": false,
														"id": 734,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "11186:16:3",
														"nodeType": "VariableDeclaration",
														"scope": 765,
														"src": "11178:24:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 733,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "11178:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 739,
												"initialValue": {
													"arguments": [
														{
															"id": 736,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 726,
															"src": "11215:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 737,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 728,
															"src": "11222:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 735,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 344,
														"src": "11205:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 738,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11205:25:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11178:52:3"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 746,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 740,
														"name": "currentAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 734,
														"src": "11244:16:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 743,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "11269:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 742,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "11269:7:3",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	}
																],
																"id": 741,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "11264:4:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 744,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11264:13:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint256",
																"typeString": "type(uint256)"
															}
														},
														"id": 745,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "11278:3:3",
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "11264:17:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "11244:37:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 764,
												"nodeType": "IfStatement",
												"src": "11240:243:3",
												"trueBody": {
													"id": 763,
													"nodeType": "Block",
													"src": "11283:200:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 750,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 748,
																			"name": "currentAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 734,
																			"src": "11305:16:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"id": 749,
																			"name": "amount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 730,
																			"src": "11325:6:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "11305:26:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "45524332303a20696e73756666696369656e7420616c6c6f77616e6365",
																		"id": 751,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "11333:31:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
																			"typeString": "literal_string \"ERC20: insufficient allowance\""
																		},
																		"value": "ERC20: insufficient allowance"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
																			"typeString": "literal_string \"ERC20: insufficient allowance\""
																		}
																	],
																	"id": 747,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "11297:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 752,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11297:68:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 753,
															"nodeType": "ExpressionStatement",
															"src": "11297:68:3"
														},
														{
															"id": 762,
															"nodeType": "UncheckedBlock",
															"src": "11379:94:3",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"id": 755,
																				"name": "owner",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 726,
																				"src": "11416:5:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 756,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 728,
																				"src": "11423:7:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 759,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 757,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 734,
																					"src": "11432:16:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"id": 758,
																					"name": "amount",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 730,
																					"src": "11451:6:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "11432:25:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 754,
																			"name": "_approve",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 723,
																			"src": "11407:8:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																				"typeString": "function (address,address,uint256)"
																			}
																		},
																		"id": 760,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "11407:51:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 761,
																	"nodeType": "ExpressionStatement",
																	"src": "11407:51:3"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 724,
										"nodeType": "StructuredDocumentation",
										"src": "10803:270:3",
										"text": " @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n Does not update the allowance amount in case of infinite allowance.\n Revert if not enough allowance is available.\n Might emit an {Approval} event."
									},
									"id": 766,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_spendAllowance",
									"nameLocation": "11087:15:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 731,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 726,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "11111:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 766,
												"src": "11103:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 725,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11103:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 728,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "11126:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 766,
												"src": "11118:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 727,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11118:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 730,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "11143:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 766,
												"src": "11135:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 729,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11135:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11102:48:3"
									},
									"returnParameters": {
										"id": 732,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11168:0:3"
									},
									"scope": 789,
									"src": "11078:411:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 776,
										"nodeType": "Block",
										"src": "12162:2:3",
										"statements": []
									},
									"documentation": {
										"id": 767,
										"nodeType": "StructuredDocumentation",
										"src": "11495:573:3",
										"text": " @dev Hook that is called before any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n will be transferred to `to`.\n - when `from` is zero, `amount` tokens will be minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 777,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_beforeTokenTransfer",
									"nameLocation": "12082:20:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 774,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 769,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "12111:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 777,
												"src": "12103:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 768,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12103:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 771,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "12125:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 777,
												"src": "12117:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 770,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12117:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 773,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "12137:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 777,
												"src": "12129:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 772,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12129:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12102:42:3"
									},
									"returnParameters": {
										"id": 775,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12162:0:3"
									},
									"scope": 789,
									"src": "12073:91:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 787,
										"nodeType": "Block",
										"src": "12840:2:3",
										"statements": []
									},
									"documentation": {
										"id": 778,
										"nodeType": "StructuredDocumentation",
										"src": "12170:577:3",
										"text": " @dev Hook that is called after any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n has been transferred to `to`.\n - when `from` is zero, `amount` tokens have been minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 788,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_afterTokenTransfer",
									"nameLocation": "12761:19:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 785,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 780,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "12789:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 788,
												"src": "12781:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 779,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12781:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 782,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "12803:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 788,
												"src": "12795:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 781,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12795:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 784,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "12815:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 788,
												"src": "12807:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 783,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12807:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12780:42:3"
									},
									"returnParameters": {
										"id": 786,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12840:0:3"
									},
									"scope": 789,
									"src": "12752:90:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 790,
							"src": "1532:11312:3",
							"usedErrors": []
						}
					],
					"src": "105:12740:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							867
						]
					},
					"id": 868,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 791,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "106:23:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 792,
								"nodeType": "StructuredDocumentation",
								"src": "131:70:4",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 867,
							"linearizedBaseContracts": [
								867
							],
							"name": "IERC20",
							"nameLocation": "212:6:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 793,
										"nodeType": "StructuredDocumentation",
										"src": "225:158:4",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 801,
									"name": "Transfer",
									"nameLocation": "394:8:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 800,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 795,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "419:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 801,
												"src": "403:20:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 794,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "403:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 797,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "441:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 801,
												"src": "425:18:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 796,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "425:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 799,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "453:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 801,
												"src": "445:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 798,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "445:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "402:57:4"
									},
									"src": "388:72:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 802,
										"nodeType": "StructuredDocumentation",
										"src": "466:148:4",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 810,
									"name": "Approval",
									"nameLocation": "625:8:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 809,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 804,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "650:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 810,
												"src": "634:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 803,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "634:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 806,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "673:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 810,
												"src": "657:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 805,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "657:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 808,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "690:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 810,
												"src": "682:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 807,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "682:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "633:63:4"
									},
									"src": "619:78:4"
								},
								{
									"documentation": {
										"id": 811,
										"nodeType": "StructuredDocumentation",
										"src": "703:66:4",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 816,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "783:11:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 812,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "794:2:4"
									},
									"returnParameters": {
										"id": 815,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 814,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 816,
												"src": "820:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 813,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "820:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "819:9:4"
									},
									"scope": 867,
									"src": "774:55:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 817,
										"nodeType": "StructuredDocumentation",
										"src": "835:72:4",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 824,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "921:9:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 820,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 819,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "939:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 824,
												"src": "931:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 818,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "931:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "930:17:4"
									},
									"returnParameters": {
										"id": 823,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 822,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 824,
												"src": "971:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 821,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "971:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "970:9:4"
									},
									"scope": 867,
									"src": "912:68:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 825,
										"nodeType": "StructuredDocumentation",
										"src": "986:202:4",
										"text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 834,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1202:8:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 830,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 827,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1219:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 834,
												"src": "1211:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 826,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1211:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 829,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1231:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 834,
												"src": "1223:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 828,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1223:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1210:28:4"
									},
									"returnParameters": {
										"id": 833,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 832,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 834,
												"src": "1257:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 831,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1257:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1256:6:4"
									},
									"scope": 867,
									"src": "1193:70:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 835,
										"nodeType": "StructuredDocumentation",
										"src": "1269:264:4",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 844,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1547:9:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 840,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 837,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1565:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 844,
												"src": "1557:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 836,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1557:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 839,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1580:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 844,
												"src": "1572:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 838,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1572:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1556:32:4"
									},
									"returnParameters": {
										"id": 843,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 842,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 844,
												"src": "1612:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 841,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1612:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1611:9:4"
									},
									"scope": 867,
									"src": "1538:83:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 845,
										"nodeType": "StructuredDocumentation",
										"src": "1627:642:4",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 854,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2283:7:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 850,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 847,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2299:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 854,
												"src": "2291:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 846,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2291:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 849,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2316:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 854,
												"src": "2308:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 848,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2308:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2290:33:4"
									},
									"returnParameters": {
										"id": 853,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 852,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 854,
												"src": "2342:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 851,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2342:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2341:6:4"
									},
									"scope": 867,
									"src": "2274:74:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 855,
										"nodeType": "StructuredDocumentation",
										"src": "2354:287:4",
										"text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 866,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2655:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 862,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 857,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2676:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 866,
												"src": "2668:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 856,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2668:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 859,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2690:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 866,
												"src": "2682:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 858,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2682:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 861,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2702:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 866,
												"src": "2694:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 860,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2694:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2667:42:4"
									},
									"returnParameters": {
										"id": 865,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 864,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 866,
												"src": "2728:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 863,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2728:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2727:6:4"
									},
									"scope": 867,
									"src": "2646:88:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 868,
							"src": "202:2534:4",
							"usedErrors": []
						}
					],
					"src": "106:2631:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
					"exportedSymbols": {
						"Context": [
							1130
						],
						"Counters": [
							1204
						],
						"ECDSA": [
							2125
						],
						"EIP712": [
							2329
						],
						"ERC20": [
							789
						],
						"ERC20Permit": [
							1039
						],
						"IERC20": [
							867
						],
						"IERC20Metadata": [
							1064
						],
						"IERC20Permit": [
							1100
						],
						"IERC5267": [
							137
						],
						"Math": [
							3195
						],
						"ShortString": [
							1209
						],
						"ShortStrings": [
							1420
						],
						"SignedMath": [
							3300
						],
						"StorageSlot": [
							1530
						],
						"Strings": [
							1759
						]
					},
					"id": 1040,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 869,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "122:23:5"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
							"file": "./IERC20Permit.sol",
							"id": 870,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1040,
							"sourceUnit": 1101,
							"src": "147:28:5",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
							"file": "../ERC20.sol",
							"id": 871,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1040,
							"sourceUnit": 790,
							"src": "176:22:5",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
							"file": "../../../utils/cryptography/ECDSA.sol",
							"id": 872,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1040,
							"sourceUnit": 2126,
							"src": "199:47:5",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/cryptography/EIP712.sol",
							"file": "../../../utils/cryptography/EIP712.sol",
							"id": 873,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1040,
							"sourceUnit": 2330,
							"src": "247:48:5",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Counters.sol",
							"file": "../../../utils/Counters.sol",
							"id": 874,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1040,
							"sourceUnit": 1205,
							"src": "296:37:5",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 876,
										"name": "ERC20",
										"nameLocations": [
											"886:5:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 789,
										"src": "886:5:5"
									},
									"id": 877,
									"nodeType": "InheritanceSpecifier",
									"src": "886:5:5"
								},
								{
									"baseName": {
										"id": 878,
										"name": "IERC20Permit",
										"nameLocations": [
											"893:12:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1100,
										"src": "893:12:5"
									},
									"id": 879,
									"nodeType": "InheritanceSpecifier",
									"src": "893:12:5"
								},
								{
									"baseName": {
										"id": 880,
										"name": "EIP712",
										"nameLocations": [
											"907:6:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2329,
										"src": "907:6:5"
									},
									"id": 881,
									"nodeType": "InheritanceSpecifier",
									"src": "907:6:5"
								}
							],
							"canonicalName": "ERC20Permit",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 875,
								"nodeType": "StructuredDocumentation",
								"src": "335:517:5",
								"text": " @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all.\n _Available since v3.4._"
							},
							"fullyImplemented": false,
							"id": 1039,
							"linearizedBaseContracts": [
								1039,
								2329,
								137,
								1100,
								789,
								1064,
								867,
								1130
							],
							"name": "ERC20Permit",
							"nameLocation": "871:11:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 885,
									"libraryName": {
										"id": 882,
										"name": "Counters",
										"nameLocations": [
											"926:8:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1204,
										"src": "926:8:5"
									},
									"nodeType": "UsingForDirective",
									"src": "920:36:5",
									"typeName": {
										"id": 884,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 883,
											"name": "Counters.Counter",
											"nameLocations": [
												"939:8:5",
												"948:7:5"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 1136,
											"src": "939:16:5"
										},
										"referencedDeclaration": 1136,
										"src": "939:16:5",
										"typeDescriptions": {
											"typeIdentifier": "t_struct$_Counter_$1136_storage_ptr",
											"typeString": "struct Counters.Counter"
										}
									}
								},
								{
									"constant": false,
									"id": 890,
									"mutability": "mutable",
									"name": "_nonces",
									"nameLocation": "1007:7:5",
									"nodeType": "VariableDeclaration",
									"scope": 1039,
									"src": "962:52:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Counter_$1136_storage_$",
										"typeString": "mapping(address => struct Counters.Counter)"
									},
									"typeName": {
										"id": 889,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 886,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "970:7:5",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "962:36:5",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Counter_$1136_storage_$",
											"typeString": "mapping(address => struct Counters.Counter)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 888,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 887,
												"name": "Counters.Counter",
												"nameLocations": [
													"981:8:5",
													"990:7:5"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1136,
												"src": "981:16:5"
											},
											"referencedDeclaration": 1136,
											"src": "981:16:5",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Counter_$1136_storage_ptr",
												"typeString": "struct Counters.Counter"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 895,
									"mutability": "constant",
									"name": "_PERMIT_TYPEHASH",
									"nameLocation": "1098:16:5",
									"nodeType": "VariableDeclaration",
									"scope": 1039,
									"src": "1073:147:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 891,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "1073:7:5",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "5065726d69742861646472657373206f776e65722c61646472657373207370656e6465722c75696e743235362076616c75652c75696e74323536206e6f6e63652c75696e7432353620646561646c696e6529",
												"id": 893,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "string",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "1135:84:5",
												"typeDescriptions": {
													"typeIdentifier": "t_stringliteral_6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9",
													"typeString": "literal_string \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\""
												},
												"value": "Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_stringliteral_6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9",
													"typeString": "literal_string \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\""
												}
											],
											"id": 892,
											"name": "keccak256",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 4294967288,
											"src": "1125:9:5",
											"typeDescriptions": {
												"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
												"typeString": "function (bytes memory) pure returns (bytes32)"
											}
										},
										"id": 894,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "functionCall",
										"lValueRequested": false,
										"nameLocations": [],
										"names": [],
										"nodeType": "FunctionCall",
										"src": "1125:95:5",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"documentation": {
										"id": 896,
										"nodeType": "StructuredDocumentation",
										"src": "1226:254:5",
										"text": " @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\n However, to ensure consistency with the upgradeable transpiler, we will continue\n to reserve a slot.\n @custom:oz-renamed-from _PERMIT_TYPEHASH"
									},
									"id": 898,
									"mutability": "mutable",
									"name": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
									"nameLocation": "1553:32:5",
									"nodeType": "VariableDeclaration",
									"scope": 1039,
									"src": "1537:48:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 897,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "1537:7:5",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 908,
										"nodeType": "Block",
										"src": "1867:2:5",
										"statements": []
									},
									"documentation": {
										"id": 899,
										"nodeType": "StructuredDocumentation",
										"src": "1592:220:5",
										"text": " @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n It's a good idea to use the same `name` that is defined as the ERC20 token name."
									},
									"id": 909,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 904,
													"name": "name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 901,
													"src": "1856:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												{
													"hexValue": "31",
													"id": 905,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "1862:3:5",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6",
														"typeString": "literal_string \"1\""
													},
													"value": "1"
												}
											],
											"id": 906,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 903,
												"name": "EIP712",
												"nameLocations": [
													"1849:6:5"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 2329,
												"src": "1849:6:5"
											},
											"nodeType": "ModifierInvocation",
											"src": "1849:17:5"
										}
									],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 902,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 901,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "1843:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 909,
												"src": "1829:18:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 900,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1829:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1828:20:5"
									},
									"returnParameters": {
										"id": 907,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1867:0:5"
									},
									"scope": 1039,
									"src": "1817:52:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										1085
									],
									"body": {
										"id": 981,
										"nodeType": "Block",
										"src": "2121:428:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 932,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 929,
																	"name": "block",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967292,
																	"src": "2139:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_block",
																		"typeString": "block"
																	}
																},
																"id": 930,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2145:9:5",
																"memberName": "timestamp",
																"nodeType": "MemberAccess",
																"src": "2139:15:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 931,
																"name": "deadline",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 918,
																"src": "2158:8:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2139:27:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332305065726d69743a206578706972656420646561646c696e65",
															"id": 933,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2168:31:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd",
																"typeString": "literal_string \"ERC20Permit: expired deadline\""
															},
															"value": "ERC20Permit: expired deadline"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd",
																"typeString": "literal_string \"ERC20Permit: expired deadline\""
															}
														],
														"id": 928,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2131:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 934,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2131:69:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 935,
												"nodeType": "ExpressionStatement",
												"src": "2131:69:5"
											},
											{
												"assignments": [
													937
												],
												"declarations": [
													{
														"constant": false,
														"id": 937,
														"mutability": "mutable",
														"name": "structHash",
														"nameLocation": "2219:10:5",
														"nodeType": "VariableDeclaration",
														"scope": 981,
														"src": "2211:18:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 936,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "2211:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 951,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 941,
																	"name": "_PERMIT_TYPEHASH",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 895,
																	"src": "2253:16:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 942,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 912,
																	"src": "2271:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 943,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 914,
																	"src": "2278:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 944,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 916,
																	"src": "2287:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"arguments": [
																		{
																			"id": 946,
																			"name": "owner",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 912,
																			"src": "2304:5:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 945,
																		"name": "_useNonce",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1038,
																		"src": "2294:9:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$_t_uint256_$",
																			"typeString": "function (address) returns (uint256)"
																		}
																	},
																	"id": 947,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2294:16:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 948,
																	"name": "deadline",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 918,
																	"src": "2312:8:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 939,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2242:3:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 940,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "2246:6:5",
																"memberName": "encode",
																"nodeType": "MemberAccess",
																"src": "2242:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 949,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2242:79:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 938,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "2232:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 950,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2232:90:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2211:111:5"
											},
											{
												"assignments": [
													953
												],
												"declarations": [
													{
														"constant": false,
														"id": 953,
														"mutability": "mutable",
														"name": "hash",
														"nameLocation": "2341:4:5",
														"nodeType": "VariableDeclaration",
														"scope": 981,
														"src": "2333:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 952,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "2333:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 957,
												"initialValue": {
													"arguments": [
														{
															"id": 955,
															"name": "structHash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 937,
															"src": "2365:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 954,
														"name": "_hashTypedDataV4",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2281,
														"src": "2348:16:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$",
															"typeString": "function (bytes32) view returns (bytes32)"
														}
													},
													"id": 956,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2348:28:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2333:43:5"
											},
											{
												"assignments": [
													959
												],
												"declarations": [
													{
														"constant": false,
														"id": 959,
														"mutability": "mutable",
														"name": "signer",
														"nameLocation": "2395:6:5",
														"nodeType": "VariableDeclaration",
														"scope": 981,
														"src": "2387:14:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 958,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2387:7:5",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 967,
												"initialValue": {
													"arguments": [
														{
															"id": 962,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 953,
															"src": "2418:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 963,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 920,
															"src": "2424:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 964,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 922,
															"src": "2427:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 965,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 924,
															"src": "2430:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 960,
															"name": "ECDSA",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2125,
															"src": "2404:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_ECDSA_$2125_$",
																"typeString": "type(library ECDSA)"
															}
														},
														"id": 961,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2410:7:5",
														"memberName": "recover",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2060,
														"src": "2404:13:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address)"
														}
													},
													"id": 966,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2404:28:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2387:45:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 971,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 969,
																"name": "signer",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 959,
																"src": "2450:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 970,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 912,
																"src": "2460:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2450:15:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332305065726d69743a20696e76616c6964207369676e6174757265",
															"id": 972,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2467:32:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124",
																"typeString": "literal_string \"ERC20Permit: invalid signature\""
															},
															"value": "ERC20Permit: invalid signature"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124",
																"typeString": "literal_string \"ERC20Permit: invalid signature\""
															}
														],
														"id": 968,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2442:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 973,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2442:58:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 974,
												"nodeType": "ExpressionStatement",
												"src": "2442:58:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 976,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 912,
															"src": "2520:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 977,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 914,
															"src": "2527:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 978,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 916,
															"src": "2536:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 975,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 723,
														"src": "2511:8:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 979,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2511:31:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 980,
												"nodeType": "ExpressionStatement",
												"src": "2511:31:5"
											}
										]
									},
									"documentation": {
										"id": 910,
										"nodeType": "StructuredDocumentation",
										"src": "1875:43:5",
										"text": " @inheritdoc IERC20Permit"
									},
									"functionSelector": "d505accf",
									"id": 982,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "1932:6:5",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 926,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2112:8:5"
									},
									"parameters": {
										"id": 925,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 912,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1956:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 982,
												"src": "1948:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 911,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1948:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 914,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1979:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 982,
												"src": "1971:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 913,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1971:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 916,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2004:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 982,
												"src": "1996:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 915,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1996:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 918,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "2027:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 982,
												"src": "2019:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 917,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2019:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 920,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "2051:1:5",
												"nodeType": "VariableDeclaration",
												"scope": 982,
												"src": "2045:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 919,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "2045:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 922,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "2070:1:5",
												"nodeType": "VariableDeclaration",
												"scope": 982,
												"src": "2062:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 921,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2062:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 924,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "2089:1:5",
												"nodeType": "VariableDeclaration",
												"scope": 982,
												"src": "2081:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 923,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2081:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1938:158:5"
									},
									"returnParameters": {
										"id": 927,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2121:0:5"
									},
									"scope": 1039,
									"src": "1923:626:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1093
									],
									"body": {
										"id": 997,
										"nodeType": "Block",
										"src": "2681:48:5",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"baseExpression": {
																"id": 991,
																"name": "_nonces",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 890,
																"src": "2698:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Counter_$1136_storage_$",
																	"typeString": "mapping(address => struct Counters.Counter storage ref)"
																}
															},
															"id": 993,
															"indexExpression": {
																"id": 992,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 985,
																"src": "2706:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "2698:14:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Counter_$1136_storage",
																"typeString": "struct Counters.Counter storage ref"
															}
														},
														"id": 994,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2713:7:5",
														"memberName": "current",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1148,
														"src": "2698:22:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Counter_$1136_storage_ptr_$returns$_t_uint256_$attached_to$_t_struct$_Counter_$1136_storage_ptr_$",
															"typeString": "function (struct Counters.Counter storage pointer) view returns (uint256)"
														}
													},
													"id": 995,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2698:24:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 990,
												"id": 996,
												"nodeType": "Return",
												"src": "2691:31:5"
											}
										]
									},
									"documentation": {
										"id": 983,
										"nodeType": "StructuredDocumentation",
										"src": "2555:43:5",
										"text": " @inheritdoc IERC20Permit"
									},
									"functionSelector": "7ecebe00",
									"id": 998,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "2612:6:5",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 987,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2654:8:5"
									},
									"parameters": {
										"id": 986,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 985,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2627:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 998,
												"src": "2619:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 984,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2619:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2618:15:5"
									},
									"returnParameters": {
										"id": 990,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 989,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 998,
												"src": "2672:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 988,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2672:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2671:9:5"
									},
									"scope": 1039,
									"src": "2603:126:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1099
									],
									"body": {
										"id": 1008,
										"nodeType": "Block",
										"src": "2905:44:5",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1005,
														"name": "_domainSeparatorV4",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2244,
														"src": "2922:18:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_bytes32_$",
															"typeString": "function () view returns (bytes32)"
														}
													},
													"id": 1006,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2922:20:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 1004,
												"id": 1007,
												"nodeType": "Return",
												"src": "2915:27:5"
											}
										]
									},
									"documentation": {
										"id": 999,
										"nodeType": "StructuredDocumentation",
										"src": "2735:43:5",
										"text": " @inheritdoc IERC20Permit"
									},
									"functionSelector": "3644e515",
									"id": 1009,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "2845:16:5",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1001,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2878:8:5"
									},
									"parameters": {
										"id": 1000,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2861:2:5"
									},
									"returnParameters": {
										"id": 1004,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1003,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1009,
												"src": "2896:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1002,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2896:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2895:9:5"
									},
									"scope": 1039,
									"src": "2836:113:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1037,
										"nodeType": "Block",
										"src": "3157:126:5",
										"statements": [
											{
												"assignments": [
													1021
												],
												"declarations": [
													{
														"constant": false,
														"id": 1021,
														"mutability": "mutable",
														"name": "nonce",
														"nameLocation": "3192:5:5",
														"nodeType": "VariableDeclaration",
														"scope": 1037,
														"src": "3167:30:5",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Counter_$1136_storage_ptr",
															"typeString": "struct Counters.Counter"
														},
														"typeName": {
															"id": 1020,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1019,
																"name": "Counters.Counter",
																"nameLocations": [
																	"3167:8:5",
																	"3176:7:5"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1136,
																"src": "3167:16:5"
															},
															"referencedDeclaration": 1136,
															"src": "3167:16:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Counter_$1136_storage_ptr",
																"typeString": "struct Counters.Counter"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1025,
												"initialValue": {
													"baseExpression": {
														"id": 1022,
														"name": "_nonces",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 890,
														"src": "3200:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Counter_$1136_storage_$",
															"typeString": "mapping(address => struct Counters.Counter storage ref)"
														}
													},
													"id": 1024,
													"indexExpression": {
														"id": 1023,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1012,
														"src": "3208:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3200:14:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Counter_$1136_storage",
														"typeString": "struct Counters.Counter storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3167:47:5"
											},
											{
												"expression": {
													"id": 1030,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1026,
														"name": "current",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1015,
														"src": "3224:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"expression": {
																"id": 1027,
																"name": "nonce",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1021,
																"src": "3234:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Counter_$1136_storage_ptr",
																	"typeString": "struct Counters.Counter storage pointer"
																}
															},
															"id": 1028,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3240:7:5",
															"memberName": "current",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1148,
															"src": "3234:13:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_struct$_Counter_$1136_storage_ptr_$returns$_t_uint256_$attached_to$_t_struct$_Counter_$1136_storage_ptr_$",
																"typeString": "function (struct Counters.Counter storage pointer) view returns (uint256)"
															}
														},
														"id": 1029,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3234:15:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3224:25:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1031,
												"nodeType": "ExpressionStatement",
												"src": "3224:25:5"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"id": 1032,
															"name": "nonce",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1021,
															"src": "3259:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Counter_$1136_storage_ptr",
																"typeString": "struct Counters.Counter storage pointer"
															}
														},
														"id": 1034,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3265:9:5",
														"memberName": "increment",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1162,
														"src": "3259:15:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Counter_$1136_storage_ptr_$returns$__$attached_to$_t_struct$_Counter_$1136_storage_ptr_$",
															"typeString": "function (struct Counters.Counter storage pointer)"
														}
													},
													"id": 1035,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3259:17:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1036,
												"nodeType": "ExpressionStatement",
												"src": "3259:17:5"
											}
										]
									},
									"documentation": {
										"id": 1010,
										"nodeType": "StructuredDocumentation",
										"src": "2955:120:5",
										"text": " @dev \"Consume a nonce\": return the current value and increment.\n _Available since v4.1._"
									},
									"id": 1038,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_useNonce",
									"nameLocation": "3089:9:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1013,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1012,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3107:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1038,
												"src": "3099:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1011,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3099:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3098:15:5"
									},
									"returnParameters": {
										"id": 1016,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1015,
												"mutability": "mutable",
												"name": "current",
												"nameLocation": "3148:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1038,
												"src": "3140:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1014,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3140:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3139:17:5"
									},
									"scope": 1039,
									"src": "3080:203:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1040,
							"src": "853:2432:5",
							"usedErrors": [
								1217,
								1219
							]
						}
					],
					"src": "122:3164:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
					"exportedSymbols": {
						"IERC20": [
							867
						],
						"IERC20Metadata": [
							1064
						]
					},
					"id": 1065,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1041,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "110:23:6"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 1042,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1065,
							"sourceUnit": 868,
							"src": "135:23:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1044,
										"name": "IERC20",
										"nameLocations": [
											"305:6:6"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 867,
										"src": "305:6:6"
									},
									"id": 1045,
									"nodeType": "InheritanceSpecifier",
									"src": "305:6:6"
								}
							],
							"canonicalName": "IERC20Metadata",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1043,
								"nodeType": "StructuredDocumentation",
								"src": "160:116:6",
								"text": " @dev Interface for the optional metadata functions from the ERC20 standard.\n _Available since v4.1._"
							},
							"fullyImplemented": false,
							"id": 1064,
							"linearizedBaseContracts": [
								1064,
								867
							],
							"name": "IERC20Metadata",
							"nameLocation": "287:14:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1046,
										"nodeType": "StructuredDocumentation",
										"src": "318:54:6",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 1051,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "386:4:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1047,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "390:2:6"
									},
									"returnParameters": {
										"id": 1050,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1049,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1051,
												"src": "416:13:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1048,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "416:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "415:15:6"
									},
									"scope": 1064,
									"src": "377:54:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1052,
										"nodeType": "StructuredDocumentation",
										"src": "437:56:6",
										"text": " @dev Returns the symbol of the token."
									},
									"functionSelector": "95d89b41",
									"id": 1057,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "507:6:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1053,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "513:2:6"
									},
									"returnParameters": {
										"id": 1056,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1055,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1057,
												"src": "539:13:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1054,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "539:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "538:15:6"
									},
									"scope": 1064,
									"src": "498:56:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1058,
										"nodeType": "StructuredDocumentation",
										"src": "560:65:6",
										"text": " @dev Returns the decimals places of the token."
									},
									"functionSelector": "313ce567",
									"id": 1063,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "639:8:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1059,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "647:2:6"
									},
									"returnParameters": {
										"id": 1062,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1061,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1063,
												"src": "673:5:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1060,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "673:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "672:7:6"
									},
									"scope": 1064,
									"src": "630:50:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1065,
							"src": "277:405:6",
							"usedErrors": []
						}
					],
					"src": "110:573:6"
				},
				"id": 6
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
					"exportedSymbols": {
						"IERC20Permit": [
							1100
						]
					},
					"id": 1101,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1066,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "123:23:7"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Permit",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1067,
								"nodeType": "StructuredDocumentation",
								"src": "148:1963:7",
								"text": " @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all.\n ==== Security Considerations\n There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n considered as an intention to spend the allowance in any specific way. The second is that because permits have\n built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n generally recommended is:\n ```solidity\n function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n     doThing(..., value);\n }\n function doThing(..., uint256 value) public {\n     token.safeTransferFrom(msg.sender, address(this), value);\n     ...\n }\n ```\n Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n {SafeERC20-safeTransferFrom}).\n Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n contracts should have entry points that don't rely on permit."
							},
							"fullyImplemented": false,
							"id": 1100,
							"linearizedBaseContracts": [
								1100
							],
							"name": "IERC20Permit",
							"nameLocation": "2122:12:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1068,
										"nodeType": "StructuredDocumentation",
										"src": "2141:850:7",
										"text": " @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section].\n CAUTION: See Security Considerations above."
									},
									"functionSelector": "d505accf",
									"id": 1085,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "3005:6:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1083,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1070,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3029:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1085,
												"src": "3021:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1069,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3021:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1072,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3052:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1085,
												"src": "3044:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1071,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3044:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1074,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3077:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1085,
												"src": "3069:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1073,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3069:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1076,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "3100:8:7",
												"nodeType": "VariableDeclaration",
												"scope": 1085,
												"src": "3092:16:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1075,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3092:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1078,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "3124:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 1085,
												"src": "3118:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1077,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3118:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1080,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3143:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 1085,
												"src": "3135:9:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1079,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3135:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1082,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "3162:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 1085,
												"src": "3154:9:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1081,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3154:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3011:158:7"
									},
									"returnParameters": {
										"id": 1084,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3178:0:7"
									},
									"scope": 1100,
									"src": "2996:183:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1086,
										"nodeType": "StructuredDocumentation",
										"src": "3185:294:7",
										"text": " @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."
									},
									"functionSelector": "7ecebe00",
									"id": 1093,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "3493:6:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1089,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1088,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3508:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1093,
												"src": "3500:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1087,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3500:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3499:15:7"
									},
									"returnParameters": {
										"id": 1092,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1091,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1093,
												"src": "3538:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1090,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3538:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3537:9:7"
									},
									"scope": 1100,
									"src": "3484:63:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1094,
										"nodeType": "StructuredDocumentation",
										"src": "3553:128:7",
										"text": " @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
									},
									"functionSelector": "3644e515",
									"id": 1099,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "3748:16:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1095,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3764:2:7"
									},
									"returnParameters": {
										"id": 1098,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1097,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1099,
												"src": "3790:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1096,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3790:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3789:9:7"
									},
									"scope": 1100,
									"src": "3739:60:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1101,
							"src": "2112:1689:7",
							"usedErrors": []
						}
					],
					"src": "123:3679:7"
				},
				"id": 7
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							1130
						]
					},
					"id": 1131,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1102,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "101:23:8"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1103,
								"nodeType": "StructuredDocumentation",
								"src": "126:496:8",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 1130,
							"linearizedBaseContracts": [
								1130
							],
							"name": "Context",
							"nameLocation": "641:7:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1111,
										"nodeType": "Block",
										"src": "717:34:8",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1108,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "734:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1109,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "738:6:8",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "734:10:8",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1107,
												"id": 1110,
												"nodeType": "Return",
												"src": "727:17:8"
											}
										]
									},
									"id": 1112,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "664:10:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1104,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "674:2:8"
									},
									"returnParameters": {
										"id": 1107,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1106,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1112,
												"src": "708:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1105,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "708:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "707:9:8"
									},
									"scope": 1130,
									"src": "655:96:8",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1120,
										"nodeType": "Block",
										"src": "824:32:8",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1117,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "841:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1118,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "845:4:8",
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "841:8:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 1116,
												"id": 1119,
												"nodeType": "Return",
												"src": "834:15:8"
											}
										]
									},
									"id": 1121,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "766:8:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1113,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "774:2:8"
									},
									"returnParameters": {
										"id": 1116,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1115,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1121,
												"src": "808:14:8",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1114,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "808:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "807:16:8"
									},
									"scope": 1130,
									"src": "757:99:8",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1128,
										"nodeType": "Block",
										"src": "934:25:8",
										"statements": [
											{
												"expression": {
													"hexValue": "30",
													"id": 1126,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "951:1:8",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"functionReturnParameters": 1125,
												"id": 1127,
												"nodeType": "Return",
												"src": "944:8:8"
											}
										]
									},
									"id": 1129,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_contextSuffixLength",
									"nameLocation": "871:20:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1122,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "891:2:8"
									},
									"returnParameters": {
										"id": 1125,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1124,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1129,
												"src": "925:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1123,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "925:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "924:9:8"
									},
									"scope": 1130,
									"src": "862:97:8",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1131,
							"src": "623:338:8",
							"usedErrors": []
						}
					],
					"src": "101:861:8"
				},
				"id": 8
			},
			"@openzeppelin/contracts/utils/Counters.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Counters.sol",
					"exportedSymbols": {
						"Counters": [
							1204
						]
					},
					"id": 1205,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1132,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "87:23:9"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Counters",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1133,
								"nodeType": "StructuredDocumentation",
								"src": "112:311:9",
								"text": " @title Counters\n @author Matt Condon (@shrugs)\n @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n of elements in a mapping, issuing ERC721 ids, or counting request ids.\n Include with `using Counters for Counters.Counter;`"
							},
							"fullyImplemented": true,
							"id": 1204,
							"linearizedBaseContracts": [
								1204
							],
							"name": "Counters",
							"nameLocation": "432:8:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "Counters.Counter",
									"id": 1136,
									"members": [
										{
											"constant": false,
											"id": 1135,
											"mutability": "mutable",
											"name": "_value",
											"nameLocation": "794:6:9",
											"nodeType": "VariableDeclaration",
											"scope": 1136,
											"src": "786:14:9",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1134,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "786:7:9",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Counter",
									"nameLocation": "454:7:9",
									"nodeType": "StructDefinition",
									"scope": 1204,
									"src": "447:374:9",
									"visibility": "public"
								},
								{
									"body": {
										"id": 1147,
										"nodeType": "Block",
										"src": "901:38:9",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1144,
														"name": "counter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1139,
														"src": "918:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Counter_$1136_storage_ptr",
															"typeString": "struct Counters.Counter storage pointer"
														}
													},
													"id": 1145,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "926:6:9",
													"memberName": "_value",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1135,
													"src": "918:14:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1143,
												"id": 1146,
												"nodeType": "Return",
												"src": "911:21:9"
											}
										]
									},
									"id": 1148,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "current",
									"nameLocation": "836:7:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1140,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1139,
												"mutability": "mutable",
												"name": "counter",
												"nameLocation": "860:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1148,
												"src": "844:23:9",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Counter_$1136_storage_ptr",
													"typeString": "struct Counters.Counter"
												},
												"typeName": {
													"id": 1138,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1137,
														"name": "Counter",
														"nameLocations": [
															"844:7:9"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1136,
														"src": "844:7:9"
													},
													"referencedDeclaration": 1136,
													"src": "844:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Counter_$1136_storage_ptr",
														"typeString": "struct Counters.Counter"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "843:25:9"
									},
									"returnParameters": {
										"id": 1143,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1142,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1148,
												"src": "892:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1141,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "892:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "891:9:9"
									},
									"scope": 1204,
									"src": "827:112:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1161,
										"nodeType": "Block",
										"src": "998:70:9",
										"statements": [
											{
												"id": 1160,
												"nodeType": "UncheckedBlock",
												"src": "1008:54:9",
												"statements": [
													{
														"expression": {
															"id": 1158,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"id": 1154,
																	"name": "counter",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1151,
																	"src": "1032:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Counter_$1136_storage_ptr",
																		"typeString": "struct Counters.Counter storage pointer"
																	}
																},
																"id": 1156,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberLocation": "1040:6:9",
																"memberName": "_value",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1135,
																"src": "1032:14:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"hexValue": "31",
																"id": 1157,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1050:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "1032:19:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1159,
														"nodeType": "ExpressionStatement",
														"src": "1032:19:9"
													}
												]
											}
										]
									},
									"id": 1162,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "increment",
									"nameLocation": "954:9:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1152,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1151,
												"mutability": "mutable",
												"name": "counter",
												"nameLocation": "980:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1162,
												"src": "964:23:9",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Counter_$1136_storage_ptr",
													"typeString": "struct Counters.Counter"
												},
												"typeName": {
													"id": 1150,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1149,
														"name": "Counter",
														"nameLocations": [
															"964:7:9"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1136,
														"src": "964:7:9"
													},
													"referencedDeclaration": 1136,
													"src": "964:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Counter_$1136_storage_ptr",
														"typeString": "struct Counters.Counter"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "963:25:9"
									},
									"returnParameters": {
										"id": 1153,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "998:0:9"
									},
									"scope": 1204,
									"src": "945:123:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1189,
										"nodeType": "Block",
										"src": "1127:176:9",
										"statements": [
											{
												"assignments": [
													1169
												],
												"declarations": [
													{
														"constant": false,
														"id": 1169,
														"mutability": "mutable",
														"name": "value",
														"nameLocation": "1145:5:9",
														"nodeType": "VariableDeclaration",
														"scope": 1189,
														"src": "1137:13:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1168,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1137:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1172,
												"initialValue": {
													"expression": {
														"id": 1170,
														"name": "counter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1165,
														"src": "1153:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Counter_$1136_storage_ptr",
															"typeString": "struct Counters.Counter storage pointer"
														}
													},
													"id": 1171,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "1161:6:9",
													"memberName": "_value",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1135,
													"src": "1153:14:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1137:30:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1176,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1174,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1169,
																"src": "1185:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1175,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1193:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1185:9:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "436f756e7465723a2064656372656d656e74206f766572666c6f77",
															"id": 1177,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1196:29:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f",
																"typeString": "literal_string \"Counter: decrement overflow\""
															},
															"value": "Counter: decrement overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f",
																"typeString": "literal_string \"Counter: decrement overflow\""
															}
														],
														"id": 1173,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1177:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1178,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1177:49:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1179,
												"nodeType": "ExpressionStatement",
												"src": "1177:49:9"
											},
											{
												"id": 1188,
												"nodeType": "UncheckedBlock",
												"src": "1236:61:9",
												"statements": [
													{
														"expression": {
															"id": 1186,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"id": 1180,
																	"name": "counter",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1165,
																	"src": "1260:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Counter_$1136_storage_ptr",
																		"typeString": "struct Counters.Counter storage pointer"
																	}
																},
																"id": 1182,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberLocation": "1268:6:9",
																"memberName": "_value",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1135,
																"src": "1260:14:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1185,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1183,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1169,
																	"src": "1277:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1184,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1285:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "1277:9:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1260:26:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1187,
														"nodeType": "ExpressionStatement",
														"src": "1260:26:9"
													}
												]
											}
										]
									},
									"id": 1190,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decrement",
									"nameLocation": "1083:9:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1166,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1165,
												"mutability": "mutable",
												"name": "counter",
												"nameLocation": "1109:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1190,
												"src": "1093:23:9",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Counter_$1136_storage_ptr",
													"typeString": "struct Counters.Counter"
												},
												"typeName": {
													"id": 1164,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1163,
														"name": "Counter",
														"nameLocations": [
															"1093:7:9"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1136,
														"src": "1093:7:9"
													},
													"referencedDeclaration": 1136,
													"src": "1093:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Counter_$1136_storage_ptr",
														"typeString": "struct Counters.Counter"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1092:25:9"
									},
									"returnParameters": {
										"id": 1167,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1127:0:9"
									},
									"scope": 1204,
									"src": "1074:229:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1202,
										"nodeType": "Block",
										"src": "1358:35:9",
										"statements": [
											{
												"expression": {
													"id": 1200,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1196,
															"name": "counter",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1193,
															"src": "1368:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Counter_$1136_storage_ptr",
																"typeString": "struct Counters.Counter storage pointer"
															}
														},
														"id": 1198,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "1376:6:9",
														"memberName": "_value",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1135,
														"src": "1368:14:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 1199,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1385:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1368:18:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1201,
												"nodeType": "ExpressionStatement",
												"src": "1368:18:9"
											}
										]
									},
									"id": 1203,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "reset",
									"nameLocation": "1318:5:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1194,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1193,
												"mutability": "mutable",
												"name": "counter",
												"nameLocation": "1340:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1203,
												"src": "1324:23:9",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Counter_$1136_storage_ptr",
													"typeString": "struct Counters.Counter"
												},
												"typeName": {
													"id": 1192,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1191,
														"name": "Counter",
														"nameLocations": [
															"1324:7:9"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1136,
														"src": "1324:7:9"
													},
													"referencedDeclaration": 1136,
													"src": "1324:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Counter_$1136_storage_ptr",
														"typeString": "struct Counters.Counter"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1323:25:9"
									},
									"returnParameters": {
										"id": 1195,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1358:0:9"
									},
									"scope": 1204,
									"src": "1309:84:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1205,
							"src": "424:971:9",
							"usedErrors": []
						}
					],
					"src": "87:1309:9"
				},
				"id": 9
			},
			"@openzeppelin/contracts/utils/ShortStrings.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/ShortStrings.sol",
					"exportedSymbols": {
						"ShortString": [
							1209
						],
						"ShortStrings": [
							1420
						],
						"StorageSlot": [
							1530
						]
					},
					"id": 1421,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1206,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".8"
							],
							"nodeType": "PragmaDirective",
							"src": "106:23:10"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/StorageSlot.sol",
							"file": "./StorageSlot.sol",
							"id": 1207,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1421,
							"sourceUnit": 1531,
							"src": "131:27:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"canonicalName": "ShortString",
							"id": 1209,
							"name": "ShortString",
							"nameLocation": "333:11:10",
							"nodeType": "UserDefinedValueTypeDefinition",
							"src": "328:28:10",
							"underlyingType": {
								"id": 1208,
								"name": "bytes32",
								"nodeType": "ElementaryTypeName",
								"src": "348:7:10",
								"typeDescriptions": {
									"typeIdentifier": "t_bytes32",
									"typeString": "bytes32"
								}
							}
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ShortStrings",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1210,
								"nodeType": "StructuredDocumentation",
								"src": "358:876:10",
								"text": " @dev This library provides functions to convert short memory strings\n into a `ShortString` type that can be used as an immutable variable.\n Strings of arbitrary length can be optimized using this library if\n they are short enough (up to 31 bytes) by packing them with their\n length (1 byte) in a single EVM word (32 bytes). Additionally, a\n fallback mechanism can be used for every other case.\n Usage example:\n ```solidity\n contract Named {\n     using ShortStrings for *;\n     ShortString private immutable _name;\n     string private _nameFallback;\n     constructor(string memory contractName) {\n         _name = contractName.toShortStringWithFallback(_nameFallback);\n     }\n     function name() external view returns (string memory) {\n         return _name.toStringWithFallback(_nameFallback);\n     }\n }\n ```"
							},
							"fullyImplemented": true,
							"id": 1420,
							"linearizedBaseContracts": [
								1420
							],
							"name": "ShortStrings",
							"nameLocation": "1243:12:10",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 1213,
									"mutability": "constant",
									"name": "_FALLBACK_SENTINEL",
									"nameLocation": "1350:18:10",
									"nodeType": "VariableDeclaration",
									"scope": 1420,
									"src": "1325:112:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 1211,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "1325:7:10",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030304646",
										"id": 1212,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1371:66:10",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_255_by_1",
											"typeString": "int_const 255"
										},
										"value": "0x00000000000000000000000000000000000000000000000000000000000000FF"
									},
									"visibility": "private"
								},
								{
									"errorSelector": "305a27a9",
									"id": 1217,
									"name": "StringTooLong",
									"nameLocation": "1450:13:10",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1216,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1215,
												"mutability": "mutable",
												"name": "str",
												"nameLocation": "1471:3:10",
												"nodeType": "VariableDeclaration",
												"scope": 1217,
												"src": "1464:10:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1214,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1464:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1463:12:10"
									},
									"src": "1444:32:10"
								},
								{
									"errorSelector": "b3512b0c",
									"id": 1219,
									"name": "InvalidShortString",
									"nameLocation": "1487:18:10",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1218,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1505:2:10"
									},
									"src": "1481:27:10"
								},
								{
									"body": {
										"id": 1262,
										"nodeType": "Block",
										"src": "1767:208:10",
										"statements": [
											{
												"assignments": [
													1229
												],
												"declarations": [
													{
														"constant": false,
														"id": 1229,
														"mutability": "mutable",
														"name": "bstr",
														"nameLocation": "1790:4:10",
														"nodeType": "VariableDeclaration",
														"scope": 1262,
														"src": "1777:17:10",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1228,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1777:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1234,
												"initialValue": {
													"arguments": [
														{
															"id": 1232,
															"name": "str",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1222,
															"src": "1803:3:10",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1231,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "1797:5:10",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
															"typeString": "type(bytes storage pointer)"
														},
														"typeName": {
															"id": 1230,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1797:5:10",
															"typeDescriptions": {}
														}
													},
													"id": 1233,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1797:10:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1777:30:10"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1238,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1235,
															"name": "bstr",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1229,
															"src": "1821:4:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1236,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1826:6:10",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1821:11:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "3331",
														"id": 1237,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1835:2:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_31_by_1",
															"typeString": "int_const 31"
														},
														"value": "31"
													},
													"src": "1821:16:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1244,
												"nodeType": "IfStatement",
												"src": "1817:72:10",
												"trueBody": {
													"id": 1243,
													"nodeType": "Block",
													"src": "1839:50:10",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1240,
																		"name": "str",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1222,
																		"src": "1874:3:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1239,
																	"name": "StringTooLong",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1217,
																	"src": "1860:13:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (string memory) pure"
																	}
																},
																"id": 1241,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1860:18:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1242,
															"nodeType": "RevertStatement",
															"src": "1853:25:10"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1258,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"id": 1253,
																						"name": "bstr",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1229,
																						"src": "1946:4:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes_memory_ptr",
																							"typeString": "bytes memory"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_bytes_memory_ptr",
																							"typeString": "bytes memory"
																						}
																					],
																					"id": 1252,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "1938:7:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_bytes32_$",
																						"typeString": "type(bytes32)"
																					},
																					"typeName": {
																						"id": 1251,
																						"name": "bytes32",
																						"nodeType": "ElementaryTypeName",
																						"src": "1938:7:10",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 1254,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "1938:13:10",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			],
																			"id": 1250,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "1930:7:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_uint256_$",
																				"typeString": "type(uint256)"
																			},
																			"typeName": {
																				"id": 1249,
																				"name": "uint256",
																				"nodeType": "ElementaryTypeName",
																				"src": "1930:7:10",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1255,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1930:22:10",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "|",
																	"rightExpression": {
																		"expression": {
																			"id": 1256,
																			"name": "bstr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1229,
																			"src": "1955:4:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		},
																		"id": 1257,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "1960:6:10",
																		"memberName": "length",
																		"nodeType": "MemberAccess",
																		"src": "1955:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1930:36:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1248,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1922:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 1247,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "1922:7:10",
																	"typeDescriptions": {}
																}
															},
															"id": 1259,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1922:45:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 1245,
															"name": "ShortString",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1209,
															"src": "1905:11:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_userDefinedValueType$_ShortString_$1209_$",
																"typeString": "type(ShortString)"
															}
														},
														"id": 1246,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "1917:4:10",
														"memberName": "wrap",
														"nodeType": "MemberAccess",
														"src": "1905:16:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_wrap_pure$_t_bytes32_$returns$_t_userDefinedValueType$_ShortString_$1209_$",
															"typeString": "function (bytes32) pure returns (ShortString)"
														}
													},
													"id": 1260,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1905:63:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1209",
														"typeString": "ShortString"
													}
												},
												"functionReturnParameters": 1227,
												"id": 1261,
												"nodeType": "Return",
												"src": "1898:70:10"
											}
										]
									},
									"documentation": {
										"id": 1220,
										"nodeType": "StructuredDocumentation",
										"src": "1514:170:10",
										"text": " @dev Encode a string of at most 31 chars into a `ShortString`.\n This will trigger a `StringTooLong` error is the input string is too long."
									},
									"id": 1263,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toShortString",
									"nameLocation": "1698:13:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1223,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1222,
												"mutability": "mutable",
												"name": "str",
												"nameLocation": "1726:3:10",
												"nodeType": "VariableDeclaration",
												"scope": 1263,
												"src": "1712:17:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1221,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1712:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1711:19:10"
									},
									"returnParameters": {
										"id": 1227,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1226,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1263,
												"src": "1754:11:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_ShortString_$1209",
													"typeString": "ShortString"
												},
												"typeName": {
													"id": 1225,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1224,
														"name": "ShortString",
														"nameLocations": [
															"1754:11:10"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1209,
														"src": "1754:11:10"
													},
													"referencedDeclaration": 1209,
													"src": "1754:11:10",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1209",
														"typeString": "ShortString"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1753:13:10"
									},
									"scope": 1420,
									"src": "1689:286:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1288,
										"nodeType": "Block",
										"src": "2133:331:10",
										"statements": [
											{
												"assignments": [
													1273
												],
												"declarations": [
													{
														"constant": false,
														"id": 1273,
														"mutability": "mutable",
														"name": "len",
														"nameLocation": "2151:3:10",
														"nodeType": "VariableDeclaration",
														"scope": 1288,
														"src": "2143:11:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1272,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2143:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1277,
												"initialValue": {
													"arguments": [
														{
															"id": 1275,
															"name": "sstr",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1267,
															"src": "2168:4:10",
															"typeDescriptions": {
																"typeIdentifier": "t_userDefinedValueType$_ShortString_$1209",
																"typeString": "ShortString"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_userDefinedValueType$_ShortString_$1209",
																"typeString": "ShortString"
															}
														],
														"id": 1274,
														"name": "byteLength",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1321,
														"src": "2157:10:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_userDefinedValueType$_ShortString_$1209_$returns$_t_uint256_$",
															"typeString": "function (ShortString) pure returns (uint256)"
														}
													},
													"id": 1276,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2157:16:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2143:30:10"
											},
											{
												"assignments": [
													1279
												],
												"declarations": [
													{
														"constant": false,
														"id": 1279,
														"mutability": "mutable",
														"name": "str",
														"nameLocation": "2275:3:10",
														"nodeType": "VariableDeclaration",
														"scope": 1288,
														"src": "2261:17:10",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string"
														},
														"typeName": {
															"id": 1278,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "2261:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage_ptr",
																"typeString": "string"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1284,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "3332",
															"id": 1282,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2292:2:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_32_by_1",
																"typeString": "int_const 32"
															},
															"value": "32"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_rational_32_by_1",
																"typeString": "int_const 32"
															}
														],
														"id": 1281,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "2281:10:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
															"typeString": "function (uint256) pure returns (string memory)"
														},
														"typeName": {
															"id": 1280,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "2285:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage_ptr",
																"typeString": "string"
															}
														}
													},
													"id": 1283,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2281:14:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2261:34:10"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2357:81:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "str",
																		"nodeType": "YulIdentifier",
																		"src": "2378:3:10"
																	},
																	{
																		"name": "len",
																		"nodeType": "YulIdentifier",
																		"src": "2383:3:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2371:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2371:16:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2371:16:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "str",
																				"nodeType": "YulIdentifier",
																				"src": "2411:3:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2416:4:10",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2407:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2407:14:10"
																	},
																	{
																		"name": "sstr",
																		"nodeType": "YulIdentifier",
																		"src": "2423:4:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2400:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2400:28:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2400:28:10"
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "paris",
												"externalReferences": [
													{
														"declaration": 1273,
														"isOffset": false,
														"isSlot": false,
														"src": "2383:3:10",
														"valueSize": 1
													},
													{
														"declaration": 1267,
														"isOffset": false,
														"isSlot": false,
														"src": "2423:4:10",
														"valueSize": 1
													},
													{
														"declaration": 1279,
														"isOffset": false,
														"isSlot": false,
														"src": "2378:3:10",
														"valueSize": 1
													},
													{
														"declaration": 1279,
														"isOffset": false,
														"isSlot": false,
														"src": "2411:3:10",
														"valueSize": 1
													}
												],
												"id": 1285,
												"nodeType": "InlineAssembly",
												"src": "2348:90:10"
											},
											{
												"expression": {
													"id": 1286,
													"name": "str",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1279,
													"src": "2454:3:10",
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1271,
												"id": 1287,
												"nodeType": "Return",
												"src": "2447:10:10"
											}
										]
									},
									"documentation": {
										"id": 1264,
										"nodeType": "StructuredDocumentation",
										"src": "1981:73:10",
										"text": " @dev Decode a `ShortString` back to a \"normal\" string."
									},
									"id": 1289,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toString",
									"nameLocation": "2068:8:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1268,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1267,
												"mutability": "mutable",
												"name": "sstr",
												"nameLocation": "2089:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 1289,
												"src": "2077:16:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_ShortString_$1209",
													"typeString": "ShortString"
												},
												"typeName": {
													"id": 1266,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1265,
														"name": "ShortString",
														"nameLocations": [
															"2077:11:10"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1209,
														"src": "2077:11:10"
													},
													"referencedDeclaration": 1209,
													"src": "2077:11:10",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1209",
														"typeString": "ShortString"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2076:18:10"
									},
									"returnParameters": {
										"id": 1271,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1270,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1289,
												"src": "2118:13:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1269,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2118:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2117:15:10"
									},
									"scope": 1420,
									"src": "2059:405:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1320,
										"nodeType": "Block",
										"src": "2606:175:10",
										"statements": [
											{
												"assignments": [
													1299
												],
												"declarations": [
													{
														"constant": false,
														"id": 1299,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "2624:6:10",
														"nodeType": "VariableDeclaration",
														"scope": 1320,
														"src": "2616:14:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1298,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2616:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1309,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1308,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 1304,
																		"name": "sstr",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1293,
																		"src": "2660:4:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_userDefinedValueType$_ShortString_$1209",
																			"typeString": "ShortString"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_userDefinedValueType$_ShortString_$1209",
																			"typeString": "ShortString"
																		}
																	],
																	"expression": {
																		"id": 1302,
																		"name": "ShortString",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1209,
																		"src": "2641:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_userDefinedValueType$_ShortString_$1209_$",
																			"typeString": "type(ShortString)"
																		}
																	},
																	"id": 1303,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "2653:6:10",
																	"memberName": "unwrap",
																	"nodeType": "MemberAccess",
																	"src": "2641:18:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_unwrap_pure$_t_userDefinedValueType$_ShortString_$1209_$returns$_t_bytes32_$",
																		"typeString": "function (ShortString) pure returns (bytes32)"
																	}
																},
																"id": 1305,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2641:24:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 1301,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "2633:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 1300,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "2633:7:10",
																"typeDescriptions": {}
															}
														},
														"id": 1306,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2633:33:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&",
													"rightExpression": {
														"hexValue": "30784646",
														"id": 1307,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2669:4:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_255_by_1",
															"typeString": "int_const 255"
														},
														"value": "0xFF"
													},
													"src": "2633:40:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2616:57:10"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1312,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1310,
														"name": "result",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1299,
														"src": "2687:6:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "3331",
														"id": 1311,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2696:2:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_31_by_1",
															"typeString": "int_const 31"
														},
														"value": "31"
													},
													"src": "2687:11:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1317,
												"nodeType": "IfStatement",
												"src": "2683:69:10",
												"trueBody": {
													"id": 1316,
													"nodeType": "Block",
													"src": "2700:52:10",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1313,
																	"name": "InvalidShortString",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1219,
																	"src": "2721:18:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1314,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2721:20:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1315,
															"nodeType": "RevertStatement",
															"src": "2714:27:10"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1318,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1299,
													"src": "2768:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1297,
												"id": 1319,
												"nodeType": "Return",
												"src": "2761:13:10"
											}
										]
									},
									"documentation": {
										"id": 1290,
										"nodeType": "StructuredDocumentation",
										"src": "2470:61:10",
										"text": " @dev Return the length of a `ShortString`."
									},
									"id": 1321,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "byteLength",
									"nameLocation": "2545:10:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1294,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1293,
												"mutability": "mutable",
												"name": "sstr",
												"nameLocation": "2568:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 1321,
												"src": "2556:16:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_ShortString_$1209",
													"typeString": "ShortString"
												},
												"typeName": {
													"id": 1292,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1291,
														"name": "ShortString",
														"nameLocations": [
															"2556:11:10"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1209,
														"src": "2556:11:10"
													},
													"referencedDeclaration": 1209,
													"src": "2556:11:10",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1209",
														"typeString": "ShortString"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2555:18:10"
									},
									"returnParameters": {
										"id": 1297,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1296,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1321,
												"src": "2597:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1295,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2597:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2596:9:10"
									},
									"scope": 1420,
									"src": "2536:245:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1360,
										"nodeType": "Block",
										"src": "3004:232:10",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1338,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 1334,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1324,
																	"src": "3024:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 1333,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3018:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																	"typeString": "type(bytes storage pointer)"
																},
																"typeName": {
																	"id": 1332,
																	"name": "bytes",
																	"nodeType": "ElementaryTypeName",
																	"src": "3018:5:10",
																	"typeDescriptions": {}
																}
															},
															"id": 1335,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3018:12:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1336,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3031:6:10",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "3018:19:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"hexValue": "3332",
														"id": 1337,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3040:2:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_32_by_1",
															"typeString": "int_const 32"
														},
														"value": "32"
													},
													"src": "3018:24:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1358,
													"nodeType": "Block",
													"src": "3102:128:10",
													"statements": [
														{
															"expression": {
																"id": 1351,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"arguments": [
																			{
																				"id": 1347,
																				"name": "store",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1326,
																				"src": "3142:5:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_string_storage_ptr",
																					"typeString": "string storage pointer"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_string_storage_ptr",
																					"typeString": "string storage pointer"
																				}
																			],
																			"expression": {
																				"id": 1344,
																				"name": "StorageSlot",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1530,
																				"src": "3116:11:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_StorageSlot_$1530_$",
																					"typeString": "type(library StorageSlot)"
																				}
																			},
																			"id": 1346,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "3128:13:10",
																			"memberName": "getStringSlot",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 1507,
																			"src": "3116:25:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_string_storage_ptr_$returns$_t_struct$_StringSlot_$1438_storage_ptr_$",
																				"typeString": "function (string storage pointer) pure returns (struct StorageSlot.StringSlot storage pointer)"
																			}
																		},
																		"id": 1348,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3116:32:10",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_StringSlot_$1438_storage_ptr",
																			"typeString": "struct StorageSlot.StringSlot storage pointer"
																		}
																	},
																	"id": 1349,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "3149:5:10",
																	"memberName": "value",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1437,
																	"src": "3116:38:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_storage",
																		"typeString": "string storage ref"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"id": 1350,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1324,
																	"src": "3157:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																},
																"src": "3116:46:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_storage",
																	"typeString": "string storage ref"
																}
															},
															"id": 1352,
															"nodeType": "ExpressionStatement",
															"src": "3116:46:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1355,
																		"name": "_FALLBACK_SENTINEL",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1213,
																		"src": "3200:18:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	],
																	"expression": {
																		"id": 1353,
																		"name": "ShortString",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1209,
																		"src": "3183:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_userDefinedValueType$_ShortString_$1209_$",
																			"typeString": "type(ShortString)"
																		}
																	},
																	"id": 1354,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "3195:4:10",
																	"memberName": "wrap",
																	"nodeType": "MemberAccess",
																	"src": "3183:16:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_wrap_pure$_t_bytes32_$returns$_t_userDefinedValueType$_ShortString_$1209_$",
																		"typeString": "function (bytes32) pure returns (ShortString)"
																	}
																},
																"id": 1356,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3183:36:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_userDefinedValueType$_ShortString_$1209",
																	"typeString": "ShortString"
																}
															},
															"functionReturnParameters": 1331,
															"id": 1357,
															"nodeType": "Return",
															"src": "3176:43:10"
														}
													]
												},
												"id": 1359,
												"nodeType": "IfStatement",
												"src": "3014:216:10",
												"trueBody": {
													"id": 1343,
													"nodeType": "Block",
													"src": "3044:52:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1340,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1324,
																		"src": "3079:5:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1339,
																	"name": "toShortString",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1263,
																	"src": "3065:13:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$returns$_t_userDefinedValueType$_ShortString_$1209_$",
																		"typeString": "function (string memory) pure returns (ShortString)"
																	}
																},
																"id": 1341,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3065:20:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_userDefinedValueType$_ShortString_$1209",
																	"typeString": "ShortString"
																}
															},
															"functionReturnParameters": 1331,
															"id": 1342,
															"nodeType": "Return",
															"src": "3058:27:10"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1322,
										"nodeType": "StructuredDocumentation",
										"src": "2787:103:10",
										"text": " @dev Encode a string into a `ShortString`, or write it to storage if it is too long."
									},
									"id": 1361,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toShortStringWithFallback",
									"nameLocation": "2904:25:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1327,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1324,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2944:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1361,
												"src": "2930:19:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1323,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2930:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1326,
												"mutability": "mutable",
												"name": "store",
												"nameLocation": "2966:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1361,
												"src": "2951:20:10",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1325,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2951:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2929:43:10"
									},
									"returnParameters": {
										"id": 1331,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1330,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1361,
												"src": "2991:11:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_ShortString_$1209",
													"typeString": "ShortString"
												},
												"typeName": {
													"id": 1329,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1328,
														"name": "ShortString",
														"nameLocations": [
															"2991:11:10"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1209,
														"src": "2991:11:10"
													},
													"referencedDeclaration": 1209,
													"src": "2991:11:10",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1209",
														"typeString": "ShortString"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2990:13:10"
									},
									"scope": 1420,
									"src": "2895:341:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1387,
										"nodeType": "Block",
										"src": "3476:159:10",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 1377,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1374,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1365,
																"src": "3509:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_userDefinedValueType$_ShortString_$1209",
																	"typeString": "ShortString"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_userDefinedValueType$_ShortString_$1209",
																	"typeString": "ShortString"
																}
															],
															"expression": {
																"id": 1372,
																"name": "ShortString",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1209,
																"src": "3490:11:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_userDefinedValueType$_ShortString_$1209_$",
																	"typeString": "type(ShortString)"
																}
															},
															"id": 1373,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "3502:6:10",
															"memberName": "unwrap",
															"nodeType": "MemberAccess",
															"src": "3490:18:10",
															"typeDescriptions": {
																"typeIdentifier": "t_function_unwrap_pure$_t_userDefinedValueType$_ShortString_$1209_$returns$_t_bytes32_$",
																"typeString": "function (ShortString) pure returns (bytes32)"
															}
														},
														"id": 1375,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3490:25:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 1376,
														"name": "_FALLBACK_SENTINEL",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1213,
														"src": "3519:18:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "3490:47:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1385,
													"nodeType": "Block",
													"src": "3592:37:10",
													"statements": [
														{
															"expression": {
																"id": 1383,
																"name": "store",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1367,
																"src": "3613:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_storage_ptr",
																	"typeString": "string storage pointer"
																}
															},
															"functionReturnParameters": 1371,
															"id": 1384,
															"nodeType": "Return",
															"src": "3606:12:10"
														}
													]
												},
												"id": 1386,
												"nodeType": "IfStatement",
												"src": "3486:143:10",
												"trueBody": {
													"id": 1382,
													"nodeType": "Block",
													"src": "3539:47:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1379,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1365,
																		"src": "3569:5:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_userDefinedValueType$_ShortString_$1209",
																			"typeString": "ShortString"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_userDefinedValueType$_ShortString_$1209",
																			"typeString": "ShortString"
																		}
																	],
																	"id": 1378,
																	"name": "toString",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1289,
																	"src": "3560:8:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_userDefinedValueType$_ShortString_$1209_$returns$_t_string_memory_ptr_$",
																		"typeString": "function (ShortString) pure returns (string memory)"
																	}
																},
																"id": 1380,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3560:15:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string memory"
																}
															},
															"functionReturnParameters": 1371,
															"id": 1381,
															"nodeType": "Return",
															"src": "3553:22:10"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1362,
										"nodeType": "StructuredDocumentation",
										"src": "3242:120:10",
										"text": " @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}."
									},
									"id": 1388,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toStringWithFallback",
									"nameLocation": "3376:20:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1368,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1365,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3409:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1388,
												"src": "3397:17:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_ShortString_$1209",
													"typeString": "ShortString"
												},
												"typeName": {
													"id": 1364,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1363,
														"name": "ShortString",
														"nameLocations": [
															"3397:11:10"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1209,
														"src": "3397:11:10"
													},
													"referencedDeclaration": 1209,
													"src": "3397:11:10",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1209",
														"typeString": "ShortString"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1367,
												"mutability": "mutable",
												"name": "store",
												"nameLocation": "3431:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1388,
												"src": "3416:20:10",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1366,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3416:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3396:41:10"
									},
									"returnParameters": {
										"id": 1371,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1370,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1388,
												"src": "3461:13:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1369,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3461:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3460:15:10"
									},
									"scope": 1420,
									"src": "3367:268:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1418,
										"nodeType": "Block",
										"src": "4108:175:10",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 1404,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1401,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1392,
																"src": "4141:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_userDefinedValueType$_ShortString_$1209",
																	"typeString": "ShortString"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_userDefinedValueType$_ShortString_$1209",
																	"typeString": "ShortString"
																}
															],
															"expression": {
																"id": 1399,
																"name": "ShortString",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1209,
																"src": "4122:11:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_userDefinedValueType$_ShortString_$1209_$",
																	"typeString": "type(ShortString)"
																}
															},
															"id": 1400,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "4134:6:10",
															"memberName": "unwrap",
															"nodeType": "MemberAccess",
															"src": "4122:18:10",
															"typeDescriptions": {
																"typeIdentifier": "t_function_unwrap_pure$_t_userDefinedValueType$_ShortString_$1209_$returns$_t_bytes32_$",
																"typeString": "function (ShortString) pure returns (bytes32)"
															}
														},
														"id": 1402,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4122:25:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 1403,
														"name": "_FALLBACK_SENTINEL",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1213,
														"src": "4151:18:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "4122:47:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1416,
													"nodeType": "Block",
													"src": "4226:51:10",
													"statements": [
														{
															"expression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 1412,
																			"name": "store",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1394,
																			"src": "4253:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_string_storage_ptr",
																				"typeString": "string storage pointer"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_string_storage_ptr",
																				"typeString": "string storage pointer"
																			}
																		],
																		"id": 1411,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "4247:5:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																			"typeString": "type(bytes storage pointer)"
																		},
																		"typeName": {
																			"id": 1410,
																			"name": "bytes",
																			"nodeType": "ElementaryTypeName",
																			"src": "4247:5:10",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1413,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4247:12:10",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_storage_ptr",
																		"typeString": "bytes storage pointer"
																	}
																},
																"id": 1414,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "4260:6:10",
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "4247:19:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 1398,
															"id": 1415,
															"nodeType": "Return",
															"src": "4240:26:10"
														}
													]
												},
												"id": 1417,
												"nodeType": "IfStatement",
												"src": "4118:159:10",
												"trueBody": {
													"id": 1409,
													"nodeType": "Block",
													"src": "4171:49:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1406,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1392,
																		"src": "4203:5:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_userDefinedValueType$_ShortString_$1209",
																			"typeString": "ShortString"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_userDefinedValueType$_ShortString_$1209",
																			"typeString": "ShortString"
																		}
																	],
																	"id": 1405,
																	"name": "byteLength",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1321,
																	"src": "4192:10:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_userDefinedValueType$_ShortString_$1209_$returns$_t_uint256_$",
																		"typeString": "function (ShortString) pure returns (uint256)"
																	}
																},
																"id": 1407,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4192:17:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 1398,
															"id": 1408,
															"nodeType": "Return",
															"src": "4185:24:10"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1389,
										"nodeType": "StructuredDocumentation",
										"src": "3641:357:10",
										"text": " @dev Return the length of a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\n WARNING: This will return the \"byte length\" of the string. This may not reflect the actual length in terms of\n actual characters as the UTF-8 encoding of a single character can span over multiple bytes."
									},
									"id": 1419,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "byteLengthWithFallback",
									"nameLocation": "4012:22:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1395,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1392,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4047:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1419,
												"src": "4035:17:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_ShortString_$1209",
													"typeString": "ShortString"
												},
												"typeName": {
													"id": 1391,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1390,
														"name": "ShortString",
														"nameLocations": [
															"4035:11:10"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1209,
														"src": "4035:11:10"
													},
													"referencedDeclaration": 1209,
													"src": "4035:11:10",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1209",
														"typeString": "ShortString"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1394,
												"mutability": "mutable",
												"name": "store",
												"nameLocation": "4069:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1419,
												"src": "4054:20:10",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1393,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4054:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4034:41:10"
									},
									"returnParameters": {
										"id": 1398,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1397,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1419,
												"src": "4099:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1396,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4099:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4098:9:10"
									},
									"scope": 1420,
									"src": "4003:280:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1421,
							"src": "1235:3050:10",
							"usedErrors": [
								1217,
								1219
							]
						}
					],
					"src": "106:4180:10"
				},
				"id": 10
			},
			"@openzeppelin/contracts/utils/StorageSlot.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/StorageSlot.sol",
					"exportedSymbols": {
						"StorageSlot": [
							1530
						]
					},
					"id": 1531,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1422,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "193:23:11"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "StorageSlot",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1423,
								"nodeType": "StructuredDocumentation",
								"src": "218:1201:11",
								"text": " @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC1967 implementation slot:\n ```solidity\n contract ERC1967 {\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```\n _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n _Available since v4.9 for `string`, `bytes`._"
							},
							"fullyImplemented": true,
							"id": 1530,
							"linearizedBaseContracts": [
								1530
							],
							"name": "StorageSlot",
							"nameLocation": "1428:11:11",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "StorageSlot.AddressSlot",
									"id": 1426,
									"members": [
										{
											"constant": false,
											"id": 1425,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1483:5:11",
											"nodeType": "VariableDeclaration",
											"scope": 1426,
											"src": "1475:13:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1424,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1475:7:11",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "AddressSlot",
									"nameLocation": "1453:11:11",
									"nodeType": "StructDefinition",
									"scope": 1530,
									"src": "1446:49:11",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlot.BooleanSlot",
									"id": 1429,
									"members": [
										{
											"constant": false,
											"id": 1428,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1535:5:11",
											"nodeType": "VariableDeclaration",
											"scope": 1429,
											"src": "1530:10:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 1427,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1530:4:11",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "BooleanSlot",
									"nameLocation": "1508:11:11",
									"nodeType": "StructDefinition",
									"scope": 1530,
									"src": "1501:46:11",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlot.Bytes32Slot",
									"id": 1432,
									"members": [
										{
											"constant": false,
											"id": 1431,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1590:5:11",
											"nodeType": "VariableDeclaration",
											"scope": 1432,
											"src": "1582:13:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 1430,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "1582:7:11",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Bytes32Slot",
									"nameLocation": "1560:11:11",
									"nodeType": "StructDefinition",
									"scope": 1530,
									"src": "1553:49:11",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlot.Uint256Slot",
									"id": 1435,
									"members": [
										{
											"constant": false,
											"id": 1434,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1645:5:11",
											"nodeType": "VariableDeclaration",
											"scope": 1435,
											"src": "1637:13:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1433,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1637:7:11",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Uint256Slot",
									"nameLocation": "1615:11:11",
									"nodeType": "StructDefinition",
									"scope": 1530,
									"src": "1608:49:11",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlot.StringSlot",
									"id": 1438,
									"members": [
										{
											"constant": false,
											"id": 1437,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1698:5:11",
											"nodeType": "VariableDeclaration",
											"scope": 1438,
											"src": "1691:12:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_string_storage_ptr",
												"typeString": "string"
											},
											"typeName": {
												"id": 1436,
												"name": "string",
												"nodeType": "ElementaryTypeName",
												"src": "1691:6:11",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "StringSlot",
									"nameLocation": "1670:10:11",
									"nodeType": "StructDefinition",
									"scope": 1530,
									"src": "1663:47:11",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlot.BytesSlot",
									"id": 1441,
									"members": [
										{
											"constant": false,
											"id": 1440,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1749:5:11",
											"nodeType": "VariableDeclaration",
											"scope": 1441,
											"src": "1743:11:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 1439,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "1743:5:11",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "BytesSlot",
									"nameLocation": "1723:9:11",
									"nodeType": "StructDefinition",
									"scope": 1530,
									"src": "1716:45:11",
									"visibility": "public"
								},
								{
									"body": {
										"id": 1451,
										"nodeType": "Block",
										"src": "1943:106:11",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2005:38:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2019:14:11",
															"value": {
																"name": "slot",
																"nodeType": "YulIdentifier",
																"src": "2029:4:11"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nodeType": "YulIdentifier",
																	"src": "2019:6:11"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "paris",
												"externalReferences": [
													{
														"declaration": 1448,
														"isOffset": false,
														"isSlot": true,
														"src": "2019:6:11",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1444,
														"isOffset": false,
														"isSlot": false,
														"src": "2029:4:11",
														"valueSize": 1
													}
												],
												"id": 1450,
												"nodeType": "InlineAssembly",
												"src": "1996:47:11"
											}
										]
									},
									"documentation": {
										"id": 1442,
										"nodeType": "StructuredDocumentation",
										"src": "1767:87:11",
										"text": " @dev Returns an `AddressSlot` with member `value` located at `slot`."
									},
									"id": 1452,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getAddressSlot",
									"nameLocation": "1868:14:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1445,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1444,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "1891:4:11",
												"nodeType": "VariableDeclaration",
												"scope": 1452,
												"src": "1883:12:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1443,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1883:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1882:14:11"
									},
									"returnParameters": {
										"id": 1449,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1448,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "1940:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 1452,
												"src": "1920:21:11",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_AddressSlot_$1426_storage_ptr",
													"typeString": "struct StorageSlot.AddressSlot"
												},
												"typeName": {
													"id": 1447,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1446,
														"name": "AddressSlot",
														"nameLocations": [
															"1920:11:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1426,
														"src": "1920:11:11"
													},
													"referencedDeclaration": 1426,
													"src": "1920:11:11",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_AddressSlot_$1426_storage_ptr",
														"typeString": "struct StorageSlot.AddressSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1919:23:11"
									},
									"scope": 1530,
									"src": "1859:190:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1462,
										"nodeType": "Block",
										"src": "2231:106:11",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2293:38:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2307:14:11",
															"value": {
																"name": "slot",
																"nodeType": "YulIdentifier",
																"src": "2317:4:11"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nodeType": "YulIdentifier",
																	"src": "2307:6:11"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "paris",
												"externalReferences": [
													{
														"declaration": 1459,
														"isOffset": false,
														"isSlot": true,
														"src": "2307:6:11",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1455,
														"isOffset": false,
														"isSlot": false,
														"src": "2317:4:11",
														"valueSize": 1
													}
												],
												"id": 1461,
												"nodeType": "InlineAssembly",
												"src": "2284:47:11"
											}
										]
									},
									"documentation": {
										"id": 1453,
										"nodeType": "StructuredDocumentation",
										"src": "2055:87:11",
										"text": " @dev Returns an `BooleanSlot` with member `value` located at `slot`."
									},
									"id": 1463,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBooleanSlot",
									"nameLocation": "2156:14:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1456,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1455,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "2179:4:11",
												"nodeType": "VariableDeclaration",
												"scope": 1463,
												"src": "2171:12:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1454,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2171:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2170:14:11"
									},
									"returnParameters": {
										"id": 1460,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1459,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "2228:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 1463,
												"src": "2208:21:11",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_BooleanSlot_$1429_storage_ptr",
													"typeString": "struct StorageSlot.BooleanSlot"
												},
												"typeName": {
													"id": 1458,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1457,
														"name": "BooleanSlot",
														"nameLocations": [
															"2208:11:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1429,
														"src": "2208:11:11"
													},
													"referencedDeclaration": 1429,
													"src": "2208:11:11",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_BooleanSlot_$1429_storage_ptr",
														"typeString": "struct StorageSlot.BooleanSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2207:23:11"
									},
									"scope": 1530,
									"src": "2147:190:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1473,
										"nodeType": "Block",
										"src": "2519:106:11",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2581:38:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2595:14:11",
															"value": {
																"name": "slot",
																"nodeType": "YulIdentifier",
																"src": "2605:4:11"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nodeType": "YulIdentifier",
																	"src": "2595:6:11"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "paris",
												"externalReferences": [
													{
														"declaration": 1470,
														"isOffset": false,
														"isSlot": true,
														"src": "2595:6:11",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1466,
														"isOffset": false,
														"isSlot": false,
														"src": "2605:4:11",
														"valueSize": 1
													}
												],
												"id": 1472,
												"nodeType": "InlineAssembly",
												"src": "2572:47:11"
											}
										]
									},
									"documentation": {
										"id": 1464,
										"nodeType": "StructuredDocumentation",
										"src": "2343:87:11",
										"text": " @dev Returns an `Bytes32Slot` with member `value` located at `slot`."
									},
									"id": 1474,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBytes32Slot",
									"nameLocation": "2444:14:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1467,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1466,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "2467:4:11",
												"nodeType": "VariableDeclaration",
												"scope": 1474,
												"src": "2459:12:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1465,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2459:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2458:14:11"
									},
									"returnParameters": {
										"id": 1471,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1470,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "2516:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 1474,
												"src": "2496:21:11",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Bytes32Slot_$1432_storage_ptr",
													"typeString": "struct StorageSlot.Bytes32Slot"
												},
												"typeName": {
													"id": 1469,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1468,
														"name": "Bytes32Slot",
														"nameLocations": [
															"2496:11:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1432,
														"src": "2496:11:11"
													},
													"referencedDeclaration": 1432,
													"src": "2496:11:11",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Bytes32Slot_$1432_storage_ptr",
														"typeString": "struct StorageSlot.Bytes32Slot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2495:23:11"
									},
									"scope": 1530,
									"src": "2435:190:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1484,
										"nodeType": "Block",
										"src": "2807:106:11",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2869:38:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2883:14:11",
															"value": {
																"name": "slot",
																"nodeType": "YulIdentifier",
																"src": "2893:4:11"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nodeType": "YulIdentifier",
																	"src": "2883:6:11"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "paris",
												"externalReferences": [
													{
														"declaration": 1481,
														"isOffset": false,
														"isSlot": true,
														"src": "2883:6:11",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1477,
														"isOffset": false,
														"isSlot": false,
														"src": "2893:4:11",
														"valueSize": 1
													}
												],
												"id": 1483,
												"nodeType": "InlineAssembly",
												"src": "2860:47:11"
											}
										]
									},
									"documentation": {
										"id": 1475,
										"nodeType": "StructuredDocumentation",
										"src": "2631:87:11",
										"text": " @dev Returns an `Uint256Slot` with member `value` located at `slot`."
									},
									"id": 1485,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getUint256Slot",
									"nameLocation": "2732:14:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1478,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1477,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "2755:4:11",
												"nodeType": "VariableDeclaration",
												"scope": 1485,
												"src": "2747:12:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1476,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2747:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2746:14:11"
									},
									"returnParameters": {
										"id": 1482,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1481,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "2804:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 1485,
												"src": "2784:21:11",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Uint256Slot_$1435_storage_ptr",
													"typeString": "struct StorageSlot.Uint256Slot"
												},
												"typeName": {
													"id": 1480,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1479,
														"name": "Uint256Slot",
														"nameLocations": [
															"2784:11:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1435,
														"src": "2784:11:11"
													},
													"referencedDeclaration": 1435,
													"src": "2784:11:11",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Uint256Slot_$1435_storage_ptr",
														"typeString": "struct StorageSlot.Uint256Slot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2783:23:11"
									},
									"scope": 1530,
									"src": "2723:190:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1495,
										"nodeType": "Block",
										"src": "3092:106:11",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "3154:38:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3168:14:11",
															"value": {
																"name": "slot",
																"nodeType": "YulIdentifier",
																"src": "3178:4:11"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nodeType": "YulIdentifier",
																	"src": "3168:6:11"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "paris",
												"externalReferences": [
													{
														"declaration": 1492,
														"isOffset": false,
														"isSlot": true,
														"src": "3168:6:11",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1488,
														"isOffset": false,
														"isSlot": false,
														"src": "3178:4:11",
														"valueSize": 1
													}
												],
												"id": 1494,
												"nodeType": "InlineAssembly",
												"src": "3145:47:11"
											}
										]
									},
									"documentation": {
										"id": 1486,
										"nodeType": "StructuredDocumentation",
										"src": "2919:86:11",
										"text": " @dev Returns an `StringSlot` with member `value` located at `slot`."
									},
									"id": 1496,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getStringSlot",
									"nameLocation": "3019:13:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1489,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1488,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "3041:4:11",
												"nodeType": "VariableDeclaration",
												"scope": 1496,
												"src": "3033:12:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1487,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3033:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3032:14:11"
									},
									"returnParameters": {
										"id": 1493,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1492,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3089:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 1496,
												"src": "3070:20:11",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_StringSlot_$1438_storage_ptr",
													"typeString": "struct StorageSlot.StringSlot"
												},
												"typeName": {
													"id": 1491,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1490,
														"name": "StringSlot",
														"nameLocations": [
															"3070:10:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1438,
														"src": "3070:10:11"
													},
													"referencedDeclaration": 1438,
													"src": "3070:10:11",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StringSlot_$1438_storage_ptr",
														"typeString": "struct StorageSlot.StringSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3069:22:11"
									},
									"scope": 1530,
									"src": "3010:188:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1506,
										"nodeType": "Block",
										"src": "3400:112:11",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "3462:44:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3476:20:11",
															"value": {
																"name": "store.slot",
																"nodeType": "YulIdentifier",
																"src": "3486:10:11"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nodeType": "YulIdentifier",
																	"src": "3476:6:11"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "paris",
												"externalReferences": [
													{
														"declaration": 1503,
														"isOffset": false,
														"isSlot": true,
														"src": "3476:6:11",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1499,
														"isOffset": false,
														"isSlot": true,
														"src": "3486:10:11",
														"suffix": "slot",
														"valueSize": 1
													}
												],
												"id": 1505,
												"nodeType": "InlineAssembly",
												"src": "3453:53:11"
											}
										]
									},
									"documentation": {
										"id": 1497,
										"nodeType": "StructuredDocumentation",
										"src": "3204:101:11",
										"text": " @dev Returns an `StringSlot` representation of the string storage pointer `store`."
									},
									"id": 1507,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getStringSlot",
									"nameLocation": "3319:13:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1500,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1499,
												"mutability": "mutable",
												"name": "store",
												"nameLocation": "3348:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 1507,
												"src": "3333:20:11",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1498,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3333:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3332:22:11"
									},
									"returnParameters": {
										"id": 1504,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1503,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3397:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 1507,
												"src": "3378:20:11",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_StringSlot_$1438_storage_ptr",
													"typeString": "struct StorageSlot.StringSlot"
												},
												"typeName": {
													"id": 1502,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1501,
														"name": "StringSlot",
														"nameLocations": [
															"3378:10:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1438,
														"src": "3378:10:11"
													},
													"referencedDeclaration": 1438,
													"src": "3378:10:11",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StringSlot_$1438_storage_ptr",
														"typeString": "struct StorageSlot.StringSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3377:22:11"
									},
									"scope": 1530,
									"src": "3310:202:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1517,
										"nodeType": "Block",
										"src": "3688:106:11",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "3750:38:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3764:14:11",
															"value": {
																"name": "slot",
																"nodeType": "YulIdentifier",
																"src": "3774:4:11"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nodeType": "YulIdentifier",
																	"src": "3764:6:11"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "paris",
												"externalReferences": [
													{
														"declaration": 1514,
														"isOffset": false,
														"isSlot": true,
														"src": "3764:6:11",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1510,
														"isOffset": false,
														"isSlot": false,
														"src": "3774:4:11",
														"valueSize": 1
													}
												],
												"id": 1516,
												"nodeType": "InlineAssembly",
												"src": "3741:47:11"
											}
										]
									},
									"documentation": {
										"id": 1508,
										"nodeType": "StructuredDocumentation",
										"src": "3518:85:11",
										"text": " @dev Returns an `BytesSlot` with member `value` located at `slot`."
									},
									"id": 1518,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBytesSlot",
									"nameLocation": "3617:12:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1511,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1510,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "3638:4:11",
												"nodeType": "VariableDeclaration",
												"scope": 1518,
												"src": "3630:12:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1509,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3630:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3629:14:11"
									},
									"returnParameters": {
										"id": 1515,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1514,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3685:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 1518,
												"src": "3667:19:11",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_BytesSlot_$1441_storage_ptr",
													"typeString": "struct StorageSlot.BytesSlot"
												},
												"typeName": {
													"id": 1513,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1512,
														"name": "BytesSlot",
														"nameLocations": [
															"3667:9:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1441,
														"src": "3667:9:11"
													},
													"referencedDeclaration": 1441,
													"src": "3667:9:11",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_BytesSlot_$1441_storage_ptr",
														"typeString": "struct StorageSlot.BytesSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3666:21:11"
									},
									"scope": 1530,
									"src": "3608:186:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1528,
										"nodeType": "Block",
										"src": "3991:112:11",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "4053:44:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4067:20:11",
															"value": {
																"name": "store.slot",
																"nodeType": "YulIdentifier",
																"src": "4077:10:11"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nodeType": "YulIdentifier",
																	"src": "4067:6:11"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "paris",
												"externalReferences": [
													{
														"declaration": 1525,
														"isOffset": false,
														"isSlot": true,
														"src": "4067:6:11",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1521,
														"isOffset": false,
														"isSlot": true,
														"src": "4077:10:11",
														"suffix": "slot",
														"valueSize": 1
													}
												],
												"id": 1527,
												"nodeType": "InlineAssembly",
												"src": "4044:53:11"
											}
										]
									},
									"documentation": {
										"id": 1519,
										"nodeType": "StructuredDocumentation",
										"src": "3800:99:11",
										"text": " @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`."
									},
									"id": 1529,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBytesSlot",
									"nameLocation": "3913:12:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1522,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1521,
												"mutability": "mutable",
												"name": "store",
												"nameLocation": "3940:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 1529,
												"src": "3926:19:11",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1520,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3926:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3925:21:11"
									},
									"returnParameters": {
										"id": 1526,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1525,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3988:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 1529,
												"src": "3970:19:11",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_BytesSlot_$1441_storage_ptr",
													"typeString": "struct StorageSlot.BytesSlot"
												},
												"typeName": {
													"id": 1524,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1523,
														"name": "BytesSlot",
														"nameLocations": [
															"3970:9:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1441,
														"src": "3970:9:11"
													},
													"referencedDeclaration": 1441,
													"src": "3970:9:11",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_BytesSlot_$1441_storage_ptr",
														"typeString": "struct StorageSlot.BytesSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3969:21:11"
									},
									"scope": 1530,
									"src": "3904:199:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1531,
							"src": "1420:2685:11",
							"usedErrors": []
						}
					],
					"src": "193:3913:11"
				},
				"id": 11
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Strings.sol",
					"exportedSymbols": {
						"Math": [
							3195
						],
						"SignedMath": [
							3300
						],
						"Strings": [
							1759
						]
					},
					"id": 1760,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1532,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "101:23:12"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/math/Math.sol",
							"file": "./math/Math.sol",
							"id": 1533,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1760,
							"sourceUnit": 3196,
							"src": "126:25:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/math/SignedMath.sol",
							"file": "./math/SignedMath.sol",
							"id": 1534,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1760,
							"sourceUnit": 3301,
							"src": "152:31:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Strings",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1535,
								"nodeType": "StructuredDocumentation",
								"src": "185:34:12",
								"text": " @dev String operations."
							},
							"fullyImplemented": true,
							"id": 1759,
							"linearizedBaseContracts": [
								1759
							],
							"name": "Strings",
							"nameLocation": "228:7:12",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 1538,
									"mutability": "constant",
									"name": "_SYMBOLS",
									"nameLocation": "267:8:12",
									"nodeType": "VariableDeclaration",
									"scope": 1759,
									"src": "242:54:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes16",
										"typeString": "bytes16"
									},
									"typeName": {
										"id": 1536,
										"name": "bytes16",
										"nodeType": "ElementaryTypeName",
										"src": "242:7:12",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes16",
											"typeString": "bytes16"
										}
									},
									"value": {
										"hexValue": "30313233343536373839616263646566",
										"id": 1537,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "string",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "278:18:12",
										"typeDescriptions": {
											"typeIdentifier": "t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f",
											"typeString": "literal_string \"0123456789abcdef\""
										},
										"value": "0123456789abcdef"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 1541,
									"mutability": "constant",
									"name": "_ADDRESS_LENGTH",
									"nameLocation": "325:15:12",
									"nodeType": "VariableDeclaration",
									"scope": 1759,
									"src": "302:43:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 1539,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "302:5:12",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"hexValue": "3230",
										"id": 1540,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "343:2:12",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_20_by_1",
											"typeString": "int_const 20"
										},
										"value": "20"
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 1588,
										"nodeType": "Block",
										"src": "518:625:12",
										"statements": [
											{
												"id": 1587,
												"nodeType": "UncheckedBlock",
												"src": "528:609:12",
												"statements": [
													{
														"assignments": [
															1550
														],
														"declarations": [
															{
																"constant": false,
																"id": 1550,
																"mutability": "mutable",
																"name": "length",
																"nameLocation": "560:6:12",
																"nodeType": "VariableDeclaration",
																"scope": 1587,
																"src": "552:14:12",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1549,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "552:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1557,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1556,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 1553,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1544,
																		"src": "580:5:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1551,
																		"name": "Math",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3195,
																		"src": "569:4:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_Math_$3195_$",
																			"typeString": "type(library Math)"
																		}
																	},
																	"id": 1552,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "574:5:12",
																	"memberName": "log10",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 3032,
																	"src": "569:10:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																		"typeString": "function (uint256) pure returns (uint256)"
																	}
																},
																"id": 1554,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "569:17:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "31",
																"id": 1555,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "589:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "569:21:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "552:38:12"
													},
													{
														"assignments": [
															1559
														],
														"declarations": [
															{
																"constant": false,
																"id": 1559,
																"mutability": "mutable",
																"name": "buffer",
																"nameLocation": "618:6:12",
																"nodeType": "VariableDeclaration",
																"scope": 1587,
																"src": "604:20:12",
																"stateVariable": false,
																"storageLocation": "memory",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string"
																},
																"typeName": {
																	"id": 1558,
																	"name": "string",
																	"nodeType": "ElementaryTypeName",
																	"src": "604:6:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_storage_ptr",
																		"typeString": "string"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1564,
														"initialValue": {
															"arguments": [
																{
																	"id": 1562,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1550,
																	"src": "638:6:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1561,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "NewExpression",
																"src": "627:10:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (string memory)"
																},
																"typeName": {
																	"id": 1560,
																	"name": "string",
																	"nodeType": "ElementaryTypeName",
																	"src": "631:6:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_storage_ptr",
																		"typeString": "string"
																	}
																}
															},
															"id": 1563,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "627:18:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "604:41:12"
													},
													{
														"assignments": [
															1566
														],
														"declarations": [
															{
																"constant": false,
																"id": 1566,
																"mutability": "mutable",
																"name": "ptr",
																"nameLocation": "667:3:12",
																"nodeType": "VariableDeclaration",
																"scope": 1587,
																"src": "659:11:12",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1565,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "659:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1567,
														"nodeType": "VariableDeclarationStatement",
														"src": "659:11:12"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "740:67:12",
															"statements": [
																{
																	"nodeType": "YulAssignment",
																	"src": "758:35:12",
																	"value": {
																		"arguments": [
																			{
																				"name": "buffer",
																				"nodeType": "YulIdentifier",
																				"src": "769:6:12"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "781:2:12",
																						"type": "",
																						"value": "32"
																					},
																					{
																						"name": "length",
																						"nodeType": "YulIdentifier",
																						"src": "785:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "777:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "777:15:12"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "765:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "765:28:12"
																	},
																	"variableNames": [
																		{
																			"name": "ptr",
																			"nodeType": "YulIdentifier",
																			"src": "758:3:12"
																		}
																	]
																}
															]
														},
														"documentation": "@solidity memory-safe-assembly",
														"evmVersion": "paris",
														"externalReferences": [
															{
																"declaration": 1559,
																"isOffset": false,
																"isSlot": false,
																"src": "769:6:12",
																"valueSize": 1
															},
															{
																"declaration": 1550,
																"isOffset": false,
																"isSlot": false,
																"src": "785:6:12",
																"valueSize": 1
															},
															{
																"declaration": 1566,
																"isOffset": false,
																"isSlot": false,
																"src": "758:3:12",
																"valueSize": 1
															}
														],
														"id": 1568,
														"nodeType": "InlineAssembly",
														"src": "731:76:12"
													},
													{
														"body": {
															"id": 1583,
															"nodeType": "Block",
															"src": "833:267:12",
															"statements": [
																{
																	"expression": {
																		"id": 1571,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "--",
																		"prefix": false,
																		"src": "851:5:12",
																		"subExpression": {
																			"id": 1570,
																			"name": "ptr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1566,
																			"src": "851:3:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1572,
																	"nodeType": "ExpressionStatement",
																	"src": "851:5:12"
																},
																{
																	"AST": {
																		"nodeType": "YulBlock",
																		"src": "934:84:12",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "ptr",
																							"nodeType": "YulIdentifier",
																							"src": "964:3:12"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value",
																											"nodeType": "YulIdentifier",
																											"src": "978:5:12"
																										},
																										{
																											"kind": "number",
																											"nodeType": "YulLiteral",
																											"src": "985:2:12",
																											"type": "",
																											"value": "10"
																										}
																									],
																									"functionName": {
																										"name": "mod",
																										"nodeType": "YulIdentifier",
																										"src": "974:3:12"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "974:14:12"
																								},
																								{
																									"name": "_SYMBOLS",
																									"nodeType": "YulIdentifier",
																									"src": "990:8:12"
																								}
																							],
																							"functionName": {
																								"name": "byte",
																								"nodeType": "YulIdentifier",
																								"src": "969:4:12"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "969:30:12"
																						}
																					],
																					"functionName": {
																						"name": "mstore8",
																						"nodeType": "YulIdentifier",
																						"src": "956:7:12"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "956:44:12"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "956:44:12"
																			}
																		]
																	},
																	"documentation": "@solidity memory-safe-assembly",
																	"evmVersion": "paris",
																	"externalReferences": [
																		{
																			"declaration": 1538,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "990:8:12",
																			"valueSize": 1
																		},
																		{
																			"declaration": 1566,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "964:3:12",
																			"valueSize": 1
																		},
																		{
																			"declaration": 1544,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "978:5:12",
																			"valueSize": 1
																		}
																	],
																	"id": 1573,
																	"nodeType": "InlineAssembly",
																	"src": "925:93:12"
																},
																{
																	"expression": {
																		"id": 1576,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1574,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1544,
																			"src": "1035:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"hexValue": "3130",
																			"id": 1575,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1044:2:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10_by_1",
																				"typeString": "int_const 10"
																			},
																			"value": "10"
																		},
																		"src": "1035:11:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1577,
																	"nodeType": "ExpressionStatement",
																	"src": "1035:11:12"
																},
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1580,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1578,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1544,
																			"src": "1068:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 1579,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1077:1:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1068:10:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 1582,
																	"nodeType": "IfStatement",
																	"src": "1064:21:12",
																	"trueBody": {
																		"id": 1581,
																		"nodeType": "Break",
																		"src": "1080:5:12"
																	}
																}
															]
														},
														"condition": {
															"hexValue": "74727565",
															"id": 1569,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "827:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														"id": 1584,
														"nodeType": "WhileStatement",
														"src": "820:280:12"
													},
													{
														"expression": {
															"id": 1585,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1559,
															"src": "1120:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"functionReturnParameters": 1548,
														"id": 1586,
														"nodeType": "Return",
														"src": "1113:13:12"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1542,
										"nodeType": "StructuredDocumentation",
										"src": "352:90:12",
										"text": " @dev Converts a `uint256` to its ASCII `string` decimal representation."
									},
									"id": 1589,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toString",
									"nameLocation": "456:8:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1545,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1544,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "473:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 1589,
												"src": "465:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1543,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "465:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "464:15:12"
									},
									"returnParameters": {
										"id": 1548,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1547,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1589,
												"src": "503:13:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1546,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "503:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "502:15:12"
									},
									"scope": 1759,
									"src": "447:696:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1616,
										"nodeType": "Block",
										"src": "1313:103:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		},
																		"id": 1603,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1601,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1592,
																			"src": "1354:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "<",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 1602,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1362:1:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1354:9:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"falseExpression": {
																		"hexValue": "",
																		"id": 1605,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1372:2:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																			"typeString": "literal_string \"\""
																		},
																		"value": ""
																	},
																	"id": 1606,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "Conditional",
																	"src": "1354:20:12",
																	"trueExpression": {
																		"hexValue": "2d",
																		"id": 1604,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1366:3:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561",
																			"typeString": "literal_string \"-\""
																		},
																		"value": "-"
																	},
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																},
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 1610,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1592,
																					"src": "1400:5:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_int256",
																						"typeString": "int256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_int256",
																						"typeString": "int256"
																					}
																				],
																				"expression": {
																					"id": 1608,
																					"name": "SignedMath",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3300,
																					"src": "1385:10:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_SignedMath_$3300_$",
																						"typeString": "type(library SignedMath)"
																					}
																				},
																				"id": 1609,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "1396:3:12",
																				"memberName": "abs",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 3299,
																				"src": "1385:14:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_pure$_t_int256_$returns$_t_uint256_$",
																					"typeString": "function (int256) pure returns (uint256)"
																				}
																			},
																			"id": 1611,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1385:21:12",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 1607,
																		"name": "toString",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [
																			1589,
																			1617
																		],
																		"referencedDeclaration": 1589,
																		"src": "1376:8:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																			"typeString": "function (uint256) pure returns (string memory)"
																		}
																	},
																	"id": 1612,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1376:31:12",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"expression": {
																	"id": 1599,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1337:3:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1600,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "1341:12:12",
																"memberName": "encodePacked",
																"nodeType": "MemberAccess",
																"src": "1337:16:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 1613,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1337:71:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1598,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "1330:6:12",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_string_storage_ptr_$",
															"typeString": "type(string storage pointer)"
														},
														"typeName": {
															"id": 1597,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "1330:6:12",
															"typeDescriptions": {}
														}
													},
													"id": 1614,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1330:79:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1596,
												"id": 1615,
												"nodeType": "Return",
												"src": "1323:86:12"
											}
										]
									},
									"documentation": {
										"id": 1590,
										"nodeType": "StructuredDocumentation",
										"src": "1149:89:12",
										"text": " @dev Converts a `int256` to its ASCII `string` decimal representation."
									},
									"id": 1617,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toString",
									"nameLocation": "1252:8:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1593,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1592,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1268:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 1617,
												"src": "1261:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1591,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1261:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1260:14:12"
									},
									"returnParameters": {
										"id": 1596,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1595,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1617,
												"src": "1298:13:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1594,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1298:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1297:15:12"
									},
									"scope": 1759,
									"src": "1243:173:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1636,
										"nodeType": "Block",
										"src": "1595:100:12",
										"statements": [
											{
												"id": 1635,
												"nodeType": "UncheckedBlock",
												"src": "1605:84:12",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"id": 1626,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1620,
																	"src": "1648:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1632,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"arguments": [
																			{
																				"id": 1629,
																				"name": "value",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1620,
																				"src": "1667:5:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"expression": {
																				"id": 1627,
																				"name": "Math",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3195,
																				"src": "1655:4:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_Math_$3195_$",
																					"typeString": "type(library Math)"
																				}
																			},
																			"id": 1628,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "1660:6:12",
																			"memberName": "log256",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 3155,
																			"src": "1655:11:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																				"typeString": "function (uint256) pure returns (uint256)"
																			}
																		},
																		"id": 1630,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1655:18:12",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"hexValue": "31",
																		"id": 1631,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1676:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	},
																	"src": "1655:22:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1625,
																"name": "toHexString",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	1637,
																	1713,
																	1733
																],
																"referencedDeclaration": 1713,
																"src": "1636:11:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256,uint256) pure returns (string memory)"
																}
															},
															"id": 1633,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1636:42:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"functionReturnParameters": 1624,
														"id": 1634,
														"nodeType": "Return",
														"src": "1629:49:12"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1618,
										"nodeType": "StructuredDocumentation",
										"src": "1422:94:12",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."
									},
									"id": 1637,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "1530:11:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1621,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1620,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1550:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 1637,
												"src": "1542:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1619,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1542:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1541:15:12"
									},
									"returnParameters": {
										"id": 1624,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1623,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1637,
												"src": "1580:13:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1622,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1580:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1579:15:12"
									},
									"scope": 1759,
									"src": "1521:174:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1712,
										"nodeType": "Block",
										"src": "1908:347:12",
										"statements": [
											{
												"assignments": [
													1648
												],
												"declarations": [
													{
														"constant": false,
														"id": 1648,
														"mutability": "mutable",
														"name": "buffer",
														"nameLocation": "1931:6:12",
														"nodeType": "VariableDeclaration",
														"scope": 1712,
														"src": "1918:19:12",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1647,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1918:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1657,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1655,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1653,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 1651,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1950:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 1652,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1642,
																	"src": "1954:6:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1950:10:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "32",
																"id": 1654,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1963:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "1950:14:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1650,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "1940:9:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes memory)"
														},
														"typeName": {
															"id": 1649,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1944:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														}
													},
													"id": 1656,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1940:25:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1918:47:12"
											},
											{
												"expression": {
													"id": 1662,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1658,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1648,
															"src": "1975:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1660,
														"indexExpression": {
															"hexValue": "30",
															"id": 1659,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1982:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1975:9:12",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 1661,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1987:3:12",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
															"typeString": "literal_string \"0\""
														},
														"value": "0"
													},
													"src": "1975:15:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 1663,
												"nodeType": "ExpressionStatement",
												"src": "1975:15:12"
											},
											{
												"expression": {
													"id": 1668,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1664,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1648,
															"src": "2000:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1666,
														"indexExpression": {
															"hexValue": "31",
															"id": 1665,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2007:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2000:9:12",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "78",
														"id": 1667,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2012:3:12",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83",
															"typeString": "literal_string \"x\""
														},
														"value": "x"
													},
													"src": "2000:15:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 1669,
												"nodeType": "ExpressionStatement",
												"src": "2000:15:12"
											},
											{
												"body": {
													"id": 1698,
													"nodeType": "Block",
													"src": "2070:83:12",
													"statements": [
														{
															"expression": {
																"id": 1692,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 1684,
																		"name": "buffer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1648,
																		"src": "2084:6:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 1686,
																	"indexExpression": {
																		"id": 1685,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1671,
																		"src": "2091:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "2084:9:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"baseExpression": {
																		"id": 1687,
																		"name": "_SYMBOLS",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1538,
																		"src": "2096:8:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes16",
																			"typeString": "bytes16"
																		}
																	},
																	"id": 1691,
																	"indexExpression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1690,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1688,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1640,
																			"src": "2105:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&",
																		"rightExpression": {
																			"hexValue": "307866",
																			"id": 1689,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2113:3:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_15_by_1",
																				"typeString": "int_const 15"
																			},
																			"value": "0xf"
																		},
																		"src": "2105:11:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "2096:21:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"src": "2084:33:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"id": 1693,
															"nodeType": "ExpressionStatement",
															"src": "2084:33:12"
														},
														{
															"expression": {
																"id": 1696,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1694,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1640,
																	"src": "2131:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "34",
																	"id": 1695,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2141:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "2131:11:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1697,
															"nodeType": "ExpressionStatement",
															"src": "2131:11:12"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1680,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1678,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1671,
														"src": "2058:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "31",
														"id": 1679,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2062:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "2058:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1699,
												"initializationExpression": {
													"assignments": [
														1671
													],
													"declarations": [
														{
															"constant": false,
															"id": 1671,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "2038:1:12",
															"nodeType": "VariableDeclaration",
															"scope": 1699,
															"src": "2030:9:12",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1670,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "2030:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1677,
													"initialValue": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1676,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1674,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "32",
																"id": 1672,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2042:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 1673,
																"name": "length",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1642,
																"src": "2046:6:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2042:10:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 1675,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2055:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "2042:14:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "2030:26:12"
												},
												"loopExpression": {
													"expression": {
														"id": 1682,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "--",
														"prefix": true,
														"src": "2065:3:12",
														"subExpression": {
															"id": 1681,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1671,
															"src": "2067:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1683,
													"nodeType": "ExpressionStatement",
													"src": "2065:3:12"
												},
												"nodeType": "ForStatement",
												"src": "2025:128:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1703,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1701,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1640,
																"src": "2170:5:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 1702,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2179:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2170:10:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "537472696e67733a20686578206c656e67746820696e73756666696369656e74",
															"id": 1704,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2182:34:12",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2",
																"typeString": "literal_string \"Strings: hex length insufficient\""
															},
															"value": "Strings: hex length insufficient"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2",
																"typeString": "literal_string \"Strings: hex length insufficient\""
															}
														],
														"id": 1700,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2162:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1705,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2162:55:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1706,
												"nodeType": "ExpressionStatement",
												"src": "2162:55:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1709,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1648,
															"src": "2241:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1708,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "2234:6:12",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_string_storage_ptr_$",
															"typeString": "type(string storage pointer)"
														},
														"typeName": {
															"id": 1707,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "2234:6:12",
															"typeDescriptions": {}
														}
													},
													"id": 1710,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2234:14:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1646,
												"id": 1711,
												"nodeType": "Return",
												"src": "2227:21:12"
											}
										]
									},
									"documentation": {
										"id": 1638,
										"nodeType": "StructuredDocumentation",
										"src": "1701:112:12",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."
									},
									"id": 1713,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "1827:11:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1643,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1640,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1847:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 1713,
												"src": "1839:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1639,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1839:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1642,
												"mutability": "mutable",
												"name": "length",
												"nameLocation": "1862:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 1713,
												"src": "1854:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1641,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1854:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1838:31:12"
									},
									"returnParameters": {
										"id": 1646,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1645,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1713,
												"src": "1893:13:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1644,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1893:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1892:15:12"
									},
									"scope": 1759,
									"src": "1818:437:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1732,
										"nodeType": "Block",
										"src": "2480:76:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 1726,
																			"name": "addr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1716,
																			"src": "2525:4:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 1725,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2517:7:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint160_$",
																			"typeString": "type(uint160)"
																		},
																		"typeName": {
																			"id": 1724,
																			"name": "uint160",
																			"nodeType": "ElementaryTypeName",
																			"src": "2517:7:12",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1727,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2517:13:12",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																],
																"id": 1723,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2509:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																},
																"typeName": {
																	"id": 1722,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2509:7:12",
																	"typeDescriptions": {}
																}
															},
															"id": 1728,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2509:22:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1729,
															"name": "_ADDRESS_LENGTH",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1541,
															"src": "2533:15:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														],
														"id": 1721,
														"name": "toHexString",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1637,
															1713,
															1733
														],
														"referencedDeclaration": 1713,
														"src": "2497:11:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
															"typeString": "function (uint256,uint256) pure returns (string memory)"
														}
													},
													"id": 1730,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2497:52:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1720,
												"id": 1731,
												"nodeType": "Return",
												"src": "2490:59:12"
											}
										]
									},
									"documentation": {
										"id": 1714,
										"nodeType": "StructuredDocumentation",
										"src": "2261:141:12",
										"text": " @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."
									},
									"id": 1733,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "2416:11:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1717,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1716,
												"mutability": "mutable",
												"name": "addr",
												"nameLocation": "2436:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 1733,
												"src": "2428:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1715,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2428:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2427:14:12"
									},
									"returnParameters": {
										"id": 1720,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1719,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1733,
												"src": "2465:13:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1718,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2465:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2464:15:12"
									},
									"scope": 1759,
									"src": "2407:149:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1757,
										"nodeType": "Block",
										"src": "2711:66:12",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 1755,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 1746,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1736,
																		"src": "2744:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1745,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2738:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 1744,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "2738:5:12",
																		"typeDescriptions": {}
																	}
																},
																"id": 1747,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2738:8:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 1743,
															"name": "keccak256",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967288,
															"src": "2728:9:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																"typeString": "function (bytes memory) pure returns (bytes32)"
															}
														},
														"id": 1748,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2728:19:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 1752,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1738,
																		"src": "2767:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1751,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2761:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 1750,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "2761:5:12",
																		"typeDescriptions": {}
																	}
																},
																"id": 1753,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2761:8:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 1749,
															"name": "keccak256",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967288,
															"src": "2751:9:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																"typeString": "function (bytes memory) pure returns (bytes32)"
															}
														},
														"id": 1754,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2751:19:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "2728:42:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1742,
												"id": 1756,
												"nodeType": "Return",
												"src": "2721:49:12"
											}
										]
									},
									"documentation": {
										"id": 1734,
										"nodeType": "StructuredDocumentation",
										"src": "2562:66:12",
										"text": " @dev Returns true if the two strings are equal."
									},
									"id": 1758,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "equal",
									"nameLocation": "2642:5:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1739,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1736,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2662:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 1758,
												"src": "2648:15:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1735,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2648:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1738,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2679:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 1758,
												"src": "2665:15:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1737,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2665:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2647:34:12"
									},
									"returnParameters": {
										"id": 1742,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1741,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1758,
												"src": "2705:4:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1740,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2705:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2704:6:12"
									},
									"scope": 1759,
									"src": "2633:144:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1760,
							"src": "220:2559:12",
							"usedErrors": []
						}
					],
					"src": "101:2679:12"
				},
				"id": 12
			},
			"@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
					"exportedSymbols": {
						"ECDSA": [
							2125
						],
						"Math": [
							3195
						],
						"SignedMath": [
							3300
						],
						"Strings": [
							1759
						]
					},
					"id": 2126,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1761,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "112:23:13"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Strings.sol",
							"file": "../Strings.sol",
							"id": 1762,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2126,
							"sourceUnit": 1760,
							"src": "137:24:13",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ECDSA",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1763,
								"nodeType": "StructuredDocumentation",
								"src": "163:205:13",
								"text": " @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n These functions can be used to verify that a message was signed by the holder\n of the private keys of a given address."
							},
							"fullyImplemented": true,
							"id": 2125,
							"linearizedBaseContracts": [
								2125
							],
							"name": "ECDSA",
							"nameLocation": "377:5:13",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "ECDSA.RecoverError",
									"id": 1769,
									"members": [
										{
											"id": 1764,
											"name": "NoError",
											"nameLocation": "417:7:13",
											"nodeType": "EnumValue",
											"src": "417:7:13"
										},
										{
											"id": 1765,
											"name": "InvalidSignature",
											"nameLocation": "434:16:13",
											"nodeType": "EnumValue",
											"src": "434:16:13"
										},
										{
											"id": 1766,
											"name": "InvalidSignatureLength",
											"nameLocation": "460:22:13",
											"nodeType": "EnumValue",
											"src": "460:22:13"
										},
										{
											"id": 1767,
											"name": "InvalidSignatureS",
											"nameLocation": "492:17:13",
											"nodeType": "EnumValue",
											"src": "492:17:13"
										},
										{
											"id": 1768,
											"name": "InvalidSignatureV",
											"nameLocation": "519:17:13",
											"nodeType": "EnumValue",
											"src": "519:17:13"
										}
									],
									"name": "RecoverError",
									"nameLocation": "394:12:13",
									"nodeType": "EnumDefinition",
									"src": "389:175:13"
								},
								{
									"body": {
										"id": 1812,
										"nodeType": "Block",
										"src": "624:457:13",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_enum$_RecoverError_$1769",
														"typeString": "enum ECDSA.RecoverError"
													},
													"id": 1778,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1775,
														"name": "error",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1772,
														"src": "638:5:13",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$1769",
															"typeString": "enum ECDSA.RecoverError"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"expression": {
															"id": 1776,
															"name": "RecoverError",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1769,
															"src": "647:12:13",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_enum$_RecoverError_$1769_$",
																"typeString": "type(enum ECDSA.RecoverError)"
															}
														},
														"id": 1777,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "660:7:13",
														"memberName": "NoError",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1764,
														"src": "647:20:13",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$1769",
															"typeString": "enum ECDSA.RecoverError"
														}
													},
													"src": "638:29:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_enum$_RecoverError_$1769",
															"typeString": "enum ECDSA.RecoverError"
														},
														"id": 1784,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1781,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1772,
															"src": "734:5:13",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1769",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"expression": {
																"id": 1782,
																"name": "RecoverError",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1769,
																"src": "743:12:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_RecoverError_$1769_$",
																	"typeString": "type(enum ECDSA.RecoverError)"
																}
															},
															"id": 1783,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "756:16:13",
															"memberName": "InvalidSignature",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1765,
															"src": "743:29:13",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1769",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"src": "734:38:13",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseBody": {
														"condition": {
															"commonType": {
																"typeIdentifier": "t_enum$_RecoverError_$1769",
																"typeString": "enum ECDSA.RecoverError"
															},
															"id": 1793,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1790,
																"name": "error",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1772,
																"src": "843:5:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_RecoverError_$1769",
																	"typeString": "enum ECDSA.RecoverError"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 1791,
																	"name": "RecoverError",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1769,
																	"src": "852:12:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_enum$_RecoverError_$1769_$",
																		"typeString": "type(enum ECDSA.RecoverError)"
																	}
																},
																"id": 1792,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "865:22:13",
																"memberName": "InvalidSignatureLength",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1766,
																"src": "852:35:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_RecoverError_$1769",
																	"typeString": "enum ECDSA.RecoverError"
																}
															},
															"src": "843:44:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"falseBody": {
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_enum$_RecoverError_$1769",
																	"typeString": "enum ECDSA.RecoverError"
																},
																"id": 1802,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1799,
																	"name": "error",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1772,
																	"src": "965:5:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_enum$_RecoverError_$1769",
																		"typeString": "enum ECDSA.RecoverError"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"expression": {
																		"id": 1800,
																		"name": "RecoverError",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1769,
																		"src": "974:12:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_enum$_RecoverError_$1769_$",
																			"typeString": "type(enum ECDSA.RecoverError)"
																		}
																	},
																	"id": 1801,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "987:17:13",
																	"memberName": "InvalidSignatureS",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1767,
																	"src": "974:30:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_enum$_RecoverError_$1769",
																		"typeString": "enum ECDSA.RecoverError"
																	}
																},
																"src": "965:39:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1808,
															"nodeType": "IfStatement",
															"src": "961:114:13",
															"trueBody": {
																"id": 1807,
																"nodeType": "Block",
																"src": "1006:69:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"hexValue": "45434453413a20696e76616c6964207369676e6174757265202773272076616c7565",
																					"id": 1804,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "string",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "1027:36:13",
																					"typeDescriptions": {
																						"typeIdentifier": "t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd",
																						"typeString": "literal_string \"ECDSA: invalid signature 's' value\""
																					},
																					"value": "ECDSA: invalid signature 's' value"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd",
																						"typeString": "literal_string \"ECDSA: invalid signature 's' value\""
																					}
																				],
																				"id": 1803,
																				"name": "revert",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967277,
																					4294967277
																				],
																				"referencedDeclaration": 4294967277,
																				"src": "1020:6:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (string memory) pure"
																				}
																			},
																			"id": 1805,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1020:44:13",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 1806,
																		"nodeType": "ExpressionStatement",
																		"src": "1020:44:13"
																	}
																]
															}
														},
														"id": 1809,
														"nodeType": "IfStatement",
														"src": "839:236:13",
														"trueBody": {
															"id": 1798,
															"nodeType": "Block",
															"src": "889:66:13",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"hexValue": "45434453413a20696e76616c6964207369676e6174757265206c656e677468",
																				"id": 1795,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "string",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "910:33:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77",
																					"typeString": "literal_string \"ECDSA: invalid signature length\""
																				},
																				"value": "ECDSA: invalid signature length"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77",
																					"typeString": "literal_string \"ECDSA: invalid signature length\""
																				}
																			],
																			"id": 1794,
																			"name": "revert",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [
																				4294967277,
																				4294967277
																			],
																			"referencedDeclaration": 4294967277,
																			"src": "903:6:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																				"typeString": "function (string memory) pure"
																			}
																		},
																		"id": 1796,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "903:41:13",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 1797,
																	"nodeType": "ExpressionStatement",
																	"src": "903:41:13"
																}
															]
														}
													},
													"id": 1810,
													"nodeType": "IfStatement",
													"src": "730:345:13",
													"trueBody": {
														"id": 1789,
														"nodeType": "Block",
														"src": "774:59:13",
														"statements": [
															{
																"expression": {
																	"arguments": [
																		{
																			"hexValue": "45434453413a20696e76616c6964207369676e6174757265",
																			"id": 1786,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "string",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "795:26:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be",
																				"typeString": "literal_string \"ECDSA: invalid signature\""
																			},
																			"value": "ECDSA: invalid signature"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be",
																				"typeString": "literal_string \"ECDSA: invalid signature\""
																			}
																		],
																		"id": 1785,
																		"name": "revert",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [
																			4294967277,
																			4294967277
																		],
																		"referencedDeclaration": 4294967277,
																		"src": "788:6:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																			"typeString": "function (string memory) pure"
																		}
																	},
																	"id": 1787,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "788:34:13",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$__$",
																		"typeString": "tuple()"
																	}
																},
																"id": 1788,
																"nodeType": "ExpressionStatement",
																"src": "788:34:13"
															}
														]
													}
												},
												"id": 1811,
												"nodeType": "IfStatement",
												"src": "634:441:13",
												"trueBody": {
													"id": 1780,
													"nodeType": "Block",
													"src": "669:55:13",
													"statements": [
														{
															"functionReturnParameters": 1774,
															"id": 1779,
															"nodeType": "Return",
															"src": "683:7:13"
														}
													]
												}
											}
										]
									},
									"id": 1813,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_throwError",
									"nameLocation": "579:11:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1773,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1772,
												"mutability": "mutable",
												"name": "error",
												"nameLocation": "604:5:13",
												"nodeType": "VariableDeclaration",
												"scope": 1813,
												"src": "591:18:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$1769",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 1771,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1770,
														"name": "RecoverError",
														"nameLocations": [
															"591:12:13"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1769,
														"src": "591:12:13"
													},
													"referencedDeclaration": 1769,
													"src": "591:12:13",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$1769",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "590:20:13"
									},
									"returnParameters": {
										"id": 1774,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "624:0:13"
									},
									"scope": 2125,
									"src": "570:511:13",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1858,
										"nodeType": "Block",
										"src": "2249:626:13",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1829,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1826,
															"name": "signature",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1818,
															"src": "2263:9:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1827,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2273:6:13",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "2263:16:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "3635",
														"id": 1828,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2283:2:13",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_65_by_1",
															"typeString": "int_const 65"
														},
														"value": "65"
													},
													"src": "2263:22:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1856,
													"nodeType": "Block",
													"src": "2788:81:13",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 1850,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2818:1:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 1849,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "2810:7:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1848,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "2810:7:13",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1851,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2810:10:13",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 1852,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1769,
																			"src": "2822:12:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$1769_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 1853,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "2835:22:13",
																		"memberName": "InvalidSignatureLength",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1766,
																		"src": "2822:35:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$1769",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	}
																],
																"id": 1854,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2809:49:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1769_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError)"
																}
															},
															"functionReturnParameters": 1825,
															"id": 1855,
															"nodeType": "Return",
															"src": "2802:56:13"
														}
													]
												},
												"id": 1857,
												"nodeType": "IfStatement",
												"src": "2259:610:13",
												"trueBody": {
													"id": 1847,
													"nodeType": "Block",
													"src": "2287:495:13",
													"statements": [
														{
															"assignments": [
																1831
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1831,
																	"mutability": "mutable",
																	"name": "r",
																	"nameLocation": "2309:1:13",
																	"nodeType": "VariableDeclaration",
																	"scope": 1847,
																	"src": "2301:9:13",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 1830,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "2301:7:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1832,
															"nodeType": "VariableDeclarationStatement",
															"src": "2301:9:13"
														},
														{
															"assignments": [
																1834
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1834,
																	"mutability": "mutable",
																	"name": "s",
																	"nameLocation": "2332:1:13",
																	"nodeType": "VariableDeclaration",
																	"scope": 1847,
																	"src": "2324:9:13",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 1833,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "2324:7:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1835,
															"nodeType": "VariableDeclarationStatement",
															"src": "2324:9:13"
														},
														{
															"assignments": [
																1837
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1837,
																	"mutability": "mutable",
																	"name": "v",
																	"nameLocation": "2353:1:13",
																	"nodeType": "VariableDeclaration",
																	"scope": 1847,
																	"src": "2347:7:13",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	},
																	"typeName": {
																		"id": 1836,
																		"name": "uint8",
																		"nodeType": "ElementaryTypeName",
																		"src": "2347:5:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1838,
															"nodeType": "VariableDeclarationStatement",
															"src": "2347:7:13"
														},
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "2555:171:13",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "2573:32:13",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "signature",
																							"nodeType": "YulIdentifier",
																							"src": "2588:9:13"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2599:4:13",
																							"type": "",
																							"value": "0x20"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "2584:3:13"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2584:20:13"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "2578:5:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2578:27:13"
																		},
																		"variableNames": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "2573:1:13"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "2622:32:13",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "signature",
																							"nodeType": "YulIdentifier",
																							"src": "2637:9:13"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2648:4:13",
																							"type": "",
																							"value": "0x40"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "2633:3:13"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2633:20:13"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "2627:5:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2627:27:13"
																		},
																		"variableNames": [
																			{
																				"name": "s",
																				"nodeType": "YulIdentifier",
																				"src": "2622:1:13"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "2671:41:13",
																		"value": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2681:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "signature",
																									"nodeType": "YulIdentifier",
																									"src": "2694:9:13"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "2705:4:13",
																									"type": "",
																									"value": "0x60"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "2690:3:13"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "2690:20:13"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "2684:5:13"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2684:27:13"
																				}
																			],
																			"functionName": {
																				"name": "byte",
																				"nodeType": "YulIdentifier",
																				"src": "2676:4:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2676:36:13"
																		},
																		"variableNames": [
																			{
																				"name": "v",
																				"nodeType": "YulIdentifier",
																				"src": "2671:1:13"
																			}
																		]
																	}
																]
															},
															"documentation": "@solidity memory-safe-assembly",
															"evmVersion": "paris",
															"externalReferences": [
																{
																	"declaration": 1831,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2573:1:13",
																	"valueSize": 1
																},
																{
																	"declaration": 1834,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2622:1:13",
																	"valueSize": 1
																},
																{
																	"declaration": 1818,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2588:9:13",
																	"valueSize": 1
																},
																{
																	"declaration": 1818,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2637:9:13",
																	"valueSize": 1
																},
																{
																	"declaration": 1818,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2694:9:13",
																	"valueSize": 1
																},
																{
																	"declaration": 1837,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2671:1:13",
																	"valueSize": 1
																}
															],
															"id": 1839,
															"nodeType": "InlineAssembly",
															"src": "2546:180:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1841,
																		"name": "hash",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1816,
																		"src": "2757:4:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 1842,
																		"name": "v",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1837,
																		"src": "2763:1:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	{
																		"id": 1843,
																		"name": "r",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1831,
																		"src": "2766:1:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 1844,
																		"name": "s",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1834,
																		"src": "2769:1:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		},
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	],
																	"id": 1840,
																	"name": "tryRecover",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		1859,
																		1933,
																		2027
																	],
																	"referencedDeclaration": 2027,
																	"src": "2746:10:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1769_$",
																		"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"
																	}
																},
																"id": 1845,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2746:25:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1769_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError)"
																}
															},
															"functionReturnParameters": 1825,
															"id": 1846,
															"nodeType": "Return",
															"src": "2739:32:13"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1814,
										"nodeType": "StructuredDocumentation",
										"src": "1087:1053:13",
										"text": " @dev Returns the address that signed a hashed message (`hash`) with\n `signature` or error string. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it.\n Documentation for signature generation:\n - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n _Available since v4.3._"
									},
									"id": 1859,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryRecover",
									"nameLocation": "2154:10:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1819,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1816,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "2173:4:13",
												"nodeType": "VariableDeclaration",
												"scope": 1859,
												"src": "2165:12:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1815,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2165:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1818,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "2192:9:13",
												"nodeType": "VariableDeclaration",
												"scope": 1859,
												"src": "2179:22:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1817,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2179:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2164:38:13"
									},
									"returnParameters": {
										"id": 1825,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1821,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1859,
												"src": "2226:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1820,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2226:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1824,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1859,
												"src": "2235:12:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$1769",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 1823,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1822,
														"name": "RecoverError",
														"nameLocations": [
															"2235:12:13"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1769,
														"src": "2235:12:13"
													},
													"referencedDeclaration": 1769,
													"src": "2235:12:13",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$1769",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2225:23:13"
									},
									"scope": 2125,
									"src": "2145:730:13",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1885,
										"nodeType": "Block",
										"src": "3748:140:13",
										"statements": [
											{
												"assignments": [
													1870,
													1873
												],
												"declarations": [
													{
														"constant": false,
														"id": 1870,
														"mutability": "mutable",
														"name": "recovered",
														"nameLocation": "3767:9:13",
														"nodeType": "VariableDeclaration",
														"scope": 1885,
														"src": "3759:17:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1869,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3759:7:13",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1873,
														"mutability": "mutable",
														"name": "error",
														"nameLocation": "3791:5:13",
														"nodeType": "VariableDeclaration",
														"scope": 1885,
														"src": "3778:18:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$1769",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 1872,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1871,
																"name": "RecoverError",
																"nameLocations": [
																	"3778:12:13"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1769,
																"src": "3778:12:13"
															},
															"referencedDeclaration": 1769,
															"src": "3778:12:13",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1769",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1878,
												"initialValue": {
													"arguments": [
														{
															"id": 1875,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1862,
															"src": "3811:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1876,
															"name": "signature",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1864,
															"src": "3817:9:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1874,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1859,
															1933,
															2027
														],
														"referencedDeclaration": 1859,
														"src": "3800:10:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$1769_$",
															"typeString": "function (bytes32,bytes memory) pure returns (address,enum ECDSA.RecoverError)"
														}
													},
													"id": 1877,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3800:27:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1769_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3758:69:13"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1880,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1873,
															"src": "3849:5:13",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1769",
																"typeString": "enum ECDSA.RecoverError"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_enum$_RecoverError_$1769",
																"typeString": "enum ECDSA.RecoverError"
															}
														],
														"id": 1879,
														"name": "_throwError",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1813,
														"src": "3837:11:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$1769_$returns$__$",
															"typeString": "function (enum ECDSA.RecoverError) pure"
														}
													},
													"id": 1881,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3837:18:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1882,
												"nodeType": "ExpressionStatement",
												"src": "3837:18:13"
											},
											{
												"expression": {
													"id": 1883,
													"name": "recovered",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1870,
													"src": "3872:9:13",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1868,
												"id": 1884,
												"nodeType": "Return",
												"src": "3865:16:13"
											}
										]
									},
									"documentation": {
										"id": 1860,
										"nodeType": "StructuredDocumentation",
										"src": "2881:775:13",
										"text": " @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it."
									},
									"id": 1886,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nameLocation": "3670:7:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1865,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1862,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "3686:4:13",
												"nodeType": "VariableDeclaration",
												"scope": 1886,
												"src": "3678:12:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1861,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3678:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1864,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "3705:9:13",
												"nodeType": "VariableDeclaration",
												"scope": 1886,
												"src": "3692:22:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1863,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3692:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3677:38:13"
									},
									"returnParameters": {
										"id": 1868,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1867,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1886,
												"src": "3739:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1866,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3739:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3738:9:13"
									},
									"scope": 2125,
									"src": "3661:227:13",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1932,
										"nodeType": "Block",
										"src": "4245:203:13",
										"statements": [
											{
												"assignments": [
													1902
												],
												"declarations": [
													{
														"constant": false,
														"id": 1902,
														"mutability": "mutable",
														"name": "s",
														"nameLocation": "4263:1:13",
														"nodeType": "VariableDeclaration",
														"scope": 1932,
														"src": "4255:9:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 1901,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "4255:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1909,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 1908,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1903,
														"name": "vs",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1893,
														"src": "4267:2:13",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "307837666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666",
																"id": 1906,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4280:66:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1",
																	"typeString": "int_const 5789...(69 digits omitted)...9967"
																},
																"value": "0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1",
																	"typeString": "int_const 5789...(69 digits omitted)...9967"
																}
															],
															"id": 1905,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "4272:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_bytes32_$",
																"typeString": "type(bytes32)"
															},
															"typeName": {
																"id": 1904,
																"name": "bytes32",
																"nodeType": "ElementaryTypeName",
																"src": "4272:7:13",
																"typeDescriptions": {}
															}
														},
														"id": 1907,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4272:75:13",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "4267:80:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4255:92:13"
											},
											{
												"assignments": [
													1911
												],
												"declarations": [
													{
														"constant": false,
														"id": 1911,
														"mutability": "mutable",
														"name": "v",
														"nameLocation": "4363:1:13",
														"nodeType": "VariableDeclaration",
														"scope": 1932,
														"src": "4357:7:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														},
														"typeName": {
															"id": 1910,
															"name": "uint8",
															"nodeType": "ElementaryTypeName",
															"src": "4357:5:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1924,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1922,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1919,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"arguments": [
																				{
																					"id": 1916,
																					"name": "vs",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1893,
																					"src": "4382:2:13",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				],
																				"id": 1915,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "4374:7:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint256_$",
																					"typeString": "type(uint256)"
																				},
																				"typeName": {
																					"id": 1914,
																					"name": "uint256",
																					"nodeType": "ElementaryTypeName",
																					"src": "4374:7:13",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 1917,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "4374:11:13",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">>",
																		"rightExpression": {
																			"hexValue": "323535",
																			"id": 1918,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "4389:3:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_255_by_1",
																				"typeString": "int_const 255"
																			},
																			"value": "255"
																		},
																		"src": "4374:18:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1920,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "4373:20:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "3237",
																"id": 1921,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4396:2:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_27_by_1",
																	"typeString": "int_const 27"
																},
																"value": "27"
															},
															"src": "4373:25:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1913,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "4367:5:13",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_uint8_$",
															"typeString": "type(uint8)"
														},
														"typeName": {
															"id": 1912,
															"name": "uint8",
															"nodeType": "ElementaryTypeName",
															"src": "4367:5:13",
															"typeDescriptions": {}
														}
													},
													"id": 1923,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4367:32:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4357:42:13"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1926,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1889,
															"src": "4427:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1927,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1911,
															"src": "4433:1:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 1928,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1891,
															"src": "4436:1:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1929,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1902,
															"src": "4439:1:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1925,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1859,
															1933,
															2027
														],
														"referencedDeclaration": 2027,
														"src": "4416:10:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1769_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"
														}
													},
													"id": 1930,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4416:25:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1769_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError)"
													}
												},
												"functionReturnParameters": 1900,
												"id": 1931,
												"nodeType": "Return",
												"src": "4409:32:13"
											}
										]
									},
									"documentation": {
										"id": 1887,
										"nodeType": "StructuredDocumentation",
										"src": "3894:243:13",
										"text": " @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n _Available since v4.3._"
									},
									"id": 1933,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryRecover",
									"nameLocation": "4151:10:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1894,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1889,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "4170:4:13",
												"nodeType": "VariableDeclaration",
												"scope": 1933,
												"src": "4162:12:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1888,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4162:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1891,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "4184:1:13",
												"nodeType": "VariableDeclaration",
												"scope": 1933,
												"src": "4176:9:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1890,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4176:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1893,
												"mutability": "mutable",
												"name": "vs",
												"nameLocation": "4195:2:13",
												"nodeType": "VariableDeclaration",
												"scope": 1933,
												"src": "4187:10:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1892,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4187:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4161:37:13"
									},
									"returnParameters": {
										"id": 1900,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1896,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1933,
												"src": "4222:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1895,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4222:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1899,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1933,
												"src": "4231:12:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$1769",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 1898,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1897,
														"name": "RecoverError",
														"nameLocations": [
															"4231:12:13"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1769,
														"src": "4231:12:13"
													},
													"referencedDeclaration": 1769,
													"src": "4231:12:13",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$1769",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4221:23:13"
									},
									"scope": 2125,
									"src": "4142:306:13",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1962,
										"nodeType": "Block",
										"src": "4699:136:13",
										"statements": [
											{
												"assignments": [
													1946,
													1949
												],
												"declarations": [
													{
														"constant": false,
														"id": 1946,
														"mutability": "mutable",
														"name": "recovered",
														"nameLocation": "4718:9:13",
														"nodeType": "VariableDeclaration",
														"scope": 1962,
														"src": "4710:17:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1945,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4710:7:13",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1949,
														"mutability": "mutable",
														"name": "error",
														"nameLocation": "4742:5:13",
														"nodeType": "VariableDeclaration",
														"scope": 1962,
														"src": "4729:18:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$1769",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 1948,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1947,
																"name": "RecoverError",
																"nameLocations": [
																	"4729:12:13"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1769,
																"src": "4729:12:13"
															},
															"referencedDeclaration": 1769,
															"src": "4729:12:13",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1769",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1955,
												"initialValue": {
													"arguments": [
														{
															"id": 1951,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1936,
															"src": "4762:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1952,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1938,
															"src": "4768:1:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1953,
															"name": "vs",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1940,
															"src": "4771:2:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1950,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1859,
															1933,
															2027
														],
														"referencedDeclaration": 1933,
														"src": "4751:10:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1769_$",
															"typeString": "function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"
														}
													},
													"id": 1954,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4751:23:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1769_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4709:65:13"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1957,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1949,
															"src": "4796:5:13",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1769",
																"typeString": "enum ECDSA.RecoverError"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_enum$_RecoverError_$1769",
																"typeString": "enum ECDSA.RecoverError"
															}
														],
														"id": 1956,
														"name": "_throwError",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1813,
														"src": "4784:11:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$1769_$returns$__$",
															"typeString": "function (enum ECDSA.RecoverError) pure"
														}
													},
													"id": 1958,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4784:18:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1959,
												"nodeType": "ExpressionStatement",
												"src": "4784:18:13"
											},
											{
												"expression": {
													"id": 1960,
													"name": "recovered",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1946,
													"src": "4819:9:13",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1944,
												"id": 1961,
												"nodeType": "Return",
												"src": "4812:16:13"
											}
										]
									},
									"documentation": {
										"id": 1934,
										"nodeType": "StructuredDocumentation",
										"src": "4454:154:13",
										"text": " @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n _Available since v4.2._"
									},
									"id": 1963,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nameLocation": "4622:7:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1941,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1936,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "4638:4:13",
												"nodeType": "VariableDeclaration",
												"scope": 1963,
												"src": "4630:12:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1935,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4630:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1938,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "4652:1:13",
												"nodeType": "VariableDeclaration",
												"scope": 1963,
												"src": "4644:9:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1937,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4644:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1940,
												"mutability": "mutable",
												"name": "vs",
												"nameLocation": "4663:2:13",
												"nodeType": "VariableDeclaration",
												"scope": 1963,
												"src": "4655:10:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1939,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4655:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4629:37:13"
									},
									"returnParameters": {
										"id": 1944,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1943,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1963,
												"src": "4690:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1942,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4690:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4689:9:13"
									},
									"scope": 2125,
									"src": "4613:222:13",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2026,
										"nodeType": "Block",
										"src": "5120:1345:13",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1985,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1982,
																"name": "s",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1972,
																"src": "6016:1:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 1981,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6008:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 1980,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "6008:7:13",
																"typeDescriptions": {}
															}
														},
														"id": 1983,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6008:10:13",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130",
														"id": 1984,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6021:66:13",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1",
															"typeString": "int_const 5789...(69 digits omitted)...7168"
														},
														"value": "0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"
													},
													"src": "6008:79:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1995,
												"nodeType": "IfStatement",
												"src": "6004:161:13",
												"trueBody": {
													"id": 1994,
													"nodeType": "Block",
													"src": "6089:76:13",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 1988,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "6119:1:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 1987,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "6111:7:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1986,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "6111:7:13",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1989,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6111:10:13",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 1990,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1769,
																			"src": "6123:12:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$1769_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 1991,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "6136:17:13",
																		"memberName": "InvalidSignatureS",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1767,
																		"src": "6123:30:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$1769",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	}
																],
																"id": 1992,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6110:44:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1769_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError)"
																}
															},
															"functionReturnParameters": 1979,
															"id": 1993,
															"nodeType": "Return",
															"src": "6103:51:13"
														}
													]
												}
											},
											{
												"assignments": [
													1997
												],
												"declarations": [
													{
														"constant": false,
														"id": 1997,
														"mutability": "mutable",
														"name": "signer",
														"nameLocation": "6267:6:13",
														"nodeType": "VariableDeclaration",
														"scope": 2026,
														"src": "6259:14:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1996,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6259:7:13",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2004,
												"initialValue": {
													"arguments": [
														{
															"id": 1999,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1966,
															"src": "6286:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2000,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1968,
															"src": "6292:1:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 2001,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1970,
															"src": "6295:1:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2002,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1972,
															"src": "6298:1:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1998,
														"name": "ecrecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967290,
														"src": "6276:9:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address)"
														}
													},
													"id": 2003,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6276:24:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6259:41:13"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 2010,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2005,
														"name": "signer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1997,
														"src": "6314:6:13",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 2008,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6332:1:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 2007,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6324:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 2006,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6324:7:13",
																"typeDescriptions": {}
															}
														},
														"id": 2009,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6324:10:13",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6314:20:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2020,
												"nodeType": "IfStatement",
												"src": "6310:101:13",
												"trueBody": {
													"id": 2019,
													"nodeType": "Block",
													"src": "6336:75:13",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 2013,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "6366:1:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 2012,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "6358:7:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 2011,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "6358:7:13",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 2014,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6358:10:13",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 2015,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1769,
																			"src": "6370:12:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$1769_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 2016,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "6383:16:13",
																		"memberName": "InvalidSignature",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1765,
																		"src": "6370:29:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$1769",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	}
																],
																"id": 2017,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6357:43:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1769_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError)"
																}
															},
															"functionReturnParameters": 1979,
															"id": 2018,
															"nodeType": "Return",
															"src": "6350:50:13"
														}
													]
												}
											},
											{
												"expression": {
													"components": [
														{
															"id": 2021,
															"name": "signer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1997,
															"src": "6429:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 2022,
																"name": "RecoverError",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1769,
																"src": "6437:12:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_RecoverError_$1769_$",
																	"typeString": "type(enum ECDSA.RecoverError)"
																}
															},
															"id": 2023,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "6450:7:13",
															"memberName": "NoError",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1764,
															"src": "6437:20:13",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1769",
																"typeString": "enum ECDSA.RecoverError"
															}
														}
													],
													"id": 2024,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "6428:30:13",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1769_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError)"
													}
												},
												"functionReturnParameters": 1979,
												"id": 2025,
												"nodeType": "Return",
												"src": "6421:37:13"
											}
										]
									},
									"documentation": {
										"id": 1964,
										"nodeType": "StructuredDocumentation",
										"src": "4841:163:13",
										"text": " @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n `r` and `s` signature fields separately.\n _Available since v4.3._"
									},
									"id": 2027,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryRecover",
									"nameLocation": "5018:10:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1973,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1966,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "5037:4:13",
												"nodeType": "VariableDeclaration",
												"scope": 2027,
												"src": "5029:12:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1965,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5029:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1968,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "5049:1:13",
												"nodeType": "VariableDeclaration",
												"scope": 2027,
												"src": "5043:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1967,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5043:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1970,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "5060:1:13",
												"nodeType": "VariableDeclaration",
												"scope": 2027,
												"src": "5052:9:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1969,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5052:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1972,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "5071:1:13",
												"nodeType": "VariableDeclaration",
												"scope": 2027,
												"src": "5063:9:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1971,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5063:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5028:45:13"
									},
									"returnParameters": {
										"id": 1979,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1975,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2027,
												"src": "5097:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1974,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5097:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1978,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2027,
												"src": "5106:12:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$1769",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 1977,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1976,
														"name": "RecoverError",
														"nameLocations": [
															"5106:12:13"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1769,
														"src": "5106:12:13"
													},
													"referencedDeclaration": 1769,
													"src": "5106:12:13",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$1769",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5096:23:13"
									},
									"scope": 2125,
									"src": "5009:1456:13",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2059,
										"nodeType": "Block",
										"src": "6692:138:13",
										"statements": [
											{
												"assignments": [
													2042,
													2045
												],
												"declarations": [
													{
														"constant": false,
														"id": 2042,
														"mutability": "mutable",
														"name": "recovered",
														"nameLocation": "6711:9:13",
														"nodeType": "VariableDeclaration",
														"scope": 2059,
														"src": "6703:17:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 2041,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6703:7:13",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2045,
														"mutability": "mutable",
														"name": "error",
														"nameLocation": "6735:5:13",
														"nodeType": "VariableDeclaration",
														"scope": 2059,
														"src": "6722:18:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$1769",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 2044,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 2043,
																"name": "RecoverError",
																"nameLocations": [
																	"6722:12:13"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1769,
																"src": "6722:12:13"
															},
															"referencedDeclaration": 1769,
															"src": "6722:12:13",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1769",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2052,
												"initialValue": {
													"arguments": [
														{
															"id": 2047,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2030,
															"src": "6755:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2048,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2032,
															"src": "6761:1:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 2049,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2034,
															"src": "6764:1:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2050,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2036,
															"src": "6767:1:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 2046,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1859,
															1933,
															2027
														],
														"referencedDeclaration": 2027,
														"src": "6744:10:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1769_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"
														}
													},
													"id": 2051,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6744:25:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1769_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6702:67:13"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2054,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2045,
															"src": "6791:5:13",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1769",
																"typeString": "enum ECDSA.RecoverError"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_enum$_RecoverError_$1769",
																"typeString": "enum ECDSA.RecoverError"
															}
														],
														"id": 2053,
														"name": "_throwError",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1813,
														"src": "6779:11:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$1769_$returns$__$",
															"typeString": "function (enum ECDSA.RecoverError) pure"
														}
													},
													"id": 2055,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6779:18:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2056,
												"nodeType": "ExpressionStatement",
												"src": "6779:18:13"
											},
											{
												"expression": {
													"id": 2057,
													"name": "recovered",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2042,
													"src": "6814:9:13",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 2040,
												"id": 2058,
												"nodeType": "Return",
												"src": "6807:16:13"
											}
										]
									},
									"documentation": {
										"id": 2028,
										"nodeType": "StructuredDocumentation",
										"src": "6471:122:13",
										"text": " @dev Overload of {ECDSA-recover} that receives the `v`,\n `r` and `s` signature fields separately."
									},
									"id": 2060,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nameLocation": "6607:7:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2037,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2030,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "6623:4:13",
												"nodeType": "VariableDeclaration",
												"scope": 2060,
												"src": "6615:12:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2029,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6615:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2032,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "6635:1:13",
												"nodeType": "VariableDeclaration",
												"scope": 2060,
												"src": "6629:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 2031,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "6629:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2034,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "6646:1:13",
												"nodeType": "VariableDeclaration",
												"scope": 2060,
												"src": "6638:9:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2033,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6638:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2036,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "6657:1:13",
												"nodeType": "VariableDeclaration",
												"scope": 2060,
												"src": "6649:9:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2035,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6649:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6614:45:13"
									},
									"returnParameters": {
										"id": 2040,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2039,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2060,
												"src": "6683:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2038,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6683:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6682:9:13"
									},
									"scope": 2125,
									"src": "6598:232:13",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2069,
										"nodeType": "Block",
										"src": "7206:310:13",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7362:148:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7383:4:13",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"hexValue": "19457468657265756d205369676e6564204d6573736167653a0a3332",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7389:34:13",
																		"type": "",
																		"value": "\u0019Ethereum Signed Message:\n32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7376:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "7376:48:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7376:48:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7444:4:13",
																		"type": "",
																		"value": "0x1c"
																	},
																	{
																		"name": "hash",
																		"nodeType": "YulIdentifier",
																		"src": "7450:4:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7437:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "7437:18:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7437:18:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7468:32:13",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7489:4:13",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7495:4:13",
																		"type": "",
																		"value": "0x3c"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nodeType": "YulIdentifier",
																	"src": "7479:9:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "7479:21:13"
															},
															"variableNames": [
																{
																	"name": "message",
																	"nodeType": "YulIdentifier",
																	"src": "7468:7:13"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "paris",
												"externalReferences": [
													{
														"declaration": 2063,
														"isOffset": false,
														"isSlot": false,
														"src": "7450:4:13",
														"valueSize": 1
													},
													{
														"declaration": 2066,
														"isOffset": false,
														"isSlot": false,
														"src": "7468:7:13",
														"valueSize": 1
													}
												],
												"id": 2068,
												"nodeType": "InlineAssembly",
												"src": "7353:157:13"
											}
										]
									},
									"documentation": {
										"id": 2061,
										"nodeType": "StructuredDocumentation",
										"src": "6836:279:13",
										"text": " @dev Returns an Ethereum Signed Message, created from a `hash`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."
									},
									"id": 2070,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toEthSignedMessageHash",
									"nameLocation": "7129:22:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2064,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2063,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "7160:4:13",
												"nodeType": "VariableDeclaration",
												"scope": 2070,
												"src": "7152:12:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2062,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7152:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7151:14:13"
									},
									"returnParameters": {
										"id": 2067,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2066,
												"mutability": "mutable",
												"name": "message",
												"nameLocation": "7197:7:13",
												"nodeType": "VariableDeclaration",
												"scope": 2070,
												"src": "7189:15:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2065,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7189:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7188:17:13"
									},
									"scope": 2125,
									"src": "7120:396:13",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2091,
										"nodeType": "Block",
										"src": "7881:116:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "19457468657265756d205369676e6564204d6573736167653a0a",
																	"id": 2081,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7925:32:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4",
																		"typeString": "literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""
																	},
																	"value": "\u0019Ethereum Signed Message:\n"
																},
																{
																	"arguments": [
																		{
																			"expression": {
																				"id": 2084,
																				"name": "s",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2073,
																				"src": "7976:1:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			"id": 2085,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "7978:6:13",
																			"memberName": "length",
																			"nodeType": "MemberAccess",
																			"src": "7976:8:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 2082,
																			"name": "Strings",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1759,
																			"src": "7959:7:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_Strings_$1759_$",
																				"typeString": "type(library Strings)"
																			}
																		},
																		"id": 2083,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "7967:8:13",
																		"memberName": "toString",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1589,
																		"src": "7959:16:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																			"typeString": "function (uint256) pure returns (string memory)"
																		}
																	},
																	"id": 2086,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7959:26:13",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																},
																{
																	"id": 2087,
																	"name": "s",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2073,
																	"src": "7987:1:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4",
																		"typeString": "literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"expression": {
																	"id": 2079,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "7908:3:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2080,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "7912:12:13",
																"memberName": "encodePacked",
																"nodeType": "MemberAccess",
																"src": "7908:16:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 2088,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7908:81:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2078,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "7898:9:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 2089,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7898:92:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 2077,
												"id": 2090,
												"nodeType": "Return",
												"src": "7891:99:13"
											}
										]
									},
									"documentation": {
										"id": 2071,
										"nodeType": "StructuredDocumentation",
										"src": "7522:274:13",
										"text": " @dev Returns an Ethereum Signed Message, created from `s`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."
									},
									"id": 2092,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toEthSignedMessageHash",
									"nameLocation": "7810:22:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2074,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2073,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "7846:1:13",
												"nodeType": "VariableDeclaration",
												"scope": 2092,
												"src": "7833:14:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2072,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7833:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7832:16:13"
									},
									"returnParameters": {
										"id": 2077,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2076,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2092,
												"src": "7872:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2075,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7872:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7871:9:13"
									},
									"scope": 2125,
									"src": "7801:196:13",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2103,
										"nodeType": "Block",
										"src": "8443:290:13",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "8505:222:13",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8519:22:13",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8536:4:13",
																		"type": "",
																		"value": "0x40"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "8530:5:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "8530:11:13"
															},
															"variables": [
																{
																	"name": "ptr",
																	"nodeType": "YulTypedName",
																	"src": "8523:3:13",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "ptr",
																		"nodeType": "YulIdentifier",
																		"src": "8561:3:13"
																	},
																	{
																		"hexValue": "1901",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8566:10:13",
																		"type": "",
																		"value": "\u0019\u0001"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8554:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "8554:23:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8554:23:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "ptr",
																				"nodeType": "YulIdentifier",
																				"src": "8601:3:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8606:4:13",
																				"type": "",
																				"value": "0x02"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8597:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8597:14:13"
																	},
																	{
																		"name": "domainSeparator",
																		"nodeType": "YulIdentifier",
																		"src": "8613:15:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8590:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "8590:39:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8590:39:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "ptr",
																				"nodeType": "YulIdentifier",
																				"src": "8653:3:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8658:4:13",
																				"type": "",
																				"value": "0x22"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8649:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8649:14:13"
																	},
																	{
																		"name": "structHash",
																		"nodeType": "YulIdentifier",
																		"src": "8665:10:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8642:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "8642:34:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8642:34:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8689:28:13",
															"value": {
																"arguments": [
																	{
																		"name": "ptr",
																		"nodeType": "YulIdentifier",
																		"src": "8707:3:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8712:4:13",
																		"type": "",
																		"value": "0x42"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nodeType": "YulIdentifier",
																	"src": "8697:9:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "8697:20:13"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nodeType": "YulIdentifier",
																	"src": "8689:4:13"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "paris",
												"externalReferences": [
													{
														"declaration": 2100,
														"isOffset": false,
														"isSlot": false,
														"src": "8689:4:13",
														"valueSize": 1
													},
													{
														"declaration": 2095,
														"isOffset": false,
														"isSlot": false,
														"src": "8613:15:13",
														"valueSize": 1
													},
													{
														"declaration": 2097,
														"isOffset": false,
														"isSlot": false,
														"src": "8665:10:13",
														"valueSize": 1
													}
												],
												"id": 2102,
												"nodeType": "InlineAssembly",
												"src": "8496:231:13"
											}
										]
									},
									"documentation": {
										"id": 2093,
										"nodeType": "StructuredDocumentation",
										"src": "8003:328:13",
										"text": " @dev Returns an Ethereum Signed Typed Data, created from a\n `domainSeparator` and a `structHash`. This produces hash corresponding\n to the one signed with the\n https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n JSON-RPC method as part of EIP-712.\n See {recover}."
									},
									"id": 2104,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toTypedDataHash",
									"nameLocation": "8345:15:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2098,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2095,
												"mutability": "mutable",
												"name": "domainSeparator",
												"nameLocation": "8369:15:13",
												"nodeType": "VariableDeclaration",
												"scope": 2104,
												"src": "8361:23:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2094,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "8361:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2097,
												"mutability": "mutable",
												"name": "structHash",
												"nameLocation": "8394:10:13",
												"nodeType": "VariableDeclaration",
												"scope": 2104,
												"src": "8386:18:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2096,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "8386:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8360:45:13"
									},
									"returnParameters": {
										"id": 2101,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2100,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "8437:4:13",
												"nodeType": "VariableDeclaration",
												"scope": 2104,
												"src": "8429:12:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2099,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "8429:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8428:14:13"
									},
									"scope": 2125,
									"src": "8336:397:13",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2123,
										"nodeType": "Block",
										"src": "9048:80:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "1900",
																	"id": 2117,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9092:10:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a",
																		"typeString": "literal_string hex\"1900\""
																	},
																	"value": "\u0019\u0000"
																},
																{
																	"id": 2118,
																	"name": "validator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2107,
																	"src": "9104:9:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2119,
																	"name": "data",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2109,
																	"src": "9115:4:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a",
																		"typeString": "literal_string hex\"1900\""
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"expression": {
																	"id": 2115,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "9075:3:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2116,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "9079:12:13",
																"memberName": "encodePacked",
																"nodeType": "MemberAccess",
																"src": "9075:16:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 2120,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9075:45:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2114,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "9065:9:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 2121,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9065:56:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 2113,
												"id": 2122,
												"nodeType": "Return",
												"src": "9058:63:13"
											}
										]
									},
									"documentation": {
										"id": 2105,
										"nodeType": "StructuredDocumentation",
										"src": "8739:193:13",
										"text": " @dev Returns an Ethereum Signed Data with intended validator, created from a\n `validator` and `data` according to the version 0 of EIP-191.\n See {recover}."
									},
									"id": 2124,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toDataWithIntendedValidatorHash",
									"nameLocation": "8946:31:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2110,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2107,
												"mutability": "mutable",
												"name": "validator",
												"nameLocation": "8986:9:13",
												"nodeType": "VariableDeclaration",
												"scope": 2124,
												"src": "8978:17:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2106,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8978:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2109,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "9010:4:13",
												"nodeType": "VariableDeclaration",
												"scope": 2124,
												"src": "8997:17:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2108,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8997:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8977:38:13"
									},
									"returnParameters": {
										"id": 2113,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2112,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2124,
												"src": "9039:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2111,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "9039:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9038:9:13"
									},
									"scope": 2125,
									"src": "8937:191:13",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2126,
							"src": "369:8761:13",
							"usedErrors": []
						}
					],
					"src": "112:9019:13"
				},
				"id": 13
			},
			"@openzeppelin/contracts/utils/cryptography/EIP712.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/cryptography/EIP712.sol",
					"exportedSymbols": {
						"ECDSA": [
							2125
						],
						"EIP712": [
							2329
						],
						"IERC5267": [
							137
						],
						"Math": [
							3195
						],
						"ShortString": [
							1209
						],
						"ShortStrings": [
							1420
						],
						"SignedMath": [
							3300
						],
						"StorageSlot": [
							1530
						],
						"Strings": [
							1759
						]
					},
					"id": 2330,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2127,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".8"
							],
							"nodeType": "PragmaDirective",
							"src": "113:23:14"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
							"file": "./ECDSA.sol",
							"id": 2128,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2330,
							"sourceUnit": 2126,
							"src": "138:21:14",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/ShortStrings.sol",
							"file": "../ShortStrings.sol",
							"id": 2129,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2330,
							"sourceUnit": 1421,
							"src": "160:29:14",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/interfaces/IERC5267.sol",
							"file": "../../interfaces/IERC5267.sol",
							"id": 2130,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2330,
							"sourceUnit": 138,
							"src": "190:39:14",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 2132,
										"name": "IERC5267",
										"nameLocations": [
											"1837:8:14"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 137,
										"src": "1837:8:14"
									},
									"id": 2133,
									"nodeType": "InheritanceSpecifier",
									"src": "1837:8:14"
								}
							],
							"canonicalName": "EIP712",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 2131,
								"nodeType": "StructuredDocumentation",
								"src": "231:1577:14",
								"text": " @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n they need in their contracts using a combination of `abi.encode` and `keccak256`.\n This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n ({_hashTypedDataV4}).\n The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n the chain id to protect against replay attacks on an eventual fork of the chain.\n NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\n separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n _Available since v3.4._\n @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment"
							},
							"fullyImplemented": true,
							"id": 2329,
							"linearizedBaseContracts": [
								2329,
								137
							],
							"name": "EIP712",
							"nameLocation": "1827:6:14",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 2135,
									"libraryName": {
										"id": 2134,
										"name": "ShortStrings",
										"nameLocations": [
											"1858:12:14"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1420,
										"src": "1858:12:14"
									},
									"nodeType": "UsingForDirective",
									"src": "1852:25:14"
								},
								{
									"constant": true,
									"id": 2140,
									"mutability": "constant",
									"name": "_TYPE_HASH",
									"nameLocation": "1908:10:14",
									"nodeType": "VariableDeclaration",
									"scope": 2329,
									"src": "1883:141:14",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 2136,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "1883:7:14",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429",
												"id": 2138,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "string",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "1939:84:14",
												"typeDescriptions": {
													"typeIdentifier": "t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f",
													"typeString": "literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""
												},
												"value": "EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f",
													"typeString": "literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""
												}
											],
											"id": 2137,
											"name": "keccak256",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 4294967288,
											"src": "1929:9:14",
											"typeDescriptions": {
												"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
												"typeString": "function (bytes memory) pure returns (bytes32)"
											}
										},
										"id": 2139,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "functionCall",
										"lValueRequested": false,
										"nameLocations": [],
										"names": [],
										"nodeType": "FunctionCall",
										"src": "1929:95:14",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2142,
									"mutability": "immutable",
									"name": "_cachedDomainSeparator",
									"nameLocation": "2249:22:14",
									"nodeType": "VariableDeclaration",
									"scope": 2329,
									"src": "2223:48:14",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 2141,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "2223:7:14",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2144,
									"mutability": "immutable",
									"name": "_cachedChainId",
									"nameLocation": "2303:14:14",
									"nodeType": "VariableDeclaration",
									"scope": 2329,
									"src": "2277:40:14",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2143,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "2277:7:14",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2146,
									"mutability": "immutable",
									"name": "_cachedThis",
									"nameLocation": "2349:11:14",
									"nodeType": "VariableDeclaration",
									"scope": 2329,
									"src": "2323:37:14",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 2145,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "2323:7:14",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2148,
									"mutability": "immutable",
									"name": "_hashedName",
									"nameLocation": "2393:11:14",
									"nodeType": "VariableDeclaration",
									"scope": 2329,
									"src": "2367:37:14",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 2147,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "2367:7:14",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2150,
									"mutability": "immutable",
									"name": "_hashedVersion",
									"nameLocation": "2436:14:14",
									"nodeType": "VariableDeclaration",
									"scope": 2329,
									"src": "2410:40:14",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 2149,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "2410:7:14",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2153,
									"mutability": "immutable",
									"name": "_name",
									"nameLocation": "2487:5:14",
									"nodeType": "VariableDeclaration",
									"scope": 2329,
									"src": "2457:35:14",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_userDefinedValueType$_ShortString_$1209",
										"typeString": "ShortString"
									},
									"typeName": {
										"id": 2152,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 2151,
											"name": "ShortString",
											"nameLocations": [
												"2457:11:14"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 1209,
											"src": "2457:11:14"
										},
										"referencedDeclaration": 1209,
										"src": "2457:11:14",
										"typeDescriptions": {
											"typeIdentifier": "t_userDefinedValueType$_ShortString_$1209",
											"typeString": "ShortString"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2156,
									"mutability": "immutable",
									"name": "_version",
									"nameLocation": "2528:8:14",
									"nodeType": "VariableDeclaration",
									"scope": 2329,
									"src": "2498:38:14",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_userDefinedValueType$_ShortString_$1209",
										"typeString": "ShortString"
									},
									"typeName": {
										"id": 2155,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 2154,
											"name": "ShortString",
											"nameLocations": [
												"2498:11:14"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 1209,
											"src": "2498:11:14"
										},
										"referencedDeclaration": 1209,
										"src": "2498:11:14",
										"typeDescriptions": {
											"typeIdentifier": "t_userDefinedValueType$_ShortString_$1209",
											"typeString": "ShortString"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2158,
									"mutability": "mutable",
									"name": "_nameFallback",
									"nameLocation": "2557:13:14",
									"nodeType": "VariableDeclaration",
									"scope": 2329,
									"src": "2542:28:14",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 2157,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "2542:6:14",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2160,
									"mutability": "mutable",
									"name": "_versionFallback",
									"nameLocation": "2591:16:14",
									"nodeType": "VariableDeclaration",
									"scope": 2329,
									"src": "2576:31:14",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 2159,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "2576:6:14",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 2217,
										"nodeType": "Block",
										"src": "3233:376:14",
										"statements": [
											{
												"expression": {
													"id": 2173,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2168,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2153,
														"src": "3243:5:14",
														"typeDescriptions": {
															"typeIdentifier": "t_userDefinedValueType$_ShortString_$1209",
															"typeString": "ShortString"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 2171,
																"name": "_nameFallback",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2158,
																"src": "3282:13:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_storage",
																	"typeString": "string storage ref"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_string_storage",
																	"typeString": "string storage ref"
																}
															],
															"expression": {
																"id": 2169,
																"name": "name",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2163,
																"src": "3251:4:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string memory"
																}
															},
															"id": 2170,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3256:25:14",
															"memberName": "toShortStringWithFallback",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1361,
															"src": "3251:30:14",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_storage_ptr_$returns$_t_userDefinedValueType$_ShortString_$1209_$attached_to$_t_string_memory_ptr_$",
																"typeString": "function (string memory,string storage pointer) returns (ShortString)"
															}
														},
														"id": 2172,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3251:45:14",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_userDefinedValueType$_ShortString_$1209",
															"typeString": "ShortString"
														}
													},
													"src": "3243:53:14",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1209",
														"typeString": "ShortString"
													}
												},
												"id": 2174,
												"nodeType": "ExpressionStatement",
												"src": "3243:53:14"
											},
											{
												"expression": {
													"id": 2180,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2175,
														"name": "_version",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2156,
														"src": "3306:8:14",
														"typeDescriptions": {
															"typeIdentifier": "t_userDefinedValueType$_ShortString_$1209",
															"typeString": "ShortString"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 2178,
																"name": "_versionFallback",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2160,
																"src": "3351:16:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_storage",
																	"typeString": "string storage ref"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_string_storage",
																	"typeString": "string storage ref"
																}
															],
															"expression": {
																"id": 2176,
																"name": "version",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2165,
																"src": "3317:7:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string memory"
																}
															},
															"id": 2177,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3325:25:14",
															"memberName": "toShortStringWithFallback",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1361,
															"src": "3317:33:14",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_storage_ptr_$returns$_t_userDefinedValueType$_ShortString_$1209_$attached_to$_t_string_memory_ptr_$",
																"typeString": "function (string memory,string storage pointer) returns (ShortString)"
															}
														},
														"id": 2179,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3317:51:14",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_userDefinedValueType$_ShortString_$1209",
															"typeString": "ShortString"
														}
													},
													"src": "3306:62:14",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1209",
														"typeString": "ShortString"
													}
												},
												"id": 2181,
												"nodeType": "ExpressionStatement",
												"src": "3306:62:14"
											},
											{
												"expression": {
													"id": 2189,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2182,
														"name": "_hashedName",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2148,
														"src": "3378:11:14",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 2186,
																		"name": "name",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2163,
																		"src": "3408:4:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 2185,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3402:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 2184,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "3402:5:14",
																		"typeDescriptions": {}
																	}
																},
																"id": 2187,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3402:11:14",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 2183,
															"name": "keccak256",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967288,
															"src": "3392:9:14",
															"typeDescriptions": {
																"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																"typeString": "function (bytes memory) pure returns (bytes32)"
															}
														},
														"id": 2188,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3392:22:14",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "3378:36:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 2190,
												"nodeType": "ExpressionStatement",
												"src": "3378:36:14"
											},
											{
												"expression": {
													"id": 2198,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2191,
														"name": "_hashedVersion",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2150,
														"src": "3424:14:14",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 2195,
																		"name": "version",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2165,
																		"src": "3457:7:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 2194,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3451:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 2193,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "3451:5:14",
																		"typeDescriptions": {}
																	}
																},
																"id": 2196,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3451:14:14",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 2192,
															"name": "keccak256",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967288,
															"src": "3441:9:14",
															"typeDescriptions": {
																"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																"typeString": "function (bytes memory) pure returns (bytes32)"
															}
														},
														"id": 2197,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3441:25:14",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "3424:42:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 2199,
												"nodeType": "ExpressionStatement",
												"src": "3424:42:14"
											},
											{
												"expression": {
													"id": 2203,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2200,
														"name": "_cachedChainId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2144,
														"src": "3477:14:14",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 2201,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "3494:5:14",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 2202,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3500:7:14",
														"memberName": "chainid",
														"nodeType": "MemberAccess",
														"src": "3494:13:14",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3477:30:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2204,
												"nodeType": "ExpressionStatement",
												"src": "3477:30:14"
											},
											{
												"expression": {
													"id": 2208,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2205,
														"name": "_cachedDomainSeparator",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2142,
														"src": "3517:22:14",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 2206,
															"name": "_buildDomainSeparator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2265,
															"src": "3542:21:14",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_bytes32_$",
																"typeString": "function () view returns (bytes32)"
															}
														},
														"id": 2207,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3542:23:14",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "3517:48:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 2209,
												"nodeType": "ExpressionStatement",
												"src": "3517:48:14"
											},
											{
												"expression": {
													"id": 2215,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2210,
														"name": "_cachedThis",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2146,
														"src": "3575:11:14",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 2213,
																"name": "this",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967268,
																"src": "3597:4:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_EIP712_$2329",
																	"typeString": "contract EIP712"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_EIP712_$2329",
																	"typeString": "contract EIP712"
																}
															],
															"id": 2212,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "3589:7:14",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 2211,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "3589:7:14",
																"typeDescriptions": {}
															}
														},
														"id": 2214,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3589:13:14",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3575:27:14",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 2216,
												"nodeType": "ExpressionStatement",
												"src": "3575:27:14"
											}
										]
									},
									"documentation": {
										"id": 2161,
										"nodeType": "StructuredDocumentation",
										"src": "2614:559:14",
										"text": " @dev Initializes the domain separator and parameter caches.\n The meaning of `name` and `version` is specified in\n https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n - `version`: the current major version of the signing domain.\n NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n contract upgrade]."
									},
									"id": 2218,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2166,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2163,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "3204:4:14",
												"nodeType": "VariableDeclaration",
												"scope": 2218,
												"src": "3190:18:14",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2162,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3190:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2165,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "3224:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 2218,
												"src": "3210:21:14",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2164,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3210:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3189:43:14"
									},
									"returnParameters": {
										"id": 2167,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3233:0:14"
									},
									"scope": 2329,
									"src": "3178:431:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2243,
										"nodeType": "Block",
										"src": "3757:200:14",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 2234,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"id": 2229,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 2226,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "3779:4:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_EIP712_$2329",
																		"typeString": "contract EIP712"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_EIP712_$2329",
																		"typeString": "contract EIP712"
																	}
																],
																"id": 2225,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3771:7:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2224,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3771:7:14",
																	"typeDescriptions": {}
																}
															},
															"id": 2227,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3771:13:14",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"id": 2228,
															"name": "_cachedThis",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2146,
															"src": "3788:11:14",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"src": "3771:28:14",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2233,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 2230,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967292,
																"src": "3803:5:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 2231,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3809:7:14",
															"memberName": "chainid",
															"nodeType": "MemberAccess",
															"src": "3803:13:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"id": 2232,
															"name": "_cachedChainId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2144,
															"src": "3820:14:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3803:31:14",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "3771:63:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2241,
													"nodeType": "Block",
													"src": "3896:55:14",
													"statements": [
														{
															"expression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 2238,
																	"name": "_buildDomainSeparator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2265,
																	"src": "3917:21:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_bytes32_$",
																		"typeString": "function () view returns (bytes32)"
																	}
																},
																"id": 2239,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3917:23:14",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"functionReturnParameters": 2223,
															"id": 2240,
															"nodeType": "Return",
															"src": "3910:30:14"
														}
													]
												},
												"id": 2242,
												"nodeType": "IfStatement",
												"src": "3767:184:14",
												"trueBody": {
													"id": 2237,
													"nodeType": "Block",
													"src": "3836:54:14",
													"statements": [
														{
															"expression": {
																"id": 2235,
																"name": "_cachedDomainSeparator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2142,
																"src": "3857:22:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"functionReturnParameters": 2223,
															"id": 2236,
															"nodeType": "Return",
															"src": "3850:29:14"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2219,
										"nodeType": "StructuredDocumentation",
										"src": "3615:75:14",
										"text": " @dev Returns the domain separator for the current chain."
									},
									"id": 2244,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_domainSeparatorV4",
									"nameLocation": "3704:18:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2220,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3722:2:14"
									},
									"returnParameters": {
										"id": 2223,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2222,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2244,
												"src": "3748:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2221,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3748:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3747:9:14"
									},
									"scope": 2329,
									"src": "3695:262:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2264,
										"nodeType": "Block",
										"src": "4027:116:14",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 2252,
																	"name": "_TYPE_HASH",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2140,
																	"src": "4065:10:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 2253,
																	"name": "_hashedName",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2148,
																	"src": "4077:11:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 2254,
																	"name": "_hashedVersion",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2150,
																	"src": "4090:14:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"expression": {
																		"id": 2255,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "4106:5:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 2256,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "4112:7:14",
																	"memberName": "chainid",
																	"nodeType": "MemberAccess",
																	"src": "4106:13:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"arguments": [
																		{
																			"id": 2259,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "4129:4:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_EIP712_$2329",
																				"typeString": "contract EIP712"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_EIP712_$2329",
																				"typeString": "contract EIP712"
																			}
																		],
																		"id": 2258,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "4121:7:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 2257,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "4121:7:14",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2260,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4121:13:14",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 2250,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "4054:3:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2251,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "4058:6:14",
																"memberName": "encode",
																"nodeType": "MemberAccess",
																"src": "4054:10:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 2261,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4054:81:14",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2249,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "4044:9:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 2262,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4044:92:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 2248,
												"id": 2263,
												"nodeType": "Return",
												"src": "4037:99:14"
											}
										]
									},
									"id": 2265,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_buildDomainSeparator",
									"nameLocation": "3972:21:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2245,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3993:2:14"
									},
									"returnParameters": {
										"id": 2248,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2247,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2265,
												"src": "4018:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2246,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4018:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4017:9:14"
									},
									"scope": 2329,
									"src": "3963:180:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 2280,
										"nodeType": "Block",
										"src": "4854:79:14",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2275,
																"name": "_domainSeparatorV4",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2244,
																"src": "4893:18:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_bytes32_$",
																	"typeString": "function () view returns (bytes32)"
																}
															},
															"id": 2276,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4893:20:14",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2277,
															"name": "structHash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2268,
															"src": "4915:10:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 2273,
															"name": "ECDSA",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2125,
															"src": "4871:5:14",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_ECDSA_$2125_$",
																"typeString": "type(library ECDSA)"
															}
														},
														"id": 2274,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4877:15:14",
														"memberName": "toTypedDataHash",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2104,
														"src": "4871:21:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
															"typeString": "function (bytes32,bytes32) pure returns (bytes32)"
														}
													},
													"id": 2278,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4871:55:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 2272,
												"id": 2279,
												"nodeType": "Return",
												"src": "4864:62:14"
											}
										]
									},
									"documentation": {
										"id": 2266,
										"nodeType": "StructuredDocumentation",
										"src": "4149:614:14",
										"text": " @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n function returns the hash of the fully encoded EIP712 message for this domain.\n This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n ```solidity\n bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     keccak256(\"Mail(address to,string contents)\"),\n     mailTo,\n     keccak256(bytes(mailContents))\n )));\n address signer = ECDSA.recover(digest, signature);\n ```"
									},
									"id": 2281,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_hashTypedDataV4",
									"nameLocation": "4777:16:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2269,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2268,
												"mutability": "mutable",
												"name": "structHash",
												"nameLocation": "4802:10:14",
												"nodeType": "VariableDeclaration",
												"scope": 2281,
												"src": "4794:18:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2267,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4794:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4793:20:14"
									},
									"returnParameters": {
										"id": 2272,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2271,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2281,
												"src": "4845:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2270,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4845:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4844:9:14"
									},
									"scope": 2329,
									"src": "4768:165:14",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										136
									],
									"body": {
										"id": 2327,
										"nodeType": "Block",
										"src": "5366:288:14",
										"statements": [
											{
												"expression": {
													"components": [
														{
															"hexValue": "0f",
															"id": 2301,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "hexString",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5397:7:14",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_3d725c5ee53025f027da36bea8d3af3b6a3e9d2d1542d47c162631de48e66c1c",
																"typeString": "literal_string hex\"0f\""
															},
															"value": "\u000f"
														},
														{
															"arguments": [
																{
																	"id": 2304,
																	"name": "_nameFallback",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2158,
																	"src": "5454:13:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_storage",
																		"typeString": "string storage ref"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_string_storage",
																		"typeString": "string storage ref"
																	}
																],
																"expression": {
																	"id": 2302,
																	"name": "_name",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2153,
																	"src": "5427:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_userDefinedValueType$_ShortString_$1209",
																		"typeString": "ShortString"
																	}
																},
																"id": 2303,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "5433:20:14",
																"memberName": "toStringWithFallback",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1388,
																"src": "5427:26:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_userDefinedValueType$_ShortString_$1209_$_t_string_storage_ptr_$returns$_t_string_memory_ptr_$attached_to$_t_userDefinedValueType$_ShortString_$1209_$",
																	"typeString": "function (ShortString,string storage pointer) pure returns (string memory)"
																}
															},
															"id": 2305,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5427:41:14",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"arguments": [
																{
																	"id": 2308,
																	"name": "_versionFallback",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2160,
																	"src": "5512:16:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_storage",
																		"typeString": "string storage ref"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_string_storage",
																		"typeString": "string storage ref"
																	}
																],
																"expression": {
																	"id": 2306,
																	"name": "_version",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2156,
																	"src": "5482:8:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_userDefinedValueType$_ShortString_$1209",
																		"typeString": "ShortString"
																	}
																},
																"id": 2307,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "5491:20:14",
																"memberName": "toStringWithFallback",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1388,
																"src": "5482:29:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_userDefinedValueType$_ShortString_$1209_$_t_string_storage_ptr_$returns$_t_string_memory_ptr_$attached_to$_t_userDefinedValueType$_ShortString_$1209_$",
																	"typeString": "function (ShortString,string storage pointer) pure returns (string memory)"
																}
															},
															"id": 2309,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5482:47:14",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"expression": {
																"id": 2310,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967292,
																"src": "5543:5:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 2311,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5549:7:14",
															"memberName": "chainid",
															"nodeType": "MemberAccess",
															"src": "5543:13:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"arguments": [
																{
																	"id": 2314,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "5578:4:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_EIP712_$2329",
																		"typeString": "contract EIP712"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_EIP712_$2329",
																		"typeString": "contract EIP712"
																	}
																],
																"id": 2313,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5570:7:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2312,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "5570:7:14",
																	"typeDescriptions": {}
																}
															},
															"id": 2315,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5570:13:14",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 2318,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5605:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 2317,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5597:7:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 2316,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "5597:7:14",
																	"typeDescriptions": {}
																}
															},
															"id": 2319,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5597:10:14",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 2323,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5635:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 2322,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "NewExpression",
																"src": "5621:13:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (uint256[] memory)"
																},
																"typeName": {
																	"baseType": {
																		"id": 2320,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "5625:7:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2321,
																	"nodeType": "ArrayTypeName",
																	"src": "5625:9:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
																		"typeString": "uint256[]"
																	}
																}
															},
															"id": 2324,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5621:16:14",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
																"typeString": "uint256[] memory"
															}
														}
													],
													"id": 2325,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "5383:264:14",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_stringliteral_3d725c5ee53025f027da36bea8d3af3b6a3e9d2d1542d47c162631de48e66c1c_$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_uint256_$_t_address_$_t_bytes32_$_t_array$_t_uint256_$dyn_memory_ptr_$",
														"typeString": "tuple(literal_string hex\"0f\",string memory,string memory,uint256,address,bytes32,uint256[] memory)"
													}
												},
												"functionReturnParameters": 2300,
												"id": 2326,
												"nodeType": "Return",
												"src": "5376:271:14"
											}
										]
									},
									"documentation": {
										"id": 2282,
										"nodeType": "StructuredDocumentation",
										"src": "4939:77:14",
										"text": " @dev See {EIP-5267}.\n _Available since v4.9._"
									},
									"functionSelector": "84b0196e",
									"id": 2328,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "eip712Domain",
									"nameLocation": "5030:12:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2284,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "5097:8:14"
									},
									"parameters": {
										"id": 2283,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5042:2:14"
									},
									"returnParameters": {
										"id": 2300,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2286,
												"mutability": "mutable",
												"name": "fields",
												"nameLocation": "5143:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 2328,
												"src": "5136:13:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes1",
													"typeString": "bytes1"
												},
												"typeName": {
													"id": 2285,
													"name": "bytes1",
													"nodeType": "ElementaryTypeName",
													"src": "5136:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2288,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "5177:4:14",
												"nodeType": "VariableDeclaration",
												"scope": 2328,
												"src": "5163:18:14",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2287,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5163:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2290,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "5209:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 2328,
												"src": "5195:21:14",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2289,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5195:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2292,
												"mutability": "mutable",
												"name": "chainId",
												"nameLocation": "5238:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 2328,
												"src": "5230:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2291,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5230:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2294,
												"mutability": "mutable",
												"name": "verifyingContract",
												"nameLocation": "5267:17:14",
												"nodeType": "VariableDeclaration",
												"scope": 2328,
												"src": "5259:25:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2293,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5259:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2296,
												"mutability": "mutable",
												"name": "salt",
												"nameLocation": "5306:4:14",
												"nodeType": "VariableDeclaration",
												"scope": 2328,
												"src": "5298:12:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2295,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5298:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2299,
												"mutability": "mutable",
												"name": "extensions",
												"nameLocation": "5341:10:14",
												"nodeType": "VariableDeclaration",
												"scope": 2328,
												"src": "5324:27:14",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 2297,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "5324:7:14",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2298,
													"nodeType": "ArrayTypeName",
													"src": "5324:9:14",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5122:239:14"
									},
									"scope": 2329,
									"src": "5021:633:14",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								}
							],
							"scope": 2330,
							"src": "1809:3847:14",
							"usedErrors": [
								1217,
								1219
							]
						}
					],
					"src": "113:5544:14"
				},
				"id": 14
			},
			"@openzeppelin/contracts/utils/math/Math.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/math/Math.sol",
					"exportedSymbols": {
						"Math": [
							3195
						]
					},
					"id": 3196,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2331,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "103:23:15"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Math",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2332,
								"nodeType": "StructuredDocumentation",
								"src": "128:73:15",
								"text": " @dev Standard math utilities missing in the Solidity language."
							},
							"fullyImplemented": true,
							"id": 3195,
							"linearizedBaseContracts": [
								3195
							],
							"name": "Math",
							"nameLocation": "210:4:15",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "Math.Rounding",
									"id": 2336,
									"members": [
										{
											"id": 2333,
											"name": "Down",
											"nameLocation": "245:4:15",
											"nodeType": "EnumValue",
											"src": "245:4:15"
										},
										{
											"id": 2334,
											"name": "Up",
											"nameLocation": "287:2:15",
											"nodeType": "EnumValue",
											"src": "287:2:15"
										},
										{
											"id": 2335,
											"name": "Zero",
											"nameLocation": "318:4:15",
											"nodeType": "EnumValue",
											"src": "318:4:15"
										}
									],
									"name": "Rounding",
									"nameLocation": "226:8:15",
									"nodeType": "EnumDefinition",
									"src": "221:122:15"
								},
								{
									"body": {
										"id": 2353,
										"nodeType": "Block",
										"src": "480:37:15",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2348,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2346,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2339,
															"src": "497:1:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"id": 2347,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2341,
															"src": "501:1:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "497:5:15",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 2350,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2341,
														"src": "509:1:15",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2351,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "497:13:15",
													"trueExpression": {
														"id": 2349,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2339,
														"src": "505:1:15",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2345,
												"id": 2352,
												"nodeType": "Return",
												"src": "490:20:15"
											}
										]
									},
									"documentation": {
										"id": 2337,
										"nodeType": "StructuredDocumentation",
										"src": "349:59:15",
										"text": " @dev Returns the largest of two numbers."
									},
									"id": 2354,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "max",
									"nameLocation": "422:3:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2342,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2339,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "434:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 2354,
												"src": "426:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2338,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "426:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2341,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "445:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 2354,
												"src": "437:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2340,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "437:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "425:22:15"
									},
									"returnParameters": {
										"id": 2345,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2344,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2354,
												"src": "471:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2343,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "471:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "470:9:15"
									},
									"scope": 3195,
									"src": "413:104:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2371,
										"nodeType": "Block",
										"src": "655:37:15",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2366,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2364,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2357,
															"src": "672:1:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"id": 2365,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2359,
															"src": "676:1:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "672:5:15",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 2368,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2359,
														"src": "684:1:15",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2369,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "672:13:15",
													"trueExpression": {
														"id": 2367,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2357,
														"src": "680:1:15",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2363,
												"id": 2370,
												"nodeType": "Return",
												"src": "665:20:15"
											}
										]
									},
									"documentation": {
										"id": 2355,
										"nodeType": "StructuredDocumentation",
										"src": "523:60:15",
										"text": " @dev Returns the smallest of two numbers."
									},
									"id": 2372,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "min",
									"nameLocation": "597:3:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2360,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2357,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "609:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 2372,
												"src": "601:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2356,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "601:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2359,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "620:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 2372,
												"src": "612:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2358,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "612:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "600:22:15"
									},
									"returnParameters": {
										"id": 2363,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2362,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2372,
												"src": "646:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2361,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "646:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "645:9:15"
									},
									"scope": 3195,
									"src": "588:104:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2394,
										"nodeType": "Block",
										"src": "876:82:15",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2392,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2384,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2382,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2375,
																	"src": "931:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 2383,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2377,
																	"src": "935:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "931:5:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 2385,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "930:7:15",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2391,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2388,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2386,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2375,
																		"src": "941:1:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "^",
																	"rightExpression": {
																		"id": 2387,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2377,
																		"src": "945:1:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "941:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2389,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "940:7:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"hexValue": "32",
															"id": 2390,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "950:1:15",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"src": "940:11:15",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "930:21:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2381,
												"id": 2393,
												"nodeType": "Return",
												"src": "923:28:15"
											}
										]
									},
									"documentation": {
										"id": 2373,
										"nodeType": "StructuredDocumentation",
										"src": "698:102:15",
										"text": " @dev Returns the average of two numbers. The result is rounded towards\n zero."
									},
									"id": 2395,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "average",
									"nameLocation": "814:7:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2378,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2375,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "830:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 2395,
												"src": "822:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2374,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "822:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2377,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "841:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 2395,
												"src": "833:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2376,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "833:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "821:22:15"
									},
									"returnParameters": {
										"id": 2381,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2380,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2395,
												"src": "867:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2379,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "867:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "866:9:15"
									},
									"scope": 3195,
									"src": "805:153:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2419,
										"nodeType": "Block",
										"src": "1228:123:15",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2407,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2405,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2398,
															"src": "1316:1:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 2406,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1321:1:15",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "1316:6:15",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2416,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2414,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2411,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2409,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2398,
																			"src": "1330:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"hexValue": "31",
																			"id": 2410,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1334:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "1330:5:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2412,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1329:7:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 2413,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2400,
																"src": "1339:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1329:11:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 2415,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1343:1:15",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "1329:15:15",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2417,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "1316:28:15",
													"trueExpression": {
														"hexValue": "30",
														"id": 2408,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1325:1:15",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2404,
												"id": 2418,
												"nodeType": "Return",
												"src": "1309:35:15"
											}
										]
									},
									"documentation": {
										"id": 2396,
										"nodeType": "StructuredDocumentation",
										"src": "964:188:15",
										"text": " @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."
									},
									"id": 2420,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "ceilDiv",
									"nameLocation": "1166:7:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2401,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2398,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1182:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 2420,
												"src": "1174:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2397,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1174:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2400,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1193:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 2420,
												"src": "1185:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2399,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1185:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1173:22:15"
									},
									"returnParameters": {
										"id": 2404,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2403,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2420,
												"src": "1219:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2402,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1219:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1218:9:15"
									},
									"scope": 3195,
									"src": "1157:194:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2542,
										"nodeType": "Block",
										"src": "1765:4115:15",
										"statements": [
											{
												"id": 2541,
												"nodeType": "UncheckedBlock",
												"src": "1775:4099:15",
												"statements": [
													{
														"assignments": [
															2433
														],
														"declarations": [
															{
																"constant": false,
																"id": 2433,
																"mutability": "mutable",
																"name": "prod0",
																"nameLocation": "2104:5:15",
																"nodeType": "VariableDeclaration",
																"scope": 2541,
																"src": "2096:13:15",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2432,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2096:7:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2434,
														"nodeType": "VariableDeclarationStatement",
														"src": "2096:13:15"
													},
													{
														"assignments": [
															2436
														],
														"declarations": [
															{
																"constant": false,
																"id": 2436,
																"mutability": "mutable",
																"name": "prod1",
																"nameLocation": "2176:5:15",
																"nodeType": "VariableDeclaration",
																"scope": 2541,
																"src": "2168:13:15",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2435,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2168:7:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2437,
														"nodeType": "VariableDeclarationStatement",
														"src": "2168:13:15"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "2248:157:15",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2266:30:15",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nodeType": "YulIdentifier",
																				"src": "2283:1:15"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "2286:1:15"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2293:1:15",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nodeType": "YulIdentifier",
																					"src": "2289:3:15"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2289:6:15"
																			}
																		],
																		"functionName": {
																			"name": "mulmod",
																			"nodeType": "YulIdentifier",
																			"src": "2276:6:15"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2276:20:15"
																	},
																	"variables": [
																		{
																			"name": "mm",
																			"nodeType": "YulTypedName",
																			"src": "2270:2:15",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2313:18:15",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nodeType": "YulIdentifier",
																				"src": "2326:1:15"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "2329:1:15"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "2322:3:15"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2322:9:15"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nodeType": "YulIdentifier",
																			"src": "2313:5:15"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2348:43:15",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "mm",
																						"nodeType": "YulIdentifier",
																						"src": "2365:2:15"
																					},
																					{
																						"name": "prod0",
																						"nodeType": "YulIdentifier",
																						"src": "2369:5:15"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "2361:3:15"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2361:14:15"
																			},
																			{
																				"arguments": [
																					{
																						"name": "mm",
																						"nodeType": "YulIdentifier",
																						"src": "2380:2:15"
																					},
																					{
																						"name": "prod0",
																						"nodeType": "YulIdentifier",
																						"src": "2384:5:15"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "2377:2:15"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2377:13:15"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2357:3:15"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2357:34:15"
																	},
																	"variableNames": [
																		{
																			"name": "prod1",
																			"nodeType": "YulIdentifier",
																			"src": "2348:5:15"
																		}
																	]
																}
															]
														},
														"evmVersion": "paris",
														"externalReferences": [
															{
																"declaration": 2433,
																"isOffset": false,
																"isSlot": false,
																"src": "2313:5:15",
																"valueSize": 1
															},
															{
																"declaration": 2433,
																"isOffset": false,
																"isSlot": false,
																"src": "2369:5:15",
																"valueSize": 1
															},
															{
																"declaration": 2433,
																"isOffset": false,
																"isSlot": false,
																"src": "2384:5:15",
																"valueSize": 1
															},
															{
																"declaration": 2436,
																"isOffset": false,
																"isSlot": false,
																"src": "2348:5:15",
																"valueSize": 1
															},
															{
																"declaration": 2423,
																"isOffset": false,
																"isSlot": false,
																"src": "2283:1:15",
																"valueSize": 1
															},
															{
																"declaration": 2423,
																"isOffset": false,
																"isSlot": false,
																"src": "2326:1:15",
																"valueSize": 1
															},
															{
																"declaration": 2425,
																"isOffset": false,
																"isSlot": false,
																"src": "2286:1:15",
																"valueSize": 1
															},
															{
																"declaration": 2425,
																"isOffset": false,
																"isSlot": false,
																"src": "2329:1:15",
																"valueSize": 1
															}
														],
														"id": 2438,
														"nodeType": "InlineAssembly",
														"src": "2239:166:15"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2441,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2439,
																"name": "prod1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2436,
																"src": "2486:5:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2440,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2495:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2486:10:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2447,
														"nodeType": "IfStatement",
														"src": "2482:368:15",
														"trueBody": {
															"id": 2446,
															"nodeType": "Block",
															"src": "2498:352:15",
															"statements": [
																{
																	"expression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2444,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2442,
																			"name": "prod0",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2433,
																			"src": "2816:5:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "/",
																		"rightExpression": {
																			"id": 2443,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2427,
																			"src": "2824:11:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "2816:19:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"functionReturnParameters": 2431,
																	"id": 2445,
																	"nodeType": "Return",
																	"src": "2809:26:15"
																}
															]
														}
													},
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2451,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2449,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2427,
																		"src": "2960:11:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"id": 2450,
																		"name": "prod1",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2436,
																		"src": "2974:5:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2960:19:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"hexValue": "4d6174683a206d756c446976206f766572666c6f77",
																	"id": 2452,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2981:23:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851",
																		"typeString": "literal_string \"Math: mulDiv overflow\""
																	},
																	"value": "Math: mulDiv overflow"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851",
																		"typeString": "literal_string \"Math: mulDiv overflow\""
																	}
																],
																"id": 2448,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "2952:7:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 2453,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2952:53:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 2454,
														"nodeType": "ExpressionStatement",
														"src": "2952:53:15"
													},
													{
														"assignments": [
															2456
														],
														"declarations": [
															{
																"constant": false,
																"id": 2456,
																"mutability": "mutable",
																"name": "remainder",
																"nameLocation": "3269:9:15",
																"nodeType": "VariableDeclaration",
																"scope": 2541,
																"src": "3261:17:15",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2455,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "3261:7:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2457,
														"nodeType": "VariableDeclarationStatement",
														"src": "3261:17:15"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "3301:291:15",
															"statements": [
																{
																	"nodeType": "YulAssignment",
																	"src": "3370:38:15",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nodeType": "YulIdentifier",
																				"src": "3390:1:15"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "3393:1:15"
																			},
																			{
																				"name": "denominator",
																				"nodeType": "YulIdentifier",
																				"src": "3396:11:15"
																			}
																		],
																		"functionName": {
																			"name": "mulmod",
																			"nodeType": "YulIdentifier",
																			"src": "3383:6:15"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3383:25:15"
																	},
																	"variableNames": [
																		{
																			"name": "remainder",
																			"nodeType": "YulIdentifier",
																			"src": "3370:9:15"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3490:41:15",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod1",
																				"nodeType": "YulIdentifier",
																				"src": "3503:5:15"
																			},
																			{
																				"arguments": [
																					{
																						"name": "remainder",
																						"nodeType": "YulIdentifier",
																						"src": "3513:9:15"
																					},
																					{
																						"name": "prod0",
																						"nodeType": "YulIdentifier",
																						"src": "3524:5:15"
																					}
																				],
																				"functionName": {
																					"name": "gt",
																					"nodeType": "YulIdentifier",
																					"src": "3510:2:15"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3510:20:15"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3499:3:15"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3499:32:15"
																	},
																	"variableNames": [
																		{
																			"name": "prod1",
																			"nodeType": "YulIdentifier",
																			"src": "3490:5:15"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3548:30:15",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod0",
																				"nodeType": "YulIdentifier",
																				"src": "3561:5:15"
																			},
																			{
																				"name": "remainder",
																				"nodeType": "YulIdentifier",
																				"src": "3568:9:15"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3557:3:15"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3557:21:15"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nodeType": "YulIdentifier",
																			"src": "3548:5:15"
																		}
																	]
																}
															]
														},
														"evmVersion": "paris",
														"externalReferences": [
															{
																"declaration": 2427,
																"isOffset": false,
																"isSlot": false,
																"src": "3396:11:15",
																"valueSize": 1
															},
															{
																"declaration": 2433,
																"isOffset": false,
																"isSlot": false,
																"src": "3524:5:15",
																"valueSize": 1
															},
															{
																"declaration": 2433,
																"isOffset": false,
																"isSlot": false,
																"src": "3548:5:15",
																"valueSize": 1
															},
															{
																"declaration": 2433,
																"isOffset": false,
																"isSlot": false,
																"src": "3561:5:15",
																"valueSize": 1
															},
															{
																"declaration": 2436,
																"isOffset": false,
																"isSlot": false,
																"src": "3490:5:15",
																"valueSize": 1
															},
															{
																"declaration": 2436,
																"isOffset": false,
																"isSlot": false,
																"src": "3503:5:15",
																"valueSize": 1
															},
															{
																"declaration": 2456,
																"isOffset": false,
																"isSlot": false,
																"src": "3370:9:15",
																"valueSize": 1
															},
															{
																"declaration": 2456,
																"isOffset": false,
																"isSlot": false,
																"src": "3513:9:15",
																"valueSize": 1
															},
															{
																"declaration": 2456,
																"isOffset": false,
																"isSlot": false,
																"src": "3568:9:15",
																"valueSize": 1
															},
															{
																"declaration": 2423,
																"isOffset": false,
																"isSlot": false,
																"src": "3390:1:15",
																"valueSize": 1
															},
															{
																"declaration": 2425,
																"isOffset": false,
																"isSlot": false,
																"src": "3393:1:15",
																"valueSize": 1
															}
														],
														"id": 2458,
														"nodeType": "InlineAssembly",
														"src": "3292:300:15"
													},
													{
														"assignments": [
															2460
														],
														"declarations": [
															{
																"constant": false,
																"id": 2460,
																"mutability": "mutable",
																"name": "twos",
																"nameLocation": "3907:4:15",
																"nodeType": "VariableDeclaration",
																"scope": 2541,
																"src": "3899:12:15",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2459,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "3899:7:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2468,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2467,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2461,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2427,
																"src": "3914:11:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2465,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2463,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "UnaryOperation",
																			"operator": "~",
																			"prefix": true,
																			"src": "3929:12:15",
																			"subExpression": {
																				"id": 2462,
																				"name": "denominator",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2427,
																				"src": "3930:11:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"hexValue": "31",
																			"id": 2464,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3944:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "3929:16:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2466,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3928:18:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3914:32:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "3899:47:15"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "3969:362:15",
															"statements": [
																{
																	"nodeType": "YulAssignment",
																	"src": "4034:37:15",
																	"value": {
																		"arguments": [
																			{
																				"name": "denominator",
																				"nodeType": "YulIdentifier",
																				"src": "4053:11:15"
																			},
																			{
																				"name": "twos",
																				"nodeType": "YulIdentifier",
																				"src": "4066:4:15"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nodeType": "YulIdentifier",
																			"src": "4049:3:15"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4049:22:15"
																	},
																	"variableNames": [
																		{
																			"name": "denominator",
																			"nodeType": "YulIdentifier",
																			"src": "4034:11:15"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "4138:25:15",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod0",
																				"nodeType": "YulIdentifier",
																				"src": "4151:5:15"
																			},
																			{
																				"name": "twos",
																				"nodeType": "YulIdentifier",
																				"src": "4158:4:15"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nodeType": "YulIdentifier",
																			"src": "4147:3:15"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4147:16:15"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nodeType": "YulIdentifier",
																			"src": "4138:5:15"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "4278:39:15",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4298:1:15",
																								"type": "",
																								"value": "0"
																							},
																							{
																								"name": "twos",
																								"nodeType": "YulIdentifier",
																								"src": "4301:4:15"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "4294:3:15"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4294:12:15"
																					},
																					{
																						"name": "twos",
																						"nodeType": "YulIdentifier",
																						"src": "4308:4:15"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "4290:3:15"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4290:23:15"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4315:1:15",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4286:3:15"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4286:31:15"
																	},
																	"variableNames": [
																		{
																			"name": "twos",
																			"nodeType": "YulIdentifier",
																			"src": "4278:4:15"
																		}
																	]
																}
															]
														},
														"evmVersion": "paris",
														"externalReferences": [
															{
																"declaration": 2427,
																"isOffset": false,
																"isSlot": false,
																"src": "4034:11:15",
																"valueSize": 1
															},
															{
																"declaration": 2427,
																"isOffset": false,
																"isSlot": false,
																"src": "4053:11:15",
																"valueSize": 1
															},
															{
																"declaration": 2433,
																"isOffset": false,
																"isSlot": false,
																"src": "4138:5:15",
																"valueSize": 1
															},
															{
																"declaration": 2433,
																"isOffset": false,
																"isSlot": false,
																"src": "4151:5:15",
																"valueSize": 1
															},
															{
																"declaration": 2460,
																"isOffset": false,
																"isSlot": false,
																"src": "4066:4:15",
																"valueSize": 1
															},
															{
																"declaration": 2460,
																"isOffset": false,
																"isSlot": false,
																"src": "4158:4:15",
																"valueSize": 1
															},
															{
																"declaration": 2460,
																"isOffset": false,
																"isSlot": false,
																"src": "4278:4:15",
																"valueSize": 1
															},
															{
																"declaration": 2460,
																"isOffset": false,
																"isSlot": false,
																"src": "4301:4:15",
																"valueSize": 1
															},
															{
																"declaration": 2460,
																"isOffset": false,
																"isSlot": false,
																"src": "4308:4:15",
																"valueSize": 1
															}
														],
														"id": 2469,
														"nodeType": "InlineAssembly",
														"src": "3960:371:15"
													},
													{
														"expression": {
															"id": 2474,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2470,
																"name": "prod0",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2433,
																"src": "4397:5:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "|=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2473,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2471,
																	"name": "prod1",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2436,
																	"src": "4406:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 2472,
																	"name": "twos",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2460,
																	"src": "4414:4:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4406:12:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4397:21:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2475,
														"nodeType": "ExpressionStatement",
														"src": "4397:21:15"
													},
													{
														"assignments": [
															2477
														],
														"declarations": [
															{
																"constant": false,
																"id": 2477,
																"mutability": "mutable",
																"name": "inverse",
																"nameLocation": "4744:7:15",
																"nodeType": "VariableDeclaration",
																"scope": 2541,
																"src": "4736:15:15",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2476,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "4736:7:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2484,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2483,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2480,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "33",
																			"id": 2478,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "4755:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_3_by_1",
																				"typeString": "int_const 3"
																			},
																			"value": "3"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"id": 2479,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2427,
																			"src": "4759:11:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "4755:15:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2481,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "4754:17:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "^",
															"rightExpression": {
																"hexValue": "32",
																"id": 2482,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4774:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "4754:21:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "4736:39:15"
													},
													{
														"expression": {
															"id": 2491,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2485,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2477,
																"src": "4992:7:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2490,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2486,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5003:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2489,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2487,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2427,
																		"src": "5007:11:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2488,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2477,
																		"src": "5021:7:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5007:21:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5003:25:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4992:36:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2492,
														"nodeType": "ExpressionStatement",
														"src": "4992:36:15"
													},
													{
														"expression": {
															"id": 2499,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2493,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2477,
																"src": "5061:7:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2498,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2494,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5072:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2497,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2495,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2427,
																		"src": "5076:11:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2496,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2477,
																		"src": "5090:7:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5076:21:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5072:25:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5061:36:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2500,
														"nodeType": "ExpressionStatement",
														"src": "5061:36:15"
													},
													{
														"expression": {
															"id": 2507,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2501,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2477,
																"src": "5131:7:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2506,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2502,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5142:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2505,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2503,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2427,
																		"src": "5146:11:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2504,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2477,
																		"src": "5160:7:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5146:21:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5142:25:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5131:36:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2508,
														"nodeType": "ExpressionStatement",
														"src": "5131:36:15"
													},
													{
														"expression": {
															"id": 2515,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2509,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2477,
																"src": "5201:7:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2514,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2510,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5212:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2513,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2511,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2427,
																		"src": "5216:11:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2512,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2477,
																		"src": "5230:7:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5216:21:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5212:25:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5201:36:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2516,
														"nodeType": "ExpressionStatement",
														"src": "5201:36:15"
													},
													{
														"expression": {
															"id": 2523,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2517,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2477,
																"src": "5271:7:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2522,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2518,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5282:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2521,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2519,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2427,
																		"src": "5286:11:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2520,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2477,
																		"src": "5300:7:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5286:21:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5282:25:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5271:36:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2524,
														"nodeType": "ExpressionStatement",
														"src": "5271:36:15"
													},
													{
														"expression": {
															"id": 2531,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2525,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2477,
																"src": "5342:7:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2530,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2526,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5353:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2529,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2527,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2427,
																		"src": "5357:11:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2528,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2477,
																		"src": "5371:7:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5357:21:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5353:25:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5342:36:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2532,
														"nodeType": "ExpressionStatement",
														"src": "5342:36:15"
													},
													{
														"expression": {
															"id": 2537,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2533,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2430,
																"src": "5812:6:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2536,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2534,
																	"name": "prod0",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2433,
																	"src": "5821:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 2535,
																	"name": "inverse",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2477,
																	"src": "5829:7:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5821:15:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5812:24:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2538,
														"nodeType": "ExpressionStatement",
														"src": "5812:24:15"
													},
													{
														"expression": {
															"id": 2539,
															"name": "result",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2430,
															"src": "5857:6:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2431,
														"id": 2540,
														"nodeType": "Return",
														"src": "5850:13:15"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2421,
										"nodeType": "StructuredDocumentation",
										"src": "1357:305:15",
										"text": " @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."
									},
									"id": 2543,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nameLocation": "1676:6:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2428,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2423,
												"mutability": "mutable",
												"name": "x",
												"nameLocation": "1691:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 2543,
												"src": "1683:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2422,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1683:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2425,
												"mutability": "mutable",
												"name": "y",
												"nameLocation": "1702:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 2543,
												"src": "1694:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2424,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1694:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2427,
												"mutability": "mutable",
												"name": "denominator",
												"nameLocation": "1713:11:15",
												"nodeType": "VariableDeclaration",
												"scope": 2543,
												"src": "1705:19:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2426,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1705:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1682:43:15"
									},
									"returnParameters": {
										"id": 2431,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2430,
												"mutability": "mutable",
												"name": "result",
												"nameLocation": "1757:6:15",
												"nodeType": "VariableDeclaration",
												"scope": 2543,
												"src": "1749:14:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2429,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1749:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1748:16:15"
									},
									"scope": 3195,
									"src": "1667:4213:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2586,
										"nodeType": "Block",
										"src": "6122:189:15",
										"statements": [
											{
												"assignments": [
													2559
												],
												"declarations": [
													{
														"constant": false,
														"id": 2559,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "6140:6:15",
														"nodeType": "VariableDeclaration",
														"scope": 2586,
														"src": "6132:14:15",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2558,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "6132:7:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2565,
												"initialValue": {
													"arguments": [
														{
															"id": 2561,
															"name": "x",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2546,
															"src": "6156:1:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2562,
															"name": "y",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2548,
															"src": "6159:1:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2563,
															"name": "denominator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2550,
															"src": "6162:11:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2560,
														"name": "mulDiv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2543,
															2587
														],
														"referencedDeclaration": 2543,
														"src": "6149:6:15",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 2564,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6149:25:15",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6132:42:15"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 2577,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_enum$_Rounding_$2336",
															"typeString": "enum Math.Rounding"
														},
														"id": 2569,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2566,
															"name": "rounding",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2553,
															"src": "6188:8:15",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$2336",
																"typeString": "enum Math.Rounding"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"expression": {
																"id": 2567,
																"name": "Rounding",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2336,
																"src": "6200:8:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_Rounding_$2336_$",
																	"typeString": "type(enum Math.Rounding)"
																}
															},
															"id": 2568,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "6209:2:15",
															"memberName": "Up",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2334,
															"src": "6200:11:15",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$2336",
																"typeString": "enum Math.Rounding"
															}
														},
														"src": "6188:23:15",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2576,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 2571,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2546,
																	"src": "6222:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 2572,
																	"name": "y",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2548,
																	"src": "6225:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 2573,
																	"name": "denominator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2550,
																	"src": "6228:11:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2570,
																"name": "mulmod",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967280,
																"src": "6215:6:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 2574,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6215:25:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 2575,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6243:1:15",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "6215:29:15",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "6188:56:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2583,
												"nodeType": "IfStatement",
												"src": "6184:98:15",
												"trueBody": {
													"id": 2582,
													"nodeType": "Block",
													"src": "6246:36:15",
													"statements": [
														{
															"expression": {
																"id": 2580,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2578,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2559,
																	"src": "6260:6:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"hexValue": "31",
																	"id": 2579,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6270:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "6260:11:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 2581,
															"nodeType": "ExpressionStatement",
															"src": "6260:11:15"
														}
													]
												}
											},
											{
												"expression": {
													"id": 2584,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2559,
													"src": "6298:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2557,
												"id": 2585,
												"nodeType": "Return",
												"src": "6291:13:15"
											}
										]
									},
									"documentation": {
										"id": 2544,
										"nodeType": "StructuredDocumentation",
										"src": "5886:121:15",
										"text": " @notice Calculates x * y / denominator with full precision, following the selected rounding direction."
									},
									"id": 2587,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nameLocation": "6021:6:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2554,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2546,
												"mutability": "mutable",
												"name": "x",
												"nameLocation": "6036:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 2587,
												"src": "6028:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2545,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6028:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2548,
												"mutability": "mutable",
												"name": "y",
												"nameLocation": "6047:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 2587,
												"src": "6039:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2547,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6039:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2550,
												"mutability": "mutable",
												"name": "denominator",
												"nameLocation": "6058:11:15",
												"nodeType": "VariableDeclaration",
												"scope": 2587,
												"src": "6050:19:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2549,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6050:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2553,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "6080:8:15",
												"nodeType": "VariableDeclaration",
												"scope": 2587,
												"src": "6071:17:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2336",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 2552,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2551,
														"name": "Rounding",
														"nameLocations": [
															"6071:8:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2336,
														"src": "6071:8:15"
													},
													"referencedDeclaration": 2336,
													"src": "6071:8:15",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2336",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6027:62:15"
									},
									"returnParameters": {
										"id": 2557,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2556,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2587,
												"src": "6113:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2555,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6113:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6112:9:15"
									},
									"scope": 3195,
									"src": "6012:299:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2698,
										"nodeType": "Block",
										"src": "6587:1585:15",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2597,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2595,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2590,
														"src": "6601:1:15",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 2596,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6606:1:15",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "6601:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2601,
												"nodeType": "IfStatement",
												"src": "6597:45:15",
												"trueBody": {
													"id": 2600,
													"nodeType": "Block",
													"src": "6609:33:15",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 2598,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6630:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 2594,
															"id": 2599,
															"nodeType": "Return",
															"src": "6623:8:15"
														}
													]
												}
											},
											{
												"assignments": [
													2603
												],
												"declarations": [
													{
														"constant": false,
														"id": 2603,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "7329:6:15",
														"nodeType": "VariableDeclaration",
														"scope": 2698,
														"src": "7321:14:15",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2602,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7321:7:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2612,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2611,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"hexValue": "31",
														"id": 2604,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7338:1:15",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2609,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 2606,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2590,
																			"src": "7349:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 2605,
																		"name": "log2",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [
																			2867,
																			2903
																		],
																		"referencedDeclaration": 2867,
																		"src": "7344:4:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256) pure returns (uint256)"
																		}
																	},
																	"id": 2607,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7344:7:15",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2608,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7355:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7344:12:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 2610,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "7343:14:15",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7338:19:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7321:36:15"
											},
											{
												"id": 2697,
												"nodeType": "UncheckedBlock",
												"src": "7758:408:15",
												"statements": [
													{
														"expression": {
															"id": 2622,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2613,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2603,
																"src": "7782:6:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2621,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2618,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2614,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2603,
																				"src": "7792:6:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2617,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2615,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2590,
																					"src": "7801:1:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2616,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2603,
																					"src": "7805:6:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7801:10:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7792:19:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2619,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7791:21:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2620,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7816:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7791:26:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7782:35:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2623,
														"nodeType": "ExpressionStatement",
														"src": "7782:35:15"
													},
													{
														"expression": {
															"id": 2633,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2624,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2603,
																"src": "7831:6:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2632,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2629,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2625,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2603,
																				"src": "7841:6:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2628,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2626,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2590,
																					"src": "7850:1:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2627,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2603,
																					"src": "7854:6:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7850:10:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7841:19:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2630,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7840:21:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2631,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7865:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7840:26:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7831:35:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2634,
														"nodeType": "ExpressionStatement",
														"src": "7831:35:15"
													},
													{
														"expression": {
															"id": 2644,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2635,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2603,
																"src": "7880:6:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2643,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2640,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2636,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2603,
																				"src": "7890:6:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2639,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2637,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2590,
																					"src": "7899:1:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2638,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2603,
																					"src": "7903:6:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7899:10:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7890:19:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2641,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7889:21:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2642,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7914:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7889:26:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7880:35:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2645,
														"nodeType": "ExpressionStatement",
														"src": "7880:35:15"
													},
													{
														"expression": {
															"id": 2655,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2646,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2603,
																"src": "7929:6:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2654,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2651,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2647,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2603,
																				"src": "7939:6:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2650,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2648,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2590,
																					"src": "7948:1:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2649,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2603,
																					"src": "7952:6:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7948:10:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7939:19:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2652,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7938:21:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2653,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7963:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7938:26:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7929:35:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2656,
														"nodeType": "ExpressionStatement",
														"src": "7929:35:15"
													},
													{
														"expression": {
															"id": 2666,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2657,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2603,
																"src": "7978:6:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2665,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2662,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2658,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2603,
																				"src": "7988:6:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2661,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2659,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2590,
																					"src": "7997:1:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2660,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2603,
																					"src": "8001:6:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7997:10:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7988:19:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2663,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7987:21:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2664,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8012:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7987:26:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7978:35:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2667,
														"nodeType": "ExpressionStatement",
														"src": "7978:35:15"
													},
													{
														"expression": {
															"id": 2677,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2668,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2603,
																"src": "8027:6:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2676,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2673,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2669,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2603,
																				"src": "8037:6:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2672,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2670,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2590,
																					"src": "8046:1:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2671,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2603,
																					"src": "8050:6:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "8046:10:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "8037:19:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2674,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "8036:21:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2675,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8061:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "8036:26:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8027:35:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2678,
														"nodeType": "ExpressionStatement",
														"src": "8027:35:15"
													},
													{
														"expression": {
															"id": 2688,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2679,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2603,
																"src": "8076:6:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2687,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2684,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2680,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2603,
																				"src": "8086:6:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2683,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2681,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2590,
																					"src": "8095:1:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2682,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2603,
																					"src": "8099:6:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "8095:10:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "8086:19:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2685,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "8085:21:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2686,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8110:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "8085:26:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8076:35:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2689,
														"nodeType": "ExpressionStatement",
														"src": "8076:35:15"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 2691,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2603,
																	"src": "8136:6:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2694,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2692,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2590,
																		"src": "8144:1:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 2693,
																		"name": "result",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2603,
																		"src": "8148:6:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "8144:10:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2690,
																"name": "min",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2372,
																"src": "8132:3:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 2695,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8132:23:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2594,
														"id": 2696,
														"nodeType": "Return",
														"src": "8125:30:15"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2588,
										"nodeType": "StructuredDocumentation",
										"src": "6317:208:15",
										"text": " @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."
									},
									"id": 2699,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sqrt",
									"nameLocation": "6539:4:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2591,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2590,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "6552:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 2699,
												"src": "6544:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2589,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6544:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6543:11:15"
									},
									"returnParameters": {
										"id": 2594,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2593,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2699,
												"src": "6578:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2592,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6578:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6577:9:15"
									},
									"scope": 3195,
									"src": "6530:1642:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2734,
										"nodeType": "Block",
										"src": "8348:161:15",
										"statements": [
											{
												"id": 2733,
												"nodeType": "UncheckedBlock",
												"src": "8358:145:15",
												"statements": [
													{
														"assignments": [
															2711
														],
														"declarations": [
															{
																"constant": false,
																"id": 2711,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "8390:6:15",
																"nodeType": "VariableDeclaration",
																"scope": 2733,
																"src": "8382:14:15",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2710,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "8382:7:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2715,
														"initialValue": {
															"arguments": [
																{
																	"id": 2713,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2702,
																	"src": "8404:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2712,
																"name": "sqrt",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	2699,
																	2735
																],
																"referencedDeclaration": 2699,
																"src": "8399:4:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 2714,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8399:7:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "8382:24:15"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2731,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2716,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2711,
																"src": "8427:6:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 2726,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_enum$_Rounding_$2336",
																					"typeString": "enum Math.Rounding"
																				},
																				"id": 2720,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2717,
																					"name": "rounding",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2705,
																					"src": "8437:8:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$2336",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"expression": {
																						"id": 2718,
																						"name": "Rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2336,
																						"src": "8449:8:15",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_enum$_Rounding_$2336_$",
																							"typeString": "type(enum Math.Rounding)"
																						}
																					},
																					"id": 2719,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberLocation": "8458:2:15",
																					"memberName": "Up",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 2334,
																					"src": "8449:11:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$2336",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"src": "8437:23:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2725,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 2723,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 2721,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2711,
																						"src": "8464:6:15",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"id": 2722,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2711,
																						"src": "8473:6:15",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "8464:15:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 2724,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2702,
																					"src": "8482:1:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "8464:19:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "8437:46:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 2728,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8490:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 2729,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "8437:54:15",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 2727,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8486:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 2730,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "8436:56:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "8427:65:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2709,
														"id": 2732,
														"nodeType": "Return",
														"src": "8420:72:15"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2700,
										"nodeType": "StructuredDocumentation",
										"src": "8178:89:15",
										"text": " @notice Calculates sqrt(a), following the selected rounding direction."
									},
									"id": 2735,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sqrt",
									"nameLocation": "8281:4:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2706,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2702,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "8294:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 2735,
												"src": "8286:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2701,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8286:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2705,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "8306:8:15",
												"nodeType": "VariableDeclaration",
												"scope": 2735,
												"src": "8297:17:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2336",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 2704,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2703,
														"name": "Rounding",
														"nameLocations": [
															"8297:8:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2336,
														"src": "8297:8:15"
													},
													"referencedDeclaration": 2336,
													"src": "8297:8:15",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2336",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8285:30:15"
									},
									"returnParameters": {
										"id": 2709,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2708,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2735,
												"src": "8339:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2707,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8339:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8338:9:15"
									},
									"scope": 3195,
									"src": "8272:237:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2866,
										"nodeType": "Block",
										"src": "8694:922:15",
										"statements": [
											{
												"assignments": [
													2744
												],
												"declarations": [
													{
														"constant": false,
														"id": 2744,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "8712:6:15",
														"nodeType": "VariableDeclaration",
														"scope": 2866,
														"src": "8704:14:15",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2743,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8704:7:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2746,
												"initialValue": {
													"hexValue": "30",
													"id": 2745,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "8721:1:15",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8704:18:15"
											},
											{
												"id": 2863,
												"nodeType": "UncheckedBlock",
												"src": "8732:855:15",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2751,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2749,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2747,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2738,
																	"src": "8760:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 2748,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8769:3:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "8760:12:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2750,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8775:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "8760:16:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2761,
														"nodeType": "IfStatement",
														"src": "8756:99:15",
														"trueBody": {
															"id": 2760,
															"nodeType": "Block",
															"src": "8778:77:15",
															"statements": [
																{
																	"expression": {
																		"id": 2754,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2752,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2738,
																			"src": "8796:5:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 2753,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8806:3:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "8796:13:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2755,
																	"nodeType": "ExpressionStatement",
																	"src": "8796:13:15"
																},
																{
																	"expression": {
																		"id": 2758,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2756,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2744,
																			"src": "8827:6:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 2757,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8837:3:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "8827:13:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2759,
																	"nodeType": "ExpressionStatement",
																	"src": "8827:13:15"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2766,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2764,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2762,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2738,
																	"src": "8872:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 2763,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8881:2:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "8872:11:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2765,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8886:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "8872:15:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2776,
														"nodeType": "IfStatement",
														"src": "8868:96:15",
														"trueBody": {
															"id": 2775,
															"nodeType": "Block",
															"src": "8889:75:15",
															"statements": [
																{
																	"expression": {
																		"id": 2769,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2767,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2738,
																			"src": "8907:5:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 2768,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8917:2:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "8907:12:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2770,
																	"nodeType": "ExpressionStatement",
																	"src": "8907:12:15"
																},
																{
																	"expression": {
																		"id": 2773,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2771,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2744,
																			"src": "8937:6:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 2772,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8947:2:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "8937:12:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2774,
																	"nodeType": "ExpressionStatement",
																	"src": "8937:12:15"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2781,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2779,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2777,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2738,
																	"src": "8981:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 2778,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8990:2:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "8981:11:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2780,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8995:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "8981:15:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2791,
														"nodeType": "IfStatement",
														"src": "8977:96:15",
														"trueBody": {
															"id": 2790,
															"nodeType": "Block",
															"src": "8998:75:15",
															"statements": [
																{
																	"expression": {
																		"id": 2784,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2782,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2738,
																			"src": "9016:5:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 2783,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9026:2:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "9016:12:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2785,
																	"nodeType": "ExpressionStatement",
																	"src": "9016:12:15"
																},
																{
																	"expression": {
																		"id": 2788,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2786,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2744,
																			"src": "9046:6:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 2787,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9056:2:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "9046:12:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2789,
																	"nodeType": "ExpressionStatement",
																	"src": "9046:12:15"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2796,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2794,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2792,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2738,
																	"src": "9090:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 2793,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9099:2:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "9090:11:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2795,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9104:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "9090:15:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2806,
														"nodeType": "IfStatement",
														"src": "9086:96:15",
														"trueBody": {
															"id": 2805,
															"nodeType": "Block",
															"src": "9107:75:15",
															"statements": [
																{
																	"expression": {
																		"id": 2799,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2797,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2738,
																			"src": "9125:5:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 2798,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9135:2:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "9125:12:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2800,
																	"nodeType": "ExpressionStatement",
																	"src": "9125:12:15"
																},
																{
																	"expression": {
																		"id": 2803,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2801,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2744,
																			"src": "9155:6:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 2802,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9165:2:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "9155:12:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2804,
																	"nodeType": "ExpressionStatement",
																	"src": "9155:12:15"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2811,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2809,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2807,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2738,
																	"src": "9199:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 2808,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9208:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "9199:10:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2810,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9212:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "9199:14:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2821,
														"nodeType": "IfStatement",
														"src": "9195:93:15",
														"trueBody": {
															"id": 2820,
															"nodeType": "Block",
															"src": "9215:73:15",
															"statements": [
																{
																	"expression": {
																		"id": 2814,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2812,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2738,
																			"src": "9233:5:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 2813,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9243:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "9233:11:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2815,
																	"nodeType": "ExpressionStatement",
																	"src": "9233:11:15"
																},
																{
																	"expression": {
																		"id": 2818,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2816,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2744,
																			"src": "9262:6:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 2817,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9272:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "9262:11:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2819,
																	"nodeType": "ExpressionStatement",
																	"src": "9262:11:15"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2826,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2824,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2822,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2738,
																	"src": "9305:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "34",
																	"id": 2823,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9314:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "9305:10:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2825,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9318:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "9305:14:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2836,
														"nodeType": "IfStatement",
														"src": "9301:93:15",
														"trueBody": {
															"id": 2835,
															"nodeType": "Block",
															"src": "9321:73:15",
															"statements": [
																{
																	"expression": {
																		"id": 2829,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2827,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2738,
																			"src": "9339:5:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 2828,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9349:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "9339:11:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2830,
																	"nodeType": "ExpressionStatement",
																	"src": "9339:11:15"
																},
																{
																	"expression": {
																		"id": 2833,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2831,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2744,
																			"src": "9368:6:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 2832,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9378:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "9368:11:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2834,
																	"nodeType": "ExpressionStatement",
																	"src": "9368:11:15"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2841,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2839,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2837,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2738,
																	"src": "9411:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "32",
																	"id": 2838,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9420:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "9411:10:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2840,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9424:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "9411:14:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2851,
														"nodeType": "IfStatement",
														"src": "9407:93:15",
														"trueBody": {
															"id": 2850,
															"nodeType": "Block",
															"src": "9427:73:15",
															"statements": [
																{
																	"expression": {
																		"id": 2844,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2842,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2738,
																			"src": "9445:5:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 2843,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9455:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "9445:11:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2845,
																	"nodeType": "ExpressionStatement",
																	"src": "9445:11:15"
																},
																{
																	"expression": {
																		"id": 2848,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2846,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2744,
																			"src": "9474:6:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 2847,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9484:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "9474:11:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2849,
																	"nodeType": "ExpressionStatement",
																	"src": "9474:11:15"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2856,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2854,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2852,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2738,
																	"src": "9517:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2853,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9526:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9517:10:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2855,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9530:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "9517:14:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2862,
														"nodeType": "IfStatement",
														"src": "9513:64:15",
														"trueBody": {
															"id": 2861,
															"nodeType": "Block",
															"src": "9533:44:15",
															"statements": [
																{
																	"expression": {
																		"id": 2859,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2857,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2744,
																			"src": "9551:6:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 2858,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9561:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "9551:11:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2860,
																	"nodeType": "ExpressionStatement",
																	"src": "9551:11:15"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 2864,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2744,
													"src": "9603:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2742,
												"id": 2865,
												"nodeType": "Return",
												"src": "9596:13:15"
											}
										]
									},
									"documentation": {
										"id": 2736,
										"nodeType": "StructuredDocumentation",
										"src": "8515:113:15",
										"text": " @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."
									},
									"id": 2867,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log2",
									"nameLocation": "8642:4:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2739,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2738,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "8655:5:15",
												"nodeType": "VariableDeclaration",
												"scope": 2867,
												"src": "8647:13:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2737,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8647:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8646:15:15"
									},
									"returnParameters": {
										"id": 2742,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2741,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2867,
												"src": "8685:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2740,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8685:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8684:9:15"
									},
									"scope": 3195,
									"src": "8633:983:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2902,
										"nodeType": "Block",
										"src": "9849:165:15",
										"statements": [
											{
												"id": 2901,
												"nodeType": "UncheckedBlock",
												"src": "9859:149:15",
												"statements": [
													{
														"assignments": [
															2879
														],
														"declarations": [
															{
																"constant": false,
																"id": 2879,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "9891:6:15",
																"nodeType": "VariableDeclaration",
																"scope": 2901,
																"src": "9883:14:15",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2878,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "9883:7:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2883,
														"initialValue": {
															"arguments": [
																{
																	"id": 2881,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2870,
																	"src": "9905:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2880,
																"name": "log2",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	2867,
																	2903
																],
																"referencedDeclaration": 2867,
																"src": "9900:4:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 2882,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9900:11:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "9883:28:15"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2899,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2884,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2879,
																"src": "9932:6:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 2894,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_enum$_Rounding_$2336",
																					"typeString": "enum Math.Rounding"
																				},
																				"id": 2888,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2885,
																					"name": "rounding",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2873,
																					"src": "9942:8:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$2336",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"expression": {
																						"id": 2886,
																						"name": "Rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2336,
																						"src": "9954:8:15",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_enum$_Rounding_$2336_$",
																							"typeString": "type(enum Math.Rounding)"
																						}
																					},
																					"id": 2887,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberLocation": "9963:2:15",
																					"memberName": "Up",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 2334,
																					"src": "9954:11:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$2336",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"src": "9942:23:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2893,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 2891,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "31",
																						"id": 2889,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "9969:1:15",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<<",
																					"rightExpression": {
																						"id": 2890,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2879,
																						"src": "9974:6:15",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "9969:11:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 2892,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2870,
																					"src": "9983:5:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "9969:19:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "9942:46:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 2896,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9995:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 2897,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "9942:54:15",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 2895,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9991:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 2898,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "9941:56:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "9932:65:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2877,
														"id": 2900,
														"nodeType": "Return",
														"src": "9925:72:15"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2868,
										"nodeType": "StructuredDocumentation",
										"src": "9622:142:15",
										"text": " @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 2903,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log2",
									"nameLocation": "9778:4:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2874,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2870,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "9791:5:15",
												"nodeType": "VariableDeclaration",
												"scope": 2903,
												"src": "9783:13:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2869,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9783:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2873,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "9807:8:15",
												"nodeType": "VariableDeclaration",
												"scope": 2903,
												"src": "9798:17:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2336",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 2872,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2871,
														"name": "Rounding",
														"nameLocations": [
															"9798:8:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2336,
														"src": "9798:8:15"
													},
													"referencedDeclaration": 2336,
													"src": "9798:8:15",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2336",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9782:34:15"
									},
									"returnParameters": {
										"id": 2877,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2876,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2903,
												"src": "9840:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2875,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9840:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9839:9:15"
									},
									"scope": 3195,
									"src": "9769:245:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3031,
										"nodeType": "Block",
										"src": "10201:854:15",
										"statements": [
											{
												"assignments": [
													2912
												],
												"declarations": [
													{
														"constant": false,
														"id": 2912,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "10219:6:15",
														"nodeType": "VariableDeclaration",
														"scope": 3031,
														"src": "10211:14:15",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2911,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10211:7:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2914,
												"initialValue": {
													"hexValue": "30",
													"id": 2913,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "10228:1:15",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10211:18:15"
											},
											{
												"id": 3028,
												"nodeType": "UncheckedBlock",
												"src": "10239:787:15",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2919,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2915,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2906,
																"src": "10267:5:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(57 digits omitted)...0000"
																},
																"id": 2918,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2916,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10276:2:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 2917,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10282:2:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "10276:8:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(57 digits omitted)...0000"
																}
															},
															"src": "10267:17:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2931,
														"nodeType": "IfStatement",
														"src": "10263:103:15",
														"trueBody": {
															"id": 2930,
															"nodeType": "Block",
															"src": "10286:80:15",
															"statements": [
																{
																	"expression": {
																		"id": 2924,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2920,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2906,
																			"src": "10304:5:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(57 digits omitted)...0000"
																			},
																			"id": 2923,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 2921,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10313:2:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3634",
																				"id": 2922,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10319:2:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_64_by_1",
																					"typeString": "int_const 64"
																				},
																				"value": "64"
																			},
																			"src": "10313:8:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(57 digits omitted)...0000"
																			}
																		},
																		"src": "10304:17:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2925,
																	"nodeType": "ExpressionStatement",
																	"src": "10304:17:15"
																},
																{
																	"expression": {
																		"id": 2928,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2926,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2912,
																			"src": "10339:6:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 2927,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10349:2:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "10339:12:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2929,
																	"nodeType": "ExpressionStatement",
																	"src": "10339:12:15"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2936,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2932,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2906,
																"src": "10383:5:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(25 digits omitted)...0000"
																},
																"id": 2935,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2933,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10392:2:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 2934,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10398:2:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "10392:8:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(25 digits omitted)...0000"
																}
															},
															"src": "10383:17:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2948,
														"nodeType": "IfStatement",
														"src": "10379:103:15",
														"trueBody": {
															"id": 2947,
															"nodeType": "Block",
															"src": "10402:80:15",
															"statements": [
																{
																	"expression": {
																		"id": 2941,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2937,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2906,
																			"src": "10420:5:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(25 digits omitted)...0000"
																			},
																			"id": 2940,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 2938,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10429:2:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3332",
																				"id": 2939,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10435:2:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_32_by_1",
																					"typeString": "int_const 32"
																				},
																				"value": "32"
																			},
																			"src": "10429:8:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(25 digits omitted)...0000"
																			}
																		},
																		"src": "10420:17:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2942,
																	"nodeType": "ExpressionStatement",
																	"src": "10420:17:15"
																},
																{
																	"expression": {
																		"id": 2945,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2943,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2912,
																			"src": "10455:6:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 2944,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10465:2:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "10455:12:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2946,
																	"nodeType": "ExpressionStatement",
																	"src": "10455:12:15"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2953,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2949,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2906,
																"src": "10499:5:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000000000000000_by_1",
																	"typeString": "int_const 10000000000000000"
																},
																"id": 2952,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2950,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10508:2:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 2951,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10514:2:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "10508:8:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000_by_1",
																	"typeString": "int_const 10000000000000000"
																}
															},
															"src": "10499:17:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2965,
														"nodeType": "IfStatement",
														"src": "10495:103:15",
														"trueBody": {
															"id": 2964,
															"nodeType": "Block",
															"src": "10518:80:15",
															"statements": [
																{
																	"expression": {
																		"id": 2958,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2954,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2906,
																			"src": "10536:5:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000000000000000_by_1",
																				"typeString": "int_const 10000000000000000"
																			},
																			"id": 2957,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 2955,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10545:2:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3136",
																				"id": 2956,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10551:2:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_16_by_1",
																					"typeString": "int_const 16"
																				},
																				"value": "16"
																			},
																			"src": "10545:8:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000000000000000_by_1",
																				"typeString": "int_const 10000000000000000"
																			}
																		},
																		"src": "10536:17:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2959,
																	"nodeType": "ExpressionStatement",
																	"src": "10536:17:15"
																},
																{
																	"expression": {
																		"id": 2962,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2960,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2912,
																			"src": "10571:6:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 2961,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10581:2:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "10571:12:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2963,
																	"nodeType": "ExpressionStatement",
																	"src": "10571:12:15"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2970,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2966,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2906,
																"src": "10615:5:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																},
																"id": 2969,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2967,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10624:2:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 2968,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10630:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "10624:7:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																}
															},
															"src": "10615:16:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2982,
														"nodeType": "IfStatement",
														"src": "10611:100:15",
														"trueBody": {
															"id": 2981,
															"nodeType": "Block",
															"src": "10633:78:15",
															"statements": [
																{
																	"expression": {
																		"id": 2975,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2971,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2906,
																			"src": "10651:5:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100000000_by_1",
																				"typeString": "int_const 100000000"
																			},
																			"id": 2974,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 2972,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10660:2:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "38",
																				"id": 2973,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10666:1:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_8_by_1",
																					"typeString": "int_const 8"
																				},
																				"value": "8"
																			},
																			"src": "10660:7:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100000000_by_1",
																				"typeString": "int_const 100000000"
																			}
																		},
																		"src": "10651:16:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2976,
																	"nodeType": "ExpressionStatement",
																	"src": "10651:16:15"
																},
																{
																	"expression": {
																		"id": 2979,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2977,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2912,
																			"src": "10685:6:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 2978,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10695:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "10685:11:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2980,
																	"nodeType": "ExpressionStatement",
																	"src": "10685:11:15"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2987,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2983,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2906,
																"src": "10728:5:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000_by_1",
																	"typeString": "int_const 10000"
																},
																"id": 2986,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2984,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10737:2:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "34",
																	"id": 2985,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10743:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "10737:7:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000_by_1",
																	"typeString": "int_const 10000"
																}
															},
															"src": "10728:16:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2999,
														"nodeType": "IfStatement",
														"src": "10724:100:15",
														"trueBody": {
															"id": 2998,
															"nodeType": "Block",
															"src": "10746:78:15",
															"statements": [
																{
																	"expression": {
																		"id": 2992,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2988,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2906,
																			"src": "10764:5:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000_by_1",
																				"typeString": "int_const 10000"
																			},
																			"id": 2991,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 2989,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10773:2:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "34",
																				"id": 2990,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10779:1:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_4_by_1",
																					"typeString": "int_const 4"
																				},
																				"value": "4"
																			},
																			"src": "10773:7:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000_by_1",
																				"typeString": "int_const 10000"
																			}
																		},
																		"src": "10764:16:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2993,
																	"nodeType": "ExpressionStatement",
																	"src": "10764:16:15"
																},
																{
																	"expression": {
																		"id": 2996,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2994,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2912,
																			"src": "10798:6:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 2995,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10808:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "10798:11:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2997,
																	"nodeType": "ExpressionStatement",
																	"src": "10798:11:15"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3004,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3000,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2906,
																"src": "10841:5:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																},
																"id": 3003,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3001,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10850:2:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "32",
																	"id": 3002,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10856:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "10850:7:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																}
															},
															"src": "10841:16:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3016,
														"nodeType": "IfStatement",
														"src": "10837:100:15",
														"trueBody": {
															"id": 3015,
															"nodeType": "Block",
															"src": "10859:78:15",
															"statements": [
																{
																	"expression": {
																		"id": 3009,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3005,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2906,
																			"src": "10877:5:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			},
																			"id": 3008,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3006,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10886:2:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "32",
																				"id": 3007,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10892:1:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_2_by_1",
																					"typeString": "int_const 2"
																				},
																				"value": "2"
																			},
																			"src": "10886:7:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			}
																		},
																		"src": "10877:16:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3010,
																	"nodeType": "ExpressionStatement",
																	"src": "10877:16:15"
																},
																{
																	"expression": {
																		"id": 3013,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3011,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2912,
																			"src": "10911:6:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 3012,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10921:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "10911:11:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3014,
																	"nodeType": "ExpressionStatement",
																	"src": "10911:11:15"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3021,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3017,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2906,
																"src": "10954:5:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																},
																"id": 3020,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3018,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10963:2:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3019,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10969:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10963:7:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																}
															},
															"src": "10954:16:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3027,
														"nodeType": "IfStatement",
														"src": "10950:66:15",
														"trueBody": {
															"id": 3026,
															"nodeType": "Block",
															"src": "10972:44:15",
															"statements": [
																{
																	"expression": {
																		"id": 3024,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3022,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2912,
																			"src": "10990:6:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 3023,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11000:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "10990:11:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3025,
																	"nodeType": "ExpressionStatement",
																	"src": "10990:11:15"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 3029,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2912,
													"src": "11042:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2910,
												"id": 3030,
												"nodeType": "Return",
												"src": "11035:13:15"
											}
										]
									},
									"documentation": {
										"id": 2904,
										"nodeType": "StructuredDocumentation",
										"src": "10020:114:15",
										"text": " @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."
									},
									"id": 3032,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log10",
									"nameLocation": "10148:5:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2907,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2906,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10162:5:15",
												"nodeType": "VariableDeclaration",
												"scope": 3032,
												"src": "10154:13:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2905,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10154:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10153:15:15"
									},
									"returnParameters": {
										"id": 2910,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2909,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3032,
												"src": "10192:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2908,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10192:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10191:9:15"
									},
									"scope": 3195,
									"src": "10139:916:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3067,
										"nodeType": "Block",
										"src": "11290:167:15",
										"statements": [
											{
												"id": 3066,
												"nodeType": "UncheckedBlock",
												"src": "11300:151:15",
												"statements": [
													{
														"assignments": [
															3044
														],
														"declarations": [
															{
																"constant": false,
																"id": 3044,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "11332:6:15",
																"nodeType": "VariableDeclaration",
																"scope": 3066,
																"src": "11324:14:15",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3043,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "11324:7:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3048,
														"initialValue": {
															"arguments": [
																{
																	"id": 3046,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3035,
																	"src": "11347:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3045,
																"name": "log10",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	3032,
																	3068
																],
																"referencedDeclaration": 3032,
																"src": "11341:5:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 3047,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11341:12:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "11324:29:15"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3064,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3049,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3044,
																"src": "11374:6:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 3059,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_enum$_Rounding_$2336",
																					"typeString": "enum Math.Rounding"
																				},
																				"id": 3053,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 3050,
																					"name": "rounding",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3038,
																					"src": "11384:8:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$2336",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"expression": {
																						"id": 3051,
																						"name": "Rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2336,
																						"src": "11396:8:15",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_enum$_Rounding_$2336_$",
																							"typeString": "type(enum Math.Rounding)"
																						}
																					},
																					"id": 3052,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberLocation": "11405:2:15",
																					"memberName": "Up",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 2334,
																					"src": "11396:11:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$2336",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"src": "11384:23:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3058,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 3056,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "3130",
																						"id": 3054,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "11411:2:15",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_10_by_1",
																							"typeString": "int_const 10"
																						},
																						"value": "10"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "**",
																					"rightExpression": {
																						"id": 3055,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3044,
																						"src": "11417:6:15",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "11411:12:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 3057,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3035,
																					"src": "11426:5:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "11411:20:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "11384:47:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 3061,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11438:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 3062,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "11384:55:15",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 3060,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11434:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 3063,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "11383:57:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "11374:66:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3042,
														"id": 3065,
														"nodeType": "Return",
														"src": "11367:73:15"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3033,
										"nodeType": "StructuredDocumentation",
										"src": "11061:143:15",
										"text": " @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 3068,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log10",
									"nameLocation": "11218:5:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3039,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3035,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "11232:5:15",
												"nodeType": "VariableDeclaration",
												"scope": 3068,
												"src": "11224:13:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3034,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11224:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3038,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "11248:8:15",
												"nodeType": "VariableDeclaration",
												"scope": 3068,
												"src": "11239:17:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2336",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 3037,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3036,
														"name": "Rounding",
														"nameLocations": [
															"11239:8:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2336,
														"src": "11239:8:15"
													},
													"referencedDeclaration": 2336,
													"src": "11239:8:15",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2336",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11223:34:15"
									},
									"returnParameters": {
										"id": 3042,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3041,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3068,
												"src": "11281:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3040,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11281:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11280:9:15"
									},
									"scope": 3195,
									"src": "11209:248:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3154,
										"nodeType": "Block",
										"src": "11771:600:15",
										"statements": [
											{
												"assignments": [
													3077
												],
												"declarations": [
													{
														"constant": false,
														"id": 3077,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "11789:6:15",
														"nodeType": "VariableDeclaration",
														"scope": 3154,
														"src": "11781:14:15",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3076,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "11781:7:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3079,
												"initialValue": {
													"hexValue": "30",
													"id": 3078,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "11798:1:15",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11781:18:15"
											},
											{
												"id": 3151,
												"nodeType": "UncheckedBlock",
												"src": "11809:533:15",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3084,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3082,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3080,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3071,
																	"src": "11837:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 3081,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11846:3:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "11837:12:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3083,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11852:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11837:16:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3094,
														"nodeType": "IfStatement",
														"src": "11833:98:15",
														"trueBody": {
															"id": 3093,
															"nodeType": "Block",
															"src": "11855:76:15",
															"statements": [
																{
																	"expression": {
																		"id": 3087,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3085,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3071,
																			"src": "11873:5:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 3086,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11883:3:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "11873:13:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3088,
																	"nodeType": "ExpressionStatement",
																	"src": "11873:13:15"
																},
																{
																	"expression": {
																		"id": 3091,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3089,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3077,
																			"src": "11904:6:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3090,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11914:2:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "11904:12:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3092,
																	"nodeType": "ExpressionStatement",
																	"src": "11904:12:15"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3099,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3097,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3095,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3071,
																	"src": "11948:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 3096,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11957:2:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "11948:11:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3098,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11962:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11948:15:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3109,
														"nodeType": "IfStatement",
														"src": "11944:95:15",
														"trueBody": {
															"id": 3108,
															"nodeType": "Block",
															"src": "11965:74:15",
															"statements": [
																{
																	"expression": {
																		"id": 3102,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3100,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3071,
																			"src": "11983:5:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 3101,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11993:2:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "11983:12:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3103,
																	"nodeType": "ExpressionStatement",
																	"src": "11983:12:15"
																},
																{
																	"expression": {
																		"id": 3106,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3104,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3077,
																			"src": "12013:6:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 3105,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12023:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "12013:11:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3107,
																	"nodeType": "ExpressionStatement",
																	"src": "12013:11:15"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3114,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3112,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3110,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3071,
																	"src": "12056:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 3111,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12065:2:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "12056:11:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3113,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "12070:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "12056:15:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3124,
														"nodeType": "IfStatement",
														"src": "12052:95:15",
														"trueBody": {
															"id": 3123,
															"nodeType": "Block",
															"src": "12073:74:15",
															"statements": [
																{
																	"expression": {
																		"id": 3117,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3115,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3071,
																			"src": "12091:5:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 3116,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12101:2:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "12091:12:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3118,
																	"nodeType": "ExpressionStatement",
																	"src": "12091:12:15"
																},
																{
																	"expression": {
																		"id": 3121,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3119,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3077,
																			"src": "12121:6:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 3120,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12131:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "12121:11:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3122,
																	"nodeType": "ExpressionStatement",
																	"src": "12121:11:15"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3129,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3127,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3125,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3071,
																	"src": "12164:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 3126,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12173:2:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "12164:11:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3128,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "12178:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "12164:15:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3139,
														"nodeType": "IfStatement",
														"src": "12160:95:15",
														"trueBody": {
															"id": 3138,
															"nodeType": "Block",
															"src": "12181:74:15",
															"statements": [
																{
																	"expression": {
																		"id": 3132,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3130,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3071,
																			"src": "12199:5:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3131,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12209:2:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "12199:12:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3133,
																	"nodeType": "ExpressionStatement",
																	"src": "12199:12:15"
																},
																{
																	"expression": {
																		"id": 3136,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3134,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3077,
																			"src": "12229:6:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 3135,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12239:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "12229:11:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3137,
																	"nodeType": "ExpressionStatement",
																	"src": "12229:11:15"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3144,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3142,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3140,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3071,
																	"src": "12272:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 3141,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12281:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "12272:10:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3143,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "12285:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "12272:14:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3150,
														"nodeType": "IfStatement",
														"src": "12268:64:15",
														"trueBody": {
															"id": 3149,
															"nodeType": "Block",
															"src": "12288:44:15",
															"statements": [
																{
																	"expression": {
																		"id": 3147,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3145,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3077,
																			"src": "12306:6:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 3146,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12316:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "12306:11:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3148,
																	"nodeType": "ExpressionStatement",
																	"src": "12306:11:15"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 3152,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3077,
													"src": "12358:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3075,
												"id": 3153,
												"nodeType": "Return",
												"src": "12351:13:15"
											}
										]
									},
									"documentation": {
										"id": 3069,
										"nodeType": "StructuredDocumentation",
										"src": "11463:240:15",
										"text": " @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."
									},
									"id": 3155,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log256",
									"nameLocation": "11717:6:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3072,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3071,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "11732:5:15",
												"nodeType": "VariableDeclaration",
												"scope": 3155,
												"src": "11724:13:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3070,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11724:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11723:15:15"
									},
									"returnParameters": {
										"id": 3075,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3074,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3155,
												"src": "11762:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3073,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11762:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11761:9:15"
									},
									"scope": 3195,
									"src": "11708:663:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3193,
										"nodeType": "Block",
										"src": "12608:174:15",
										"statements": [
											{
												"id": 3192,
												"nodeType": "UncheckedBlock",
												"src": "12618:158:15",
												"statements": [
													{
														"assignments": [
															3167
														],
														"declarations": [
															{
																"constant": false,
																"id": 3167,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "12650:6:15",
																"nodeType": "VariableDeclaration",
																"scope": 3192,
																"src": "12642:14:15",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3166,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "12642:7:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3171,
														"initialValue": {
															"arguments": [
																{
																	"id": 3169,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3158,
																	"src": "12666:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3168,
																"name": "log256",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	3155,
																	3194
																],
																"referencedDeclaration": 3155,
																"src": "12659:6:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 3170,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "12659:13:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "12642:30:15"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3190,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3172,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3167,
																"src": "12693:6:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 3185,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_enum$_Rounding_$2336",
																					"typeString": "enum Math.Rounding"
																				},
																				"id": 3176,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 3173,
																					"name": "rounding",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3161,
																					"src": "12703:8:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$2336",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"expression": {
																						"id": 3174,
																						"name": "Rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2336,
																						"src": "12715:8:15",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_enum$_Rounding_$2336_$",
																							"typeString": "type(enum Math.Rounding)"
																						}
																					},
																					"id": 3175,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberLocation": "12724:2:15",
																					"memberName": "Up",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 2334,
																					"src": "12715:11:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$2336",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"src": "12703:23:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3184,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 3182,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "31",
																						"id": 3177,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "12730:1:15",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<<",
																					"rightExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 3180,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"id": 3178,
																									"name": "result",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 3167,
																									"src": "12736:6:15",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "<<",
																								"rightExpression": {
																									"hexValue": "33",
																									"id": 3179,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "12746:1:15",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_3_by_1",
																										"typeString": "int_const 3"
																									},
																									"value": "3"
																								},
																								"src": "12736:11:15",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 3181,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "12735:13:15",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "12730:18:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 3183,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3158,
																					"src": "12751:5:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "12730:26:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "12703:53:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 3187,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12763:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 3188,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "12703:61:15",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 3186,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12759:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 3189,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "12702:63:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "12693:72:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3165,
														"id": 3191,
														"nodeType": "Return",
														"src": "12686:79:15"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3156,
										"nodeType": "StructuredDocumentation",
										"src": "12377:144:15",
										"text": " @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 3194,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log256",
									"nameLocation": "12535:6:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3162,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3158,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "12550:5:15",
												"nodeType": "VariableDeclaration",
												"scope": 3194,
												"src": "12542:13:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3157,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12542:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3161,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "12566:8:15",
												"nodeType": "VariableDeclaration",
												"scope": 3194,
												"src": "12557:17:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2336",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 3160,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3159,
														"name": "Rounding",
														"nameLocations": [
															"12557:8:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2336,
														"src": "12557:8:15"
													},
													"referencedDeclaration": 2336,
													"src": "12557:8:15",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2336",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12541:34:15"
									},
									"returnParameters": {
										"id": 3165,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3164,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3194,
												"src": "12599:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3163,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12599:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12598:9:15"
									},
									"scope": 3195,
									"src": "12526:256:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3196,
							"src": "202:12582:15",
							"usedErrors": []
						}
					],
					"src": "103:12682:15"
				},
				"id": 15
			},
			"@openzeppelin/contracts/utils/math/SignedMath.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/math/SignedMath.sol",
					"exportedSymbols": {
						"SignedMath": [
							3300
						]
					},
					"id": 3301,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 3197,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "109:23:16"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SignedMath",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 3198,
								"nodeType": "StructuredDocumentation",
								"src": "134:80:16",
								"text": " @dev Standard signed math utilities missing in the Solidity language."
							},
							"fullyImplemented": true,
							"id": 3300,
							"linearizedBaseContracts": [
								3300
							],
							"name": "SignedMath",
							"nameLocation": "223:10:16",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 3215,
										"nodeType": "Block",
										"src": "375:37:16",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"id": 3210,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 3208,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3201,
															"src": "392:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"id": 3209,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3203,
															"src": "396:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"src": "392:5:16",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 3212,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3203,
														"src": "404:1:16",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"id": 3213,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "392:13:16",
													"trueExpression": {
														"id": 3211,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3201,
														"src": "400:1:16",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"functionReturnParameters": 3207,
												"id": 3214,
												"nodeType": "Return",
												"src": "385:20:16"
											}
										]
									},
									"documentation": {
										"id": 3199,
										"nodeType": "StructuredDocumentation",
										"src": "240:66:16",
										"text": " @dev Returns the largest of two signed numbers."
									},
									"id": 3216,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "max",
									"nameLocation": "320:3:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3204,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3201,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "331:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 3216,
												"src": "324:8:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3200,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "324:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3203,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "341:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 3216,
												"src": "334:8:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3202,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "334:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "323:20:16"
									},
									"returnParameters": {
										"id": 3207,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3206,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3216,
												"src": "367:6:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3205,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "367:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "366:8:16"
									},
									"scope": 3300,
									"src": "311:101:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3233,
										"nodeType": "Block",
										"src": "554:37:16",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"id": 3228,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 3226,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3219,
															"src": "571:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"id": 3227,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3221,
															"src": "575:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"src": "571:5:16",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 3230,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3221,
														"src": "583:1:16",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"id": 3231,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "571:13:16",
													"trueExpression": {
														"id": 3229,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3219,
														"src": "579:1:16",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"functionReturnParameters": 3225,
												"id": 3232,
												"nodeType": "Return",
												"src": "564:20:16"
											}
										]
									},
									"documentation": {
										"id": 3217,
										"nodeType": "StructuredDocumentation",
										"src": "418:67:16",
										"text": " @dev Returns the smallest of two signed numbers."
									},
									"id": 3234,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "min",
									"nameLocation": "499:3:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3222,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3219,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "510:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 3234,
												"src": "503:8:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3218,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "503:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3221,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "520:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 3234,
												"src": "513:8:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3220,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "513:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "502:20:16"
									},
									"returnParameters": {
										"id": 3225,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3224,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3234,
												"src": "546:6:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3223,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "546:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "545:8:16"
									},
									"scope": 3300,
									"src": "490:101:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3277,
										"nodeType": "Block",
										"src": "796:162:16",
										"statements": [
											{
												"assignments": [
													3245
												],
												"declarations": [
													{
														"constant": false,
														"id": 3245,
														"mutability": "mutable",
														"name": "x",
														"nameLocation": "865:1:16",
														"nodeType": "VariableDeclaration",
														"scope": 3277,
														"src": "858:8:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"typeName": {
															"id": 3244,
															"name": "int256",
															"nodeType": "ElementaryTypeName",
															"src": "858:6:16",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3258,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 3257,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 3248,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3246,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3237,
																	"src": "870:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 3247,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3239,
																	"src": "874:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"src": "870:5:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 3249,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "869:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 3255,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			},
																			"id": 3252,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3250,
																				"name": "a",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3237,
																				"src": "881:1:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "^",
																			"rightExpression": {
																				"id": 3251,
																				"name": "b",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3239,
																				"src": "885:1:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"src": "881:5:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"id": 3253,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "880:7:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3254,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "891:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "880:12:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 3256,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "879:14:16",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"src": "869:24:16",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "858:35:16"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 3275,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 3259,
														"name": "x",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3245,
														"src": "910:1:16",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 3273,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3267,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 3264,
																						"name": "x",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3245,
																						"src": "930:1:16",
																						"typeDescriptions": {
																							"typeIdentifier": "t_int256",
																							"typeString": "int256"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_int256",
																							"typeString": "int256"
																						}
																					],
																					"id": 3263,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "922:7:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint256_$",
																						"typeString": "type(uint256)"
																					},
																					"typeName": {
																						"id": 3262,
																						"name": "uint256",
																						"nodeType": "ElementaryTypeName",
																						"src": "922:7:16",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 3265,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "922:10:16",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": ">>",
																			"rightExpression": {
																				"hexValue": "323535",
																				"id": 3266,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "936:3:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_255_by_1",
																					"typeString": "int_const 255"
																				},
																				"value": "255"
																			},
																			"src": "922:17:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 3261,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "915:6:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_int256_$",
																			"typeString": "type(int256)"
																		},
																		"typeName": {
																			"id": 3260,
																			"name": "int256",
																			"nodeType": "ElementaryTypeName",
																			"src": "915:6:16",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 3268,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "915:25:16",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			},
																			"id": 3271,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3269,
																				"name": "a",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3237,
																				"src": "944:1:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "^",
																			"rightExpression": {
																				"id": 3270,
																				"name": "b",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3239,
																				"src": "948:1:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"src": "944:5:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"id": 3272,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "943:7:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"src": "915:35:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 3274,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "914:37:16",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"src": "910:41:16",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"functionReturnParameters": 3243,
												"id": 3276,
												"nodeType": "Return",
												"src": "903:48:16"
											}
										]
									},
									"documentation": {
										"id": 3235,
										"nodeType": "StructuredDocumentation",
										"src": "597:126:16",
										"text": " @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."
									},
									"id": 3278,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "average",
									"nameLocation": "737:7:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3240,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3237,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "752:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 3278,
												"src": "745:8:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3236,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "745:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3239,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "762:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 3278,
												"src": "755:8:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3238,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "755:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "744:20:16"
									},
									"returnParameters": {
										"id": 3243,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3242,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3278,
												"src": "788:6:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3241,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "788:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "787:8:16"
									},
									"scope": 3300,
									"src": "728:230:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3298,
										"nodeType": "Block",
										"src": "1102:158:16",
										"statements": [
											{
												"id": 3297,
												"nodeType": "UncheckedBlock",
												"src": "1112:142:16",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		},
																		"id": 3290,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 3288,
																			"name": "n",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3281,
																			"src": "1227:1:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 3289,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1232:1:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1227:6:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"falseExpression": {
																		"id": 3293,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "-",
																		"prefix": true,
																		"src": "1240:2:16",
																		"subExpression": {
																			"id": 3292,
																			"name": "n",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3281,
																			"src": "1241:1:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	},
																	"id": 3294,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "Conditional",
																	"src": "1227:15:16",
																	"trueExpression": {
																		"id": 3291,
																		"name": "n",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3281,
																		"src": "1236:1:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	},
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																],
																"id": 3287,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1219:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																},
																"typeName": {
																	"id": 3286,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1219:7:16",
																	"typeDescriptions": {}
																}
															},
															"id": 3295,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1219:24:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3285,
														"id": 3296,
														"nodeType": "Return",
														"src": "1212:31:16"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3279,
										"nodeType": "StructuredDocumentation",
										"src": "964:78:16",
										"text": " @dev Returns the absolute unsigned value of a signed value."
									},
									"id": 3299,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "abs",
									"nameLocation": "1056:3:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3282,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3281,
												"mutability": "mutable",
												"name": "n",
												"nameLocation": "1067:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 3299,
												"src": "1060:8:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3280,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1060:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1059:10:16"
									},
									"returnParameters": {
										"id": 3285,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3284,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3299,
												"src": "1093:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3283,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1093:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1092:9:16"
									},
									"scope": 3300,
									"src": "1047:213:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3301,
							"src": "215:1047:16",
							"usedErrors": []
						}
					],
					"src": "109:1154:16"
				},
				"id": 16
			},
			"contracts/TurtleToken.sol": {
				"ast": {
					"absolutePath": "contracts/TurtleToken.sol",
					"exportedSymbols": {
						"Context": [
							1130
						],
						"Counters": [
							1204
						],
						"ECDSA": [
							2125
						],
						"EIP712": [
							2329
						],
						"ERC20": [
							789
						],
						"ERC20Permit": [
							1039
						],
						"IERC20": [
							867
						],
						"IERC20Metadata": [
							1064
						],
						"IERC20Permit": [
							1100
						],
						"IERC5267": [
							137
						],
						"Math": [
							3195
						],
						"Ownable": [
							112
						],
						"ReentrancyGuard": [
							202
						],
						"ShortString": [
							1209
						],
						"ShortStrings": [
							1420
						],
						"SignedMath": [
							3300
						],
						"StorageSlot": [
							1530
						],
						"Strings": [
							1759
						],
						"TurtleToken": [
							3675
						]
					},
					"id": 3676,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 3302,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".0",
								"<",
								"0.9",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:31:17"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
							"id": 3303,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3676,
							"sourceUnit": 790,
							"src": "68:55:17",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
							"file": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
							"id": 3304,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3676,
							"sourceUnit": 1040,
							"src": "125:72:17",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
							"file": "@openzeppelin/contracts/access/Ownable.sol",
							"id": 3305,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3676,
							"sourceUnit": 113,
							"src": "199:52:17",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
							"file": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
							"id": 3306,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3676,
							"sourceUnit": 203,
							"src": "253:62:17",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 3307,
										"name": "ERC20",
										"nameLocations": [
											"343:5:17"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 789,
										"src": "343:5:17"
									},
									"id": 3308,
									"nodeType": "InheritanceSpecifier",
									"src": "343:5:17"
								},
								{
									"baseName": {
										"id": 3309,
										"name": "ERC20Permit",
										"nameLocations": [
											"350:11:17"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1039,
										"src": "350:11:17"
									},
									"id": 3310,
									"nodeType": "InheritanceSpecifier",
									"src": "350:11:17"
								},
								{
									"baseName": {
										"id": 3311,
										"name": "Ownable",
										"nameLocations": [
											"363:7:17"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 112,
										"src": "363:7:17"
									},
									"id": 3312,
									"nodeType": "InheritanceSpecifier",
									"src": "363:7:17"
								},
								{
									"baseName": {
										"id": 3313,
										"name": "ReentrancyGuard",
										"nameLocations": [
											"372:15:17"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 202,
										"src": "372:15:17"
									},
									"id": 3314,
									"nodeType": "InheritanceSpecifier",
									"src": "372:15:17"
								}
							],
							"canonicalName": "TurtleToken",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 3675,
							"linearizedBaseContracts": [
								3675,
								202,
								112,
								1039,
								2329,
								137,
								1100,
								789,
								1064,
								867,
								1130
							],
							"name": "TurtleToken",
							"nameLocation": "328:11:17",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"functionSelector": "3ba0b9a9",
									"id": 3316,
									"mutability": "mutable",
									"name": "exchangeRate",
									"nameLocation": "466:12:17",
									"nodeType": "VariableDeclaration",
									"scope": 3675,
									"src": "451:27:17",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 3315,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "451:7:17",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 3320,
									"mutability": "mutable",
									"name": "_whitelistedAddresses",
									"nameLocation": "556:21:17",
									"nodeType": "VariableDeclaration",
									"scope": 3675,
									"src": "523:54:17",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
										"typeString": "mapping(address => bool)"
									},
									"typeName": {
										"id": 3319,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 3317,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "531:7:17",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "523:24:17",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
											"typeString": "mapping(address => bool)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 3318,
											"name": "bool",
											"nodeType": "ElementaryTypeName",
											"src": "542:4:17",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											}
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"eventSelector": "8fafebcaf9d154343dad25669bfa277f4fbacd7ac6b0c4fed522580e040a0f33",
									"id": 3328,
									"name": "TokensPurchased",
									"nameLocation": "654:15:17",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 3327,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3322,
												"indexed": true,
												"mutability": "mutable",
												"name": "buyer",
												"nameLocation": "686:5:17",
												"nodeType": "VariableDeclaration",
												"scope": 3328,
												"src": "670:21:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3321,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "670:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3324,
												"indexed": false,
												"mutability": "mutable",
												"name": "ethAmount",
												"nameLocation": "701:9:17",
												"nodeType": "VariableDeclaration",
												"scope": 3328,
												"src": "693:17:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3323,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3326,
												"indexed": false,
												"mutability": "mutable",
												"name": "tokenAmount",
												"nameLocation": "720:11:17",
												"nodeType": "VariableDeclaration",
												"scope": 3328,
												"src": "712:19:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3325,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "712:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "669:63:17"
									},
									"src": "648:85:17"
								},
								{
									"anonymous": false,
									"eventSelector": "2dcf9433d75db0d8b1c172641f85e319ffe4ad22e108a95d1847ceb906e5195d",
									"id": 3336,
									"name": "TokensSold",
									"nameLocation": "780:10:17",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 3335,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3330,
												"indexed": true,
												"mutability": "mutable",
												"name": "seller",
												"nameLocation": "807:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 3336,
												"src": "791:22:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3329,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "791:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3332,
												"indexed": false,
												"mutability": "mutable",
												"name": "tokenAmount",
												"nameLocation": "823:11:17",
												"nodeType": "VariableDeclaration",
												"scope": 3336,
												"src": "815:19:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3331,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "815:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3334,
												"indexed": false,
												"mutability": "mutable",
												"name": "ethAmount",
												"nameLocation": "844:9:17",
												"nodeType": "VariableDeclaration",
												"scope": 3336,
												"src": "836:17:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3333,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "836:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "790:64:17"
									},
									"src": "774:81:17"
								},
								{
									"anonymous": false,
									"eventSelector": "a850ae9193f515cbae8d35e8925bd2be26627fc91bce650b8652ed254e9cab03",
									"id": 3340,
									"name": "AddedToWhitelist",
									"nameLocation": "914:16:17",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 3339,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3338,
												"indexed": true,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "947:7:17",
												"nodeType": "VariableDeclaration",
												"scope": 3340,
												"src": "931:23:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3337,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "931:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "930:25:17"
									},
									"src": "908:48:17"
								},
								{
									"anonymous": false,
									"eventSelector": "cdd2e9b91a56913d370075169cefa1602ba36be5301664f752192bb1709df757",
									"id": 3344,
									"name": "RemovedFromWhitelist",
									"nameLocation": "1015:20:17",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 3343,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3342,
												"indexed": true,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1052:7:17",
												"nodeType": "VariableDeclaration",
												"scope": 3344,
												"src": "1036:23:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3341,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1036:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1035:25:17"
									},
									"src": "1009:52:17"
								},
								{
									"body": {
										"id": 3376,
										"nodeType": "Block",
										"src": "1375:107:17",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 3363,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "1400:4:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_TurtleToken_$3675",
																		"typeString": "contract TurtleToken"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_TurtleToken_$3675",
																		"typeString": "contract TurtleToken"
																	}
																],
																"id": 3362,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1392:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 3361,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1392:7:17",
																	"typeDescriptions": {}
																}
															},
															"id": 3364,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1392:13:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3367,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3365,
																"name": "initialSupply",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3346,
																"src": "1407:13:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"hexValue": "31653138",
																"id": 3366,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1423:4:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1000000000000000000_by_1",
																	"typeString": "int_const 1000000000000000000"
																},
																"value": "1e18"
															},
															"src": "1407:20:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 3360,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 606,
														"src": "1386:5:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 3368,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1386:42:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3369,
												"nodeType": "ExpressionStatement",
												"src": "1386:42:17"
											},
											{
												"expression": {
													"id": 3374,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 3370,
														"name": "exchangeRate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3316,
														"src": "1439:12:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 3373,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 3371,
															"name": "_exchangeRate",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3348,
															"src": "1454:13:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "*",
														"rightExpression": {
															"hexValue": "31653138",
															"id": 3372,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1470:4:17",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1000000000000000000_by_1",
																"typeString": "int_const 1000000000000000000"
															},
															"value": "1e18"
														},
														"src": "1454:20:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1439:35:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 3375,
												"nodeType": "ExpressionStatement",
												"src": "1439:35:17"
											}
										]
									},
									"id": 3377,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"hexValue": "547572746c65546f6b656e",
													"id": 3351,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "1315:13:17",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_9ceffc145c0fee7d5087304007bf9e8b979c476953f72160bd13951b947b0d94",
														"typeString": "literal_string \"TurtleToken\""
													},
													"value": "TurtleToken"
												},
												{
													"hexValue": "54555254",
													"id": 3352,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "1330:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_61cfc121b469de8ae54c6be53b27fa2fccca7781b8abc9666570fd8c707d80c8",
														"typeString": "literal_string \"TURT\""
													},
													"value": "TURT"
												}
											],
											"id": 3353,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 3350,
												"name": "ERC20",
												"nameLocations": [
													"1309:5:17"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 789,
												"src": "1309:5:17"
											},
											"nodeType": "ModifierInvocation",
											"src": "1309:28:17"
										},
										{
											"arguments": [
												{
													"hexValue": "547572746c65546f6b656e",
													"id": 3355,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "1350:13:17",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_9ceffc145c0fee7d5087304007bf9e8b979c476953f72160bd13951b947b0d94",
														"typeString": "literal_string \"TurtleToken\""
													},
													"value": "TurtleToken"
												}
											],
											"id": 3356,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 3354,
												"name": "ERC20Permit",
												"nameLocations": [
													"1338:11:17"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1039,
												"src": "1338:11:17"
											},
											"nodeType": "ModifierInvocation",
											"src": "1338:26:17"
										},
										{
											"arguments": [],
											"id": 3358,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 3357,
												"name": "Ownable",
												"nameLocations": [
													"1365:7:17"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 112,
												"src": "1365:7:17"
											},
											"nodeType": "ModifierInvocation",
											"src": "1365:9:17"
										}
									],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3349,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3346,
												"mutability": "mutable",
												"name": "initialSupply",
												"nameLocation": "1271:13:17",
												"nodeType": "VariableDeclaration",
												"scope": 3377,
												"src": "1263:21:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3345,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1263:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3348,
												"mutability": "mutable",
												"name": "_exchangeRate",
												"nameLocation": "1294:13:17",
												"nodeType": "VariableDeclaration",
												"scope": 3377,
												"src": "1286:21:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3347,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1286:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1262:46:17"
									},
									"returnParameters": {
										"id": 3359,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1375:0:17"
									},
									"scope": 3675,
									"src": "1251:231:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 3430,
										"nodeType": "Block",
										"src": "1676:495:17",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3386,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 3383,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "1695:3:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 3384,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1699:5:17",
																"memberName": "value",
																"nodeType": "MemberAccess",
																"src": "1695:9:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3385,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1707:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1695:13:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4d7573742073656e642045544820746f2065786368616e6765",
															"id": 3387,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1710:27:17",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9958828078c3b88217fdf99191c4145ea73f2dc831ceb6b17c87bbd9704eb371",
																"typeString": "literal_string \"Must send ETH to exchange\""
															},
															"value": "Must send ETH to exchange"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9958828078c3b88217fdf99191c4145ea73f2dc831ceb6b17c87bbd9704eb371",
																"typeString": "literal_string \"Must send ETH to exchange\""
															}
														],
														"id": 3382,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1687:7:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 3388,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1687:51:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3389,
												"nodeType": "ExpressionStatement",
												"src": "1687:51:17"
											},
											{
												"assignments": [
													3391
												],
												"declarations": [
													{
														"constant": false,
														"id": 3391,
														"mutability": "mutable",
														"name": "tokenAmount",
														"nameLocation": "1827:11:17",
														"nodeType": "VariableDeclaration",
														"scope": 3430,
														"src": "1819:19:17",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3390,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1819:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3399,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 3398,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3395,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 3392,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "1842:3:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 3393,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1846:5:17",
																	"memberName": "value",
																	"nodeType": "MemberAccess",
																	"src": "1842:9:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 3394,
																	"name": "exchangeRate",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3316,
																	"src": "1854:12:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1842:24:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 3396,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "1841:26:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "31653138",
														"id": 3397,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1870:4:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1000000000000000000_by_1",
															"typeString": "int_const 1000000000000000000"
														},
														"value": "1e18"
													},
													"src": "1841:33:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1819:55:17"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3408,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 3404,
																				"name": "this",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967268,
																				"src": "1911:4:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_TurtleToken_$3675",
																					"typeString": "contract TurtleToken"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_TurtleToken_$3675",
																					"typeString": "contract TurtleToken"
																				}
																			],
																			"id": 3403,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "1903:7:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 3402,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "1903:7:17",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 3405,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1903:13:17",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 3401,
																	"name": "balanceOf",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 301,
																	"src": "1893:9:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
																		"typeString": "function (address) view returns (uint256)"
																	}
																},
																"id": 3406,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1893:24:17",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 3407,
																"name": "tokenAmount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3391,
																"src": "1921:11:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1893:39:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e73756666696369656e7420746f6b656e2062616c616e636520696e20636f6e7472616374",
															"id": 3409,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1934:40:17",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_e390cd67d6ce01771cc4e4628f327a71fccd54886099705171d2231640f9ef13",
																"typeString": "literal_string \"Insufficient token balance in contract\""
															},
															"value": "Insufficient token balance in contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_e390cd67d6ce01771cc4e4628f327a71fccd54886099705171d2231640f9ef13",
																"typeString": "literal_string \"Insufficient token balance in contract\""
															}
														],
														"id": 3400,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1885:7:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 3410,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1885:90:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3411,
												"nodeType": "ExpressionStatement",
												"src": "1885:90:17"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 3415,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "2034:4:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_TurtleToken_$3675",
																		"typeString": "contract TurtleToken"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_TurtleToken_$3675",
																		"typeString": "contract TurtleToken"
																	}
																],
																"id": 3414,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2026:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 3413,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2026:7:17",
																	"typeDescriptions": {}
																}
															},
															"id": 3416,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2026:13:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 3417,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2041:3:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 3418,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2045:6:17",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "2041:10:17",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3419,
															"name": "tokenAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3391,
															"src": "2053:11:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 3412,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 549,
														"src": "2016:9:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 3420,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2016:49:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3421,
												"nodeType": "ExpressionStatement",
												"src": "2016:49:17"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 3423,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2128:3:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 3424,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2132:6:17",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "2128:10:17",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 3425,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2140:3:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 3426,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2144:5:17",
															"memberName": "value",
															"nodeType": "MemberAccess",
															"src": "2140:9:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 3427,
															"name": "tokenAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3391,
															"src": "2151:11:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 3422,
														"name": "TokensPurchased",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3328,
														"src": "2112:15:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256,uint256)"
														}
													},
													"id": 3428,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2112:51:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3429,
												"nodeType": "EmitStatement",
												"src": "2107:56:17"
											}
										]
									},
									"functionSelector": "d0febe4c",
									"id": 3431,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 3380,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 3379,
												"name": "nonReentrant",
												"nameLocations": [
													"1663:12:17"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 167,
												"src": "1663:12:17"
											},
											"nodeType": "ModifierInvocation",
											"src": "1663:12:17"
										}
									],
									"name": "buyTokens",
									"nameLocation": "1636:9:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3378,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1645:2:17"
									},
									"returnParameters": {
										"id": 3381,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1676:0:17"
									},
									"scope": 3675,
									"src": "1627:544:17",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 3501,
										"nodeType": "Block",
										"src": "2355:659:17",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3441,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3439,
																"name": "tokenAmount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3433,
																"src": "2374:11:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3440,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2388:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2374:15:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4d7573742073656c6c206120706f73697469766520616d6f756e74206f6620746f6b656e73",
															"id": 3442,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2391:39:17",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_20f6fd7bd66a4b6c63dae90b77d6538af48c1d53cd7a418c4a2b4f65b329e2e6",
																"typeString": "literal_string \"Must sell a positive amount of tokens\""
															},
															"value": "Must sell a positive amount of tokens"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_20f6fd7bd66a4b6c63dae90b77d6538af48c1d53cd7a418c4a2b4f65b329e2e6",
																"typeString": "literal_string \"Must sell a positive amount of tokens\""
															}
														],
														"id": 3438,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2366:7:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 3443,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2366:65:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3444,
												"nodeType": "ExpressionStatement",
												"src": "2366:65:17"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3451,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"expression": {
																			"id": 3447,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "2460:3:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 3448,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "2464:6:17",
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "2460:10:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 3446,
																	"name": "balanceOf",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 301,
																	"src": "2450:9:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
																		"typeString": "function (address) view returns (uint256)"
																	}
																},
																"id": 3449,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2450:21:17",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 3450,
																"name": "tokenAmount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3433,
																"src": "2475:11:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2450:36:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e73756666696369656e7420746f6b656e2062616c616e6365",
															"id": 3452,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2488:28:17",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a7e5e4d46ea524835ea36125140e247d59a2bce707f2094f88605dba8157d192",
																"typeString": "literal_string \"Insufficient token balance\""
															},
															"value": "Insufficient token balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_a7e5e4d46ea524835ea36125140e247d59a2bce707f2094f88605dba8157d192",
																"typeString": "literal_string \"Insufficient token balance\""
															}
														],
														"id": 3445,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2442:7:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 3453,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2442:75:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3454,
												"nodeType": "ExpressionStatement",
												"src": "2442:75:17"
											},
											{
												"assignments": [
													3456
												],
												"declarations": [
													{
														"constant": false,
														"id": 3456,
														"mutability": "mutable",
														"name": "ethAmount",
														"nameLocation": "2605:9:17",
														"nodeType": "VariableDeclaration",
														"scope": 3501,
														"src": "2597:17:17",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3455,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2597:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3463,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 3462,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3459,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3457,
																	"name": "tokenAmount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3433,
																	"src": "2618:11:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"hexValue": "31653138",
																	"id": 3458,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2632:4:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1000000000000000000_by_1",
																		"typeString": "int_const 1000000000000000000"
																	},
																	"value": "1e18"
																},
																"src": "2618:18:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 3460,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "2617:20:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"id": 3461,
														"name": "exchangeRate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3316,
														"src": "2640:12:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2617:35:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2597:55:17"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3471,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 3467,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2679:4:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_TurtleToken_$3675",
																				"typeString": "contract TurtleToken"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_TurtleToken_$3675",
																				"typeString": "contract TurtleToken"
																			}
																		],
																		"id": 3466,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2671:7:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 3465,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2671:7:17",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 3468,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2671:13:17",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 3469,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2685:7:17",
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "2671:21:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 3470,
																"name": "ethAmount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3456,
																"src": "2696:9:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2671:34:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e73756666696369656e74204554482062616c616e636520696e20636f6e7472616374",
															"id": 3472,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2707:38:17",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a8f19cffe5964e41334d0f2bb02ca7d6df9bc6525aedf1e3c16d949dd5b6b279",
																"typeString": "literal_string \"Insufficient ETH balance in contract\""
															},
															"value": "Insufficient ETH balance in contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_a8f19cffe5964e41334d0f2bb02ca7d6df9bc6525aedf1e3c16d949dd5b6b279",
																"typeString": "literal_string \"Insufficient ETH balance in contract\""
															}
														],
														"id": 3464,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2663:7:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 3473,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2663:83:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3474,
												"nodeType": "ExpressionStatement",
												"src": "2663:83:17"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 3476,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2797:3:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 3477,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2801:6:17",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "2797:10:17",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 3480,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "2817:4:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_TurtleToken_$3675",
																		"typeString": "contract TurtleToken"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_TurtleToken_$3675",
																		"typeString": "contract TurtleToken"
																	}
																],
																"id": 3479,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2809:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 3478,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2809:7:17",
																	"typeDescriptions": {}
																}
															},
															"id": 3481,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2809:13:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3482,
															"name": "tokenAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3433,
															"src": "2824:11:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 3475,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 549,
														"src": "2787:9:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 3483,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2787:49:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3484,
												"nodeType": "ExpressionStatement",
												"src": "2787:49:17"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 3491,
															"name": "ethAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3456,
															"src": "2901:9:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"expression": {
																		"id": 3487,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "2880:3:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 3488,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2884:6:17",
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "2880:10:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 3486,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2872:8:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_payable_$",
																	"typeString": "type(address payable)"
																},
																"typeName": {
																	"id": 3485,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2872:8:17",
																	"stateMutability": "payable",
																	"typeDescriptions": {}
																}
															},
															"id": 3489,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2872:19:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"id": 3490,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2892:8:17",
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"src": "2872:28:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 3492,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2872:39:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3493,
												"nodeType": "ExpressionStatement",
												"src": "2872:39:17"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 3495,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2971:3:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 3496,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2975:6:17",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "2971:10:17",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3497,
															"name": "tokenAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3433,
															"src": "2983:11:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 3498,
															"name": "ethAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3456,
															"src": "2996:9:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 3494,
														"name": "TokensSold",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3336,
														"src": "2960:10:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256,uint256)"
														}
													},
													"id": 3499,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2960:46:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3500,
												"nodeType": "EmitStatement",
												"src": "2955:51:17"
											}
										]
									},
									"functionSelector": "6c11bcd3",
									"id": 3502,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 3436,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 3435,
												"name": "nonReentrant",
												"nameLocations": [
													"2342:12:17"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 167,
												"src": "2342:12:17"
											},
											"nodeType": "ModifierInvocation",
											"src": "2342:12:17"
										}
									],
									"name": "sellTokens",
									"nameLocation": "2303:10:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3434,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3433,
												"mutability": "mutable",
												"name": "tokenAmount",
												"nameLocation": "2322:11:17",
												"nodeType": "VariableDeclaration",
												"scope": 3502,
												"src": "2314:19:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3432,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2314:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2313:21:17"
									},
									"returnParameters": {
										"id": 3437,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2355:0:17"
									},
									"scope": 3675,
									"src": "2294:720:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 3516,
										"nodeType": "Block",
										"src": "3193:36:17",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 3512,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3504,
															"src": "3210:2:17",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3513,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3506,
															"src": "3214:6:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 3511,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 606,
														"src": "3204:5:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 3514,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3204:17:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3515,
												"nodeType": "ExpressionStatement",
												"src": "3204:17:17"
											}
										]
									},
									"functionSelector": "40c10f19",
									"id": 3517,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 3509,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 3508,
												"name": "onlyOwner",
												"nameLocations": [
													"3183:9:17"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "3183:9:17"
											},
											"nodeType": "ModifierInvocation",
											"src": "3183:9:17"
										}
									],
									"name": "mint",
									"nameLocation": "3143:4:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3507,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3504,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3156:2:17",
												"nodeType": "VariableDeclaration",
												"scope": 3517,
												"src": "3148:10:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3503,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3148:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3506,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "3168:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 3517,
												"src": "3160:14:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3505,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3160:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3147:28:17"
									},
									"returnParameters": {
										"id": 3510,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3193:0:17"
									},
									"scope": 3675,
									"src": "3134:95:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 3528,
										"nodeType": "Block",
										"src": "3408:41:17",
										"statements": [
											{
												"expression": {
													"id": 3526,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 3524,
														"name": "exchangeRate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3316,
														"src": "3419:12:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 3525,
														"name": "newRate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3519,
														"src": "3434:7:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3419:22:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 3527,
												"nodeType": "ExpressionStatement",
												"src": "3419:22:17"
											}
										]
									},
									"functionSelector": "db068e0e",
									"id": 3529,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 3522,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 3521,
												"name": "onlyOwner",
												"nameLocations": [
													"3398:9:17"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "3398:9:17"
											},
											"nodeType": "ModifierInvocation",
											"src": "3398:9:17"
										}
									],
									"name": "setExchangeRate",
									"nameLocation": "3358:15:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3520,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3519,
												"mutability": "mutable",
												"name": "newRate",
												"nameLocation": "3382:7:17",
												"nodeType": "VariableDeclaration",
												"scope": 3529,
												"src": "3374:15:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3518,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3374:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3373:17:17"
									},
									"returnParameters": {
										"id": 3523,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3408:0:17"
									},
									"scope": 3675,
									"src": "3349:100:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 3558,
										"nodeType": "Block",
										"src": "3553:156:17",
										"statements": [
											{
												"assignments": [
													3535
												],
												"declarations": [
													{
														"constant": false,
														"id": 3535,
														"mutability": "mutable",
														"name": "balance",
														"nameLocation": "3572:7:17",
														"nodeType": "VariableDeclaration",
														"scope": 3558,
														"src": "3564:15:17",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3534,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3564:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3541,
												"initialValue": {
													"expression": {
														"arguments": [
															{
																"id": 3538,
																"name": "this",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967268,
																"src": "3590:4:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_TurtleToken_$3675",
																	"typeString": "contract TurtleToken"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_TurtleToken_$3675",
																	"typeString": "contract TurtleToken"
																}
															],
															"id": 3537,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "3582:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 3536,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "3582:7:17",
																"typeDescriptions": {}
															}
														},
														"id": 3539,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3582:13:17",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 3540,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "3596:7:17",
													"memberName": "balance",
													"nodeType": "MemberAccess",
													"src": "3582:21:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3564:39:17"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3545,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3543,
																"name": "balance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3535,
																"src": "3622:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3544,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3632:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "3622:11:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e6f2045544820746f207769746864726177",
															"id": 3546,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3635:20:17",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9df16c5c3e9f487854502591282f9dbd29044f6d3f3bf4c9daa5d3460486dd95",
																"typeString": "literal_string \"No ETH to withdraw\""
															},
															"value": "No ETH to withdraw"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9df16c5c3e9f487854502591282f9dbd29044f6d3f3bf4c9daa5d3460486dd95",
																"typeString": "literal_string \"No ETH to withdraw\""
															}
														],
														"id": 3542,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3614:7:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 3547,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3614:42:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3548,
												"nodeType": "ExpressionStatement",
												"src": "3614:42:17"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 3555,
															"name": "balance",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3535,
															"src": "3693:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 3551,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 40,
																		"src": "3675:5:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																			"typeString": "function () view returns (address)"
																		}
																	},
																	"id": 3552,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3675:7:17",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 3550,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3667:8:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_payable_$",
																	"typeString": "type(address payable)"
																},
																"typeName": {
																	"id": 3549,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3667:8:17",
																	"stateMutability": "payable",
																	"typeDescriptions": {}
																}
															},
															"id": 3553,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3667:16:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"id": 3554,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3684:8:17",
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"src": "3667:25:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 3556,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3667:34:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3557,
												"nodeType": "ExpressionStatement",
												"src": "3667:34:17"
											}
										]
									},
									"functionSelector": "a0ef91df",
									"id": 3559,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 3532,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 3531,
												"name": "onlyOwner",
												"nameLocations": [
													"3543:9:17"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "3543:9:17"
											},
											"nodeType": "ModifierInvocation",
											"src": "3543:9:17"
										}
									],
									"name": "withdrawEth",
									"nameLocation": "3522:11:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3530,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3533:2:17"
									},
									"returnParameters": {
										"id": 3533,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3553:0:17"
									},
									"scope": 3675,
									"src": "3513:196:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 3577,
										"nodeType": "Block",
										"src": "3900:97:17",
										"statements": [
											{
												"expression": {
													"id": 3571,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 3567,
															"name": "_whitelistedAddresses",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3320,
															"src": "3911:21:17",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 3569,
														"indexExpression": {
															"id": 3568,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3562,
															"src": "3933:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "3911:30:17",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 3570,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3944:4:17",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "3911:37:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 3572,
												"nodeType": "ExpressionStatement",
												"src": "3911:37:17"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 3574,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3562,
															"src": "3981:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 3573,
														"name": "AddedToWhitelist",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3340,
														"src": "3964:16:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 3575,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3964:25:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3576,
												"nodeType": "EmitStatement",
												"src": "3959:30:17"
											}
										]
									},
									"documentation": {
										"id": 3560,
										"nodeType": "StructuredDocumentation",
										"src": "3717:56:17",
										"text": " @dev 화이트리스트 관련 함수"
									},
									"functionSelector": "e43252d7",
									"id": 3578,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 3565,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 3564,
												"name": "onlyOwner",
												"nameLocations": [
													"3890:9:17"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "3890:9:17"
											},
											"nodeType": "ModifierInvocation",
											"src": "3890:9:17"
										}
									],
									"name": "addToWhitelist",
									"nameLocation": "3851:14:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3563,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3562,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3874:7:17",
												"nodeType": "VariableDeclaration",
												"scope": 3578,
												"src": "3866:15:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3561,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3866:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3865:17:17"
									},
									"returnParameters": {
										"id": 3566,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3900:0:17"
									},
									"scope": 3675,
									"src": "3842:155:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 3595,
										"nodeType": "Block",
										"src": "4134:102:17",
										"statements": [
											{
												"expression": {
													"id": 3589,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 3585,
															"name": "_whitelistedAddresses",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3320,
															"src": "4145:21:17",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 3587,
														"indexExpression": {
															"id": 3586,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3580,
															"src": "4167:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "4145:30:17",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 3588,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4178:5:17",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "4145:38:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 3590,
												"nodeType": "ExpressionStatement",
												"src": "4145:38:17"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 3592,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3580,
															"src": "4220:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 3591,
														"name": "RemovedFromWhitelist",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3344,
														"src": "4199:20:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 3593,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4199:29:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3594,
												"nodeType": "EmitStatement",
												"src": "4194:34:17"
											}
										]
									},
									"functionSelector": "8ab1d681",
									"id": 3596,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 3583,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 3582,
												"name": "onlyOwner",
												"nameLocations": [
													"4124:9:17"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "4124:9:17"
											},
											"nodeType": "ModifierInvocation",
											"src": "4124:9:17"
										}
									],
									"name": "removeFromWhitelist",
									"nameLocation": "4080:19:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3581,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3580,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "4108:7:17",
												"nodeType": "VariableDeclaration",
												"scope": 3596,
												"src": "4100:15:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3579,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4100:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4099:17:17"
									},
									"returnParameters": {
										"id": 3584,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4134:0:17"
									},
									"scope": 3675,
									"src": "4071:165:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 3607,
										"nodeType": "Block",
										"src": "4368:56:17",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 3603,
														"name": "_whitelistedAddresses",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3320,
														"src": "4386:21:17",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
															"typeString": "mapping(address => bool)"
														}
													},
													"id": 3605,
													"indexExpression": {
														"id": 3604,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3598,
														"src": "4408:7:17",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4386:30:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 3602,
												"id": 3606,
												"nodeType": "Return",
												"src": "4379:37:17"
											}
										]
									},
									"functionSelector": "65855dfd",
									"id": 3608,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "inWhitelisted",
									"nameLocation": "4310:13:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3599,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3598,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "4332:7:17",
												"nodeType": "VariableDeclaration",
												"scope": 3608,
												"src": "4324:15:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3597,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4324:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4323:17:17"
									},
									"returnParameters": {
										"id": 3602,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3601,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3608,
												"src": "4362:4:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 3600,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4362:4:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4361:6:17"
									},
									"scope": 3675,
									"src": "4301:123:17",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										326
									],
									"body": {
										"id": 3639,
										"nodeType": "Block",
										"src": "4570:203:17",
										"statements": [
											{
												"condition": {
													"baseExpression": {
														"id": 3618,
														"name": "_whitelistedAddresses",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3320,
														"src": "4585:21:17",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
															"typeString": "mapping(address => bool)"
														}
													},
													"id": 3621,
													"indexExpression": {
														"expression": {
															"id": 3619,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "4607:3:17",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 3620,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4611:6:17",
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "4607:10:17",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4585:33:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 3632,
												"nodeType": "IfStatement",
												"src": "4581:134:17",
												"trueBody": {
													"id": 3631,
													"nodeType": "Block",
													"src": "4620:95:17",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 3623,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1112,
																			"src": "4645:10:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 3624,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4645:12:17",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 3625,
																		"name": "recipient",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3610,
																		"src": "4659:9:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 3626,
																		"name": "amount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3612,
																		"src": "4670:6:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 3622,
																	"name": "_transfer",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 549,
																	"src": "4635:9:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,address,uint256)"
																	}
																},
																"id": 3627,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4635:42:17",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 3628,
															"nodeType": "ExpressionStatement",
															"src": "4635:42:17"
														},
														{
															"expression": {
																"hexValue": "74727565",
																"id": 3629,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4699:4:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															"functionReturnParameters": 3617,
															"id": 3630,
															"nodeType": "Return",
															"src": "4692:11:17"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 3635,
															"name": "recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3610,
															"src": "4747:9:17",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3636,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3612,
															"src": "4758:6:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 3633,
															"name": "super",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967271,
															"src": "4732:5:17",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_super$_TurtleToken_$3675_$",
																"typeString": "type(contract super TurtleToken)"
															}
														},
														"id": 3634,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4738:8:17",
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 326,
														"src": "4732:14:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
															"typeString": "function (address,uint256) returns (bool)"
														}
													},
													"id": 3637,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4732:33:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 3617,
												"id": 3638,
												"nodeType": "Return",
												"src": "4725:40:17"
											}
										]
									},
									"functionSelector": "a9059cbb",
									"id": 3640,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "4487:8:17",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 3614,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4546:8:17"
									},
									"parameters": {
										"id": 3613,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3610,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "4504:9:17",
												"nodeType": "VariableDeclaration",
												"scope": 3640,
												"src": "4496:17:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3609,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4496:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3612,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "4523:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 3640,
												"src": "4515:14:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3611,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4515:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4495:35:17"
									},
									"returnParameters": {
										"id": 3617,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3616,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3640,
												"src": "4564:4:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 3615,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4564:4:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4563:6:17"
									},
									"scope": 3675,
									"src": "4478:295:17",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										402
									],
									"body": {
										"id": 3673,
										"nodeType": "Block",
										"src": "4943:209:17",
										"statements": [
											{
												"condition": {
													"baseExpression": {
														"id": 3652,
														"name": "_whitelistedAddresses",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3320,
														"src": "4958:21:17",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
															"typeString": "mapping(address => bool)"
														}
													},
													"id": 3655,
													"indexExpression": {
														"expression": {
															"id": 3653,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "4980:3:17",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 3654,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4984:6:17",
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "4980:10:17",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4958:33:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 3665,
												"nodeType": "IfStatement",
												"src": "4954:128:17",
												"trueBody": {
													"id": 3664,
													"nodeType": "Block",
													"src": "4993:89:17",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 3657,
																		"name": "sender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3642,
																		"src": "5018:6:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 3658,
																		"name": "recipient",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3644,
																		"src": "5026:9:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 3659,
																		"name": "amount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3646,
																		"src": "5037:6:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 3656,
																	"name": "_transfer",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 549,
																	"src": "5008:9:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,address,uint256)"
																	}
																},
																"id": 3660,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5008:36:17",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 3661,
															"nodeType": "ExpressionStatement",
															"src": "5008:36:17"
														},
														{
															"expression": {
																"hexValue": "74727565",
																"id": 3662,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5066:4:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															"functionReturnParameters": 3651,
															"id": 3663,
															"nodeType": "Return",
															"src": "5059:11:17"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 3668,
															"name": "sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3642,
															"src": "5118:6:17",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3669,
															"name": "recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3644,
															"src": "5126:9:17",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3670,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3646,
															"src": "5137:6:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 3666,
															"name": "super",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967271,
															"src": "5099:5:17",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_super$_TurtleToken_$3675_$",
																"typeString": "type(contract super TurtleToken)"
															}
														},
														"id": 3667,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5105:12:17",
														"memberName": "transferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 402,
														"src": "5099:18:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
															"typeString": "function (address,address,uint256) returns (bool)"
														}
													},
													"id": 3671,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5099:45:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 3651,
												"id": 3672,
												"nodeType": "Return",
												"src": "5092:52:17"
											}
										]
									},
									"functionSelector": "23b872dd",
									"id": 3674,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "4840:12:17",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 3648,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4919:8:17"
									},
									"parameters": {
										"id": 3647,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3642,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "4861:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 3674,
												"src": "4853:14:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3641,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4853:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3644,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "4877:9:17",
												"nodeType": "VariableDeclaration",
												"scope": 3674,
												"src": "4869:17:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3643,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4869:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3646,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "4896:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 3674,
												"src": "4888:14:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3645,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4888:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4852:51:17"
									},
									"returnParameters": {
										"id": 3651,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3650,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3674,
												"src": "4937:4:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 3649,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4937:4:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4936:6:17"
									},
									"scope": 3675,
									"src": "4831:321:17",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								}
							],
							"scope": 3676,
							"src": "319:4836:17",
							"usedErrors": [
								1217,
								1219
							]
						}
					],
					"src": "33:5124:17"
				},
				"id": 17
			}
		}
	}
}